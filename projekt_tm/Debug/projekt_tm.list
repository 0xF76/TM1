
projekt_tm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bbb8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000730  0800bd48  0800bd48  0000cd48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c478  0800c478  0000e1e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c478  0800c478  0000d478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c480  0800c480  0000e1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c480  0800c480  0000d480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c484  0800c484  0000d484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800c488  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000056c  200001e8  0800c670  0000e1e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000754  0800c670  0000e754  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f06b  00000000  00000000  0000e218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025fa  00000000  00000000  0001d283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce8  00000000  00000000  0001f880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009db  00000000  00000000  00020568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002784d  00000000  00000000  00020f43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001066a  00000000  00000000  00048790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eca7c  00000000  00000000  00058dfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00145876  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dac  00000000  00000000  001458bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  0014a668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bd30 	.word	0x0800bd30

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800bd30 	.word	0x0800bd30

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b9a0 	b.w	8000f40 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f83c 	bl	8000c84 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2lz>:
 8000c18:	b538      	push	{r3, r4, r5, lr}
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	4604      	mov	r4, r0
 8000c20:	460d      	mov	r5, r1
 8000c22:	f7ff ff5b 	bl	8000adc <__aeabi_dcmplt>
 8000c26:	b928      	cbnz	r0, 8000c34 <__aeabi_d2lz+0x1c>
 8000c28:	4620      	mov	r0, r4
 8000c2a:	4629      	mov	r1, r5
 8000c2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c30:	f000 b80a 	b.w	8000c48 <__aeabi_d2ulz>
 8000c34:	4620      	mov	r0, r4
 8000c36:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c3a:	f000 f805 	bl	8000c48 <__aeabi_d2ulz>
 8000c3e:	4240      	negs	r0, r0
 8000c40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c44:	bd38      	pop	{r3, r4, r5, pc}
 8000c46:	bf00      	nop

08000c48 <__aeabi_d2ulz>:
 8000c48:	b5d0      	push	{r4, r6, r7, lr}
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c7c <__aeabi_d2ulz+0x34>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	4606      	mov	r6, r0
 8000c50:	460f      	mov	r7, r1
 8000c52:	f7ff fcd1 	bl	80005f8 <__aeabi_dmul>
 8000c56:	f7ff ffa7 	bl	8000ba8 <__aeabi_d2uiz>
 8000c5a:	4604      	mov	r4, r0
 8000c5c:	f7ff fc52 	bl	8000504 <__aeabi_ui2d>
 8000c60:	4b07      	ldr	r3, [pc, #28]	@ (8000c80 <__aeabi_d2ulz+0x38>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	f7ff fcc8 	bl	80005f8 <__aeabi_dmul>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	460b      	mov	r3, r1
 8000c6c:	4630      	mov	r0, r6
 8000c6e:	4639      	mov	r1, r7
 8000c70:	f7ff fb0a 	bl	8000288 <__aeabi_dsub>
 8000c74:	f7ff ff98 	bl	8000ba8 <__aeabi_d2uiz>
 8000c78:	4621      	mov	r1, r4
 8000c7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c7c:	3df00000 	.word	0x3df00000
 8000c80:	41f00000 	.word	0x41f00000

08000c84 <__udivmoddi4>:
 8000c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c88:	9d08      	ldr	r5, [sp, #32]
 8000c8a:	460c      	mov	r4, r1
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d14e      	bne.n	8000d2e <__udivmoddi4+0xaa>
 8000c90:	4694      	mov	ip, r2
 8000c92:	458c      	cmp	ip, r1
 8000c94:	4686      	mov	lr, r0
 8000c96:	fab2 f282 	clz	r2, r2
 8000c9a:	d962      	bls.n	8000d62 <__udivmoddi4+0xde>
 8000c9c:	b14a      	cbz	r2, 8000cb2 <__udivmoddi4+0x2e>
 8000c9e:	f1c2 0320 	rsb	r3, r2, #32
 8000ca2:	4091      	lsls	r1, r2
 8000ca4:	fa20 f303 	lsr.w	r3, r0, r3
 8000ca8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cac:	4319      	orrs	r1, r3
 8000cae:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb6:	fa1f f68c 	uxth.w	r6, ip
 8000cba:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc2:	fb07 1114 	mls	r1, r7, r4, r1
 8000cc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cca:	fb04 f106 	mul.w	r1, r4, r6
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	d90a      	bls.n	8000ce8 <__udivmoddi4+0x64>
 8000cd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cda:	f080 8112 	bcs.w	8000f02 <__udivmoddi4+0x27e>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 810f 	bls.w	8000f02 <__udivmoddi4+0x27e>
 8000ce4:	3c02      	subs	r4, #2
 8000ce6:	4463      	add	r3, ip
 8000ce8:	1a59      	subs	r1, r3, r1
 8000cea:	fa1f f38e 	uxth.w	r3, lr
 8000cee:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf2:	fb07 1110 	mls	r1, r7, r0, r1
 8000cf6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfa:	fb00 f606 	mul.w	r6, r0, r6
 8000cfe:	429e      	cmp	r6, r3
 8000d00:	d90a      	bls.n	8000d18 <__udivmoddi4+0x94>
 8000d02:	eb1c 0303 	adds.w	r3, ip, r3
 8000d06:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0a:	f080 80fc 	bcs.w	8000f06 <__udivmoddi4+0x282>
 8000d0e:	429e      	cmp	r6, r3
 8000d10:	f240 80f9 	bls.w	8000f06 <__udivmoddi4+0x282>
 8000d14:	4463      	add	r3, ip
 8000d16:	3802      	subs	r0, #2
 8000d18:	1b9b      	subs	r3, r3, r6
 8000d1a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11d      	cbz	r5, 8000d2a <__udivmoddi4+0xa6>
 8000d22:	40d3      	lsrs	r3, r2
 8000d24:	2200      	movs	r2, #0
 8000d26:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d905      	bls.n	8000d3e <__udivmoddi4+0xba>
 8000d32:	b10d      	cbz	r5, 8000d38 <__udivmoddi4+0xb4>
 8000d34:	e9c5 0100 	strd	r0, r1, [r5]
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4608      	mov	r0, r1
 8000d3c:	e7f5      	b.n	8000d2a <__udivmoddi4+0xa6>
 8000d3e:	fab3 f183 	clz	r1, r3
 8000d42:	2900      	cmp	r1, #0
 8000d44:	d146      	bne.n	8000dd4 <__udivmoddi4+0x150>
 8000d46:	42a3      	cmp	r3, r4
 8000d48:	d302      	bcc.n	8000d50 <__udivmoddi4+0xcc>
 8000d4a:	4290      	cmp	r0, r2
 8000d4c:	f0c0 80f0 	bcc.w	8000f30 <__udivmoddi4+0x2ac>
 8000d50:	1a86      	subs	r6, r0, r2
 8000d52:	eb64 0303 	sbc.w	r3, r4, r3
 8000d56:	2001      	movs	r0, #1
 8000d58:	2d00      	cmp	r5, #0
 8000d5a:	d0e6      	beq.n	8000d2a <__udivmoddi4+0xa6>
 8000d5c:	e9c5 6300 	strd	r6, r3, [r5]
 8000d60:	e7e3      	b.n	8000d2a <__udivmoddi4+0xa6>
 8000d62:	2a00      	cmp	r2, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x204>
 8000d68:	eba1 040c 	sub.w	r4, r1, ip
 8000d6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d70:	fa1f f78c 	uxth.w	r7, ip
 8000d74:	2101      	movs	r1, #1
 8000d76:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d7e:	fb08 4416 	mls	r4, r8, r6, r4
 8000d82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d86:	fb07 f006 	mul.w	r0, r7, r6
 8000d8a:	4298      	cmp	r0, r3
 8000d8c:	d908      	bls.n	8000da0 <__udivmoddi4+0x11c>
 8000d8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d92:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d96:	d202      	bcs.n	8000d9e <__udivmoddi4+0x11a>
 8000d98:	4298      	cmp	r0, r3
 8000d9a:	f200 80cd 	bhi.w	8000f38 <__udivmoddi4+0x2b4>
 8000d9e:	4626      	mov	r6, r4
 8000da0:	1a1c      	subs	r4, r3, r0
 8000da2:	fa1f f38e 	uxth.w	r3, lr
 8000da6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000daa:	fb08 4410 	mls	r4, r8, r0, r4
 8000dae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db2:	fb00 f707 	mul.w	r7, r0, r7
 8000db6:	429f      	cmp	r7, r3
 8000db8:	d908      	bls.n	8000dcc <__udivmoddi4+0x148>
 8000dba:	eb1c 0303 	adds.w	r3, ip, r3
 8000dbe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x146>
 8000dc4:	429f      	cmp	r7, r3
 8000dc6:	f200 80b0 	bhi.w	8000f2a <__udivmoddi4+0x2a6>
 8000dca:	4620      	mov	r0, r4
 8000dcc:	1bdb      	subs	r3, r3, r7
 8000dce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd2:	e7a5      	b.n	8000d20 <__udivmoddi4+0x9c>
 8000dd4:	f1c1 0620 	rsb	r6, r1, #32
 8000dd8:	408b      	lsls	r3, r1
 8000dda:	fa22 f706 	lsr.w	r7, r2, r6
 8000dde:	431f      	orrs	r7, r3
 8000de0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de4:	fa04 f301 	lsl.w	r3, r4, r1
 8000de8:	ea43 030c 	orr.w	r3, r3, ip
 8000dec:	40f4      	lsrs	r4, r6
 8000dee:	fa00 f801 	lsl.w	r8, r0, r1
 8000df2:	0c38      	lsrs	r0, r7, #16
 8000df4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000df8:	fbb4 fef0 	udiv	lr, r4, r0
 8000dfc:	fa1f fc87 	uxth.w	ip, r7
 8000e00:	fb00 441e 	mls	r4, r0, lr, r4
 8000e04:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e08:	fb0e f90c 	mul.w	r9, lr, ip
 8000e0c:	45a1      	cmp	r9, r4
 8000e0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e12:	d90a      	bls.n	8000e2a <__udivmoddi4+0x1a6>
 8000e14:	193c      	adds	r4, r7, r4
 8000e16:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1a:	f080 8084 	bcs.w	8000f26 <__udivmoddi4+0x2a2>
 8000e1e:	45a1      	cmp	r9, r4
 8000e20:	f240 8081 	bls.w	8000f26 <__udivmoddi4+0x2a2>
 8000e24:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e28:	443c      	add	r4, r7
 8000e2a:	eba4 0409 	sub.w	r4, r4, r9
 8000e2e:	fa1f f983 	uxth.w	r9, r3
 8000e32:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e36:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x1d2>
 8000e46:	193c      	adds	r4, r7, r4
 8000e48:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e4c:	d267      	bcs.n	8000f1e <__udivmoddi4+0x29a>
 8000e4e:	45a4      	cmp	ip, r4
 8000e50:	d965      	bls.n	8000f1e <__udivmoddi4+0x29a>
 8000e52:	3b02      	subs	r3, #2
 8000e54:	443c      	add	r4, r7
 8000e56:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5a:	fba0 9302 	umull	r9, r3, r0, r2
 8000e5e:	eba4 040c 	sub.w	r4, r4, ip
 8000e62:	429c      	cmp	r4, r3
 8000e64:	46ce      	mov	lr, r9
 8000e66:	469c      	mov	ip, r3
 8000e68:	d351      	bcc.n	8000f0e <__udivmoddi4+0x28a>
 8000e6a:	d04e      	beq.n	8000f0a <__udivmoddi4+0x286>
 8000e6c:	b155      	cbz	r5, 8000e84 <__udivmoddi4+0x200>
 8000e6e:	ebb8 030e 	subs.w	r3, r8, lr
 8000e72:	eb64 040c 	sbc.w	r4, r4, ip
 8000e76:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7a:	40cb      	lsrs	r3, r1
 8000e7c:	431e      	orrs	r6, r3
 8000e7e:	40cc      	lsrs	r4, r1
 8000e80:	e9c5 6400 	strd	r6, r4, [r5]
 8000e84:	2100      	movs	r1, #0
 8000e86:	e750      	b.n	8000d2a <__udivmoddi4+0xa6>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f103 	lsr.w	r1, r0, r3
 8000e90:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e94:	fa24 f303 	lsr.w	r3, r4, r3
 8000e98:	4094      	lsls	r4, r2
 8000e9a:	430c      	orrs	r4, r1
 8000e9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea4:	fa1f f78c 	uxth.w	r7, ip
 8000ea8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eac:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb0:	0c23      	lsrs	r3, r4, #16
 8000eb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb6:	fb00 f107 	mul.w	r1, r0, r7
 8000eba:	4299      	cmp	r1, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x24c>
 8000ebe:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000ec6:	d22c      	bcs.n	8000f22 <__udivmoddi4+0x29e>
 8000ec8:	4299      	cmp	r1, r3
 8000eca:	d92a      	bls.n	8000f22 <__udivmoddi4+0x29e>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	1a5b      	subs	r3, r3, r1
 8000ed2:	b2a4      	uxth	r4, r4
 8000ed4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ed8:	fb08 3311 	mls	r3, r8, r1, r3
 8000edc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee0:	fb01 f307 	mul.w	r3, r1, r7
 8000ee4:	42a3      	cmp	r3, r4
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x276>
 8000ee8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eec:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef0:	d213      	bcs.n	8000f1a <__udivmoddi4+0x296>
 8000ef2:	42a3      	cmp	r3, r4
 8000ef4:	d911      	bls.n	8000f1a <__udivmoddi4+0x296>
 8000ef6:	3902      	subs	r1, #2
 8000ef8:	4464      	add	r4, ip
 8000efa:	1ae4      	subs	r4, r4, r3
 8000efc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f00:	e739      	b.n	8000d76 <__udivmoddi4+0xf2>
 8000f02:	4604      	mov	r4, r0
 8000f04:	e6f0      	b.n	8000ce8 <__udivmoddi4+0x64>
 8000f06:	4608      	mov	r0, r1
 8000f08:	e706      	b.n	8000d18 <__udivmoddi4+0x94>
 8000f0a:	45c8      	cmp	r8, r9
 8000f0c:	d2ae      	bcs.n	8000e6c <__udivmoddi4+0x1e8>
 8000f0e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f12:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f16:	3801      	subs	r0, #1
 8000f18:	e7a8      	b.n	8000e6c <__udivmoddi4+0x1e8>
 8000f1a:	4631      	mov	r1, r6
 8000f1c:	e7ed      	b.n	8000efa <__udivmoddi4+0x276>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	e799      	b.n	8000e56 <__udivmoddi4+0x1d2>
 8000f22:	4630      	mov	r0, r6
 8000f24:	e7d4      	b.n	8000ed0 <__udivmoddi4+0x24c>
 8000f26:	46d6      	mov	lr, sl
 8000f28:	e77f      	b.n	8000e2a <__udivmoddi4+0x1a6>
 8000f2a:	4463      	add	r3, ip
 8000f2c:	3802      	subs	r0, #2
 8000f2e:	e74d      	b.n	8000dcc <__udivmoddi4+0x148>
 8000f30:	4606      	mov	r6, r0
 8000f32:	4623      	mov	r3, r4
 8000f34:	4608      	mov	r0, r1
 8000f36:	e70f      	b.n	8000d58 <__udivmoddi4+0xd4>
 8000f38:	3e02      	subs	r6, #2
 8000f3a:	4463      	add	r3, ip
 8000f3c:	e730      	b.n	8000da0 <__udivmoddi4+0x11c>
 8000f3e:	bf00      	nop

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <max7219_init>:
#include "MAX7219.h"



void max7219_init() {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0

	  max7219_SPIWrite(REG_DECODE_MODE, 0x00);
 8000f48:	2100      	movs	r1, #0
 8000f4a:	2009      	movs	r0, #9
 8000f4c:	f000 f84c 	bl	8000fe8 <max7219_SPIWrite>
	  max7219_setIntensity(7);
 8000f50:	2007      	movs	r0, #7
 8000f52:	f000 f80a 	bl	8000f6a <max7219_setIntensity>
	  max7219_SPIWrite(REG_SCAN_LIMIT, 0x0f); //set all digits
 8000f56:	210f      	movs	r1, #15
 8000f58:	200b      	movs	r0, #11
 8000f5a:	f000 f845 	bl	8000fe8 <max7219_SPIWrite>
	  max7219_turnOn();
 8000f5e:	f000 f812 	bl	8000f86 <max7219_turnOn>
	  max7219_clearDisplay();
 8000f62:	f000 f82a 	bl	8000fba <max7219_clearDisplay>
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <max7219_setIntensity>:

void max7219_setIntensity(uint8_t intensity) {
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b082      	sub	sp, #8
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	4603      	mov	r3, r0
 8000f72:	71fb      	strb	r3, [r7, #7]
	max7219_SPIWrite(REG_INTENSITY, intensity);
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	4619      	mov	r1, r3
 8000f78:	200a      	movs	r0, #10
 8000f7a:	f000 f835 	bl	8000fe8 <max7219_SPIWrite>
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <max7219_turnOn>:

void max7219_turnOn() {
 8000f86:	b580      	push	{r7, lr}
 8000f88:	af00      	add	r7, sp, #0
	max7219_SPIWrite(REG_SHUTDOWN, 0x01);
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	200c      	movs	r0, #12
 8000f8e:	f000 f82b 	bl	8000fe8 <max7219_SPIWrite>
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <max7219_setRow>:
}

void max7219_setLED(uint8_t row, uint8_t led) {
	max7219_SPIWrite(row, (1<<led));
}
void max7219_setRow(uint8_t row, uint8_t value) {
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b082      	sub	sp, #8
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	460a      	mov	r2, r1
 8000fa0:	71fb      	strb	r3, [r7, #7]
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	71bb      	strb	r3, [r7, #6]
	max7219_SPIWrite(row, value);
 8000fa6:	79ba      	ldrb	r2, [r7, #6]
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	4611      	mov	r1, r2
 8000fac:	4618      	mov	r0, r3
 8000fae:	f000 f81b 	bl	8000fe8 <max7219_SPIWrite>
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <max7219_clearDisplay>:

void max7219_clearDisplay() {
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b082      	sub	sp, #8
 8000fbe:	af00      	add	r7, sp, #0
	for(uint8_t i = 1; i < 9; i++) {
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	71fb      	strb	r3, [r7, #7]
 8000fc4:	e007      	b.n	8000fd6 <max7219_clearDisplay+0x1c>
		max7219_SPIWrite(i, 0x00);
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	2100      	movs	r1, #0
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f000 f80c 	bl	8000fe8 <max7219_SPIWrite>
	for(uint8_t i = 1; i < 9; i++) {
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	71fb      	strb	r3, [r7, #7]
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	2b08      	cmp	r3, #8
 8000fda:	d9f4      	bls.n	8000fc6 <max7219_clearDisplay+0xc>
	}
}
 8000fdc:	bf00      	nop
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
	...

08000fe8 <max7219_SPIWrite>:

void max7219_SPIWrite(uint8_t addr, uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	460a      	mov	r2, r1
 8000ff2:	71fb      	strb	r3, [r7, #7]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	2102      	movs	r1, #2
 8000ffc:	480c      	ldr	r0, [pc, #48]	@ (8001030 <max7219_SPIWrite+0x48>)
 8000ffe:	f001 fa8d 	bl	800251c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, &addr, 1, HAL_MAX_DELAY);
 8001002:	1df9      	adds	r1, r7, #7
 8001004:	f04f 33ff 	mov.w	r3, #4294967295
 8001008:	2201      	movs	r2, #1
 800100a:	480a      	ldr	r0, [pc, #40]	@ (8001034 <max7219_SPIWrite+0x4c>)
 800100c:	f002 fe61 	bl	8003cd2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 8001010:	1db9      	adds	r1, r7, #6
 8001012:	f04f 33ff 	mov.w	r3, #4294967295
 8001016:	2201      	movs	r2, #1
 8001018:	4806      	ldr	r0, [pc, #24]	@ (8001034 <max7219_SPIWrite+0x4c>)
 800101a:	f002 fe5a 	bl	8003cd2 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800101e:	2201      	movs	r2, #1
 8001020:	2102      	movs	r1, #2
 8001022:	4803      	ldr	r0, [pc, #12]	@ (8001030 <max7219_SPIWrite+0x48>)
 8001024:	f001 fa7a 	bl	800251c <HAL_GPIO_WritePin>
}
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	48000800 	.word	0x48000800
 8001034:	20000204 	.word	0x20000204

08001038 <DFT>:
* @date 02.05.2024
*/

#include "dft.h"

void DFT(Complex *input, Complex *output, int N) {
 8001038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800103c:	b090      	sub	sp, #64	@ 0x40
 800103e:	af00      	add	r7, sp, #0
 8001040:	60f8      	str	r0, [r7, #12]
 8001042:	60b9      	str	r1, [r7, #8]
 8001044:	607a      	str	r2, [r7, #4]
 8001046:	466b      	mov	r3, sp
 8001048:	469a      	mov	sl, r3
	Complex W[N];
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	1e4b      	subs	r3, r1, #1
 800104e:	633b      	str	r3, [r7, #48]	@ 0x30
 8001050:	460a      	mov	r2, r1
 8001052:	2300      	movs	r3, #0
 8001054:	4690      	mov	r8, r2
 8001056:	4699      	mov	r9, r3
 8001058:	f04f 0200 	mov.w	r2, #0
 800105c:	f04f 0300 	mov.w	r3, #0
 8001060:	ea4f 13c9 	mov.w	r3, r9, lsl #7
 8001064:	ea43 6358 	orr.w	r3, r3, r8, lsr #25
 8001068:	ea4f 12c8 	mov.w	r2, r8, lsl #7
 800106c:	460a      	mov	r2, r1
 800106e:	2300      	movs	r3, #0
 8001070:	4614      	mov	r4, r2
 8001072:	461d      	mov	r5, r3
 8001074:	f04f 0200 	mov.w	r2, #0
 8001078:	f04f 0300 	mov.w	r3, #0
 800107c:	01eb      	lsls	r3, r5, #7
 800107e:	ea43 6354 	orr.w	r3, r3, r4, lsr #25
 8001082:	01e2      	lsls	r2, r4, #7
 8001084:	460b      	mov	r3, r1
 8001086:	011b      	lsls	r3, r3, #4
 8001088:	3307      	adds	r3, #7
 800108a:	08db      	lsrs	r3, r3, #3
 800108c:	00db      	lsls	r3, r3, #3
 800108e:	ebad 0d03 	sub.w	sp, sp, r3
 8001092:	466b      	mov	r3, sp
 8001094:	3307      	adds	r3, #7
 8001096:	08db      	lsrs	r3, r3, #3
 8001098:	00db      	lsls	r3, r3, #3
 800109a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	Complex sum;

	for(int i = 0; i < N; i++) {
 800109c:	2300      	movs	r3, #0
 800109e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80010a0:	e038      	b.n	8001114 <DFT+0xdc>
		double angle = -2 * M_PI * i / N;
 80010a2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80010a4:	f7ff fa3e 	bl	8000524 <__aeabi_i2d>
 80010a8:	a377      	add	r3, pc, #476	@ (adr r3, 8001288 <DFT+0x250>)
 80010aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ae:	f7ff faa3 	bl	80005f8 <__aeabi_dmul>
 80010b2:	4602      	mov	r2, r0
 80010b4:	460b      	mov	r3, r1
 80010b6:	4614      	mov	r4, r2
 80010b8:	461d      	mov	r5, r3
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f7ff fa32 	bl	8000524 <__aeabi_i2d>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4620      	mov	r0, r4
 80010c6:	4629      	mov	r1, r5
 80010c8:	f7ff fbc0 	bl	800084c <__aeabi_ddiv>
 80010cc:	4602      	mov	r2, r0
 80010ce:	460b      	mov	r3, r1
 80010d0:	e9c7 2308 	strd	r2, r3, [r7, #32]
		W[i].real = cos(angle);
 80010d4:	ed97 0b08 	vldr	d0, [r7, #32]
 80010d8:	f008 fefa 	bl	8009ed0 <cos>
 80010dc:	eeb0 7a40 	vmov.f32	s14, s0
 80010e0:	eef0 7a60 	vmov.f32	s15, s1
 80010e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80010e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80010e8:	011b      	lsls	r3, r3, #4
 80010ea:	4413      	add	r3, r2
 80010ec:	ed83 7b00 	vstr	d7, [r3]
		W[i].imag = sin(angle);
 80010f0:	ed97 0b08 	vldr	d0, [r7, #32]
 80010f4:	f008 ff40 	bl	8009f78 <sin>
 80010f8:	eeb0 7a40 	vmov.f32	s14, s0
 80010fc:	eef0 7a60 	vmov.f32	s15, s1
 8001100:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001102:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001104:	011b      	lsls	r3, r3, #4
 8001106:	4413      	add	r3, r2
 8001108:	3308      	adds	r3, #8
 800110a:	ed83 7b00 	vstr	d7, [r3]
	for(int i = 0; i < N; i++) {
 800110e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001110:	3301      	adds	r3, #1
 8001112:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001114:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	429a      	cmp	r2, r3
 800111a:	dbc2      	blt.n	80010a2 <DFT+0x6a>
	}

	for(int k = 0; k < N; k++) {
 800111c:	2300      	movs	r3, #0
 800111e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001120:	e0a5      	b.n	800126e <DFT+0x236>
		sum.real = 0;
 8001122:	f04f 0200 	mov.w	r2, #0
 8001126:	f04f 0300 	mov.w	r3, #0
 800112a:	e9c7 2304 	strd	r2, r3, [r7, #16]
		sum.imag = 0;
 800112e:	f04f 0200 	mov.w	r2, #0
 8001132:	f04f 0300 	mov.w	r3, #0
 8001136:	e9c7 2306 	strd	r2, r3, [r7, #24]

		for(int n = 0; n < N; n++) {
 800113a:	2300      	movs	r3, #0
 800113c:	637b      	str	r3, [r7, #52]	@ 0x34
 800113e:	e04b      	b.n	80011d8 <DFT+0x1a0>
			sum.real += input[n].real * W[(n * k) % N].real;
 8001140:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001144:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001146:	011b      	lsls	r3, r3, #4
 8001148:	68fa      	ldr	r2, [r7, #12]
 800114a:	4413      	add	r3, r2
 800114c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001150:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001152:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001154:	fb02 f303 	mul.w	r3, r2, r3
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	fb93 f2f2 	sdiv	r2, r3, r2
 800115e:	687e      	ldr	r6, [r7, #4]
 8001160:	fb06 f202 	mul.w	r2, r6, r2
 8001164:	1a9b      	subs	r3, r3, r2
 8001166:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001168:	011b      	lsls	r3, r3, #4
 800116a:	4413      	add	r3, r2
 800116c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001170:	f7ff fa42 	bl	80005f8 <__aeabi_dmul>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	4620      	mov	r0, r4
 800117a:	4629      	mov	r1, r5
 800117c:	f7ff f886 	bl	800028c <__adddf3>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	e9c7 2304 	strd	r2, r3, [r7, #16]
			sum.imag += input[n].real * W[(n * k) % N].imag;
 8001188:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800118c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800118e:	011b      	lsls	r3, r3, #4
 8001190:	68fa      	ldr	r2, [r7, #12]
 8001192:	4413      	add	r3, r2
 8001194:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001198:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800119a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800119c:	fb02 f303 	mul.w	r3, r2, r3
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	fb93 f2f2 	sdiv	r2, r3, r2
 80011a6:	687e      	ldr	r6, [r7, #4]
 80011a8:	fb06 f202 	mul.w	r2, r6, r2
 80011ac:	1a9b      	subs	r3, r3, r2
 80011ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80011b0:	011b      	lsls	r3, r3, #4
 80011b2:	4413      	add	r3, r2
 80011b4:	3308      	adds	r3, #8
 80011b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ba:	f7ff fa1d 	bl	80005f8 <__aeabi_dmul>
 80011be:	4602      	mov	r2, r0
 80011c0:	460b      	mov	r3, r1
 80011c2:	4620      	mov	r0, r4
 80011c4:	4629      	mov	r1, r5
 80011c6:	f7ff f861 	bl	800028c <__adddf3>
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
 80011ce:	e9c7 2306 	strd	r2, r3, [r7, #24]
		for(int n = 0; n < N; n++) {
 80011d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011d4:	3301      	adds	r3, #1
 80011d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80011d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	429a      	cmp	r2, r3
 80011de:	dbaf      	blt.n	8001140 <DFT+0x108>
		}

		if(sum.real < 0.001 && sum.real > -0.001) {
 80011e0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80011e4:	a32a      	add	r3, pc, #168	@ (adr r3, 8001290 <DFT+0x258>)
 80011e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ea:	f7ff fc77 	bl	8000adc <__aeabi_dcmplt>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d00f      	beq.n	8001214 <DFT+0x1dc>
 80011f4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80011f8:	a327      	add	r3, pc, #156	@ (adr r3, 8001298 <DFT+0x260>)
 80011fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011fe:	f7ff fc8b 	bl	8000b18 <__aeabi_dcmpgt>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d005      	beq.n	8001214 <DFT+0x1dc>
			sum.real = 0;
 8001208:	f04f 0200 	mov.w	r2, #0
 800120c:	f04f 0300 	mov.w	r3, #0
 8001210:	e9c7 2304 	strd	r2, r3, [r7, #16]
		}

		if(sum.imag < 0.001 && sum.imag > -0.001) {
 8001214:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001218:	a31d      	add	r3, pc, #116	@ (adr r3, 8001290 <DFT+0x258>)
 800121a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121e:	f7ff fc5d 	bl	8000adc <__aeabi_dcmplt>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d00f      	beq.n	8001248 <DFT+0x210>
 8001228:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800122c:	a31a      	add	r3, pc, #104	@ (adr r3, 8001298 <DFT+0x260>)
 800122e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001232:	f7ff fc71 	bl	8000b18 <__aeabi_dcmpgt>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d005      	beq.n	8001248 <DFT+0x210>
			sum.imag = 0;
 800123c:	f04f 0200 	mov.w	r2, #0
 8001240:	f04f 0300 	mov.w	r3, #0
 8001244:	e9c7 2306 	strd	r2, r3, [r7, #24]
		}


		output[k].real = sum.real;
 8001248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800124a:	011b      	lsls	r3, r3, #4
 800124c:	68ba      	ldr	r2, [r7, #8]
 800124e:	18d1      	adds	r1, r2, r3
 8001250:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001254:	e9c1 2300 	strd	r2, r3, [r1]
		output[k].imag = sum.imag;
 8001258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800125a:	011b      	lsls	r3, r3, #4
 800125c:	68ba      	ldr	r2, [r7, #8]
 800125e:	18d1      	adds	r1, r2, r3
 8001260:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001264:	e9c1 2302 	strd	r2, r3, [r1, #8]
	for(int k = 0; k < N; k++) {
 8001268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800126a:	3301      	adds	r3, #1
 800126c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800126e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	429a      	cmp	r2, r3
 8001274:	f6ff af55 	blt.w	8001122 <DFT+0xea>
 8001278:	46d5      	mov	sp, sl
	}
}
 800127a:	bf00      	nop
 800127c:	3740      	adds	r7, #64	@ 0x40
 800127e:	46bd      	mov	sp, r7
 8001280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001284:	f3af 8000 	nop.w
 8001288:	54442d18 	.word	0x54442d18
 800128c:	c01921fb 	.word	0xc01921fb
 8001290:	d2f1a9fc 	.word	0xd2f1a9fc
 8001294:	3f50624d 	.word	0x3f50624d
 8001298:	d2f1a9fc 	.word	0xd2f1a9fc
 800129c:	bf50624d 	.word	0xbf50624d

080012a0 <DFT_bars>:

void DFT_bars(Complex *input, uint8_t* display, uint8_t N) {
 80012a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80012a4:	b08b      	sub	sp, #44	@ 0x2c
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	60f8      	str	r0, [r7, #12]
 80012aa:	60b9      	str	r1, [r7, #8]
 80012ac:	4613      	mov	r3, r2
 80012ae:	71fb      	strb	r3, [r7, #7]
 80012b0:	466b      	mov	r3, sp
 80012b2:	461e      	mov	r6, r3

	double temp[N];
 80012b4:	79f9      	ldrb	r1, [r7, #7]
 80012b6:	460b      	mov	r3, r1
 80012b8:	3b01      	subs	r3, #1
 80012ba:	617b      	str	r3, [r7, #20]
 80012bc:	b2cb      	uxtb	r3, r1
 80012be:	2200      	movs	r2, #0
 80012c0:	4698      	mov	r8, r3
 80012c2:	4691      	mov	r9, r2
 80012c4:	f04f 0200 	mov.w	r2, #0
 80012c8:	f04f 0300 	mov.w	r3, #0
 80012cc:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80012d0:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80012d4:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80012d8:	b2cb      	uxtb	r3, r1
 80012da:	2200      	movs	r2, #0
 80012dc:	461c      	mov	r4, r3
 80012de:	4615      	mov	r5, r2
 80012e0:	f04f 0200 	mov.w	r2, #0
 80012e4:	f04f 0300 	mov.w	r3, #0
 80012e8:	01ab      	lsls	r3, r5, #6
 80012ea:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 80012ee:	01a2      	lsls	r2, r4, #6
 80012f0:	460b      	mov	r3, r1
 80012f2:	00db      	lsls	r3, r3, #3
 80012f4:	3307      	adds	r3, #7
 80012f6:	08db      	lsrs	r3, r3, #3
 80012f8:	00db      	lsls	r3, r3, #3
 80012fa:	ebad 0d03 	sub.w	sp, sp, r3
 80012fe:	466b      	mov	r3, sp
 8001300:	3307      	adds	r3, #7
 8001302:	08db      	lsrs	r3, r3, #3
 8001304:	00db      	lsls	r3, r3, #3
 8001306:	613b      	str	r3, [r7, #16]
	double max_val = DBL_MIN;
 8001308:	f04f 0200 	mov.w	r2, #0
 800130c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001310:	e9c7 2308 	strd	r2, r3, [r7, #32]

	for(int i = 0; i < N; i++) {
 8001314:	2300      	movs	r3, #0
 8001316:	61fb      	str	r3, [r7, #28]
 8001318:	e04f      	b.n	80013ba <DFT_bars+0x11a>
		temp[i] = sqrt(pow(input[i].real,2) + pow(input[i].imag,2));
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	011b      	lsls	r3, r3, #4
 800131e:	68fa      	ldr	r2, [r7, #12]
 8001320:	4413      	add	r3, r2
 8001322:	ed93 7b00 	vldr	d7, [r3]
 8001326:	ed9f 1b56 	vldr	d1, [pc, #344]	@ 8001480 <DFT_bars+0x1e0>
 800132a:	eeb0 0a47 	vmov.f32	s0, s14
 800132e:	eef0 0a67 	vmov.f32	s1, s15
 8001332:	f008 fd31 	bl	8009d98 <pow>
 8001336:	ec55 4b10 	vmov	r4, r5, d0
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	011b      	lsls	r3, r3, #4
 800133e:	68fa      	ldr	r2, [r7, #12]
 8001340:	4413      	add	r3, r2
 8001342:	ed93 7b02 	vldr	d7, [r3, #8]
 8001346:	ed9f 1b4e 	vldr	d1, [pc, #312]	@ 8001480 <DFT_bars+0x1e0>
 800134a:	eeb0 0a47 	vmov.f32	s0, s14
 800134e:	eef0 0a67 	vmov.f32	s1, s15
 8001352:	f008 fd21 	bl	8009d98 <pow>
 8001356:	ec53 2b10 	vmov	r2, r3, d0
 800135a:	4620      	mov	r0, r4
 800135c:	4629      	mov	r1, r5
 800135e:	f7fe ff95 	bl	800028c <__adddf3>
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	ec43 2b17 	vmov	d7, r2, r3
 800136a:	eeb0 0a47 	vmov.f32	s0, s14
 800136e:	eef0 0a67 	vmov.f32	s1, s15
 8001372:	f008 fd81 	bl	8009e78 <sqrt>
 8001376:	eeb0 7a40 	vmov.f32	s14, s0
 800137a:	eef0 7a60 	vmov.f32	s15, s1
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	00db      	lsls	r3, r3, #3
 8001384:	4413      	add	r3, r2
 8001386:	ed83 7b00 	vstr	d7, [r3]

		if(temp[i] > max_val) {
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	00db      	lsls	r3, r3, #3
 8001390:	4413      	add	r3, r2
 8001392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001396:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800139a:	f7ff fb9f 	bl	8000adc <__aeabi_dcmplt>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d007      	beq.n	80013b4 <DFT_bars+0x114>
			max_val = temp[i];
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	00db      	lsls	r3, r3, #3
 80013aa:	4413      	add	r3, r2
 80013ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b0:	e9c7 2308 	strd	r2, r3, [r7, #32]
	for(int i = 0; i < N; i++) {
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	3301      	adds	r3, #1
 80013b8:	61fb      	str	r3, [r7, #28]
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	69fa      	ldr	r2, [r7, #28]
 80013be:	429a      	cmp	r2, r3
 80013c0:	dbab      	blt.n	800131a <DFT_bars+0x7a>

		}
	}

	for(int i = 0; i < N; i++) {
 80013c2:	2300      	movs	r3, #0
 80013c4:	61bb      	str	r3, [r7, #24]
 80013c6:	e04e      	b.n	8001466 <DFT_bars+0x1c6>
		temp[i] = (temp[i] / max_val) * 8;
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	00db      	lsls	r3, r3, #3
 80013ce:	4413      	add	r3, r2
 80013d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013d4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80013d8:	f7ff fa38 	bl	800084c <__aeabi_ddiv>
 80013dc:	4602      	mov	r2, r0
 80013de:	460b      	mov	r3, r1
 80013e0:	4610      	mov	r0, r2
 80013e2:	4619      	mov	r1, r3
 80013e4:	f04f 0200 	mov.w	r2, #0
 80013e8:	4b27      	ldr	r3, [pc, #156]	@ (8001488 <DFT_bars+0x1e8>)
 80013ea:	f7ff f905 	bl	80005f8 <__aeabi_dmul>
 80013ee:	4602      	mov	r2, r0
 80013f0:	460b      	mov	r3, r1
 80013f2:	6938      	ldr	r0, [r7, #16]
 80013f4:	69b9      	ldr	r1, [r7, #24]
 80013f6:	00c9      	lsls	r1, r1, #3
 80013f8:	4401      	add	r1, r0
 80013fa:	e9c1 2300 	strd	r2, r3, [r1]
		display[i] = pow(2,(int)round(temp[i])) - 1;
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	4413      	add	r3, r2
 8001406:	ed93 7b00 	vldr	d7, [r3]
 800140a:	eeb0 0a47 	vmov.f32	s0, s14
 800140e:	eef0 0a67 	vmov.f32	s1, s15
 8001412:	f008 feeb 	bl	800a1ec <round>
 8001416:	ec53 2b10 	vmov	r2, r3, d0
 800141a:	4610      	mov	r0, r2
 800141c:	4619      	mov	r1, r3
 800141e:	f7ff fb9b 	bl	8000b58 <__aeabi_d2iz>
 8001422:	4603      	mov	r3, r0
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff f87d 	bl	8000524 <__aeabi_i2d>
 800142a:	4602      	mov	r2, r0
 800142c:	460b      	mov	r3, r1
 800142e:	ec43 2b11 	vmov	d1, r2, r3
 8001432:	ed9f 0b13 	vldr	d0, [pc, #76]	@ 8001480 <DFT_bars+0x1e0>
 8001436:	f008 fcaf 	bl	8009d98 <pow>
 800143a:	ec51 0b10 	vmov	r0, r1, d0
 800143e:	f04f 0200 	mov.w	r2, #0
 8001442:	4b12      	ldr	r3, [pc, #72]	@ (800148c <DFT_bars+0x1ec>)
 8001444:	f7fe ff20 	bl	8000288 <__aeabi_dsub>
 8001448:	4602      	mov	r2, r0
 800144a:	460b      	mov	r3, r1
 800144c:	4610      	mov	r0, r2
 800144e:	4619      	mov	r1, r3
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	68ba      	ldr	r2, [r7, #8]
 8001454:	18d4      	adds	r4, r2, r3
 8001456:	f7ff fba7 	bl	8000ba8 <__aeabi_d2uiz>
 800145a:	4603      	mov	r3, r0
 800145c:	b2db      	uxtb	r3, r3
 800145e:	7023      	strb	r3, [r4, #0]
	for(int i = 0; i < N; i++) {
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	3301      	adds	r3, #1
 8001464:	61bb      	str	r3, [r7, #24]
 8001466:	79fb      	ldrb	r3, [r7, #7]
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	429a      	cmp	r2, r3
 800146c:	dbac      	blt.n	80013c8 <DFT_bars+0x128>
 800146e:	46b5      	mov	sp, r6
	}

}
 8001470:	bf00      	nop
 8001472:	372c      	adds	r7, #44	@ 0x2c
 8001474:	46bd      	mov	sp, r7
 8001476:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800147a:	bf00      	nop
 800147c:	f3af 8000 	nop.w
 8001480:	00000000 	.word	0x00000000
 8001484:	40000000 	.word	0x40000000
 8001488:	40200000 	.word	0x40200000
 800148c:	3ff00000 	.word	0x3ff00000

08001490 <HAL_UART_RxCpltCallback>:

Complex input[8];
Complex output[8];
uint8_t dft_bars[8];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
	if(receivedByte == '\n' || receivedByte == '\r'){
 8001498:	4b13      	ldr	r3, [pc, #76]	@ (80014e8 <HAL_UART_RxCpltCallback+0x58>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b0a      	cmp	r3, #10
 800149e:	d003      	beq.n	80014a8 <HAL_UART_RxCpltCallback+0x18>
 80014a0:	4b11      	ldr	r3, [pc, #68]	@ (80014e8 <HAL_UART_RxCpltCallback+0x58>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b0d      	cmp	r3, #13
 80014a6:	d10b      	bne.n	80014c0 <HAL_UART_RxCpltCallback+0x30>
		DataReceived = 1;
 80014a8:	4b10      	ldr	r3, [pc, #64]	@ (80014ec <HAL_UART_RxCpltCallback+0x5c>)
 80014aa:	2201      	movs	r2, #1
 80014ac:	701a      	strb	r2, [r3, #0]
		Rx_i = 0;
 80014ae:	4b10      	ldr	r3, [pc, #64]	@ (80014f0 <HAL_UART_RxCpltCallback+0x60>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(huart, (uint8_t*)&receivedByte, 1);
 80014b4:	2201      	movs	r2, #1
 80014b6:	490c      	ldr	r1, [pc, #48]	@ (80014e8 <HAL_UART_RxCpltCallback+0x58>)
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f002 ff8f 	bl	80043dc <HAL_UART_Receive_IT>
		return;
 80014be:	e00f      	b.n	80014e0 <HAL_UART_RxCpltCallback+0x50>
	}
	RxData[Rx_i++] = receivedByte;
 80014c0:	4b0b      	ldr	r3, [pc, #44]	@ (80014f0 <HAL_UART_RxCpltCallback+0x60>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	1c5a      	adds	r2, r3, #1
 80014c6:	b2d1      	uxtb	r1, r2
 80014c8:	4a09      	ldr	r2, [pc, #36]	@ (80014f0 <HAL_UART_RxCpltCallback+0x60>)
 80014ca:	7011      	strb	r1, [r2, #0]
 80014cc:	461a      	mov	r2, r3
 80014ce:	4b06      	ldr	r3, [pc, #24]	@ (80014e8 <HAL_UART_RxCpltCallback+0x58>)
 80014d0:	7819      	ldrb	r1, [r3, #0]
 80014d2:	4b08      	ldr	r3, [pc, #32]	@ (80014f4 <HAL_UART_RxCpltCallback+0x64>)
 80014d4:	5499      	strb	r1, [r3, r2]

	HAL_UART_Receive_IT(huart, (uint8_t*)&receivedByte, 1);
 80014d6:	2201      	movs	r2, #1
 80014d8:	4903      	ldr	r1, [pc, #12]	@ (80014e8 <HAL_UART_RxCpltCallback+0x58>)
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f002 ff7e 	bl	80043dc <HAL_UART_Receive_IT>

}
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	200002f0 	.word	0x200002f0
 80014ec:	200003f4 	.word	0x200003f4
 80014f0:	200003f3 	.word	0x200003f3
 80014f4:	200002f4 	.word	0x200002f4

080014f8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]

}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800150c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001510:	ed2d 8b04 	vpush	{d8-d9}
 8001514:	b0a4      	sub	sp, #144	@ 0x90
 8001516:	af1e      	add	r7, sp, #120	@ 0x78
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001518:	f000 fc4a 	bl	8001db0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800151c:	f000 f8e2 	bl	80016e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001520:	f000 f9a0 	bl	8001864 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001524:	f000 f96e 	bl	8001804 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8001528:	f000 f92e 	bl	8001788 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, (uint8_t*)&receivedByte, 1);
 800152c:	2201      	movs	r2, #1
 800152e:	4962      	ldr	r1, [pc, #392]	@ (80016b8 <main+0x1ac>)
 8001530:	4862      	ldr	r0, [pc, #392]	@ (80016bc <main+0x1b0>)
 8001532:	f002 ff53 	bl	80043dc <HAL_UART_Receive_IT>
  max7219_init();
 8001536:	f7ff fd05 	bl	8000f44 <max7219_init>
  max7219_turnOn();
 800153a:	f7ff fd24 	bl	8000f86 <max7219_turnOn>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	if(DataReceived) {
 800153e:	4b60      	ldr	r3, [pc, #384]	@ (80016c0 <main+0x1b4>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d0fb      	beq.n	800153e <main+0x32>
		DataReceived = 0;
 8001546:	4b5e      	ldr	r3, [pc, #376]	@ (80016c0 <main+0x1b4>)
 8001548:	2200      	movs	r2, #0
 800154a:	701a      	strb	r2, [r3, #0]

		char* token;
		token = strtok(RxData,",");
 800154c:	495d      	ldr	r1, [pc, #372]	@ (80016c4 <main+0x1b8>)
 800154e:	485e      	ldr	r0, [pc, #376]	@ (80016c8 <main+0x1bc>)
 8001550:	f005 fe92 	bl	8007278 <strtok>
 8001554:	6178      	str	r0, [r7, #20]

		for(int i = 0; i < SIZE; i++) {
 8001556:	2300      	movs	r3, #0
 8001558:	613b      	str	r3, [r7, #16]
 800155a:	e027      	b.n	80015ac <main+0xa0>
			input[i].real = atof(token);
 800155c:	6978      	ldr	r0, [r7, #20]
 800155e:	f004 fadf 	bl	8005b20 <atof>
 8001562:	eeb0 7a40 	vmov.f32	s14, s0
 8001566:	eef0 7a60 	vmov.f32	s15, s1
 800156a:	4a58      	ldr	r2, [pc, #352]	@ (80016cc <main+0x1c0>)
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	011b      	lsls	r3, r3, #4
 8001570:	4413      	add	r3, r2
 8001572:	ed83 7b00 	vstr	d7, [r3]
			token = strtok(NULL,",");
 8001576:	4953      	ldr	r1, [pc, #332]	@ (80016c4 <main+0x1b8>)
 8001578:	2000      	movs	r0, #0
 800157a:	f005 fe7d 	bl	8007278 <strtok>
 800157e:	6178      	str	r0, [r7, #20]
			input[i].imag = atof(token);
 8001580:	6978      	ldr	r0, [r7, #20]
 8001582:	f004 facd 	bl	8005b20 <atof>
 8001586:	eeb0 7a40 	vmov.f32	s14, s0
 800158a:	eef0 7a60 	vmov.f32	s15, s1
 800158e:	4a4f      	ldr	r2, [pc, #316]	@ (80016cc <main+0x1c0>)
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	011b      	lsls	r3, r3, #4
 8001594:	4413      	add	r3, r2
 8001596:	3308      	adds	r3, #8
 8001598:	ed83 7b00 	vstr	d7, [r3]
			token = strtok(NULL,",");
 800159c:	4949      	ldr	r1, [pc, #292]	@ (80016c4 <main+0x1b8>)
 800159e:	2000      	movs	r0, #0
 80015a0:	f005 fe6a 	bl	8007278 <strtok>
 80015a4:	6178      	str	r0, [r7, #20]
		for(int i = 0; i < SIZE; i++) {
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	3301      	adds	r3, #1
 80015aa:	613b      	str	r3, [r7, #16]
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	2b07      	cmp	r3, #7
 80015b0:	ddd4      	ble.n	800155c <main+0x50>
		}

		DFT(input, output, SIZE);
 80015b2:	2208      	movs	r2, #8
 80015b4:	4946      	ldr	r1, [pc, #280]	@ (80016d0 <main+0x1c4>)
 80015b6:	4845      	ldr	r0, [pc, #276]	@ (80016cc <main+0x1c0>)
 80015b8:	f7ff fd3e 	bl	8001038 <DFT>
		DFT_bars(output, dft_bars, SIZE);
 80015bc:	2208      	movs	r2, #8
 80015be:	4945      	ldr	r1, [pc, #276]	@ (80016d4 <main+0x1c8>)
 80015c0:	4843      	ldr	r0, [pc, #268]	@ (80016d0 <main+0x1c4>)
 80015c2:	f7ff fe6d 	bl	80012a0 <DFT_bars>

		for(int i = 0; i < SIZE; i++){
 80015c6:	2300      	movs	r3, #0
 80015c8:	60fb      	str	r3, [r7, #12]
 80015ca:	e00f      	b.n	80015ec <main+0xe0>
			max7219_setRow((SIZE-i), dft_bars[i]);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	f1c3 0308 	rsb	r3, r3, #8
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	493f      	ldr	r1, [pc, #252]	@ (80016d4 <main+0x1c8>)
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	440b      	add	r3, r1
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	4619      	mov	r1, r3
 80015e0:	4610      	mov	r0, r2
 80015e2:	f7ff fcd8 	bl	8000f96 <max7219_setRow>
		for(int i = 0; i < SIZE; i++){
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	3301      	adds	r3, #1
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	2b07      	cmp	r3, #7
 80015f0:	ddec      	ble.n	80015cc <main+0xc0>
		}

		size = sprintf(TxData,"%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f\n",
 80015f2:	4b37      	ldr	r3, [pc, #220]	@ (80016d0 <main+0x1c4>)
 80015f4:	ed93 7b00 	vldr	d7, [r3]
 80015f8:	ed87 7b00 	vstr	d7, [r7]
 80015fc:	4b34      	ldr	r3, [pc, #208]	@ (80016d0 <main+0x1c4>)
 80015fe:	ed93 3b02 	vldr	d3, [r3, #8]
 8001602:	4b33      	ldr	r3, [pc, #204]	@ (80016d0 <main+0x1c4>)
 8001604:	ed93 2b04 	vldr	d2, [r3, #16]
 8001608:	4b31      	ldr	r3, [pc, #196]	@ (80016d0 <main+0x1c4>)
 800160a:	ed93 1b06 	vldr	d1, [r3, #24]
 800160e:	4b30      	ldr	r3, [pc, #192]	@ (80016d0 <main+0x1c4>)
 8001610:	ed93 0b08 	vldr	d0, [r3, #32]
 8001614:	4b2e      	ldr	r3, [pc, #184]	@ (80016d0 <main+0x1c4>)
 8001616:	ed93 8b0a 	vldr	d8, [r3, #40]	@ 0x28
 800161a:	4b2d      	ldr	r3, [pc, #180]	@ (80016d0 <main+0x1c4>)
 800161c:	ed93 9b0c 	vldr	d9, [r3, #48]	@ 0x30
 8001620:	4b2b      	ldr	r3, [pc, #172]	@ (80016d0 <main+0x1c4>)
 8001622:	ed93 4b0e 	vldr	d4, [r3, #56]	@ 0x38
 8001626:	4b2a      	ldr	r3, [pc, #168]	@ (80016d0 <main+0x1c4>)
 8001628:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 800162c:	4b28      	ldr	r3, [pc, #160]	@ (80016d0 <main+0x1c4>)
 800162e:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 8001632:	4b27      	ldr	r3, [pc, #156]	@ (80016d0 <main+0x1c4>)
 8001634:	ed93 7b14 	vldr	d7, [r3, #80]	@ 0x50
 8001638:	4b25      	ldr	r3, [pc, #148]	@ (80016d0 <main+0x1c4>)
 800163a:	e9d3 ab16 	ldrd	sl, fp, [r3, #88]	@ 0x58
 800163e:	4b24      	ldr	r3, [pc, #144]	@ (80016d0 <main+0x1c4>)
 8001640:	e9d3 8918 	ldrd	r8, r9, [r3, #96]	@ 0x60
 8001644:	4b22      	ldr	r3, [pc, #136]	@ (80016d0 <main+0x1c4>)
 8001646:	e9d3 451a 	ldrd	r4, r5, [r3, #104]	@ 0x68
 800164a:	4b21      	ldr	r3, [pc, #132]	@ (80016d0 <main+0x1c4>)
 800164c:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	@ 0x70
 8001650:	4b1f      	ldr	r3, [pc, #124]	@ (80016d0 <main+0x1c4>)
 8001652:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 8001656:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 800165a:	e9cd 011a 	strd	r0, r1, [sp, #104]	@ 0x68
 800165e:	e9cd 4518 	strd	r4, r5, [sp, #96]	@ 0x60
 8001662:	e9cd 8916 	strd	r8, r9, [sp, #88]	@ 0x58
 8001666:	e9cd ab14 	strd	sl, fp, [sp, #80]	@ 0x50
 800166a:	ed8d 7b12 	vstr	d7, [sp, #72]	@ 0x48
 800166e:	ed8d 6b10 	vstr	d6, [sp, #64]	@ 0x40
 8001672:	ed8d 5b0e 	vstr	d5, [sp, #56]	@ 0x38
 8001676:	ed8d 4b0c 	vstr	d4, [sp, #48]	@ 0x30
 800167a:	ed8d 9b0a 	vstr	d9, [sp, #40]	@ 0x28
 800167e:	ed8d 8b08 	vstr	d8, [sp, #32]
 8001682:	ed8d 0b06 	vstr	d0, [sp, #24]
 8001686:	ed8d 1b04 	vstr	d1, [sp, #16]
 800168a:	ed8d 2b02 	vstr	d2, [sp, #8]
 800168e:	ed8d 3b00 	vstr	d3, [sp]
 8001692:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001696:	4910      	ldr	r1, [pc, #64]	@ (80016d8 <main+0x1cc>)
 8001698:	4810      	ldr	r0, [pc, #64]	@ (80016dc <main+0x1d0>)
 800169a:	f005 fd6f 	bl	800717c <siprintf>
 800169e:	4603      	mov	r3, r0
 80016a0:	b2da      	uxtb	r2, r3
 80016a2:	4b0f      	ldr	r3, [pc, #60]	@ (80016e0 <main+0x1d4>)
 80016a4:	701a      	strb	r2, [r3, #0]
				output[5].real, output[5].imag,
				output[6].real, output[6].imag,
				output[7].real, output[7].imag
				);

		HAL_UART_Transmit_IT(&huart2, (uint8_t*)TxData, size);
 80016a6:	4b0e      	ldr	r3, [pc, #56]	@ (80016e0 <main+0x1d4>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	461a      	mov	r2, r3
 80016ac:	490b      	ldr	r1, [pc, #44]	@ (80016dc <main+0x1d0>)
 80016ae:	4803      	ldr	r0, [pc, #12]	@ (80016bc <main+0x1b0>)
 80016b0:	f002 fe36 	bl	8004320 <HAL_UART_Transmit_IT>
	if(DataReceived) {
 80016b4:	e743      	b.n	800153e <main+0x32>
 80016b6:	bf00      	nop
 80016b8:	200002f0 	.word	0x200002f0
 80016bc:	20000268 	.word	0x20000268
 80016c0:	200003f4 	.word	0x200003f4
 80016c4:	0800bd48 	.word	0x0800bd48
 80016c8:	200002f4 	.word	0x200002f4
 80016cc:	200004f8 	.word	0x200004f8
 80016d0:	20000578 	.word	0x20000578
 80016d4:	200005f8 	.word	0x200005f8
 80016d8:	0800bd4c 	.word	0x0800bd4c
 80016dc:	200003f8 	.word	0x200003f8
 80016e0:	200004f7 	.word	0x200004f7

080016e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b096      	sub	sp, #88	@ 0x58
 80016e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ea:	f107 0314 	add.w	r3, r7, #20
 80016ee:	2244      	movs	r2, #68	@ 0x44
 80016f0:	2100      	movs	r1, #0
 80016f2:	4618      	mov	r0, r3
 80016f4:	f005 fda5 	bl	8007242 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016f8:	463b      	mov	r3, r7
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	605a      	str	r2, [r3, #4]
 8001700:	609a      	str	r2, [r3, #8]
 8001702:	60da      	str	r2, [r3, #12]
 8001704:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001706:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800170a:	f000 ff2d 	bl	8002568 <HAL_PWREx_ControlVoltageScaling>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001714:	f000 f920 	bl	8001958 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001718:	2302      	movs	r3, #2
 800171a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800171c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001720:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001722:	2310      	movs	r3, #16
 8001724:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001726:	2302      	movs	r3, #2
 8001728:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800172a:	2302      	movs	r3, #2
 800172c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800172e:	2301      	movs	r3, #1
 8001730:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001732:	230a      	movs	r3, #10
 8001734:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001736:	2307      	movs	r3, #7
 8001738:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800173a:	2302      	movs	r3, #2
 800173c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800173e:	2302      	movs	r3, #2
 8001740:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001742:	f107 0314 	add.w	r3, r7, #20
 8001746:	4618      	mov	r0, r3
 8001748:	f000 ff64 	bl	8002614 <HAL_RCC_OscConfig>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001752:	f000 f901 	bl	8001958 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001756:	230f      	movs	r3, #15
 8001758:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800175a:	2303      	movs	r3, #3
 800175c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800175e:	2300      	movs	r3, #0
 8001760:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001762:	2300      	movs	r3, #0
 8001764:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001766:	2300      	movs	r3, #0
 8001768:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800176a:	463b      	mov	r3, r7
 800176c:	2104      	movs	r1, #4
 800176e:	4618      	mov	r0, r3
 8001770:	f001 fb2c 	bl	8002dcc <HAL_RCC_ClockConfig>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800177a:	f000 f8ed 	bl	8001958 <Error_Handler>
  }
}
 800177e:	bf00      	nop
 8001780:	3758      	adds	r7, #88	@ 0x58
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
	...

08001788 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800178c:	4b1b      	ldr	r3, [pc, #108]	@ (80017fc <MX_SPI2_Init+0x74>)
 800178e:	4a1c      	ldr	r2, [pc, #112]	@ (8001800 <MX_SPI2_Init+0x78>)
 8001790:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001792:	4b1a      	ldr	r3, [pc, #104]	@ (80017fc <MX_SPI2_Init+0x74>)
 8001794:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001798:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800179a:	4b18      	ldr	r3, [pc, #96]	@ (80017fc <MX_SPI2_Init+0x74>)
 800179c:	2200      	movs	r2, #0
 800179e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80017a0:	4b16      	ldr	r3, [pc, #88]	@ (80017fc <MX_SPI2_Init+0x74>)
 80017a2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80017a6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017a8:	4b14      	ldr	r3, [pc, #80]	@ (80017fc <MX_SPI2_Init+0x74>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017ae:	4b13      	ldr	r3, [pc, #76]	@ (80017fc <MX_SPI2_Init+0x74>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80017b4:	4b11      	ldr	r3, [pc, #68]	@ (80017fc <MX_SPI2_Init+0x74>)
 80017b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017ba:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80017bc:	4b0f      	ldr	r3, [pc, #60]	@ (80017fc <MX_SPI2_Init+0x74>)
 80017be:	2238      	movs	r2, #56	@ 0x38
 80017c0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017c2:	4b0e      	ldr	r3, [pc, #56]	@ (80017fc <MX_SPI2_Init+0x74>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80017c8:	4b0c      	ldr	r3, [pc, #48]	@ (80017fc <MX_SPI2_Init+0x74>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017ce:	4b0b      	ldr	r3, [pc, #44]	@ (80017fc <MX_SPI2_Init+0x74>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80017d4:	4b09      	ldr	r3, [pc, #36]	@ (80017fc <MX_SPI2_Init+0x74>)
 80017d6:	2207      	movs	r2, #7
 80017d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80017da:	4b08      	ldr	r3, [pc, #32]	@ (80017fc <MX_SPI2_Init+0x74>)
 80017dc:	2200      	movs	r2, #0
 80017de:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017e0:	4b06      	ldr	r3, [pc, #24]	@ (80017fc <MX_SPI2_Init+0x74>)
 80017e2:	2208      	movs	r2, #8
 80017e4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80017e6:	4805      	ldr	r0, [pc, #20]	@ (80017fc <MX_SPI2_Init+0x74>)
 80017e8:	f002 f9d0 	bl	8003b8c <HAL_SPI_Init>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80017f2:	f000 f8b1 	bl	8001958 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20000204 	.word	0x20000204
 8001800:	40003800 	.word	0x40003800

08001804 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001808:	4b14      	ldr	r3, [pc, #80]	@ (800185c <MX_USART2_UART_Init+0x58>)
 800180a:	4a15      	ldr	r2, [pc, #84]	@ (8001860 <MX_USART2_UART_Init+0x5c>)
 800180c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800180e:	4b13      	ldr	r3, [pc, #76]	@ (800185c <MX_USART2_UART_Init+0x58>)
 8001810:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001814:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001816:	4b11      	ldr	r3, [pc, #68]	@ (800185c <MX_USART2_UART_Init+0x58>)
 8001818:	2200      	movs	r2, #0
 800181a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800181c:	4b0f      	ldr	r3, [pc, #60]	@ (800185c <MX_USART2_UART_Init+0x58>)
 800181e:	2200      	movs	r2, #0
 8001820:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001822:	4b0e      	ldr	r3, [pc, #56]	@ (800185c <MX_USART2_UART_Init+0x58>)
 8001824:	2200      	movs	r2, #0
 8001826:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001828:	4b0c      	ldr	r3, [pc, #48]	@ (800185c <MX_USART2_UART_Init+0x58>)
 800182a:	220c      	movs	r2, #12
 800182c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800182e:	4b0b      	ldr	r3, [pc, #44]	@ (800185c <MX_USART2_UART_Init+0x58>)
 8001830:	2200      	movs	r2, #0
 8001832:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001834:	4b09      	ldr	r3, [pc, #36]	@ (800185c <MX_USART2_UART_Init+0x58>)
 8001836:	2200      	movs	r2, #0
 8001838:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800183a:	4b08      	ldr	r3, [pc, #32]	@ (800185c <MX_USART2_UART_Init+0x58>)
 800183c:	2200      	movs	r2, #0
 800183e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001840:	4b06      	ldr	r3, [pc, #24]	@ (800185c <MX_USART2_UART_Init+0x58>)
 8001842:	2200      	movs	r2, #0
 8001844:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001846:	4805      	ldr	r0, [pc, #20]	@ (800185c <MX_USART2_UART_Init+0x58>)
 8001848:	f002 fd1c 	bl	8004284 <HAL_UART_Init>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001852:	f000 f881 	bl	8001958 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20000268 	.word	0x20000268
 8001860:	40004400 	.word	0x40004400

08001864 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08a      	sub	sp, #40	@ 0x28
 8001868:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186a:	f107 0314 	add.w	r3, r7, #20
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	605a      	str	r2, [r3, #4]
 8001874:	609a      	str	r2, [r3, #8]
 8001876:	60da      	str	r2, [r3, #12]
 8001878:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800187a:	4b35      	ldr	r3, [pc, #212]	@ (8001950 <MX_GPIO_Init+0xec>)
 800187c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800187e:	4a34      	ldr	r2, [pc, #208]	@ (8001950 <MX_GPIO_Init+0xec>)
 8001880:	f043 0304 	orr.w	r3, r3, #4
 8001884:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001886:	4b32      	ldr	r3, [pc, #200]	@ (8001950 <MX_GPIO_Init+0xec>)
 8001888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800188a:	f003 0304 	and.w	r3, r3, #4
 800188e:	613b      	str	r3, [r7, #16]
 8001890:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001892:	4b2f      	ldr	r3, [pc, #188]	@ (8001950 <MX_GPIO_Init+0xec>)
 8001894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001896:	4a2e      	ldr	r2, [pc, #184]	@ (8001950 <MX_GPIO_Init+0xec>)
 8001898:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800189c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800189e:	4b2c      	ldr	r3, [pc, #176]	@ (8001950 <MX_GPIO_Init+0xec>)
 80018a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018aa:	4b29      	ldr	r3, [pc, #164]	@ (8001950 <MX_GPIO_Init+0xec>)
 80018ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ae:	4a28      	ldr	r2, [pc, #160]	@ (8001950 <MX_GPIO_Init+0xec>)
 80018b0:	f043 0301 	orr.w	r3, r3, #1
 80018b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018b6:	4b26      	ldr	r3, [pc, #152]	@ (8001950 <MX_GPIO_Init+0xec>)
 80018b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	60bb      	str	r3, [r7, #8]
 80018c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c2:	4b23      	ldr	r3, [pc, #140]	@ (8001950 <MX_GPIO_Init+0xec>)
 80018c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018c6:	4a22      	ldr	r2, [pc, #136]	@ (8001950 <MX_GPIO_Init+0xec>)
 80018c8:	f043 0302 	orr.w	r3, r3, #2
 80018cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018ce:	4b20      	ldr	r3, [pc, #128]	@ (8001950 <MX_GPIO_Init+0xec>)
 80018d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	607b      	str	r3, [r7, #4]
 80018d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80018da:	2201      	movs	r2, #1
 80018dc:	2102      	movs	r1, #2
 80018de:	481d      	ldr	r0, [pc, #116]	@ (8001954 <MX_GPIO_Init+0xf0>)
 80018e0:	f000 fe1c 	bl	800251c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80018e4:	2200      	movs	r2, #0
 80018e6:	2120      	movs	r1, #32
 80018e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018ec:	f000 fe16 	bl	800251c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018f6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80018fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001900:	f107 0314 	add.w	r3, r7, #20
 8001904:	4619      	mov	r1, r3
 8001906:	4813      	ldr	r0, [pc, #76]	@ (8001954 <MX_GPIO_Init+0xf0>)
 8001908:	f000 fc5e 	bl	80021c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 800190c:	2302      	movs	r3, #2
 800190e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001910:	2301      	movs	r3, #1
 8001912:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001918:	2300      	movs	r3, #0
 800191a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 800191c:	f107 0314 	add.w	r3, r7, #20
 8001920:	4619      	mov	r1, r3
 8001922:	480c      	ldr	r0, [pc, #48]	@ (8001954 <MX_GPIO_Init+0xf0>)
 8001924:	f000 fc50 	bl	80021c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001928:	2320      	movs	r3, #32
 800192a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800192c:	2301      	movs	r3, #1
 800192e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001934:	2300      	movs	r3, #0
 8001936:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001938:	f107 0314 	add.w	r3, r7, #20
 800193c:	4619      	mov	r1, r3
 800193e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001942:	f000 fc41 	bl	80021c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001946:	bf00      	nop
 8001948:	3728      	adds	r7, #40	@ 0x28
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40021000 	.word	0x40021000
 8001954:	48000800 	.word	0x48000800

08001958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800195c:	b672      	cpsid	i
}
 800195e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001960:	bf00      	nop
 8001962:	e7fd      	b.n	8001960 <Error_Handler+0x8>

08001964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800196a:	4b0f      	ldr	r3, [pc, #60]	@ (80019a8 <HAL_MspInit+0x44>)
 800196c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800196e:	4a0e      	ldr	r2, [pc, #56]	@ (80019a8 <HAL_MspInit+0x44>)
 8001970:	f043 0301 	orr.w	r3, r3, #1
 8001974:	6613      	str	r3, [r2, #96]	@ 0x60
 8001976:	4b0c      	ldr	r3, [pc, #48]	@ (80019a8 <HAL_MspInit+0x44>)
 8001978:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	607b      	str	r3, [r7, #4]
 8001980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001982:	4b09      	ldr	r3, [pc, #36]	@ (80019a8 <HAL_MspInit+0x44>)
 8001984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001986:	4a08      	ldr	r2, [pc, #32]	@ (80019a8 <HAL_MspInit+0x44>)
 8001988:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800198c:	6593      	str	r3, [r2, #88]	@ 0x58
 800198e:	4b06      	ldr	r3, [pc, #24]	@ (80019a8 <HAL_MspInit+0x44>)
 8001990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001992:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001996:	603b      	str	r3, [r7, #0]
 8001998:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	40021000 	.word	0x40021000

080019ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08a      	sub	sp, #40	@ 0x28
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b4:	f107 0314 	add.w	r3, r7, #20
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]
 80019c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a25      	ldr	r2, [pc, #148]	@ (8001a60 <HAL_SPI_MspInit+0xb4>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d144      	bne.n	8001a58 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80019ce:	4b25      	ldr	r3, [pc, #148]	@ (8001a64 <HAL_SPI_MspInit+0xb8>)
 80019d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019d2:	4a24      	ldr	r2, [pc, #144]	@ (8001a64 <HAL_SPI_MspInit+0xb8>)
 80019d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80019da:	4b22      	ldr	r3, [pc, #136]	@ (8001a64 <HAL_SPI_MspInit+0xb8>)
 80019dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019e2:	613b      	str	r3, [r7, #16]
 80019e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001a64 <HAL_SPI_MspInit+0xb8>)
 80019e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ea:	4a1e      	ldr	r2, [pc, #120]	@ (8001a64 <HAL_SPI_MspInit+0xb8>)
 80019ec:	f043 0304 	orr.w	r3, r3, #4
 80019f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001a64 <HAL_SPI_MspInit+0xb8>)
 80019f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019f6:	f003 0304 	and.w	r3, r3, #4
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019fe:	4b19      	ldr	r3, [pc, #100]	@ (8001a64 <HAL_SPI_MspInit+0xb8>)
 8001a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a02:	4a18      	ldr	r2, [pc, #96]	@ (8001a64 <HAL_SPI_MspInit+0xb8>)
 8001a04:	f043 0302 	orr.w	r3, r3, #2
 8001a08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a0a:	4b16      	ldr	r3, [pc, #88]	@ (8001a64 <HAL_SPI_MspInit+0xb8>)
 8001a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	60bb      	str	r3, [r7, #8]
 8001a14:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a16:	230c      	movs	r3, #12
 8001a18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a22:	2303      	movs	r3, #3
 8001a24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a26:	2305      	movs	r3, #5
 8001a28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a2a:	f107 0314 	add.w	r3, r7, #20
 8001a2e:	4619      	mov	r1, r3
 8001a30:	480d      	ldr	r0, [pc, #52]	@ (8001a68 <HAL_SPI_MspInit+0xbc>)
 8001a32:	f000 fbc9 	bl	80021c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a40:	2300      	movs	r3, #0
 8001a42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a44:	2303      	movs	r3, #3
 8001a46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a48:	2305      	movs	r3, #5
 8001a4a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a4c:	f107 0314 	add.w	r3, r7, #20
 8001a50:	4619      	mov	r1, r3
 8001a52:	4806      	ldr	r0, [pc, #24]	@ (8001a6c <HAL_SPI_MspInit+0xc0>)
 8001a54:	f000 fbb8 	bl	80021c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001a58:	bf00      	nop
 8001a5a:	3728      	adds	r7, #40	@ 0x28
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40003800 	.word	0x40003800
 8001a64:	40021000 	.word	0x40021000
 8001a68:	48000800 	.word	0x48000800
 8001a6c:	48000400 	.word	0x48000400

08001a70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b0ac      	sub	sp, #176	@ 0xb0
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a78:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]
 8001a86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a88:	f107 0314 	add.w	r3, r7, #20
 8001a8c:	2288      	movs	r2, #136	@ 0x88
 8001a8e:	2100      	movs	r1, #0
 8001a90:	4618      	mov	r0, r3
 8001a92:	f005 fbd6 	bl	8007242 <memset>
  if(huart->Instance==USART2)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a25      	ldr	r2, [pc, #148]	@ (8001b30 <HAL_UART_MspInit+0xc0>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d143      	bne.n	8001b28 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001aa8:	f107 0314 	add.w	r3, r7, #20
 8001aac:	4618      	mov	r0, r3
 8001aae:	f001 fbb1 	bl	8003214 <HAL_RCCEx_PeriphCLKConfig>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ab8:	f7ff ff4e 	bl	8001958 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001abc:	4b1d      	ldr	r3, [pc, #116]	@ (8001b34 <HAL_UART_MspInit+0xc4>)
 8001abe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ac0:	4a1c      	ldr	r2, [pc, #112]	@ (8001b34 <HAL_UART_MspInit+0xc4>)
 8001ac2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ac6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ac8:	4b1a      	ldr	r3, [pc, #104]	@ (8001b34 <HAL_UART_MspInit+0xc4>)
 8001aca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001acc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ad0:	613b      	str	r3, [r7, #16]
 8001ad2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad4:	4b17      	ldr	r3, [pc, #92]	@ (8001b34 <HAL_UART_MspInit+0xc4>)
 8001ad6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ad8:	4a16      	ldr	r2, [pc, #88]	@ (8001b34 <HAL_UART_MspInit+0xc4>)
 8001ada:	f043 0301 	orr.w	r3, r3, #1
 8001ade:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ae0:	4b14      	ldr	r3, [pc, #80]	@ (8001b34 <HAL_UART_MspInit+0xc4>)
 8001ae2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ae4:	f003 0301 	and.w	r3, r3, #1
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001aec:	230c      	movs	r3, #12
 8001aee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af2:	2302      	movs	r3, #2
 8001af4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af8:	2300      	movs	r3, #0
 8001afa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001afe:	2303      	movs	r3, #3
 8001b00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b04:	2307      	movs	r3, #7
 8001b06:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b0a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001b0e:	4619      	mov	r1, r3
 8001b10:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b14:	f000 fb58 	bl	80021c8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001b18:	2200      	movs	r2, #0
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	2026      	movs	r0, #38	@ 0x26
 8001b1e:	f000 fa9e 	bl	800205e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b22:	2026      	movs	r0, #38	@ 0x26
 8001b24:	f000 fab7 	bl	8002096 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b28:	bf00      	nop
 8001b2a:	37b0      	adds	r7, #176	@ 0xb0
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40004400 	.word	0x40004400
 8001b34:	40021000 	.word	0x40021000

08001b38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b3c:	bf00      	nop
 8001b3e:	e7fd      	b.n	8001b3c <NMI_Handler+0x4>

08001b40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b44:	bf00      	nop
 8001b46:	e7fd      	b.n	8001b44 <HardFault_Handler+0x4>

08001b48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b4c:	bf00      	nop
 8001b4e:	e7fd      	b.n	8001b4c <MemManage_Handler+0x4>

08001b50 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b54:	bf00      	nop
 8001b56:	e7fd      	b.n	8001b54 <BusFault_Handler+0x4>

08001b58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b5c:	bf00      	nop
 8001b5e:	e7fd      	b.n	8001b5c <UsageFault_Handler+0x4>

08001b60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b64:	bf00      	nop
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b72:	bf00      	nop
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b80:	bf00      	nop
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b8e:	f000 f96b 	bl	8001e68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
	...

08001b98 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b9c:	4802      	ldr	r0, [pc, #8]	@ (8001ba8 <USART2_IRQHandler+0x10>)
 8001b9e:	f002 fc69 	bl	8004474 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20000268 	.word	0x20000268

08001bac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  return 1;
 8001bb0:	2301      	movs	r3, #1
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <_kill>:

int _kill(int pid, int sig)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bc6:	f005 fbfd 	bl	80073c4 <__errno>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2216      	movs	r2, #22
 8001bce:	601a      	str	r2, [r3, #0]
  return -1;
 8001bd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <_exit>:

void _exit (int status)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001be4:	f04f 31ff 	mov.w	r1, #4294967295
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f7ff ffe7 	bl	8001bbc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bee:	bf00      	nop
 8001bf0:	e7fd      	b.n	8001bee <_exit+0x12>

08001bf2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b086      	sub	sp, #24
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	60f8      	str	r0, [r7, #12]
 8001bfa:	60b9      	str	r1, [r7, #8]
 8001bfc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bfe:	2300      	movs	r3, #0
 8001c00:	617b      	str	r3, [r7, #20]
 8001c02:	e00a      	b.n	8001c1a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c04:	f3af 8000 	nop.w
 8001c08:	4601      	mov	r1, r0
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	1c5a      	adds	r2, r3, #1
 8001c0e:	60ba      	str	r2, [r7, #8]
 8001c10:	b2ca      	uxtb	r2, r1
 8001c12:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	3301      	adds	r3, #1
 8001c18:	617b      	str	r3, [r7, #20]
 8001c1a:	697a      	ldr	r2, [r7, #20]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	dbf0      	blt.n	8001c04 <_read+0x12>
  }

  return len;
 8001c22:	687b      	ldr	r3, [r7, #4]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3718      	adds	r7, #24
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c38:	2300      	movs	r3, #0
 8001c3a:	617b      	str	r3, [r7, #20]
 8001c3c:	e009      	b.n	8001c52 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	1c5a      	adds	r2, r3, #1
 8001c42:	60ba      	str	r2, [r7, #8]
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	3301      	adds	r3, #1
 8001c50:	617b      	str	r3, [r7, #20]
 8001c52:	697a      	ldr	r2, [r7, #20]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	dbf1      	blt.n	8001c3e <_write+0x12>
  }
  return len;
 8001c5a:	687b      	ldr	r3, [r7, #4]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3718      	adds	r7, #24
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <_close>:

int _close(int file)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c8c:	605a      	str	r2, [r3, #4]
  return 0;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <_isatty>:

int _isatty(int file)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ca4:	2301      	movs	r3, #1
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b085      	sub	sp, #20
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	60f8      	str	r0, [r7, #12]
 8001cba:	60b9      	str	r1, [r7, #8]
 8001cbc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3714      	adds	r7, #20
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cd4:	4a14      	ldr	r2, [pc, #80]	@ (8001d28 <_sbrk+0x5c>)
 8001cd6:	4b15      	ldr	r3, [pc, #84]	@ (8001d2c <_sbrk+0x60>)
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ce0:	4b13      	ldr	r3, [pc, #76]	@ (8001d30 <_sbrk+0x64>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d102      	bne.n	8001cee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ce8:	4b11      	ldr	r3, [pc, #68]	@ (8001d30 <_sbrk+0x64>)
 8001cea:	4a12      	ldr	r2, [pc, #72]	@ (8001d34 <_sbrk+0x68>)
 8001cec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cee:	4b10      	ldr	r3, [pc, #64]	@ (8001d30 <_sbrk+0x64>)
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d207      	bcs.n	8001d0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cfc:	f005 fb62 	bl	80073c4 <__errno>
 8001d00:	4603      	mov	r3, r0
 8001d02:	220c      	movs	r2, #12
 8001d04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d06:	f04f 33ff 	mov.w	r3, #4294967295
 8001d0a:	e009      	b.n	8001d20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d0c:	4b08      	ldr	r3, [pc, #32]	@ (8001d30 <_sbrk+0x64>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d12:	4b07      	ldr	r3, [pc, #28]	@ (8001d30 <_sbrk+0x64>)
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4413      	add	r3, r2
 8001d1a:	4a05      	ldr	r2, [pc, #20]	@ (8001d30 <_sbrk+0x64>)
 8001d1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3718      	adds	r7, #24
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	20018000 	.word	0x20018000
 8001d2c:	00000400 	.word	0x00000400
 8001d30:	20000600 	.word	0x20000600
 8001d34:	20000758 	.word	0x20000758

08001d38 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001d3c:	4b06      	ldr	r3, [pc, #24]	@ (8001d58 <SystemInit+0x20>)
 8001d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d42:	4a05      	ldr	r2, [pc, #20]	@ (8001d58 <SystemInit+0x20>)
 8001d44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001d4c:	bf00      	nop
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	e000ed00 	.word	0xe000ed00

08001d5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d5c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d94 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d60:	f7ff ffea 	bl	8001d38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d64:	480c      	ldr	r0, [pc, #48]	@ (8001d98 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d66:	490d      	ldr	r1, [pc, #52]	@ (8001d9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d68:	4a0d      	ldr	r2, [pc, #52]	@ (8001da0 <LoopForever+0xe>)
  movs r3, #0
 8001d6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d6c:	e002      	b.n	8001d74 <LoopCopyDataInit>

08001d6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d72:	3304      	adds	r3, #4

08001d74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d78:	d3f9      	bcc.n	8001d6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d7a:	4a0a      	ldr	r2, [pc, #40]	@ (8001da4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d7c:	4c0a      	ldr	r4, [pc, #40]	@ (8001da8 <LoopForever+0x16>)
  movs r3, #0
 8001d7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d80:	e001      	b.n	8001d86 <LoopFillZerobss>

08001d82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d84:	3204      	adds	r2, #4

08001d86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d88:	d3fb      	bcc.n	8001d82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d8a:	f005 fb21 	bl	80073d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d8e:	f7ff fbbd 	bl	800150c <main>

08001d92 <LoopForever>:

LoopForever:
    b LoopForever
 8001d92:	e7fe      	b.n	8001d92 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001d94:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001d98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d9c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001da0:	0800c488 	.word	0x0800c488
  ldr r2, =_sbss
 8001da4:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001da8:	20000754 	.word	0x20000754

08001dac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001dac:	e7fe      	b.n	8001dac <ADC1_2_IRQHandler>
	...

08001db0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001db6:	2300      	movs	r3, #0
 8001db8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dba:	4b0c      	ldr	r3, [pc, #48]	@ (8001dec <HAL_Init+0x3c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a0b      	ldr	r2, [pc, #44]	@ (8001dec <HAL_Init+0x3c>)
 8001dc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dc4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dc6:	2003      	movs	r0, #3
 8001dc8:	f000 f93e 	bl	8002048 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001dcc:	2000      	movs	r0, #0
 8001dce:	f000 f80f 	bl	8001df0 <HAL_InitTick>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d002      	beq.n	8001dde <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	71fb      	strb	r3, [r7, #7]
 8001ddc:	e001      	b.n	8001de2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001dde:	f7ff fdc1 	bl	8001964 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001de2:	79fb      	ldrb	r3, [r7, #7]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	40022000 	.word	0x40022000

08001df0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001dfc:	4b17      	ldr	r3, [pc, #92]	@ (8001e5c <HAL_InitTick+0x6c>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d023      	beq.n	8001e4c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001e04:	4b16      	ldr	r3, [pc, #88]	@ (8001e60 <HAL_InitTick+0x70>)
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	4b14      	ldr	r3, [pc, #80]	@ (8001e5c <HAL_InitTick+0x6c>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f000 f949 	bl	80020b2 <HAL_SYSTICK_Config>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d10f      	bne.n	8001e46 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2b0f      	cmp	r3, #15
 8001e2a:	d809      	bhi.n	8001e40 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	6879      	ldr	r1, [r7, #4]
 8001e30:	f04f 30ff 	mov.w	r0, #4294967295
 8001e34:	f000 f913 	bl	800205e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e38:	4a0a      	ldr	r2, [pc, #40]	@ (8001e64 <HAL_InitTick+0x74>)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6013      	str	r3, [r2, #0]
 8001e3e:	e007      	b.n	8001e50 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	73fb      	strb	r3, [r7, #15]
 8001e44:	e004      	b.n	8001e50 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	73fb      	strb	r3, [r7, #15]
 8001e4a:	e001      	b.n	8001e50 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	20000008 	.word	0x20000008
 8001e60:	20000000 	.word	0x20000000
 8001e64:	20000004 	.word	0x20000004

08001e68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e6c:	4b06      	ldr	r3, [pc, #24]	@ (8001e88 <HAL_IncTick+0x20>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	461a      	mov	r2, r3
 8001e72:	4b06      	ldr	r3, [pc, #24]	@ (8001e8c <HAL_IncTick+0x24>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4413      	add	r3, r2
 8001e78:	4a04      	ldr	r2, [pc, #16]	@ (8001e8c <HAL_IncTick+0x24>)
 8001e7a:	6013      	str	r3, [r2, #0]
}
 8001e7c:	bf00      	nop
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	20000008 	.word	0x20000008
 8001e8c:	20000604 	.word	0x20000604

08001e90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  return uwTick;
 8001e94:	4b03      	ldr	r3, [pc, #12]	@ (8001ea4 <HAL_GetTick+0x14>)
 8001e96:	681b      	ldr	r3, [r3, #0]
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	20000604 	.word	0x20000604

08001ea8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f003 0307 	and.w	r3, r3, #7
 8001eb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8001eec <__NVIC_SetPriorityGrouping+0x44>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ebe:	68ba      	ldr	r2, [r7, #8]
 8001ec0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ed0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ed4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ed8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eda:	4a04      	ldr	r2, [pc, #16]	@ (8001eec <__NVIC_SetPriorityGrouping+0x44>)
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	60d3      	str	r3, [r2, #12]
}
 8001ee0:	bf00      	nop
 8001ee2:	3714      	adds	r7, #20
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	e000ed00 	.word	0xe000ed00

08001ef0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ef4:	4b04      	ldr	r3, [pc, #16]	@ (8001f08 <__NVIC_GetPriorityGrouping+0x18>)
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	0a1b      	lsrs	r3, r3, #8
 8001efa:	f003 0307 	and.w	r3, r3, #7
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	e000ed00 	.word	0xe000ed00

08001f0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	db0b      	blt.n	8001f36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f1e:	79fb      	ldrb	r3, [r7, #7]
 8001f20:	f003 021f 	and.w	r2, r3, #31
 8001f24:	4907      	ldr	r1, [pc, #28]	@ (8001f44 <__NVIC_EnableIRQ+0x38>)
 8001f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2a:	095b      	lsrs	r3, r3, #5
 8001f2c:	2001      	movs	r0, #1
 8001f2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	e000e100 	.word	0xe000e100

08001f48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	6039      	str	r1, [r7, #0]
 8001f52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	db0a      	blt.n	8001f72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	b2da      	uxtb	r2, r3
 8001f60:	490c      	ldr	r1, [pc, #48]	@ (8001f94 <__NVIC_SetPriority+0x4c>)
 8001f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f66:	0112      	lsls	r2, r2, #4
 8001f68:	b2d2      	uxtb	r2, r2
 8001f6a:	440b      	add	r3, r1
 8001f6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f70:	e00a      	b.n	8001f88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	b2da      	uxtb	r2, r3
 8001f76:	4908      	ldr	r1, [pc, #32]	@ (8001f98 <__NVIC_SetPriority+0x50>)
 8001f78:	79fb      	ldrb	r3, [r7, #7]
 8001f7a:	f003 030f 	and.w	r3, r3, #15
 8001f7e:	3b04      	subs	r3, #4
 8001f80:	0112      	lsls	r2, r2, #4
 8001f82:	b2d2      	uxtb	r2, r2
 8001f84:	440b      	add	r3, r1
 8001f86:	761a      	strb	r2, [r3, #24]
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	e000e100 	.word	0xe000e100
 8001f98:	e000ed00 	.word	0xe000ed00

08001f9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b089      	sub	sp, #36	@ 0x24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	f1c3 0307 	rsb	r3, r3, #7
 8001fb6:	2b04      	cmp	r3, #4
 8001fb8:	bf28      	it	cs
 8001fba:	2304      	movcs	r3, #4
 8001fbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	3304      	adds	r3, #4
 8001fc2:	2b06      	cmp	r3, #6
 8001fc4:	d902      	bls.n	8001fcc <NVIC_EncodePriority+0x30>
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	3b03      	subs	r3, #3
 8001fca:	e000      	b.n	8001fce <NVIC_EncodePriority+0x32>
 8001fcc:	2300      	movs	r3, #0
 8001fce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	43da      	mvns	r2, r3
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	401a      	ands	r2, r3
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	fa01 f303 	lsl.w	r3, r1, r3
 8001fee:	43d9      	mvns	r1, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff4:	4313      	orrs	r3, r2
         );
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3724      	adds	r7, #36	@ 0x24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
	...

08002004 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	3b01      	subs	r3, #1
 8002010:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002014:	d301      	bcc.n	800201a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002016:	2301      	movs	r3, #1
 8002018:	e00f      	b.n	800203a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800201a:	4a0a      	ldr	r2, [pc, #40]	@ (8002044 <SysTick_Config+0x40>)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	3b01      	subs	r3, #1
 8002020:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002022:	210f      	movs	r1, #15
 8002024:	f04f 30ff 	mov.w	r0, #4294967295
 8002028:	f7ff ff8e 	bl	8001f48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800202c:	4b05      	ldr	r3, [pc, #20]	@ (8002044 <SysTick_Config+0x40>)
 800202e:	2200      	movs	r2, #0
 8002030:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002032:	4b04      	ldr	r3, [pc, #16]	@ (8002044 <SysTick_Config+0x40>)
 8002034:	2207      	movs	r2, #7
 8002036:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	e000e010 	.word	0xe000e010

08002048 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f7ff ff29 	bl	8001ea8 <__NVIC_SetPriorityGrouping>
}
 8002056:	bf00      	nop
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b086      	sub	sp, #24
 8002062:	af00      	add	r7, sp, #0
 8002064:	4603      	mov	r3, r0
 8002066:	60b9      	str	r1, [r7, #8]
 8002068:	607a      	str	r2, [r7, #4]
 800206a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800206c:	2300      	movs	r3, #0
 800206e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002070:	f7ff ff3e 	bl	8001ef0 <__NVIC_GetPriorityGrouping>
 8002074:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	68b9      	ldr	r1, [r7, #8]
 800207a:	6978      	ldr	r0, [r7, #20]
 800207c:	f7ff ff8e 	bl	8001f9c <NVIC_EncodePriority>
 8002080:	4602      	mov	r2, r0
 8002082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002086:	4611      	mov	r1, r2
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff ff5d 	bl	8001f48 <__NVIC_SetPriority>
}
 800208e:	bf00      	nop
 8002090:	3718      	adds	r7, #24
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b082      	sub	sp, #8
 800209a:	af00      	add	r7, sp, #0
 800209c:	4603      	mov	r3, r0
 800209e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff ff31 	bl	8001f0c <__NVIC_EnableIRQ>
}
 80020aa:	bf00      	nop
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b082      	sub	sp, #8
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f7ff ffa2 	bl	8002004 <SysTick_Config>
 80020c0:	4603      	mov	r3, r0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020ca:	b480      	push	{r7}
 80020cc:	b085      	sub	sp, #20
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020d2:	2300      	movs	r3, #0
 80020d4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d008      	beq.n	80020f4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2204      	movs	r2, #4
 80020e6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e022      	b.n	800213a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f022 020e 	bic.w	r2, r2, #14
 8002102:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f022 0201 	bic.w	r2, r2, #1
 8002112:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002118:	f003 021c 	and.w	r2, r3, #28
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002120:	2101      	movs	r1, #1
 8002122:	fa01 f202 	lsl.w	r2, r1, r2
 8002126:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002138:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800213a:	4618      	mov	r0, r3
 800213c:	3714      	adds	r7, #20
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr

08002146 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b084      	sub	sp, #16
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800214e:	2300      	movs	r3, #0
 8002150:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d005      	beq.n	800216a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2204      	movs	r2, #4
 8002162:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	73fb      	strb	r3, [r7, #15]
 8002168:	e029      	b.n	80021be <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 020e 	bic.w	r2, r2, #14
 8002178:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f022 0201 	bic.w	r2, r2, #1
 8002188:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800218e:	f003 021c 	and.w	r2, r3, #28
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002196:	2101      	movs	r1, #1
 8002198:	fa01 f202 	lsl.w	r2, r1, r2
 800219c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2201      	movs	r2, #1
 80021a2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d003      	beq.n	80021be <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	4798      	blx	r3
    }
  }
  return status;
 80021be:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3710      	adds	r7, #16
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b087      	sub	sp, #28
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021d2:	2300      	movs	r3, #0
 80021d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021d6:	e17f      	b.n	80024d8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	2101      	movs	r1, #1
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	fa01 f303 	lsl.w	r3, r1, r3
 80021e4:	4013      	ands	r3, r2
 80021e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f000 8171 	beq.w	80024d2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f003 0303 	and.w	r3, r3, #3
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d005      	beq.n	8002208 <HAL_GPIO_Init+0x40>
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f003 0303 	and.w	r3, r3, #3
 8002204:	2b02      	cmp	r3, #2
 8002206:	d130      	bne.n	800226a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	2203      	movs	r2, #3
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	43db      	mvns	r3, r3
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	4013      	ands	r3, r2
 800221e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	68da      	ldr	r2, [r3, #12]
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	4313      	orrs	r3, r2
 8002230:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800223e:	2201      	movs	r2, #1
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	43db      	mvns	r3, r3
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	4013      	ands	r3, r2
 800224c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	091b      	lsrs	r3, r3, #4
 8002254:	f003 0201 	and.w	r2, r3, #1
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	4313      	orrs	r3, r2
 8002262:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f003 0303 	and.w	r3, r3, #3
 8002272:	2b03      	cmp	r3, #3
 8002274:	d118      	bne.n	80022a8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800227a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800227c:	2201      	movs	r2, #1
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	43db      	mvns	r3, r3
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	4013      	ands	r3, r2
 800228a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	08db      	lsrs	r3, r3, #3
 8002292:	f003 0201 	and.w	r2, r3, #1
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	4313      	orrs	r3, r2
 80022a0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	693a      	ldr	r2, [r7, #16]
 80022a6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f003 0303 	and.w	r3, r3, #3
 80022b0:	2b03      	cmp	r3, #3
 80022b2:	d017      	beq.n	80022e4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	2203      	movs	r2, #3
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	43db      	mvns	r3, r3
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	4013      	ands	r3, r2
 80022ca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	689a      	ldr	r2, [r3, #8]
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	4313      	orrs	r3, r2
 80022dc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	693a      	ldr	r2, [r7, #16]
 80022e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f003 0303 	and.w	r3, r3, #3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d123      	bne.n	8002338 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	08da      	lsrs	r2, r3, #3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	3208      	adds	r2, #8
 80022f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	f003 0307 	and.w	r3, r3, #7
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	220f      	movs	r2, #15
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	43db      	mvns	r3, r3
 800230e:	693a      	ldr	r2, [r7, #16]
 8002310:	4013      	ands	r3, r2
 8002312:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	691a      	ldr	r2, [r3, #16]
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	f003 0307 	and.w	r3, r3, #7
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	693a      	ldr	r2, [r7, #16]
 8002326:	4313      	orrs	r3, r2
 8002328:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	08da      	lsrs	r2, r3, #3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	3208      	adds	r2, #8
 8002332:	6939      	ldr	r1, [r7, #16]
 8002334:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	2203      	movs	r2, #3
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	43db      	mvns	r3, r3
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	4013      	ands	r3, r2
 800234e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 0203 	and.w	r2, r3, #3
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	4313      	orrs	r3, r2
 8002364:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002374:	2b00      	cmp	r3, #0
 8002376:	f000 80ac 	beq.w	80024d2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800237a:	4b5f      	ldr	r3, [pc, #380]	@ (80024f8 <HAL_GPIO_Init+0x330>)
 800237c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800237e:	4a5e      	ldr	r2, [pc, #376]	@ (80024f8 <HAL_GPIO_Init+0x330>)
 8002380:	f043 0301 	orr.w	r3, r3, #1
 8002384:	6613      	str	r3, [r2, #96]	@ 0x60
 8002386:	4b5c      	ldr	r3, [pc, #368]	@ (80024f8 <HAL_GPIO_Init+0x330>)
 8002388:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	60bb      	str	r3, [r7, #8]
 8002390:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002392:	4a5a      	ldr	r2, [pc, #360]	@ (80024fc <HAL_GPIO_Init+0x334>)
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	089b      	lsrs	r3, r3, #2
 8002398:	3302      	adds	r3, #2
 800239a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800239e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	f003 0303 	and.w	r3, r3, #3
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	220f      	movs	r2, #15
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	43db      	mvns	r3, r3
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	4013      	ands	r3, r2
 80023b4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80023bc:	d025      	beq.n	800240a <HAL_GPIO_Init+0x242>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a4f      	ldr	r2, [pc, #316]	@ (8002500 <HAL_GPIO_Init+0x338>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d01f      	beq.n	8002406 <HAL_GPIO_Init+0x23e>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a4e      	ldr	r2, [pc, #312]	@ (8002504 <HAL_GPIO_Init+0x33c>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d019      	beq.n	8002402 <HAL_GPIO_Init+0x23a>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a4d      	ldr	r2, [pc, #308]	@ (8002508 <HAL_GPIO_Init+0x340>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d013      	beq.n	80023fe <HAL_GPIO_Init+0x236>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a4c      	ldr	r2, [pc, #304]	@ (800250c <HAL_GPIO_Init+0x344>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d00d      	beq.n	80023fa <HAL_GPIO_Init+0x232>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a4b      	ldr	r2, [pc, #300]	@ (8002510 <HAL_GPIO_Init+0x348>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d007      	beq.n	80023f6 <HAL_GPIO_Init+0x22e>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a4a      	ldr	r2, [pc, #296]	@ (8002514 <HAL_GPIO_Init+0x34c>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d101      	bne.n	80023f2 <HAL_GPIO_Init+0x22a>
 80023ee:	2306      	movs	r3, #6
 80023f0:	e00c      	b.n	800240c <HAL_GPIO_Init+0x244>
 80023f2:	2307      	movs	r3, #7
 80023f4:	e00a      	b.n	800240c <HAL_GPIO_Init+0x244>
 80023f6:	2305      	movs	r3, #5
 80023f8:	e008      	b.n	800240c <HAL_GPIO_Init+0x244>
 80023fa:	2304      	movs	r3, #4
 80023fc:	e006      	b.n	800240c <HAL_GPIO_Init+0x244>
 80023fe:	2303      	movs	r3, #3
 8002400:	e004      	b.n	800240c <HAL_GPIO_Init+0x244>
 8002402:	2302      	movs	r3, #2
 8002404:	e002      	b.n	800240c <HAL_GPIO_Init+0x244>
 8002406:	2301      	movs	r3, #1
 8002408:	e000      	b.n	800240c <HAL_GPIO_Init+0x244>
 800240a:	2300      	movs	r3, #0
 800240c:	697a      	ldr	r2, [r7, #20]
 800240e:	f002 0203 	and.w	r2, r2, #3
 8002412:	0092      	lsls	r2, r2, #2
 8002414:	4093      	lsls	r3, r2
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	4313      	orrs	r3, r2
 800241a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800241c:	4937      	ldr	r1, [pc, #220]	@ (80024fc <HAL_GPIO_Init+0x334>)
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	089b      	lsrs	r3, r3, #2
 8002422:	3302      	adds	r3, #2
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800242a:	4b3b      	ldr	r3, [pc, #236]	@ (8002518 <HAL_GPIO_Init+0x350>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	43db      	mvns	r3, r3
 8002434:	693a      	ldr	r2, [r7, #16]
 8002436:	4013      	ands	r3, r2
 8002438:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d003      	beq.n	800244e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	4313      	orrs	r3, r2
 800244c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800244e:	4a32      	ldr	r2, [pc, #200]	@ (8002518 <HAL_GPIO_Init+0x350>)
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002454:	4b30      	ldr	r3, [pc, #192]	@ (8002518 <HAL_GPIO_Init+0x350>)
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	43db      	mvns	r3, r3
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	4013      	ands	r3, r2
 8002462:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d003      	beq.n	8002478 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	4313      	orrs	r3, r2
 8002476:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002478:	4a27      	ldr	r2, [pc, #156]	@ (8002518 <HAL_GPIO_Init+0x350>)
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800247e:	4b26      	ldr	r3, [pc, #152]	@ (8002518 <HAL_GPIO_Init+0x350>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	43db      	mvns	r3, r3
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	4013      	ands	r3, r2
 800248c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d003      	beq.n	80024a2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	4313      	orrs	r3, r2
 80024a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024a2:	4a1d      	ldr	r2, [pc, #116]	@ (8002518 <HAL_GPIO_Init+0x350>)
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80024a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002518 <HAL_GPIO_Init+0x350>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	43db      	mvns	r3, r3
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	4013      	ands	r3, r2
 80024b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d003      	beq.n	80024cc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024cc:	4a12      	ldr	r2, [pc, #72]	@ (8002518 <HAL_GPIO_Init+0x350>)
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	3301      	adds	r3, #1
 80024d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	fa22 f303 	lsr.w	r3, r2, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f47f ae78 	bne.w	80021d8 <HAL_GPIO_Init+0x10>
  }
}
 80024e8:	bf00      	nop
 80024ea:	bf00      	nop
 80024ec:	371c      	adds	r7, #28
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	40021000 	.word	0x40021000
 80024fc:	40010000 	.word	0x40010000
 8002500:	48000400 	.word	0x48000400
 8002504:	48000800 	.word	0x48000800
 8002508:	48000c00 	.word	0x48000c00
 800250c:	48001000 	.word	0x48001000
 8002510:	48001400 	.word	0x48001400
 8002514:	48001800 	.word	0x48001800
 8002518:	40010400 	.word	0x40010400

0800251c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	460b      	mov	r3, r1
 8002526:	807b      	strh	r3, [r7, #2]
 8002528:	4613      	mov	r3, r2
 800252a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800252c:	787b      	ldrb	r3, [r7, #1]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d003      	beq.n	800253a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002532:	887a      	ldrh	r2, [r7, #2]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002538:	e002      	b.n	8002540 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800253a:	887a      	ldrh	r2, [r7, #2]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002550:	4b04      	ldr	r3, [pc, #16]	@ (8002564 <HAL_PWREx_GetVoltageRange+0x18>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002558:	4618      	mov	r0, r3
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	40007000 	.word	0x40007000

08002568 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002576:	d130      	bne.n	80025da <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002578:	4b23      	ldr	r3, [pc, #140]	@ (8002608 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002580:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002584:	d038      	beq.n	80025f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002586:	4b20      	ldr	r3, [pc, #128]	@ (8002608 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800258e:	4a1e      	ldr	r2, [pc, #120]	@ (8002608 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002590:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002594:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002596:	4b1d      	ldr	r3, [pc, #116]	@ (800260c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2232      	movs	r2, #50	@ 0x32
 800259c:	fb02 f303 	mul.w	r3, r2, r3
 80025a0:	4a1b      	ldr	r2, [pc, #108]	@ (8002610 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80025a2:	fba2 2303 	umull	r2, r3, r2, r3
 80025a6:	0c9b      	lsrs	r3, r3, #18
 80025a8:	3301      	adds	r3, #1
 80025aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025ac:	e002      	b.n	80025b4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	3b01      	subs	r3, #1
 80025b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025b4:	4b14      	ldr	r3, [pc, #80]	@ (8002608 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025b6:	695b      	ldr	r3, [r3, #20]
 80025b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025c0:	d102      	bne.n	80025c8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1f2      	bne.n	80025ae <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002608 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025ca:	695b      	ldr	r3, [r3, #20]
 80025cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025d4:	d110      	bne.n	80025f8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e00f      	b.n	80025fa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80025da:	4b0b      	ldr	r3, [pc, #44]	@ (8002608 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80025e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025e6:	d007      	beq.n	80025f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80025e8:	4b07      	ldr	r3, [pc, #28]	@ (8002608 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80025f0:	4a05      	ldr	r2, [pc, #20]	@ (8002608 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025f6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3714      	adds	r7, #20
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	40007000 	.word	0x40007000
 800260c:	20000000 	.word	0x20000000
 8002610:	431bde83 	.word	0x431bde83

08002614 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b088      	sub	sp, #32
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d101      	bne.n	8002626 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e3ca      	b.n	8002dbc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002626:	4b97      	ldr	r3, [pc, #604]	@ (8002884 <HAL_RCC_OscConfig+0x270>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f003 030c 	and.w	r3, r3, #12
 800262e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002630:	4b94      	ldr	r3, [pc, #592]	@ (8002884 <HAL_RCC_OscConfig+0x270>)
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	f003 0303 	and.w	r3, r3, #3
 8002638:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0310 	and.w	r3, r3, #16
 8002642:	2b00      	cmp	r3, #0
 8002644:	f000 80e4 	beq.w	8002810 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d007      	beq.n	800265e <HAL_RCC_OscConfig+0x4a>
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	2b0c      	cmp	r3, #12
 8002652:	f040 808b 	bne.w	800276c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	2b01      	cmp	r3, #1
 800265a:	f040 8087 	bne.w	800276c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800265e:	4b89      	ldr	r3, [pc, #548]	@ (8002884 <HAL_RCC_OscConfig+0x270>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b00      	cmp	r3, #0
 8002668:	d005      	beq.n	8002676 <HAL_RCC_OscConfig+0x62>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e3a2      	b.n	8002dbc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a1a      	ldr	r2, [r3, #32]
 800267a:	4b82      	ldr	r3, [pc, #520]	@ (8002884 <HAL_RCC_OscConfig+0x270>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0308 	and.w	r3, r3, #8
 8002682:	2b00      	cmp	r3, #0
 8002684:	d004      	beq.n	8002690 <HAL_RCC_OscConfig+0x7c>
 8002686:	4b7f      	ldr	r3, [pc, #508]	@ (8002884 <HAL_RCC_OscConfig+0x270>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800268e:	e005      	b.n	800269c <HAL_RCC_OscConfig+0x88>
 8002690:	4b7c      	ldr	r3, [pc, #496]	@ (8002884 <HAL_RCC_OscConfig+0x270>)
 8002692:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002696:	091b      	lsrs	r3, r3, #4
 8002698:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800269c:	4293      	cmp	r3, r2
 800269e:	d223      	bcs.n	80026e8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a1b      	ldr	r3, [r3, #32]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f000 fd55 	bl	8003154 <RCC_SetFlashLatencyFromMSIRange>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e383      	b.n	8002dbc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026b4:	4b73      	ldr	r3, [pc, #460]	@ (8002884 <HAL_RCC_OscConfig+0x270>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a72      	ldr	r2, [pc, #456]	@ (8002884 <HAL_RCC_OscConfig+0x270>)
 80026ba:	f043 0308 	orr.w	r3, r3, #8
 80026be:	6013      	str	r3, [r2, #0]
 80026c0:	4b70      	ldr	r3, [pc, #448]	@ (8002884 <HAL_RCC_OscConfig+0x270>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	496d      	ldr	r1, [pc, #436]	@ (8002884 <HAL_RCC_OscConfig+0x270>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026d2:	4b6c      	ldr	r3, [pc, #432]	@ (8002884 <HAL_RCC_OscConfig+0x270>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	69db      	ldr	r3, [r3, #28]
 80026de:	021b      	lsls	r3, r3, #8
 80026e0:	4968      	ldr	r1, [pc, #416]	@ (8002884 <HAL_RCC_OscConfig+0x270>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	604b      	str	r3, [r1, #4]
 80026e6:	e025      	b.n	8002734 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026e8:	4b66      	ldr	r3, [pc, #408]	@ (8002884 <HAL_RCC_OscConfig+0x270>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a65      	ldr	r2, [pc, #404]	@ (8002884 <HAL_RCC_OscConfig+0x270>)
 80026ee:	f043 0308 	orr.w	r3, r3, #8
 80026f2:	6013      	str	r3, [r2, #0]
 80026f4:	4b63      	ldr	r3, [pc, #396]	@ (8002884 <HAL_RCC_OscConfig+0x270>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a1b      	ldr	r3, [r3, #32]
 8002700:	4960      	ldr	r1, [pc, #384]	@ (8002884 <HAL_RCC_OscConfig+0x270>)
 8002702:	4313      	orrs	r3, r2
 8002704:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002706:	4b5f      	ldr	r3, [pc, #380]	@ (8002884 <HAL_RCC_OscConfig+0x270>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	021b      	lsls	r3, r3, #8
 8002714:	495b      	ldr	r1, [pc, #364]	@ (8002884 <HAL_RCC_OscConfig+0x270>)
 8002716:	4313      	orrs	r3, r2
 8002718:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d109      	bne.n	8002734 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	4618      	mov	r0, r3
 8002726:	f000 fd15 	bl	8003154 <RCC_SetFlashLatencyFromMSIRange>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e343      	b.n	8002dbc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002734:	f000 fc4a 	bl	8002fcc <HAL_RCC_GetSysClockFreq>
 8002738:	4602      	mov	r2, r0
 800273a:	4b52      	ldr	r3, [pc, #328]	@ (8002884 <HAL_RCC_OscConfig+0x270>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	091b      	lsrs	r3, r3, #4
 8002740:	f003 030f 	and.w	r3, r3, #15
 8002744:	4950      	ldr	r1, [pc, #320]	@ (8002888 <HAL_RCC_OscConfig+0x274>)
 8002746:	5ccb      	ldrb	r3, [r1, r3]
 8002748:	f003 031f 	and.w	r3, r3, #31
 800274c:	fa22 f303 	lsr.w	r3, r2, r3
 8002750:	4a4e      	ldr	r2, [pc, #312]	@ (800288c <HAL_RCC_OscConfig+0x278>)
 8002752:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002754:	4b4e      	ldr	r3, [pc, #312]	@ (8002890 <HAL_RCC_OscConfig+0x27c>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4618      	mov	r0, r3
 800275a:	f7ff fb49 	bl	8001df0 <HAL_InitTick>
 800275e:	4603      	mov	r3, r0
 8002760:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002762:	7bfb      	ldrb	r3, [r7, #15]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d052      	beq.n	800280e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002768:	7bfb      	ldrb	r3, [r7, #15]
 800276a:	e327      	b.n	8002dbc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d032      	beq.n	80027da <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002774:	4b43      	ldr	r3, [pc, #268]	@ (8002884 <HAL_RCC_OscConfig+0x270>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a42      	ldr	r2, [pc, #264]	@ (8002884 <HAL_RCC_OscConfig+0x270>)
 800277a:	f043 0301 	orr.w	r3, r3, #1
 800277e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002780:	f7ff fb86 	bl	8001e90 <HAL_GetTick>
 8002784:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002786:	e008      	b.n	800279a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002788:	f7ff fb82 	bl	8001e90 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e310      	b.n	8002dbc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800279a:	4b3a      	ldr	r3, [pc, #232]	@ (8002884 <HAL_RCC_OscConfig+0x270>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d0f0      	beq.n	8002788 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027a6:	4b37      	ldr	r3, [pc, #220]	@ (8002884 <HAL_RCC_OscConfig+0x270>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a36      	ldr	r2, [pc, #216]	@ (8002884 <HAL_RCC_OscConfig+0x270>)
 80027ac:	f043 0308 	orr.w	r3, r3, #8
 80027b0:	6013      	str	r3, [r2, #0]
 80027b2:	4b34      	ldr	r3, [pc, #208]	@ (8002884 <HAL_RCC_OscConfig+0x270>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a1b      	ldr	r3, [r3, #32]
 80027be:	4931      	ldr	r1, [pc, #196]	@ (8002884 <HAL_RCC_OscConfig+0x270>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027c4:	4b2f      	ldr	r3, [pc, #188]	@ (8002884 <HAL_RCC_OscConfig+0x270>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	69db      	ldr	r3, [r3, #28]
 80027d0:	021b      	lsls	r3, r3, #8
 80027d2:	492c      	ldr	r1, [pc, #176]	@ (8002884 <HAL_RCC_OscConfig+0x270>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	604b      	str	r3, [r1, #4]
 80027d8:	e01a      	b.n	8002810 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80027da:	4b2a      	ldr	r3, [pc, #168]	@ (8002884 <HAL_RCC_OscConfig+0x270>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a29      	ldr	r2, [pc, #164]	@ (8002884 <HAL_RCC_OscConfig+0x270>)
 80027e0:	f023 0301 	bic.w	r3, r3, #1
 80027e4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027e6:	f7ff fb53 	bl	8001e90 <HAL_GetTick>
 80027ea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027ec:	e008      	b.n	8002800 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027ee:	f7ff fb4f 	bl	8001e90 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e2dd      	b.n	8002dbc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002800:	4b20      	ldr	r3, [pc, #128]	@ (8002884 <HAL_RCC_OscConfig+0x270>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d1f0      	bne.n	80027ee <HAL_RCC_OscConfig+0x1da>
 800280c:	e000      	b.n	8002810 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800280e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0301 	and.w	r3, r3, #1
 8002818:	2b00      	cmp	r3, #0
 800281a:	d074      	beq.n	8002906 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	2b08      	cmp	r3, #8
 8002820:	d005      	beq.n	800282e <HAL_RCC_OscConfig+0x21a>
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	2b0c      	cmp	r3, #12
 8002826:	d10e      	bne.n	8002846 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	2b03      	cmp	r3, #3
 800282c:	d10b      	bne.n	8002846 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800282e:	4b15      	ldr	r3, [pc, #84]	@ (8002884 <HAL_RCC_OscConfig+0x270>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d064      	beq.n	8002904 <HAL_RCC_OscConfig+0x2f0>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d160      	bne.n	8002904 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e2ba      	b.n	8002dbc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800284e:	d106      	bne.n	800285e <HAL_RCC_OscConfig+0x24a>
 8002850:	4b0c      	ldr	r3, [pc, #48]	@ (8002884 <HAL_RCC_OscConfig+0x270>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a0b      	ldr	r2, [pc, #44]	@ (8002884 <HAL_RCC_OscConfig+0x270>)
 8002856:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800285a:	6013      	str	r3, [r2, #0]
 800285c:	e026      	b.n	80028ac <HAL_RCC_OscConfig+0x298>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002866:	d115      	bne.n	8002894 <HAL_RCC_OscConfig+0x280>
 8002868:	4b06      	ldr	r3, [pc, #24]	@ (8002884 <HAL_RCC_OscConfig+0x270>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a05      	ldr	r2, [pc, #20]	@ (8002884 <HAL_RCC_OscConfig+0x270>)
 800286e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002872:	6013      	str	r3, [r2, #0]
 8002874:	4b03      	ldr	r3, [pc, #12]	@ (8002884 <HAL_RCC_OscConfig+0x270>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a02      	ldr	r2, [pc, #8]	@ (8002884 <HAL_RCC_OscConfig+0x270>)
 800287a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800287e:	6013      	str	r3, [r2, #0]
 8002880:	e014      	b.n	80028ac <HAL_RCC_OscConfig+0x298>
 8002882:	bf00      	nop
 8002884:	40021000 	.word	0x40021000
 8002888:	0800bda0 	.word	0x0800bda0
 800288c:	20000000 	.word	0x20000000
 8002890:	20000004 	.word	0x20000004
 8002894:	4ba0      	ldr	r3, [pc, #640]	@ (8002b18 <HAL_RCC_OscConfig+0x504>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a9f      	ldr	r2, [pc, #636]	@ (8002b18 <HAL_RCC_OscConfig+0x504>)
 800289a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800289e:	6013      	str	r3, [r2, #0]
 80028a0:	4b9d      	ldr	r3, [pc, #628]	@ (8002b18 <HAL_RCC_OscConfig+0x504>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a9c      	ldr	r2, [pc, #624]	@ (8002b18 <HAL_RCC_OscConfig+0x504>)
 80028a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d013      	beq.n	80028dc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b4:	f7ff faec 	bl	8001e90 <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028bc:	f7ff fae8 	bl	8001e90 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b64      	cmp	r3, #100	@ 0x64
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e276      	b.n	8002dbc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028ce:	4b92      	ldr	r3, [pc, #584]	@ (8002b18 <HAL_RCC_OscConfig+0x504>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d0f0      	beq.n	80028bc <HAL_RCC_OscConfig+0x2a8>
 80028da:	e014      	b.n	8002906 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028dc:	f7ff fad8 	bl	8001e90 <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028e4:	f7ff fad4 	bl	8001e90 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b64      	cmp	r3, #100	@ 0x64
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e262      	b.n	8002dbc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028f6:	4b88      	ldr	r3, [pc, #544]	@ (8002b18 <HAL_RCC_OscConfig+0x504>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1f0      	bne.n	80028e4 <HAL_RCC_OscConfig+0x2d0>
 8002902:	e000      	b.n	8002906 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002904:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d060      	beq.n	80029d4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	2b04      	cmp	r3, #4
 8002916:	d005      	beq.n	8002924 <HAL_RCC_OscConfig+0x310>
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	2b0c      	cmp	r3, #12
 800291c:	d119      	bne.n	8002952 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	2b02      	cmp	r3, #2
 8002922:	d116      	bne.n	8002952 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002924:	4b7c      	ldr	r3, [pc, #496]	@ (8002b18 <HAL_RCC_OscConfig+0x504>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800292c:	2b00      	cmp	r3, #0
 800292e:	d005      	beq.n	800293c <HAL_RCC_OscConfig+0x328>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d101      	bne.n	800293c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e23f      	b.n	8002dbc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800293c:	4b76      	ldr	r3, [pc, #472]	@ (8002b18 <HAL_RCC_OscConfig+0x504>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	061b      	lsls	r3, r3, #24
 800294a:	4973      	ldr	r1, [pc, #460]	@ (8002b18 <HAL_RCC_OscConfig+0x504>)
 800294c:	4313      	orrs	r3, r2
 800294e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002950:	e040      	b.n	80029d4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d023      	beq.n	80029a2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800295a:	4b6f      	ldr	r3, [pc, #444]	@ (8002b18 <HAL_RCC_OscConfig+0x504>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a6e      	ldr	r2, [pc, #440]	@ (8002b18 <HAL_RCC_OscConfig+0x504>)
 8002960:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002964:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002966:	f7ff fa93 	bl	8001e90 <HAL_GetTick>
 800296a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800296c:	e008      	b.n	8002980 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800296e:	f7ff fa8f 	bl	8001e90 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d901      	bls.n	8002980 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e21d      	b.n	8002dbc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002980:	4b65      	ldr	r3, [pc, #404]	@ (8002b18 <HAL_RCC_OscConfig+0x504>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002988:	2b00      	cmp	r3, #0
 800298a:	d0f0      	beq.n	800296e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800298c:	4b62      	ldr	r3, [pc, #392]	@ (8002b18 <HAL_RCC_OscConfig+0x504>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	061b      	lsls	r3, r3, #24
 800299a:	495f      	ldr	r1, [pc, #380]	@ (8002b18 <HAL_RCC_OscConfig+0x504>)
 800299c:	4313      	orrs	r3, r2
 800299e:	604b      	str	r3, [r1, #4]
 80029a0:	e018      	b.n	80029d4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029a2:	4b5d      	ldr	r3, [pc, #372]	@ (8002b18 <HAL_RCC_OscConfig+0x504>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a5c      	ldr	r2, [pc, #368]	@ (8002b18 <HAL_RCC_OscConfig+0x504>)
 80029a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80029ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ae:	f7ff fa6f 	bl	8001e90 <HAL_GetTick>
 80029b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029b4:	e008      	b.n	80029c8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029b6:	f7ff fa6b 	bl	8001e90 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d901      	bls.n	80029c8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e1f9      	b.n	8002dbc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029c8:	4b53      	ldr	r3, [pc, #332]	@ (8002b18 <HAL_RCC_OscConfig+0x504>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1f0      	bne.n	80029b6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0308 	and.w	r3, r3, #8
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d03c      	beq.n	8002a5a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d01c      	beq.n	8002a22 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029e8:	4b4b      	ldr	r3, [pc, #300]	@ (8002b18 <HAL_RCC_OscConfig+0x504>)
 80029ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029ee:	4a4a      	ldr	r2, [pc, #296]	@ (8002b18 <HAL_RCC_OscConfig+0x504>)
 80029f0:	f043 0301 	orr.w	r3, r3, #1
 80029f4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f8:	f7ff fa4a 	bl	8001e90 <HAL_GetTick>
 80029fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a00:	f7ff fa46 	bl	8001e90 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e1d4      	b.n	8002dbc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a12:	4b41      	ldr	r3, [pc, #260]	@ (8002b18 <HAL_RCC_OscConfig+0x504>)
 8002a14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d0ef      	beq.n	8002a00 <HAL_RCC_OscConfig+0x3ec>
 8002a20:	e01b      	b.n	8002a5a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a22:	4b3d      	ldr	r3, [pc, #244]	@ (8002b18 <HAL_RCC_OscConfig+0x504>)
 8002a24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a28:	4a3b      	ldr	r2, [pc, #236]	@ (8002b18 <HAL_RCC_OscConfig+0x504>)
 8002a2a:	f023 0301 	bic.w	r3, r3, #1
 8002a2e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a32:	f7ff fa2d 	bl	8001e90 <HAL_GetTick>
 8002a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a38:	e008      	b.n	8002a4c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a3a:	f7ff fa29 	bl	8001e90 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d901      	bls.n	8002a4c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e1b7      	b.n	8002dbc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a4c:	4b32      	ldr	r3, [pc, #200]	@ (8002b18 <HAL_RCC_OscConfig+0x504>)
 8002a4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1ef      	bne.n	8002a3a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0304 	and.w	r3, r3, #4
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	f000 80a6 	beq.w	8002bb4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002a6c:	4b2a      	ldr	r3, [pc, #168]	@ (8002b18 <HAL_RCC_OscConfig+0x504>)
 8002a6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d10d      	bne.n	8002a94 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a78:	4b27      	ldr	r3, [pc, #156]	@ (8002b18 <HAL_RCC_OscConfig+0x504>)
 8002a7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a7c:	4a26      	ldr	r2, [pc, #152]	@ (8002b18 <HAL_RCC_OscConfig+0x504>)
 8002a7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a82:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a84:	4b24      	ldr	r3, [pc, #144]	@ (8002b18 <HAL_RCC_OscConfig+0x504>)
 8002a86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a8c:	60bb      	str	r3, [r7, #8]
 8002a8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a90:	2301      	movs	r3, #1
 8002a92:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a94:	4b21      	ldr	r3, [pc, #132]	@ (8002b1c <HAL_RCC_OscConfig+0x508>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d118      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002aa0:	4b1e      	ldr	r3, [pc, #120]	@ (8002b1c <HAL_RCC_OscConfig+0x508>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a1d      	ldr	r2, [pc, #116]	@ (8002b1c <HAL_RCC_OscConfig+0x508>)
 8002aa6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002aaa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aac:	f7ff f9f0 	bl	8001e90 <HAL_GetTick>
 8002ab0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ab4:	f7ff f9ec 	bl	8001e90 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e17a      	b.n	8002dbc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ac6:	4b15      	ldr	r3, [pc, #84]	@ (8002b1c <HAL_RCC_OscConfig+0x508>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d0f0      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d108      	bne.n	8002aec <HAL_RCC_OscConfig+0x4d8>
 8002ada:	4b0f      	ldr	r3, [pc, #60]	@ (8002b18 <HAL_RCC_OscConfig+0x504>)
 8002adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ae0:	4a0d      	ldr	r2, [pc, #52]	@ (8002b18 <HAL_RCC_OscConfig+0x504>)
 8002ae2:	f043 0301 	orr.w	r3, r3, #1
 8002ae6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002aea:	e029      	b.n	8002b40 <HAL_RCC_OscConfig+0x52c>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	2b05      	cmp	r3, #5
 8002af2:	d115      	bne.n	8002b20 <HAL_RCC_OscConfig+0x50c>
 8002af4:	4b08      	ldr	r3, [pc, #32]	@ (8002b18 <HAL_RCC_OscConfig+0x504>)
 8002af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002afa:	4a07      	ldr	r2, [pc, #28]	@ (8002b18 <HAL_RCC_OscConfig+0x504>)
 8002afc:	f043 0304 	orr.w	r3, r3, #4
 8002b00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b04:	4b04      	ldr	r3, [pc, #16]	@ (8002b18 <HAL_RCC_OscConfig+0x504>)
 8002b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b0a:	4a03      	ldr	r2, [pc, #12]	@ (8002b18 <HAL_RCC_OscConfig+0x504>)
 8002b0c:	f043 0301 	orr.w	r3, r3, #1
 8002b10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b14:	e014      	b.n	8002b40 <HAL_RCC_OscConfig+0x52c>
 8002b16:	bf00      	nop
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	40007000 	.word	0x40007000
 8002b20:	4b9c      	ldr	r3, [pc, #624]	@ (8002d94 <HAL_RCC_OscConfig+0x780>)
 8002b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b26:	4a9b      	ldr	r2, [pc, #620]	@ (8002d94 <HAL_RCC_OscConfig+0x780>)
 8002b28:	f023 0301 	bic.w	r3, r3, #1
 8002b2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b30:	4b98      	ldr	r3, [pc, #608]	@ (8002d94 <HAL_RCC_OscConfig+0x780>)
 8002b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b36:	4a97      	ldr	r2, [pc, #604]	@ (8002d94 <HAL_RCC_OscConfig+0x780>)
 8002b38:	f023 0304 	bic.w	r3, r3, #4
 8002b3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d016      	beq.n	8002b76 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b48:	f7ff f9a2 	bl	8001e90 <HAL_GetTick>
 8002b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b4e:	e00a      	b.n	8002b66 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b50:	f7ff f99e 	bl	8001e90 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e12a      	b.n	8002dbc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b66:	4b8b      	ldr	r3, [pc, #556]	@ (8002d94 <HAL_RCC_OscConfig+0x780>)
 8002b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d0ed      	beq.n	8002b50 <HAL_RCC_OscConfig+0x53c>
 8002b74:	e015      	b.n	8002ba2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b76:	f7ff f98b 	bl	8001e90 <HAL_GetTick>
 8002b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b7c:	e00a      	b.n	8002b94 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b7e:	f7ff f987 	bl	8001e90 <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d901      	bls.n	8002b94 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e113      	b.n	8002dbc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b94:	4b7f      	ldr	r3, [pc, #508]	@ (8002d94 <HAL_RCC_OscConfig+0x780>)
 8002b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1ed      	bne.n	8002b7e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ba2:	7ffb      	ldrb	r3, [r7, #31]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d105      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ba8:	4b7a      	ldr	r3, [pc, #488]	@ (8002d94 <HAL_RCC_OscConfig+0x780>)
 8002baa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bac:	4a79      	ldr	r2, [pc, #484]	@ (8002d94 <HAL_RCC_OscConfig+0x780>)
 8002bae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bb2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f000 80fe 	beq.w	8002dba <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	f040 80d0 	bne.w	8002d68 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002bc8:	4b72      	ldr	r3, [pc, #456]	@ (8002d94 <HAL_RCC_OscConfig+0x780>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	f003 0203 	and.w	r2, r3, #3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d130      	bne.n	8002c3e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be6:	3b01      	subs	r3, #1
 8002be8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d127      	bne.n	8002c3e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bf8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d11f      	bne.n	8002c3e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002c08:	2a07      	cmp	r2, #7
 8002c0a:	bf14      	ite	ne
 8002c0c:	2201      	movne	r2, #1
 8002c0e:	2200      	moveq	r2, #0
 8002c10:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d113      	bne.n	8002c3e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c20:	085b      	lsrs	r3, r3, #1
 8002c22:	3b01      	subs	r3, #1
 8002c24:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d109      	bne.n	8002c3e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c34:	085b      	lsrs	r3, r3, #1
 8002c36:	3b01      	subs	r3, #1
 8002c38:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d06e      	beq.n	8002d1c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	2b0c      	cmp	r3, #12
 8002c42:	d069      	beq.n	8002d18 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002c44:	4b53      	ldr	r3, [pc, #332]	@ (8002d94 <HAL_RCC_OscConfig+0x780>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d105      	bne.n	8002c5c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002c50:	4b50      	ldr	r3, [pc, #320]	@ (8002d94 <HAL_RCC_OscConfig+0x780>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e0ad      	b.n	8002dbc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c60:	4b4c      	ldr	r3, [pc, #304]	@ (8002d94 <HAL_RCC_OscConfig+0x780>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a4b      	ldr	r2, [pc, #300]	@ (8002d94 <HAL_RCC_OscConfig+0x780>)
 8002c66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c6a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c6c:	f7ff f910 	bl	8001e90 <HAL_GetTick>
 8002c70:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c72:	e008      	b.n	8002c86 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c74:	f7ff f90c 	bl	8001e90 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e09a      	b.n	8002dbc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c86:	4b43      	ldr	r3, [pc, #268]	@ (8002d94 <HAL_RCC_OscConfig+0x780>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d1f0      	bne.n	8002c74 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c92:	4b40      	ldr	r3, [pc, #256]	@ (8002d94 <HAL_RCC_OscConfig+0x780>)
 8002c94:	68da      	ldr	r2, [r3, #12]
 8002c96:	4b40      	ldr	r3, [pc, #256]	@ (8002d98 <HAL_RCC_OscConfig+0x784>)
 8002c98:	4013      	ands	r3, r2
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002ca2:	3a01      	subs	r2, #1
 8002ca4:	0112      	lsls	r2, r2, #4
 8002ca6:	4311      	orrs	r1, r2
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002cac:	0212      	lsls	r2, r2, #8
 8002cae:	4311      	orrs	r1, r2
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002cb4:	0852      	lsrs	r2, r2, #1
 8002cb6:	3a01      	subs	r2, #1
 8002cb8:	0552      	lsls	r2, r2, #21
 8002cba:	4311      	orrs	r1, r2
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002cc0:	0852      	lsrs	r2, r2, #1
 8002cc2:	3a01      	subs	r2, #1
 8002cc4:	0652      	lsls	r2, r2, #25
 8002cc6:	4311      	orrs	r1, r2
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002ccc:	0912      	lsrs	r2, r2, #4
 8002cce:	0452      	lsls	r2, r2, #17
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	4930      	ldr	r1, [pc, #192]	@ (8002d94 <HAL_RCC_OscConfig+0x780>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002cd8:	4b2e      	ldr	r3, [pc, #184]	@ (8002d94 <HAL_RCC_OscConfig+0x780>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a2d      	ldr	r2, [pc, #180]	@ (8002d94 <HAL_RCC_OscConfig+0x780>)
 8002cde:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ce2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ce4:	4b2b      	ldr	r3, [pc, #172]	@ (8002d94 <HAL_RCC_OscConfig+0x780>)
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	4a2a      	ldr	r2, [pc, #168]	@ (8002d94 <HAL_RCC_OscConfig+0x780>)
 8002cea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002cf0:	f7ff f8ce 	bl	8001e90 <HAL_GetTick>
 8002cf4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cf8:	f7ff f8ca 	bl	8001e90 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e058      	b.n	8002dbc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d0a:	4b22      	ldr	r3, [pc, #136]	@ (8002d94 <HAL_RCC_OscConfig+0x780>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d0f0      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d16:	e050      	b.n	8002dba <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e04f      	b.n	8002dbc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d1c:	4b1d      	ldr	r3, [pc, #116]	@ (8002d94 <HAL_RCC_OscConfig+0x780>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d148      	bne.n	8002dba <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002d28:	4b1a      	ldr	r3, [pc, #104]	@ (8002d94 <HAL_RCC_OscConfig+0x780>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a19      	ldr	r2, [pc, #100]	@ (8002d94 <HAL_RCC_OscConfig+0x780>)
 8002d2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d32:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d34:	4b17      	ldr	r3, [pc, #92]	@ (8002d94 <HAL_RCC_OscConfig+0x780>)
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	4a16      	ldr	r2, [pc, #88]	@ (8002d94 <HAL_RCC_OscConfig+0x780>)
 8002d3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d3e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d40:	f7ff f8a6 	bl	8001e90 <HAL_GetTick>
 8002d44:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d46:	e008      	b.n	8002d5a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d48:	f7ff f8a2 	bl	8001e90 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e030      	b.n	8002dbc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d5a:	4b0e      	ldr	r3, [pc, #56]	@ (8002d94 <HAL_RCC_OscConfig+0x780>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d0f0      	beq.n	8002d48 <HAL_RCC_OscConfig+0x734>
 8002d66:	e028      	b.n	8002dba <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	2b0c      	cmp	r3, #12
 8002d6c:	d023      	beq.n	8002db6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d6e:	4b09      	ldr	r3, [pc, #36]	@ (8002d94 <HAL_RCC_OscConfig+0x780>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a08      	ldr	r2, [pc, #32]	@ (8002d94 <HAL_RCC_OscConfig+0x780>)
 8002d74:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d7a:	f7ff f889 	bl	8001e90 <HAL_GetTick>
 8002d7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d80:	e00c      	b.n	8002d9c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d82:	f7ff f885 	bl	8001e90 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d905      	bls.n	8002d9c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e013      	b.n	8002dbc <HAL_RCC_OscConfig+0x7a8>
 8002d94:	40021000 	.word	0x40021000
 8002d98:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d9c:	4b09      	ldr	r3, [pc, #36]	@ (8002dc4 <HAL_RCC_OscConfig+0x7b0>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d1ec      	bne.n	8002d82 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002da8:	4b06      	ldr	r3, [pc, #24]	@ (8002dc4 <HAL_RCC_OscConfig+0x7b0>)
 8002daa:	68da      	ldr	r2, [r3, #12]
 8002dac:	4905      	ldr	r1, [pc, #20]	@ (8002dc4 <HAL_RCC_OscConfig+0x7b0>)
 8002dae:	4b06      	ldr	r3, [pc, #24]	@ (8002dc8 <HAL_RCC_OscConfig+0x7b4>)
 8002db0:	4013      	ands	r3, r2
 8002db2:	60cb      	str	r3, [r1, #12]
 8002db4:	e001      	b.n	8002dba <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e000      	b.n	8002dbc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3720      	adds	r7, #32
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	feeefffc 	.word	0xfeeefffc

08002dcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d101      	bne.n	8002de0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e0e7      	b.n	8002fb0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002de0:	4b75      	ldr	r3, [pc, #468]	@ (8002fb8 <HAL_RCC_ClockConfig+0x1ec>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0307 	and.w	r3, r3, #7
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d910      	bls.n	8002e10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dee:	4b72      	ldr	r3, [pc, #456]	@ (8002fb8 <HAL_RCC_ClockConfig+0x1ec>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f023 0207 	bic.w	r2, r3, #7
 8002df6:	4970      	ldr	r1, [pc, #448]	@ (8002fb8 <HAL_RCC_ClockConfig+0x1ec>)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dfe:	4b6e      	ldr	r3, [pc, #440]	@ (8002fb8 <HAL_RCC_ClockConfig+0x1ec>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0307 	and.w	r3, r3, #7
 8002e06:	683a      	ldr	r2, [r7, #0]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d001      	beq.n	8002e10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e0cf      	b.n	8002fb0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d010      	beq.n	8002e3e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689a      	ldr	r2, [r3, #8]
 8002e20:	4b66      	ldr	r3, [pc, #408]	@ (8002fbc <HAL_RCC_ClockConfig+0x1f0>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d908      	bls.n	8002e3e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e2c:	4b63      	ldr	r3, [pc, #396]	@ (8002fbc <HAL_RCC_ClockConfig+0x1f0>)
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	4960      	ldr	r1, [pc, #384]	@ (8002fbc <HAL_RCC_ClockConfig+0x1f0>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d04c      	beq.n	8002ee4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	2b03      	cmp	r3, #3
 8002e50:	d107      	bne.n	8002e62 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e52:	4b5a      	ldr	r3, [pc, #360]	@ (8002fbc <HAL_RCC_ClockConfig+0x1f0>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d121      	bne.n	8002ea2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e0a6      	b.n	8002fb0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d107      	bne.n	8002e7a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e6a:	4b54      	ldr	r3, [pc, #336]	@ (8002fbc <HAL_RCC_ClockConfig+0x1f0>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d115      	bne.n	8002ea2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e09a      	b.n	8002fb0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d107      	bne.n	8002e92 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e82:	4b4e      	ldr	r3, [pc, #312]	@ (8002fbc <HAL_RCC_ClockConfig+0x1f0>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d109      	bne.n	8002ea2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e08e      	b.n	8002fb0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e92:	4b4a      	ldr	r3, [pc, #296]	@ (8002fbc <HAL_RCC_ClockConfig+0x1f0>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e086      	b.n	8002fb0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ea2:	4b46      	ldr	r3, [pc, #280]	@ (8002fbc <HAL_RCC_ClockConfig+0x1f0>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f023 0203 	bic.w	r2, r3, #3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	4943      	ldr	r1, [pc, #268]	@ (8002fbc <HAL_RCC_ClockConfig+0x1f0>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002eb4:	f7fe ffec 	bl	8001e90 <HAL_GetTick>
 8002eb8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eba:	e00a      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ebc:	f7fe ffe8 	bl	8001e90 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e06e      	b.n	8002fb0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ed2:	4b3a      	ldr	r3, [pc, #232]	@ (8002fbc <HAL_RCC_ClockConfig+0x1f0>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f003 020c 	and.w	r2, r3, #12
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d1eb      	bne.n	8002ebc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0302 	and.w	r3, r3, #2
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d010      	beq.n	8002f12 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689a      	ldr	r2, [r3, #8]
 8002ef4:	4b31      	ldr	r3, [pc, #196]	@ (8002fbc <HAL_RCC_ClockConfig+0x1f0>)
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d208      	bcs.n	8002f12 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f00:	4b2e      	ldr	r3, [pc, #184]	@ (8002fbc <HAL_RCC_ClockConfig+0x1f0>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	492b      	ldr	r1, [pc, #172]	@ (8002fbc <HAL_RCC_ClockConfig+0x1f0>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f12:	4b29      	ldr	r3, [pc, #164]	@ (8002fb8 <HAL_RCC_ClockConfig+0x1ec>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0307 	and.w	r3, r3, #7
 8002f1a:	683a      	ldr	r2, [r7, #0]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d210      	bcs.n	8002f42 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f20:	4b25      	ldr	r3, [pc, #148]	@ (8002fb8 <HAL_RCC_ClockConfig+0x1ec>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f023 0207 	bic.w	r2, r3, #7
 8002f28:	4923      	ldr	r1, [pc, #140]	@ (8002fb8 <HAL_RCC_ClockConfig+0x1ec>)
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f30:	4b21      	ldr	r3, [pc, #132]	@ (8002fb8 <HAL_RCC_ClockConfig+0x1ec>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0307 	and.w	r3, r3, #7
 8002f38:	683a      	ldr	r2, [r7, #0]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d001      	beq.n	8002f42 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e036      	b.n	8002fb0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0304 	and.w	r3, r3, #4
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d008      	beq.n	8002f60 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f4e:	4b1b      	ldr	r3, [pc, #108]	@ (8002fbc <HAL_RCC_ClockConfig+0x1f0>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	4918      	ldr	r1, [pc, #96]	@ (8002fbc <HAL_RCC_ClockConfig+0x1f0>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0308 	and.w	r3, r3, #8
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d009      	beq.n	8002f80 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f6c:	4b13      	ldr	r3, [pc, #76]	@ (8002fbc <HAL_RCC_ClockConfig+0x1f0>)
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	00db      	lsls	r3, r3, #3
 8002f7a:	4910      	ldr	r1, [pc, #64]	@ (8002fbc <HAL_RCC_ClockConfig+0x1f0>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f80:	f000 f824 	bl	8002fcc <HAL_RCC_GetSysClockFreq>
 8002f84:	4602      	mov	r2, r0
 8002f86:	4b0d      	ldr	r3, [pc, #52]	@ (8002fbc <HAL_RCC_ClockConfig+0x1f0>)
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	091b      	lsrs	r3, r3, #4
 8002f8c:	f003 030f 	and.w	r3, r3, #15
 8002f90:	490b      	ldr	r1, [pc, #44]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1f4>)
 8002f92:	5ccb      	ldrb	r3, [r1, r3]
 8002f94:	f003 031f 	and.w	r3, r3, #31
 8002f98:	fa22 f303 	lsr.w	r3, r2, r3
 8002f9c:	4a09      	ldr	r2, [pc, #36]	@ (8002fc4 <HAL_RCC_ClockConfig+0x1f8>)
 8002f9e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002fa0:	4b09      	ldr	r3, [pc, #36]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1fc>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7fe ff23 	bl	8001df0 <HAL_InitTick>
 8002faa:	4603      	mov	r3, r0
 8002fac:	72fb      	strb	r3, [r7, #11]

  return status;
 8002fae:	7afb      	ldrb	r3, [r7, #11]
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3710      	adds	r7, #16
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	40022000 	.word	0x40022000
 8002fbc:	40021000 	.word	0x40021000
 8002fc0:	0800bda0 	.word	0x0800bda0
 8002fc4:	20000000 	.word	0x20000000
 8002fc8:	20000004 	.word	0x20000004

08002fcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b089      	sub	sp, #36	@ 0x24
 8002fd0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	61fb      	str	r3, [r7, #28]
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fda:	4b3e      	ldr	r3, [pc, #248]	@ (80030d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f003 030c 	and.w	r3, r3, #12
 8002fe2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fe4:	4b3b      	ldr	r3, [pc, #236]	@ (80030d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	f003 0303 	and.w	r3, r3, #3
 8002fec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d005      	beq.n	8003000 <HAL_RCC_GetSysClockFreq+0x34>
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	2b0c      	cmp	r3, #12
 8002ff8:	d121      	bne.n	800303e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d11e      	bne.n	800303e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003000:	4b34      	ldr	r3, [pc, #208]	@ (80030d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0308 	and.w	r3, r3, #8
 8003008:	2b00      	cmp	r3, #0
 800300a:	d107      	bne.n	800301c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800300c:	4b31      	ldr	r3, [pc, #196]	@ (80030d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800300e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003012:	0a1b      	lsrs	r3, r3, #8
 8003014:	f003 030f 	and.w	r3, r3, #15
 8003018:	61fb      	str	r3, [r7, #28]
 800301a:	e005      	b.n	8003028 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800301c:	4b2d      	ldr	r3, [pc, #180]	@ (80030d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	091b      	lsrs	r3, r3, #4
 8003022:	f003 030f 	and.w	r3, r3, #15
 8003026:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003028:	4a2b      	ldr	r2, [pc, #172]	@ (80030d8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003030:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d10d      	bne.n	8003054 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800303c:	e00a      	b.n	8003054 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	2b04      	cmp	r3, #4
 8003042:	d102      	bne.n	800304a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003044:	4b25      	ldr	r3, [pc, #148]	@ (80030dc <HAL_RCC_GetSysClockFreq+0x110>)
 8003046:	61bb      	str	r3, [r7, #24]
 8003048:	e004      	b.n	8003054 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	2b08      	cmp	r3, #8
 800304e:	d101      	bne.n	8003054 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003050:	4b23      	ldr	r3, [pc, #140]	@ (80030e0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003052:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	2b0c      	cmp	r3, #12
 8003058:	d134      	bne.n	80030c4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800305a:	4b1e      	ldr	r3, [pc, #120]	@ (80030d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	f003 0303 	and.w	r3, r3, #3
 8003062:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	2b02      	cmp	r3, #2
 8003068:	d003      	beq.n	8003072 <HAL_RCC_GetSysClockFreq+0xa6>
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	2b03      	cmp	r3, #3
 800306e:	d003      	beq.n	8003078 <HAL_RCC_GetSysClockFreq+0xac>
 8003070:	e005      	b.n	800307e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003072:	4b1a      	ldr	r3, [pc, #104]	@ (80030dc <HAL_RCC_GetSysClockFreq+0x110>)
 8003074:	617b      	str	r3, [r7, #20]
      break;
 8003076:	e005      	b.n	8003084 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003078:	4b19      	ldr	r3, [pc, #100]	@ (80030e0 <HAL_RCC_GetSysClockFreq+0x114>)
 800307a:	617b      	str	r3, [r7, #20]
      break;
 800307c:	e002      	b.n	8003084 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	617b      	str	r3, [r7, #20]
      break;
 8003082:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003084:	4b13      	ldr	r3, [pc, #76]	@ (80030d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	091b      	lsrs	r3, r3, #4
 800308a:	f003 0307 	and.w	r3, r3, #7
 800308e:	3301      	adds	r3, #1
 8003090:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003092:	4b10      	ldr	r3, [pc, #64]	@ (80030d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	0a1b      	lsrs	r3, r3, #8
 8003098:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800309c:	697a      	ldr	r2, [r7, #20]
 800309e:	fb03 f202 	mul.w	r2, r3, r2
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80030aa:	4b0a      	ldr	r3, [pc, #40]	@ (80030d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	0e5b      	lsrs	r3, r3, #25
 80030b0:	f003 0303 	and.w	r3, r3, #3
 80030b4:	3301      	adds	r3, #1
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80030ba:	697a      	ldr	r2, [r7, #20]
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80030c4:	69bb      	ldr	r3, [r7, #24]
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3724      	adds	r7, #36	@ 0x24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	40021000 	.word	0x40021000
 80030d8:	0800bdb8 	.word	0x0800bdb8
 80030dc:	00f42400 	.word	0x00f42400
 80030e0:	007a1200 	.word	0x007a1200

080030e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030e8:	4b03      	ldr	r3, [pc, #12]	@ (80030f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80030ea:	681b      	ldr	r3, [r3, #0]
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	20000000 	.word	0x20000000

080030fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003100:	f7ff fff0 	bl	80030e4 <HAL_RCC_GetHCLKFreq>
 8003104:	4602      	mov	r2, r0
 8003106:	4b06      	ldr	r3, [pc, #24]	@ (8003120 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	0a1b      	lsrs	r3, r3, #8
 800310c:	f003 0307 	and.w	r3, r3, #7
 8003110:	4904      	ldr	r1, [pc, #16]	@ (8003124 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003112:	5ccb      	ldrb	r3, [r1, r3]
 8003114:	f003 031f 	and.w	r3, r3, #31
 8003118:	fa22 f303 	lsr.w	r3, r2, r3
}
 800311c:	4618      	mov	r0, r3
 800311e:	bd80      	pop	{r7, pc}
 8003120:	40021000 	.word	0x40021000
 8003124:	0800bdb0 	.word	0x0800bdb0

08003128 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800312c:	f7ff ffda 	bl	80030e4 <HAL_RCC_GetHCLKFreq>
 8003130:	4602      	mov	r2, r0
 8003132:	4b06      	ldr	r3, [pc, #24]	@ (800314c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	0adb      	lsrs	r3, r3, #11
 8003138:	f003 0307 	and.w	r3, r3, #7
 800313c:	4904      	ldr	r1, [pc, #16]	@ (8003150 <HAL_RCC_GetPCLK2Freq+0x28>)
 800313e:	5ccb      	ldrb	r3, [r1, r3]
 8003140:	f003 031f 	and.w	r3, r3, #31
 8003144:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003148:	4618      	mov	r0, r3
 800314a:	bd80      	pop	{r7, pc}
 800314c:	40021000 	.word	0x40021000
 8003150:	0800bdb0 	.word	0x0800bdb0

08003154 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800315c:	2300      	movs	r3, #0
 800315e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003160:	4b2a      	ldr	r3, [pc, #168]	@ (800320c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003162:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003164:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d003      	beq.n	8003174 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800316c:	f7ff f9ee 	bl	800254c <HAL_PWREx_GetVoltageRange>
 8003170:	6178      	str	r0, [r7, #20]
 8003172:	e014      	b.n	800319e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003174:	4b25      	ldr	r3, [pc, #148]	@ (800320c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003176:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003178:	4a24      	ldr	r2, [pc, #144]	@ (800320c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800317a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800317e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003180:	4b22      	ldr	r3, [pc, #136]	@ (800320c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003182:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003184:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003188:	60fb      	str	r3, [r7, #12]
 800318a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800318c:	f7ff f9de 	bl	800254c <HAL_PWREx_GetVoltageRange>
 8003190:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003192:	4b1e      	ldr	r3, [pc, #120]	@ (800320c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003196:	4a1d      	ldr	r2, [pc, #116]	@ (800320c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003198:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800319c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031a4:	d10b      	bne.n	80031be <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2b80      	cmp	r3, #128	@ 0x80
 80031aa:	d919      	bls.n	80031e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2ba0      	cmp	r3, #160	@ 0xa0
 80031b0:	d902      	bls.n	80031b8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031b2:	2302      	movs	r3, #2
 80031b4:	613b      	str	r3, [r7, #16]
 80031b6:	e013      	b.n	80031e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031b8:	2301      	movs	r3, #1
 80031ba:	613b      	str	r3, [r7, #16]
 80031bc:	e010      	b.n	80031e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2b80      	cmp	r3, #128	@ 0x80
 80031c2:	d902      	bls.n	80031ca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80031c4:	2303      	movs	r3, #3
 80031c6:	613b      	str	r3, [r7, #16]
 80031c8:	e00a      	b.n	80031e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2b80      	cmp	r3, #128	@ 0x80
 80031ce:	d102      	bne.n	80031d6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031d0:	2302      	movs	r3, #2
 80031d2:	613b      	str	r3, [r7, #16]
 80031d4:	e004      	b.n	80031e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2b70      	cmp	r3, #112	@ 0x70
 80031da:	d101      	bne.n	80031e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031dc:	2301      	movs	r3, #1
 80031de:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80031e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003210 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f023 0207 	bic.w	r2, r3, #7
 80031e8:	4909      	ldr	r1, [pc, #36]	@ (8003210 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80031f0:	4b07      	ldr	r3, [pc, #28]	@ (8003210 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0307 	and.w	r3, r3, #7
 80031f8:	693a      	ldr	r2, [r7, #16]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d001      	beq.n	8003202 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e000      	b.n	8003204 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3718      	adds	r7, #24
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	40021000 	.word	0x40021000
 8003210:	40022000 	.word	0x40022000

08003214 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800321c:	2300      	movs	r3, #0
 800321e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003220:	2300      	movs	r3, #0
 8003222:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800322c:	2b00      	cmp	r3, #0
 800322e:	d041      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003234:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003238:	d02a      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800323a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800323e:	d824      	bhi.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003240:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003244:	d008      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003246:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800324a:	d81e      	bhi.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00a      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003250:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003254:	d010      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003256:	e018      	b.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003258:	4b86      	ldr	r3, [pc, #536]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	4a85      	ldr	r2, [pc, #532]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800325e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003262:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003264:	e015      	b.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	3304      	adds	r3, #4
 800326a:	2100      	movs	r1, #0
 800326c:	4618      	mov	r0, r3
 800326e:	f000 fabb 	bl	80037e8 <RCCEx_PLLSAI1_Config>
 8003272:	4603      	mov	r3, r0
 8003274:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003276:	e00c      	b.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	3320      	adds	r3, #32
 800327c:	2100      	movs	r1, #0
 800327e:	4618      	mov	r0, r3
 8003280:	f000 fba6 	bl	80039d0 <RCCEx_PLLSAI2_Config>
 8003284:	4603      	mov	r3, r0
 8003286:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003288:	e003      	b.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	74fb      	strb	r3, [r7, #19]
      break;
 800328e:	e000      	b.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003290:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003292:	7cfb      	ldrb	r3, [r7, #19]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d10b      	bne.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003298:	4b76      	ldr	r3, [pc, #472]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800329a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800329e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032a6:	4973      	ldr	r1, [pc, #460]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80032ae:	e001      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032b0:	7cfb      	ldrb	r3, [r7, #19]
 80032b2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d041      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032c4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80032c8:	d02a      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80032ca:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80032ce:	d824      	bhi.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80032d0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80032d4:	d008      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80032d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80032da:	d81e      	bhi.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00a      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80032e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032e4:	d010      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80032e6:	e018      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032e8:	4b62      	ldr	r3, [pc, #392]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	4a61      	ldr	r2, [pc, #388]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032f2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032f4:	e015      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	3304      	adds	r3, #4
 80032fa:	2100      	movs	r1, #0
 80032fc:	4618      	mov	r0, r3
 80032fe:	f000 fa73 	bl	80037e8 <RCCEx_PLLSAI1_Config>
 8003302:	4603      	mov	r3, r0
 8003304:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003306:	e00c      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	3320      	adds	r3, #32
 800330c:	2100      	movs	r1, #0
 800330e:	4618      	mov	r0, r3
 8003310:	f000 fb5e 	bl	80039d0 <RCCEx_PLLSAI2_Config>
 8003314:	4603      	mov	r3, r0
 8003316:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003318:	e003      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	74fb      	strb	r3, [r7, #19]
      break;
 800331e:	e000      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003320:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003322:	7cfb      	ldrb	r3, [r7, #19]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d10b      	bne.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003328:	4b52      	ldr	r3, [pc, #328]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800332a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800332e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003336:	494f      	ldr	r1, [pc, #316]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003338:	4313      	orrs	r3, r2
 800333a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800333e:	e001      	b.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003340:	7cfb      	ldrb	r3, [r7, #19]
 8003342:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800334c:	2b00      	cmp	r3, #0
 800334e:	f000 80a0 	beq.w	8003492 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003352:	2300      	movs	r3, #0
 8003354:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003356:	4b47      	ldr	r3, [pc, #284]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800335a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d101      	bne.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003362:	2301      	movs	r3, #1
 8003364:	e000      	b.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003366:	2300      	movs	r3, #0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00d      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800336c:	4b41      	ldr	r3, [pc, #260]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800336e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003370:	4a40      	ldr	r2, [pc, #256]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003372:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003376:	6593      	str	r3, [r2, #88]	@ 0x58
 8003378:	4b3e      	ldr	r3, [pc, #248]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800337a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800337c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003380:	60bb      	str	r3, [r7, #8]
 8003382:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003384:	2301      	movs	r3, #1
 8003386:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003388:	4b3b      	ldr	r3, [pc, #236]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a3a      	ldr	r2, [pc, #232]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800338e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003392:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003394:	f7fe fd7c 	bl	8001e90 <HAL_GetTick>
 8003398:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800339a:	e009      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800339c:	f7fe fd78 	bl	8001e90 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d902      	bls.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	74fb      	strb	r3, [r7, #19]
        break;
 80033ae:	e005      	b.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033b0:	4b31      	ldr	r3, [pc, #196]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d0ef      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80033bc:	7cfb      	ldrb	r3, [r7, #19]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d15c      	bne.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80033c2:	4b2c      	ldr	r3, [pc, #176]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033cc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d01f      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d019      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033e0:	4b24      	ldr	r3, [pc, #144]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033ea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033ec:	4b21      	ldr	r3, [pc, #132]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033f2:	4a20      	ldr	r2, [pc, #128]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033fc:	4b1d      	ldr	r3, [pc, #116]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003402:	4a1c      	ldr	r2, [pc, #112]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003404:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003408:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800340c:	4a19      	ldr	r2, [pc, #100]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	2b00      	cmp	r3, #0
 800341c:	d016      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800341e:	f7fe fd37 	bl	8001e90 <HAL_GetTick>
 8003422:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003424:	e00b      	b.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003426:	f7fe fd33 	bl	8001e90 <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003434:	4293      	cmp	r3, r2
 8003436:	d902      	bls.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	74fb      	strb	r3, [r7, #19]
            break;
 800343c:	e006      	b.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800343e:	4b0d      	ldr	r3, [pc, #52]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003440:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003444:	f003 0302 	and.w	r3, r3, #2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d0ec      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800344c:	7cfb      	ldrb	r3, [r7, #19]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d10c      	bne.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003452:	4b08      	ldr	r3, [pc, #32]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003454:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003458:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003462:	4904      	ldr	r1, [pc, #16]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003464:	4313      	orrs	r3, r2
 8003466:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800346a:	e009      	b.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800346c:	7cfb      	ldrb	r3, [r7, #19]
 800346e:	74bb      	strb	r3, [r7, #18]
 8003470:	e006      	b.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003472:	bf00      	nop
 8003474:	40021000 	.word	0x40021000
 8003478:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800347c:	7cfb      	ldrb	r3, [r7, #19]
 800347e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003480:	7c7b      	ldrb	r3, [r7, #17]
 8003482:	2b01      	cmp	r3, #1
 8003484:	d105      	bne.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003486:	4b9e      	ldr	r3, [pc, #632]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800348a:	4a9d      	ldr	r2, [pc, #628]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800348c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003490:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00a      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800349e:	4b98      	ldr	r3, [pc, #608]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034a4:	f023 0203 	bic.w	r2, r3, #3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ac:	4994      	ldr	r1, [pc, #592]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0302 	and.w	r3, r3, #2
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d00a      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034c0:	4b8f      	ldr	r3, [pc, #572]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034c6:	f023 020c 	bic.w	r2, r3, #12
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034ce:	498c      	ldr	r1, [pc, #560]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0304 	and.w	r3, r3, #4
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00a      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034e2:	4b87      	ldr	r3, [pc, #540]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034e8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f0:	4983      	ldr	r1, [pc, #524]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0308 	and.w	r3, r3, #8
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00a      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003504:	4b7e      	ldr	r3, [pc, #504]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003506:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800350a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003512:	497b      	ldr	r1, [pc, #492]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003514:	4313      	orrs	r3, r2
 8003516:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0310 	and.w	r3, r3, #16
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00a      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003526:	4b76      	ldr	r3, [pc, #472]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003528:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800352c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003534:	4972      	ldr	r1, [pc, #456]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003536:	4313      	orrs	r3, r2
 8003538:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0320 	and.w	r3, r3, #32
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00a      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003548:	4b6d      	ldr	r3, [pc, #436]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800354a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800354e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003556:	496a      	ldr	r1, [pc, #424]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003558:	4313      	orrs	r3, r2
 800355a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00a      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800356a:	4b65      	ldr	r3, [pc, #404]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800356c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003570:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003578:	4961      	ldr	r1, [pc, #388]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800357a:	4313      	orrs	r3, r2
 800357c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003588:	2b00      	cmp	r3, #0
 800358a:	d00a      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800358c:	4b5c      	ldr	r3, [pc, #368]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800358e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003592:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800359a:	4959      	ldr	r1, [pc, #356]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800359c:	4313      	orrs	r3, r2
 800359e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00a      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035ae:	4b54      	ldr	r3, [pc, #336]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035b4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035bc:	4950      	ldr	r1, [pc, #320]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00a      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035d0:	4b4b      	ldr	r3, [pc, #300]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035d6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035de:	4948      	ldr	r1, [pc, #288]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00a      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035f2:	4b43      	ldr	r3, [pc, #268]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035f8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003600:	493f      	ldr	r1, [pc, #252]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003602:	4313      	orrs	r3, r2
 8003604:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d028      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003614:	4b3a      	ldr	r3, [pc, #232]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003616:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800361a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003622:	4937      	ldr	r1, [pc, #220]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003624:	4313      	orrs	r3, r2
 8003626:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800362e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003632:	d106      	bne.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003634:	4b32      	ldr	r3, [pc, #200]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	4a31      	ldr	r2, [pc, #196]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800363a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800363e:	60d3      	str	r3, [r2, #12]
 8003640:	e011      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003646:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800364a:	d10c      	bne.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	3304      	adds	r3, #4
 8003650:	2101      	movs	r1, #1
 8003652:	4618      	mov	r0, r3
 8003654:	f000 f8c8 	bl	80037e8 <RCCEx_PLLSAI1_Config>
 8003658:	4603      	mov	r3, r0
 800365a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800365c:	7cfb      	ldrb	r3, [r7, #19]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003662:	7cfb      	ldrb	r3, [r7, #19]
 8003664:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d028      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003672:	4b23      	ldr	r3, [pc, #140]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003674:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003678:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003680:	491f      	ldr	r1, [pc, #124]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003682:	4313      	orrs	r3, r2
 8003684:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800368c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003690:	d106      	bne.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003692:	4b1b      	ldr	r3, [pc, #108]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	4a1a      	ldr	r2, [pc, #104]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003698:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800369c:	60d3      	str	r3, [r2, #12]
 800369e:	e011      	b.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036a4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80036a8:	d10c      	bne.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	3304      	adds	r3, #4
 80036ae:	2101      	movs	r1, #1
 80036b0:	4618      	mov	r0, r3
 80036b2:	f000 f899 	bl	80037e8 <RCCEx_PLLSAI1_Config>
 80036b6:	4603      	mov	r3, r0
 80036b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036ba:	7cfb      	ldrb	r3, [r7, #19]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d001      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80036c0:	7cfb      	ldrb	r3, [r7, #19]
 80036c2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d02b      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036d6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036de:	4908      	ldr	r1, [pc, #32]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80036ee:	d109      	bne.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036f0:	4b03      	ldr	r3, [pc, #12]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	4a02      	ldr	r2, [pc, #8]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80036fa:	60d3      	str	r3, [r2, #12]
 80036fc:	e014      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80036fe:	bf00      	nop
 8003700:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003708:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800370c:	d10c      	bne.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	3304      	adds	r3, #4
 8003712:	2101      	movs	r1, #1
 8003714:	4618      	mov	r0, r3
 8003716:	f000 f867 	bl	80037e8 <RCCEx_PLLSAI1_Config>
 800371a:	4603      	mov	r3, r0
 800371c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800371e:	7cfb      	ldrb	r3, [r7, #19]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d001      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003724:	7cfb      	ldrb	r3, [r7, #19]
 8003726:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d02f      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003734:	4b2b      	ldr	r3, [pc, #172]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003736:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800373a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003742:	4928      	ldr	r1, [pc, #160]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003744:	4313      	orrs	r3, r2
 8003746:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800374e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003752:	d10d      	bne.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	3304      	adds	r3, #4
 8003758:	2102      	movs	r1, #2
 800375a:	4618      	mov	r0, r3
 800375c:	f000 f844 	bl	80037e8 <RCCEx_PLLSAI1_Config>
 8003760:	4603      	mov	r3, r0
 8003762:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003764:	7cfb      	ldrb	r3, [r7, #19]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d014      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800376a:	7cfb      	ldrb	r3, [r7, #19]
 800376c:	74bb      	strb	r3, [r7, #18]
 800376e:	e011      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003774:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003778:	d10c      	bne.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	3320      	adds	r3, #32
 800377e:	2102      	movs	r1, #2
 8003780:	4618      	mov	r0, r3
 8003782:	f000 f925 	bl	80039d0 <RCCEx_PLLSAI2_Config>
 8003786:	4603      	mov	r3, r0
 8003788:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800378a:	7cfb      	ldrb	r3, [r7, #19]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d001      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003790:	7cfb      	ldrb	r3, [r7, #19]
 8003792:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d00a      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80037a0:	4b10      	ldr	r3, [pc, #64]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037a6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037ae:	490d      	ldr	r1, [pc, #52]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d00b      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80037c2:	4b08      	ldr	r3, [pc, #32]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037c8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037d2:	4904      	ldr	r1, [pc, #16]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80037da:	7cbb      	ldrb	r3, [r7, #18]
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3718      	adds	r7, #24
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	40021000 	.word	0x40021000

080037e8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037f2:	2300      	movs	r3, #0
 80037f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037f6:	4b75      	ldr	r3, [pc, #468]	@ (80039cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	f003 0303 	and.w	r3, r3, #3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d018      	beq.n	8003834 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003802:	4b72      	ldr	r3, [pc, #456]	@ (80039cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	f003 0203 	and.w	r2, r3, #3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	429a      	cmp	r2, r3
 8003810:	d10d      	bne.n	800382e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
       ||
 8003816:	2b00      	cmp	r3, #0
 8003818:	d009      	beq.n	800382e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800381a:	4b6c      	ldr	r3, [pc, #432]	@ (80039cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	091b      	lsrs	r3, r3, #4
 8003820:	f003 0307 	and.w	r3, r3, #7
 8003824:	1c5a      	adds	r2, r3, #1
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
       ||
 800382a:	429a      	cmp	r2, r3
 800382c:	d047      	beq.n	80038be <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	73fb      	strb	r3, [r7, #15]
 8003832:	e044      	b.n	80038be <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2b03      	cmp	r3, #3
 800383a:	d018      	beq.n	800386e <RCCEx_PLLSAI1_Config+0x86>
 800383c:	2b03      	cmp	r3, #3
 800383e:	d825      	bhi.n	800388c <RCCEx_PLLSAI1_Config+0xa4>
 8003840:	2b01      	cmp	r3, #1
 8003842:	d002      	beq.n	800384a <RCCEx_PLLSAI1_Config+0x62>
 8003844:	2b02      	cmp	r3, #2
 8003846:	d009      	beq.n	800385c <RCCEx_PLLSAI1_Config+0x74>
 8003848:	e020      	b.n	800388c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800384a:	4b60      	ldr	r3, [pc, #384]	@ (80039cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d11d      	bne.n	8003892 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800385a:	e01a      	b.n	8003892 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800385c:	4b5b      	ldr	r3, [pc, #364]	@ (80039cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003864:	2b00      	cmp	r3, #0
 8003866:	d116      	bne.n	8003896 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800386c:	e013      	b.n	8003896 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800386e:	4b57      	ldr	r3, [pc, #348]	@ (80039cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d10f      	bne.n	800389a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800387a:	4b54      	ldr	r3, [pc, #336]	@ (80039cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d109      	bne.n	800389a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800388a:	e006      	b.n	800389a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	73fb      	strb	r3, [r7, #15]
      break;
 8003890:	e004      	b.n	800389c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003892:	bf00      	nop
 8003894:	e002      	b.n	800389c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003896:	bf00      	nop
 8003898:	e000      	b.n	800389c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800389a:	bf00      	nop
    }

    if(status == HAL_OK)
 800389c:	7bfb      	ldrb	r3, [r7, #15]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10d      	bne.n	80038be <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80038a2:	4b4a      	ldr	r3, [pc, #296]	@ (80039cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6819      	ldr	r1, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	3b01      	subs	r3, #1
 80038b4:	011b      	lsls	r3, r3, #4
 80038b6:	430b      	orrs	r3, r1
 80038b8:	4944      	ldr	r1, [pc, #272]	@ (80039cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80038be:	7bfb      	ldrb	r3, [r7, #15]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d17d      	bne.n	80039c0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80038c4:	4b41      	ldr	r3, [pc, #260]	@ (80039cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a40      	ldr	r2, [pc, #256]	@ (80039cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80038ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038d0:	f7fe fade 	bl	8001e90 <HAL_GetTick>
 80038d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038d6:	e009      	b.n	80038ec <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038d8:	f7fe fada 	bl	8001e90 <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d902      	bls.n	80038ec <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	73fb      	strb	r3, [r7, #15]
        break;
 80038ea:	e005      	b.n	80038f8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038ec:	4b37      	ldr	r3, [pc, #220]	@ (80039cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d1ef      	bne.n	80038d8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80038f8:	7bfb      	ldrb	r3, [r7, #15]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d160      	bne.n	80039c0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d111      	bne.n	8003928 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003904:	4b31      	ldr	r3, [pc, #196]	@ (80039cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800390c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	6892      	ldr	r2, [r2, #8]
 8003914:	0211      	lsls	r1, r2, #8
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	68d2      	ldr	r2, [r2, #12]
 800391a:	0912      	lsrs	r2, r2, #4
 800391c:	0452      	lsls	r2, r2, #17
 800391e:	430a      	orrs	r2, r1
 8003920:	492a      	ldr	r1, [pc, #168]	@ (80039cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003922:	4313      	orrs	r3, r2
 8003924:	610b      	str	r3, [r1, #16]
 8003926:	e027      	b.n	8003978 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	2b01      	cmp	r3, #1
 800392c:	d112      	bne.n	8003954 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800392e:	4b27      	ldr	r3, [pc, #156]	@ (80039cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003936:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	6892      	ldr	r2, [r2, #8]
 800393e:	0211      	lsls	r1, r2, #8
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	6912      	ldr	r2, [r2, #16]
 8003944:	0852      	lsrs	r2, r2, #1
 8003946:	3a01      	subs	r2, #1
 8003948:	0552      	lsls	r2, r2, #21
 800394a:	430a      	orrs	r2, r1
 800394c:	491f      	ldr	r1, [pc, #124]	@ (80039cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800394e:	4313      	orrs	r3, r2
 8003950:	610b      	str	r3, [r1, #16]
 8003952:	e011      	b.n	8003978 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003954:	4b1d      	ldr	r3, [pc, #116]	@ (80039cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003956:	691b      	ldr	r3, [r3, #16]
 8003958:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800395c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	6892      	ldr	r2, [r2, #8]
 8003964:	0211      	lsls	r1, r2, #8
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	6952      	ldr	r2, [r2, #20]
 800396a:	0852      	lsrs	r2, r2, #1
 800396c:	3a01      	subs	r2, #1
 800396e:	0652      	lsls	r2, r2, #25
 8003970:	430a      	orrs	r2, r1
 8003972:	4916      	ldr	r1, [pc, #88]	@ (80039cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003974:	4313      	orrs	r3, r2
 8003976:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003978:	4b14      	ldr	r3, [pc, #80]	@ (80039cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a13      	ldr	r2, [pc, #76]	@ (80039cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800397e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003982:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003984:	f7fe fa84 	bl	8001e90 <HAL_GetTick>
 8003988:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800398a:	e009      	b.n	80039a0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800398c:	f7fe fa80 	bl	8001e90 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b02      	cmp	r3, #2
 8003998:	d902      	bls.n	80039a0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	73fb      	strb	r3, [r7, #15]
          break;
 800399e:	e005      	b.n	80039ac <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039a0:	4b0a      	ldr	r3, [pc, #40]	@ (80039cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d0ef      	beq.n	800398c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80039ac:	7bfb      	ldrb	r3, [r7, #15]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d106      	bne.n	80039c0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80039b2:	4b06      	ldr	r3, [pc, #24]	@ (80039cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80039b4:	691a      	ldr	r2, [r3, #16]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	4904      	ldr	r1, [pc, #16]	@ (80039cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80039c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	40021000 	.word	0x40021000

080039d0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039da:	2300      	movs	r3, #0
 80039dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80039de:	4b6a      	ldr	r3, [pc, #424]	@ (8003b88 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	f003 0303 	and.w	r3, r3, #3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d018      	beq.n	8003a1c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80039ea:	4b67      	ldr	r3, [pc, #412]	@ (8003b88 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	f003 0203 	and.w	r2, r3, #3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d10d      	bne.n	8003a16 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
       ||
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d009      	beq.n	8003a16 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003a02:	4b61      	ldr	r3, [pc, #388]	@ (8003b88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	091b      	lsrs	r3, r3, #4
 8003a08:	f003 0307 	and.w	r3, r3, #7
 8003a0c:	1c5a      	adds	r2, r3, #1
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
       ||
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d047      	beq.n	8003aa6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	73fb      	strb	r3, [r7, #15]
 8003a1a:	e044      	b.n	8003aa6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2b03      	cmp	r3, #3
 8003a22:	d018      	beq.n	8003a56 <RCCEx_PLLSAI2_Config+0x86>
 8003a24:	2b03      	cmp	r3, #3
 8003a26:	d825      	bhi.n	8003a74 <RCCEx_PLLSAI2_Config+0xa4>
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d002      	beq.n	8003a32 <RCCEx_PLLSAI2_Config+0x62>
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d009      	beq.n	8003a44 <RCCEx_PLLSAI2_Config+0x74>
 8003a30:	e020      	b.n	8003a74 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a32:	4b55      	ldr	r3, [pc, #340]	@ (8003b88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d11d      	bne.n	8003a7a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a42:	e01a      	b.n	8003a7a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a44:	4b50      	ldr	r3, [pc, #320]	@ (8003b88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d116      	bne.n	8003a7e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a54:	e013      	b.n	8003a7e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a56:	4b4c      	ldr	r3, [pc, #304]	@ (8003b88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10f      	bne.n	8003a82 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a62:	4b49      	ldr	r3, [pc, #292]	@ (8003b88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d109      	bne.n	8003a82 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a72:	e006      	b.n	8003a82 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	73fb      	strb	r3, [r7, #15]
      break;
 8003a78:	e004      	b.n	8003a84 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a7a:	bf00      	nop
 8003a7c:	e002      	b.n	8003a84 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a7e:	bf00      	nop
 8003a80:	e000      	b.n	8003a84 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a82:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a84:	7bfb      	ldrb	r3, [r7, #15]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d10d      	bne.n	8003aa6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a8a:	4b3f      	ldr	r3, [pc, #252]	@ (8003b88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6819      	ldr	r1, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	011b      	lsls	r3, r3, #4
 8003a9e:	430b      	orrs	r3, r1
 8003aa0:	4939      	ldr	r1, [pc, #228]	@ (8003b88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003aa6:	7bfb      	ldrb	r3, [r7, #15]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d167      	bne.n	8003b7c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003aac:	4b36      	ldr	r3, [pc, #216]	@ (8003b88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a35      	ldr	r2, [pc, #212]	@ (8003b88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ab2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ab6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ab8:	f7fe f9ea 	bl	8001e90 <HAL_GetTick>
 8003abc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003abe:	e009      	b.n	8003ad4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ac0:	f7fe f9e6 	bl	8001e90 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d902      	bls.n	8003ad4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	73fb      	strb	r3, [r7, #15]
        break;
 8003ad2:	e005      	b.n	8003ae0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ad4:	4b2c      	ldr	r3, [pc, #176]	@ (8003b88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1ef      	bne.n	8003ac0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ae0:	7bfb      	ldrb	r3, [r7, #15]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d14a      	bne.n	8003b7c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d111      	bne.n	8003b10 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003aec:	4b26      	ldr	r3, [pc, #152]	@ (8003b88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aee:	695b      	ldr	r3, [r3, #20]
 8003af0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003af4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	6892      	ldr	r2, [r2, #8]
 8003afc:	0211      	lsls	r1, r2, #8
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	68d2      	ldr	r2, [r2, #12]
 8003b02:	0912      	lsrs	r2, r2, #4
 8003b04:	0452      	lsls	r2, r2, #17
 8003b06:	430a      	orrs	r2, r1
 8003b08:	491f      	ldr	r1, [pc, #124]	@ (8003b88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	614b      	str	r3, [r1, #20]
 8003b0e:	e011      	b.n	8003b34 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b10:	4b1d      	ldr	r3, [pc, #116]	@ (8003b88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b12:	695b      	ldr	r3, [r3, #20]
 8003b14:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003b18:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	6892      	ldr	r2, [r2, #8]
 8003b20:	0211      	lsls	r1, r2, #8
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	6912      	ldr	r2, [r2, #16]
 8003b26:	0852      	lsrs	r2, r2, #1
 8003b28:	3a01      	subs	r2, #1
 8003b2a:	0652      	lsls	r2, r2, #25
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	4916      	ldr	r1, [pc, #88]	@ (8003b88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003b34:	4b14      	ldr	r3, [pc, #80]	@ (8003b88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a13      	ldr	r2, [pc, #76]	@ (8003b88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b3e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b40:	f7fe f9a6 	bl	8001e90 <HAL_GetTick>
 8003b44:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b46:	e009      	b.n	8003b5c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b48:	f7fe f9a2 	bl	8001e90 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d902      	bls.n	8003b5c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	73fb      	strb	r3, [r7, #15]
          break;
 8003b5a:	e005      	b.n	8003b68 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8003b88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d0ef      	beq.n	8003b48 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003b68:	7bfb      	ldrb	r3, [r7, #15]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d106      	bne.n	8003b7c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003b6e:	4b06      	ldr	r3, [pc, #24]	@ (8003b88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b70:	695a      	ldr	r2, [r3, #20]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	4904      	ldr	r1, [pc, #16]	@ (8003b88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3710      	adds	r7, #16
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	40021000 	.word	0x40021000

08003b8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e095      	b.n	8003cca <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d108      	bne.n	8003bb8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003bae:	d009      	beq.n	8003bc4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	61da      	str	r2, [r3, #28]
 8003bb6:	e005      	b.n	8003bc4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d106      	bne.n	8003be4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f7fd fee4 	bl	80019ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2202      	movs	r2, #2
 8003be8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003bfa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003c04:	d902      	bls.n	8003c0c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003c06:	2300      	movs	r3, #0
 8003c08:	60fb      	str	r3, [r7, #12]
 8003c0a:	e002      	b.n	8003c12 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003c0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003c10:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003c1a:	d007      	beq.n	8003c2c <HAL_SPI_Init+0xa0>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003c24:	d002      	beq.n	8003c2c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003c3c:	431a      	orrs	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	431a      	orrs	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	695b      	ldr	r3, [r3, #20]
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	431a      	orrs	r2, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c5a:	431a      	orrs	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	69db      	ldr	r3, [r3, #28]
 8003c60:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c64:	431a      	orrs	r2, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a1b      	ldr	r3, [r3, #32]
 8003c6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c6e:	ea42 0103 	orr.w	r1, r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c76:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	0c1b      	lsrs	r3, r3, #16
 8003c88:	f003 0204 	and.w	r2, r3, #4
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c90:	f003 0310 	and.w	r3, r3, #16
 8003c94:	431a      	orrs	r2, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c9a:	f003 0308 	and.w	r3, r3, #8
 8003c9e:	431a      	orrs	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003ca8:	ea42 0103 	orr.w	r1, r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3710      	adds	r7, #16
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cd2:	b580      	push	{r7, lr}
 8003cd4:	b088      	sub	sp, #32
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	60f8      	str	r0, [r7, #12]
 8003cda:	60b9      	str	r1, [r7, #8]
 8003cdc:	603b      	str	r3, [r7, #0]
 8003cde:	4613      	mov	r3, r2
 8003ce0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d101      	bne.n	8003cf4 <HAL_SPI_Transmit+0x22>
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	e15f      	b.n	8003fb4 <HAL_SPI_Transmit+0x2e2>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003cfc:	f7fe f8c8 	bl	8001e90 <HAL_GetTick>
 8003d00:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003d02:	88fb      	ldrh	r3, [r7, #6]
 8003d04:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d002      	beq.n	8003d18 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003d12:	2302      	movs	r3, #2
 8003d14:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d16:	e148      	b.n	8003faa <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d002      	beq.n	8003d24 <HAL_SPI_Transmit+0x52>
 8003d1e:	88fb      	ldrh	r3, [r7, #6]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d102      	bne.n	8003d2a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d28:	e13f      	b.n	8003faa <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2203      	movs	r2, #3
 8003d2e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	68ba      	ldr	r2, [r7, #8]
 8003d3c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	88fa      	ldrh	r2, [r7, #6]
 8003d42:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	88fa      	ldrh	r2, [r7, #6]
 8003d48:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d74:	d10f      	bne.n	8003d96 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d84:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d94:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003da0:	2b40      	cmp	r3, #64	@ 0x40
 8003da2:	d007      	beq.n	8003db4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003db2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003dbc:	d94f      	bls.n	8003e5e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d002      	beq.n	8003dcc <HAL_SPI_Transmit+0xfa>
 8003dc6:	8afb      	ldrh	r3, [r7, #22]
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d142      	bne.n	8003e52 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dd0:	881a      	ldrh	r2, [r3, #0]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ddc:	1c9a      	adds	r2, r3, #2
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	3b01      	subs	r3, #1
 8003dea:	b29a      	uxth	r2, r3
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003df0:	e02f      	b.n	8003e52 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f003 0302 	and.w	r3, r3, #2
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d112      	bne.n	8003e26 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e04:	881a      	ldrh	r2, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e10:	1c9a      	adds	r2, r3, #2
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003e24:	e015      	b.n	8003e52 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e26:	f7fe f833 	bl	8001e90 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	683a      	ldr	r2, [r7, #0]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d803      	bhi.n	8003e3e <HAL_SPI_Transmit+0x16c>
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e3c:	d102      	bne.n	8003e44 <HAL_SPI_Transmit+0x172>
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d106      	bne.n	8003e52 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003e50:	e0ab      	b.n	8003faa <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1ca      	bne.n	8003df2 <HAL_SPI_Transmit+0x120>
 8003e5c:	e080      	b.n	8003f60 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d002      	beq.n	8003e6c <HAL_SPI_Transmit+0x19a>
 8003e66:	8afb      	ldrh	r3, [r7, #22]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d174      	bne.n	8003f56 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d912      	bls.n	8003e9c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e7a:	881a      	ldrh	r2, [r3, #0]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e86:	1c9a      	adds	r2, r3, #2
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	3b02      	subs	r3, #2
 8003e94:	b29a      	uxth	r2, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003e9a:	e05c      	b.n	8003f56 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	330c      	adds	r3, #12
 8003ea6:	7812      	ldrb	r2, [r2, #0]
 8003ea8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eae:	1c5a      	adds	r2, r3, #1
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	b29a      	uxth	r2, r3
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003ec2:	e048      	b.n	8003f56 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d12b      	bne.n	8003f2a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d912      	bls.n	8003f02 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ee0:	881a      	ldrh	r2, [r3, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eec:	1c9a      	adds	r2, r3, #2
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	3b02      	subs	r3, #2
 8003efa:	b29a      	uxth	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003f00:	e029      	b.n	8003f56 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	330c      	adds	r3, #12
 8003f0c:	7812      	ldrb	r2, [r2, #0]
 8003f0e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f14:	1c5a      	adds	r2, r3, #1
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	3b01      	subs	r3, #1
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003f28:	e015      	b.n	8003f56 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f2a:	f7fd ffb1 	bl	8001e90 <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	683a      	ldr	r2, [r7, #0]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d803      	bhi.n	8003f42 <HAL_SPI_Transmit+0x270>
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f40:	d102      	bne.n	8003f48 <HAL_SPI_Transmit+0x276>
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d106      	bne.n	8003f56 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003f54:	e029      	b.n	8003faa <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d1b1      	bne.n	8003ec4 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f60:	69ba      	ldr	r2, [r7, #24]
 8003f62:	6839      	ldr	r1, [r7, #0]
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f000 f947 	bl	80041f8 <SPI_EndRxTxTransaction>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d002      	beq.n	8003f76 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2220      	movs	r2, #32
 8003f74:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d10a      	bne.n	8003f94 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f7e:	2300      	movs	r3, #0
 8003f80:	613b      	str	r3, [r7, #16]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	613b      	str	r3, [r7, #16]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	613b      	str	r3, [r7, #16]
 8003f92:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d002      	beq.n	8003fa2 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	77fb      	strb	r3, [r7, #31]
 8003fa0:	e003      	b.n	8003faa <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003fb2:	7ffb      	ldrb	r3, [r7, #31]
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3720      	adds	r7, #32
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b088      	sub	sp, #32
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	603b      	str	r3, [r7, #0]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003fcc:	f7fd ff60 	bl	8001e90 <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fd4:	1a9b      	subs	r3, r3, r2
 8003fd6:	683a      	ldr	r2, [r7, #0]
 8003fd8:	4413      	add	r3, r2
 8003fda:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003fdc:	f7fd ff58 	bl	8001e90 <HAL_GetTick>
 8003fe0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003fe2:	4b39      	ldr	r3, [pc, #228]	@ (80040c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	015b      	lsls	r3, r3, #5
 8003fe8:	0d1b      	lsrs	r3, r3, #20
 8003fea:	69fa      	ldr	r2, [r7, #28]
 8003fec:	fb02 f303 	mul.w	r3, r2, r3
 8003ff0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ff2:	e054      	b.n	800409e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ffa:	d050      	beq.n	800409e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ffc:	f7fd ff48 	bl	8001e90 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	69fa      	ldr	r2, [r7, #28]
 8004008:	429a      	cmp	r2, r3
 800400a:	d902      	bls.n	8004012 <SPI_WaitFlagStateUntilTimeout+0x56>
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d13d      	bne.n	800408e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	685a      	ldr	r2, [r3, #4]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004020:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800402a:	d111      	bne.n	8004050 <SPI_WaitFlagStateUntilTimeout+0x94>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004034:	d004      	beq.n	8004040 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800403e:	d107      	bne.n	8004050 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800404e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004054:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004058:	d10f      	bne.n	800407a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004068:	601a      	str	r2, [r3, #0]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004078:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2201      	movs	r2, #1
 800407e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e017      	b.n	80040be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d101      	bne.n	8004098 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004094:	2300      	movs	r3, #0
 8004096:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	3b01      	subs	r3, #1
 800409c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	689a      	ldr	r2, [r3, #8]
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	4013      	ands	r3, r2
 80040a8:	68ba      	ldr	r2, [r7, #8]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	bf0c      	ite	eq
 80040ae:	2301      	moveq	r3, #1
 80040b0:	2300      	movne	r3, #0
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	461a      	mov	r2, r3
 80040b6:	79fb      	ldrb	r3, [r7, #7]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d19b      	bne.n	8003ff4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3720      	adds	r7, #32
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	20000000 	.word	0x20000000

080040cc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b08a      	sub	sp, #40	@ 0x28
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]
 80040d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80040da:	2300      	movs	r3, #0
 80040dc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80040de:	f7fd fed7 	bl	8001e90 <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040e6:	1a9b      	subs	r3, r3, r2
 80040e8:	683a      	ldr	r2, [r7, #0]
 80040ea:	4413      	add	r3, r2
 80040ec:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80040ee:	f7fd fecf 	bl	8001e90 <HAL_GetTick>
 80040f2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	330c      	adds	r3, #12
 80040fa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80040fc:	4b3d      	ldr	r3, [pc, #244]	@ (80041f4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	4613      	mov	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4413      	add	r3, r2
 8004106:	00da      	lsls	r2, r3, #3
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	0d1b      	lsrs	r3, r3, #20
 800410c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800410e:	fb02 f303 	mul.w	r3, r2, r3
 8004112:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004114:	e060      	b.n	80041d8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800411c:	d107      	bne.n	800412e <SPI_WaitFifoStateUntilTimeout+0x62>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d104      	bne.n	800412e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	b2db      	uxtb	r3, r3
 800412a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800412c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004134:	d050      	beq.n	80041d8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004136:	f7fd feab 	bl	8001e90 <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	6a3b      	ldr	r3, [r7, #32]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004142:	429a      	cmp	r2, r3
 8004144:	d902      	bls.n	800414c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004148:	2b00      	cmp	r3, #0
 800414a:	d13d      	bne.n	80041c8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	685a      	ldr	r2, [r3, #4]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800415a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004164:	d111      	bne.n	800418a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800416e:	d004      	beq.n	800417a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004178:	d107      	bne.n	800418a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004188:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800418e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004192:	d10f      	bne.n	80041b4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80041a2:	601a      	str	r2, [r3, #0]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80041b2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e010      	b.n	80041ea <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80041ce:	2300      	movs	r3, #0
 80041d0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	3b01      	subs	r3, #1
 80041d6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	689a      	ldr	r2, [r3, #8]
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	4013      	ands	r3, r2
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d196      	bne.n	8004116 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3728      	adds	r7, #40	@ 0x28
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	20000000 	.word	0x20000000

080041f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b086      	sub	sp, #24
 80041fc:	af02      	add	r7, sp, #8
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	9300      	str	r3, [sp, #0]
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	2200      	movs	r2, #0
 800420c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004210:	68f8      	ldr	r0, [r7, #12]
 8004212:	f7ff ff5b 	bl	80040cc <SPI_WaitFifoStateUntilTimeout>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d007      	beq.n	800422c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004220:	f043 0220 	orr.w	r2, r3, #32
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e027      	b.n	800427c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	9300      	str	r3, [sp, #0]
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	2200      	movs	r2, #0
 8004234:	2180      	movs	r1, #128	@ 0x80
 8004236:	68f8      	ldr	r0, [r7, #12]
 8004238:	f7ff fec0 	bl	8003fbc <SPI_WaitFlagStateUntilTimeout>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d007      	beq.n	8004252 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004246:	f043 0220 	orr.w	r2, r3, #32
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e014      	b.n	800427c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	9300      	str	r3, [sp, #0]
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	2200      	movs	r2, #0
 800425a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800425e:	68f8      	ldr	r0, [r7, #12]
 8004260:	f7ff ff34 	bl	80040cc <SPI_WaitFifoStateUntilTimeout>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d007      	beq.n	800427a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800426e:	f043 0220 	orr.w	r2, r3, #32
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e000      	b.n	800427c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	3710      	adds	r7, #16
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e040      	b.n	8004318 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800429a:	2b00      	cmp	r3, #0
 800429c:	d106      	bne.n	80042ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f7fd fbe2 	bl	8001a70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2224      	movs	r2, #36	@ 0x24
 80042b0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f022 0201 	bic.w	r2, r2, #1
 80042c0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d002      	beq.n	80042d0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 fe8a 	bl	8004fe4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 fbcf 	bl	8004a74 <UART_SetConfig>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d101      	bne.n	80042e0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e01b      	b.n	8004318 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	685a      	ldr	r2, [r3, #4]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80042ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	689a      	ldr	r2, [r3, #8]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80042fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f042 0201 	orr.w	r2, r2, #1
 800430e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f000 ff09 	bl	8005128 <UART_CheckIdleState>
 8004316:	4603      	mov	r3, r0
}
 8004318:	4618      	mov	r0, r3
 800431a:	3708      	adds	r7, #8
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004320:	b480      	push	{r7}
 8004322:	b08b      	sub	sp, #44	@ 0x2c
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	4613      	mov	r3, r2
 800432c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004332:	2b20      	cmp	r3, #32
 8004334:	d147      	bne.n	80043c6 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d002      	beq.n	8004342 <HAL_UART_Transmit_IT+0x22>
 800433c:	88fb      	ldrh	r3, [r7, #6]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d101      	bne.n	8004346 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e040      	b.n	80043c8 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	68ba      	ldr	r2, [r7, #8]
 800434a:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	88fa      	ldrh	r2, [r7, #6]
 8004350:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	88fa      	ldrh	r2, [r7, #6]
 8004358:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2200      	movs	r2, #0
 8004360:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2221      	movs	r2, #33	@ 0x21
 800436e:	67da      	str	r2, [r3, #124]	@ 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004378:	d107      	bne.n	800438a <HAL_UART_Transmit_IT+0x6a>
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d103      	bne.n	800438a <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	4a13      	ldr	r2, [pc, #76]	@ (80043d4 <HAL_UART_Transmit_IT+0xb4>)
 8004386:	66da      	str	r2, [r3, #108]	@ 0x6c
 8004388:	e002      	b.n	8004390 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	4a12      	ldr	r2, [pc, #72]	@ (80043d8 <HAL_UART_Transmit_IT+0xb8>)
 800438e:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	e853 3f00 	ldrex	r3, [r3]
 800439c:	613b      	str	r3, [r7, #16]
   return(result);
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	461a      	mov	r2, r3
 80043ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ae:	623b      	str	r3, [r7, #32]
 80043b0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b2:	69f9      	ldr	r1, [r7, #28]
 80043b4:	6a3a      	ldr	r2, [r7, #32]
 80043b6:	e841 2300 	strex	r3, r2, [r1]
 80043ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1e6      	bne.n	8004390 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80043c2:	2300      	movs	r3, #0
 80043c4:	e000      	b.n	80043c8 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80043c6:	2302      	movs	r3, #2
  }
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	372c      	adds	r7, #44	@ 0x2c
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr
 80043d4:	0800567f 	.word	0x0800567f
 80043d8:	080055c9 	.word	0x080055c9

080043dc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b08a      	sub	sp, #40	@ 0x28
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	4613      	mov	r3, r2
 80043e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043f0:	2b20      	cmp	r3, #32
 80043f2:	d137      	bne.n	8004464 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d002      	beq.n	8004400 <HAL_UART_Receive_IT+0x24>
 80043fa:	88fb      	ldrh	r3, [r7, #6]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d101      	bne.n	8004404 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e030      	b.n	8004466 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a18      	ldr	r2, [pc, #96]	@ (8004470 <HAL_UART_Receive_IT+0x94>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d01f      	beq.n	8004454 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d018      	beq.n	8004454 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	e853 3f00 	ldrex	r3, [r3]
 800442e:	613b      	str	r3, [r7, #16]
   return(result);
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004436:	627b      	str	r3, [r7, #36]	@ 0x24
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	461a      	mov	r2, r3
 800443e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004440:	623b      	str	r3, [r7, #32]
 8004442:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004444:	69f9      	ldr	r1, [r7, #28]
 8004446:	6a3a      	ldr	r2, [r7, #32]
 8004448:	e841 2300 	strex	r3, r2, [r1]
 800444c:	61bb      	str	r3, [r7, #24]
   return(result);
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d1e6      	bne.n	8004422 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004454:	88fb      	ldrh	r3, [r7, #6]
 8004456:	461a      	mov	r2, r3
 8004458:	68b9      	ldr	r1, [r7, #8]
 800445a:	68f8      	ldr	r0, [r7, #12]
 800445c:	f000 ff74 	bl	8005348 <UART_Start_Receive_IT>
 8004460:	4603      	mov	r3, r0
 8004462:	e000      	b.n	8004466 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004464:	2302      	movs	r3, #2
  }
}
 8004466:	4618      	mov	r0, r3
 8004468:	3728      	adds	r7, #40	@ 0x28
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	40008000 	.word	0x40008000

08004474 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b0ba      	sub	sp, #232	@ 0xe8
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	69db      	ldr	r3, [r3, #28]
 8004482:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800449a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800449e:	f640 030f 	movw	r3, #2063	@ 0x80f
 80044a2:	4013      	ands	r3, r2
 80044a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80044a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d115      	bne.n	80044dc <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80044b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044b4:	f003 0320 	and.w	r3, r3, #32
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d00f      	beq.n	80044dc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80044bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044c0:	f003 0320 	and.w	r3, r3, #32
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d009      	beq.n	80044dc <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	f000 82ae 	beq.w	8004a2e <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	4798      	blx	r3
      }
      return;
 80044da:	e2a8      	b.n	8004a2e <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80044dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	f000 8117 	beq.w	8004714 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80044e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d106      	bne.n	8004500 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80044f2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80044f6:	4b85      	ldr	r3, [pc, #532]	@ (800470c <HAL_UART_IRQHandler+0x298>)
 80044f8:	4013      	ands	r3, r2
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	f000 810a 	beq.w	8004714 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004500:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004504:	f003 0301 	and.w	r3, r3, #1
 8004508:	2b00      	cmp	r3, #0
 800450a:	d011      	beq.n	8004530 <HAL_UART_IRQHandler+0xbc>
 800450c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00b      	beq.n	8004530 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2201      	movs	r2, #1
 800451e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004526:	f043 0201 	orr.w	r2, r3, #1
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004530:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004534:	f003 0302 	and.w	r3, r3, #2
 8004538:	2b00      	cmp	r3, #0
 800453a:	d011      	beq.n	8004560 <HAL_UART_IRQHandler+0xec>
 800453c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004540:	f003 0301 	and.w	r3, r3, #1
 8004544:	2b00      	cmp	r3, #0
 8004546:	d00b      	beq.n	8004560 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2202      	movs	r2, #2
 800454e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004556:	f043 0204 	orr.w	r2, r3, #4
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004564:	f003 0304 	and.w	r3, r3, #4
 8004568:	2b00      	cmp	r3, #0
 800456a:	d011      	beq.n	8004590 <HAL_UART_IRQHandler+0x11c>
 800456c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004570:	f003 0301 	and.w	r3, r3, #1
 8004574:	2b00      	cmp	r3, #0
 8004576:	d00b      	beq.n	8004590 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2204      	movs	r2, #4
 800457e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004586:	f043 0202 	orr.w	r2, r3, #2
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004594:	f003 0308 	and.w	r3, r3, #8
 8004598:	2b00      	cmp	r3, #0
 800459a:	d017      	beq.n	80045cc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800459c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045a0:	f003 0320 	and.w	r3, r3, #32
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d105      	bne.n	80045b4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80045a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045ac:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d00b      	beq.n	80045cc <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2208      	movs	r2, #8
 80045ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045c2:	f043 0208 	orr.w	r2, r3, #8
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80045cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d012      	beq.n	80045fe <HAL_UART_IRQHandler+0x18a>
 80045d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045dc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d00c      	beq.n	80045fe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80045ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045f4:	f043 0220 	orr.w	r2, r3, #32
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004604:	2b00      	cmp	r3, #0
 8004606:	f000 8214 	beq.w	8004a32 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800460a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800460e:	f003 0320 	and.w	r3, r3, #32
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00d      	beq.n	8004632 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004616:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800461a:	f003 0320 	and.w	r3, r3, #32
 800461e:	2b00      	cmp	r3, #0
 8004620:	d007      	beq.n	8004632 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004626:	2b00      	cmp	r3, #0
 8004628:	d003      	beq.n	8004632 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004638:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004646:	2b40      	cmp	r3, #64	@ 0x40
 8004648:	d005      	beq.n	8004656 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800464a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800464e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004652:	2b00      	cmp	r3, #0
 8004654:	d04f      	beq.n	80046f6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 ff3c 	bl	80054d4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004666:	2b40      	cmp	r3, #64	@ 0x40
 8004668:	d141      	bne.n	80046ee <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	3308      	adds	r3, #8
 8004670:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004674:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004678:	e853 3f00 	ldrex	r3, [r3]
 800467c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004680:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004684:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004688:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	3308      	adds	r3, #8
 8004692:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004696:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800469a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800469e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80046a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80046a6:	e841 2300 	strex	r3, r2, [r1]
 80046aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80046ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1d9      	bne.n	800466a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d013      	beq.n	80046e6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046c2:	4a13      	ldr	r2, [pc, #76]	@ (8004710 <HAL_UART_IRQHandler+0x29c>)
 80046c4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7fd fd3b 	bl	8002146 <HAL_DMA_Abort_IT>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d017      	beq.n	8004706 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80046e0:	4610      	mov	r0, r2
 80046e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046e4:	e00f      	b.n	8004706 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 f9ae 	bl	8004a48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046ec:	e00b      	b.n	8004706 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 f9aa 	bl	8004a48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046f4:	e007      	b.n	8004706 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 f9a6 	bl	8004a48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004704:	e195      	b.n	8004a32 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004706:	bf00      	nop
    return;
 8004708:	e193      	b.n	8004a32 <HAL_UART_IRQHandler+0x5be>
 800470a:	bf00      	nop
 800470c:	04000120 	.word	0x04000120
 8004710:	0800559d 	.word	0x0800559d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004718:	2b01      	cmp	r3, #1
 800471a:	f040 814e 	bne.w	80049ba <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800471e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004722:	f003 0310 	and.w	r3, r3, #16
 8004726:	2b00      	cmp	r3, #0
 8004728:	f000 8147 	beq.w	80049ba <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800472c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004730:	f003 0310 	and.w	r3, r3, #16
 8004734:	2b00      	cmp	r3, #0
 8004736:	f000 8140 	beq.w	80049ba <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2210      	movs	r2, #16
 8004740:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800474c:	2b40      	cmp	r3, #64	@ 0x40
 800474e:	f040 80b8 	bne.w	80048c2 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800475e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004762:	2b00      	cmp	r3, #0
 8004764:	f000 8167 	beq.w	8004a36 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800476e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004772:	429a      	cmp	r2, r3
 8004774:	f080 815f 	bcs.w	8004a36 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800477e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0320 	and.w	r3, r3, #32
 800478e:	2b00      	cmp	r3, #0
 8004790:	f040 8086 	bne.w	80048a0 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800479c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80047a0:	e853 3f00 	ldrex	r3, [r3]
 80047a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80047a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80047ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	461a      	mov	r2, r3
 80047ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80047be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80047c2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80047ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80047ce:	e841 2300 	strex	r3, r2, [r1]
 80047d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80047d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1da      	bne.n	8004794 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	3308      	adds	r3, #8
 80047e4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80047e8:	e853 3f00 	ldrex	r3, [r3]
 80047ec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80047ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80047f0:	f023 0301 	bic.w	r3, r3, #1
 80047f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	3308      	adds	r3, #8
 80047fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004802:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004806:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004808:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800480a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800480e:	e841 2300 	strex	r3, r2, [r1]
 8004812:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004814:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1e1      	bne.n	80047de <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	3308      	adds	r3, #8
 8004820:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004822:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004824:	e853 3f00 	ldrex	r3, [r3]
 8004828:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800482a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800482c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004830:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	3308      	adds	r3, #8
 800483a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800483e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004840:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004842:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004844:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004846:	e841 2300 	strex	r3, r2, [r1]
 800484a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800484c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800484e:	2b00      	cmp	r3, #0
 8004850:	d1e3      	bne.n	800481a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2220      	movs	r2, #32
 8004856:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004866:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004868:	e853 3f00 	ldrex	r3, [r3]
 800486c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800486e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004870:	f023 0310 	bic.w	r3, r3, #16
 8004874:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	461a      	mov	r2, r3
 800487e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004882:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004884:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004886:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004888:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800488a:	e841 2300 	strex	r3, r2, [r1]
 800488e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004890:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1e4      	bne.n	8004860 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800489a:	4618      	mov	r0, r3
 800489c:	f7fd fc15 	bl	80020ca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2202      	movs	r2, #2
 80048a4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	4619      	mov	r1, r3
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 f8ce 	bl	8004a5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80048c0:	e0b9      	b.n	8004a36 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80048dc:	b29b      	uxth	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	f000 80ab 	beq.w	8004a3a <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 80048e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f000 80a6 	beq.w	8004a3a <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048f6:	e853 3f00 	ldrex	r3, [r3]
 80048fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80048fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004902:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	461a      	mov	r2, r3
 800490c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004910:	647b      	str	r3, [r7, #68]	@ 0x44
 8004912:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004914:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004916:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004918:	e841 2300 	strex	r3, r2, [r1]
 800491c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800491e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004920:	2b00      	cmp	r3, #0
 8004922:	d1e4      	bne.n	80048ee <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	3308      	adds	r3, #8
 800492a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800492e:	e853 3f00 	ldrex	r3, [r3]
 8004932:	623b      	str	r3, [r7, #32]
   return(result);
 8004934:	6a3b      	ldr	r3, [r7, #32]
 8004936:	f023 0301 	bic.w	r3, r3, #1
 800493a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	3308      	adds	r3, #8
 8004944:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004948:	633a      	str	r2, [r7, #48]	@ 0x30
 800494a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800494e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004950:	e841 2300 	strex	r3, r2, [r1]
 8004954:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004958:	2b00      	cmp	r3, #0
 800495a:	d1e3      	bne.n	8004924 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2220      	movs	r2, #32
 8004960:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	e853 3f00 	ldrex	r3, [r3]
 800497c:	60fb      	str	r3, [r7, #12]
   return(result);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f023 0310 	bic.w	r3, r3, #16
 8004984:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	461a      	mov	r2, r3
 800498e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004992:	61fb      	str	r3, [r7, #28]
 8004994:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004996:	69b9      	ldr	r1, [r7, #24]
 8004998:	69fa      	ldr	r2, [r7, #28]
 800499a:	e841 2300 	strex	r3, r2, [r1]
 800499e:	617b      	str	r3, [r7, #20]
   return(result);
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1e4      	bne.n	8004970 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2202      	movs	r2, #2
 80049aa:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80049ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80049b0:	4619      	mov	r1, r3
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 f852 	bl	8004a5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80049b8:	e03f      	b.n	8004a3a <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80049ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00e      	beq.n	80049e4 <HAL_UART_IRQHandler+0x570>
 80049c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80049ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d008      	beq.n	80049e4 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80049da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f001 f895 	bl	8005b0c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80049e2:	e02d      	b.n	8004a40 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80049e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00e      	beq.n	8004a0e <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80049f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d008      	beq.n	8004a0e <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d01c      	beq.n	8004a3e <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	4798      	blx	r3
    }
    return;
 8004a0c:	e017      	b.n	8004a3e <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d012      	beq.n	8004a40 <HAL_UART_IRQHandler+0x5cc>
 8004a1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00c      	beq.n	8004a40 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 fe89 	bl	800573e <UART_EndTransmit_IT>
    return;
 8004a2c:	e008      	b.n	8004a40 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004a2e:	bf00      	nop
 8004a30:	e006      	b.n	8004a40 <HAL_UART_IRQHandler+0x5cc>
    return;
 8004a32:	bf00      	nop
 8004a34:	e004      	b.n	8004a40 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004a36:	bf00      	nop
 8004a38:	e002      	b.n	8004a40 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004a3a:	bf00      	nop
 8004a3c:	e000      	b.n	8004a40 <HAL_UART_IRQHandler+0x5cc>
    return;
 8004a3e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004a40:	37e8      	adds	r7, #232	@ 0xe8
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop

08004a48 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004a50:	bf00      	nop
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	460b      	mov	r3, r1
 8004a66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a68:	bf00      	nop
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a78:	b08a      	sub	sp, #40	@ 0x28
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	689a      	ldr	r2, [r3, #8]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	431a      	orrs	r2, r3
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	695b      	ldr	r3, [r3, #20]
 8004a92:	431a      	orrs	r2, r3
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	69db      	ldr	r3, [r3, #28]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	4ba4      	ldr	r3, [pc, #656]	@ (8004d34 <UART_SetConfig+0x2c0>)
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	6812      	ldr	r2, [r2, #0]
 8004aaa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004aac:	430b      	orrs	r3, r1
 8004aae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	68da      	ldr	r2, [r3, #12]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a99      	ldr	r2, [pc, #612]	@ (8004d38 <UART_SetConfig+0x2c4>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d004      	beq.n	8004ae0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6a1b      	ldr	r3, [r3, #32]
 8004ada:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004adc:	4313      	orrs	r3, r2
 8004ade:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004af0:	430a      	orrs	r2, r1
 8004af2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a90      	ldr	r2, [pc, #576]	@ (8004d3c <UART_SetConfig+0x2c8>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d126      	bne.n	8004b4c <UART_SetConfig+0xd8>
 8004afe:	4b90      	ldr	r3, [pc, #576]	@ (8004d40 <UART_SetConfig+0x2cc>)
 8004b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b04:	f003 0303 	and.w	r3, r3, #3
 8004b08:	2b03      	cmp	r3, #3
 8004b0a:	d81b      	bhi.n	8004b44 <UART_SetConfig+0xd0>
 8004b0c:	a201      	add	r2, pc, #4	@ (adr r2, 8004b14 <UART_SetConfig+0xa0>)
 8004b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b12:	bf00      	nop
 8004b14:	08004b25 	.word	0x08004b25
 8004b18:	08004b35 	.word	0x08004b35
 8004b1c:	08004b2d 	.word	0x08004b2d
 8004b20:	08004b3d 	.word	0x08004b3d
 8004b24:	2301      	movs	r3, #1
 8004b26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b2a:	e116      	b.n	8004d5a <UART_SetConfig+0x2e6>
 8004b2c:	2302      	movs	r3, #2
 8004b2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b32:	e112      	b.n	8004d5a <UART_SetConfig+0x2e6>
 8004b34:	2304      	movs	r3, #4
 8004b36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b3a:	e10e      	b.n	8004d5a <UART_SetConfig+0x2e6>
 8004b3c:	2308      	movs	r3, #8
 8004b3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b42:	e10a      	b.n	8004d5a <UART_SetConfig+0x2e6>
 8004b44:	2310      	movs	r3, #16
 8004b46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b4a:	e106      	b.n	8004d5a <UART_SetConfig+0x2e6>
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a7c      	ldr	r2, [pc, #496]	@ (8004d44 <UART_SetConfig+0x2d0>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d138      	bne.n	8004bc8 <UART_SetConfig+0x154>
 8004b56:	4b7a      	ldr	r3, [pc, #488]	@ (8004d40 <UART_SetConfig+0x2cc>)
 8004b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b5c:	f003 030c 	and.w	r3, r3, #12
 8004b60:	2b0c      	cmp	r3, #12
 8004b62:	d82d      	bhi.n	8004bc0 <UART_SetConfig+0x14c>
 8004b64:	a201      	add	r2, pc, #4	@ (adr r2, 8004b6c <UART_SetConfig+0xf8>)
 8004b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b6a:	bf00      	nop
 8004b6c:	08004ba1 	.word	0x08004ba1
 8004b70:	08004bc1 	.word	0x08004bc1
 8004b74:	08004bc1 	.word	0x08004bc1
 8004b78:	08004bc1 	.word	0x08004bc1
 8004b7c:	08004bb1 	.word	0x08004bb1
 8004b80:	08004bc1 	.word	0x08004bc1
 8004b84:	08004bc1 	.word	0x08004bc1
 8004b88:	08004bc1 	.word	0x08004bc1
 8004b8c:	08004ba9 	.word	0x08004ba9
 8004b90:	08004bc1 	.word	0x08004bc1
 8004b94:	08004bc1 	.word	0x08004bc1
 8004b98:	08004bc1 	.word	0x08004bc1
 8004b9c:	08004bb9 	.word	0x08004bb9
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ba6:	e0d8      	b.n	8004d5a <UART_SetConfig+0x2e6>
 8004ba8:	2302      	movs	r3, #2
 8004baa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bae:	e0d4      	b.n	8004d5a <UART_SetConfig+0x2e6>
 8004bb0:	2304      	movs	r3, #4
 8004bb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bb6:	e0d0      	b.n	8004d5a <UART_SetConfig+0x2e6>
 8004bb8:	2308      	movs	r3, #8
 8004bba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bbe:	e0cc      	b.n	8004d5a <UART_SetConfig+0x2e6>
 8004bc0:	2310      	movs	r3, #16
 8004bc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bc6:	e0c8      	b.n	8004d5a <UART_SetConfig+0x2e6>
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a5e      	ldr	r2, [pc, #376]	@ (8004d48 <UART_SetConfig+0x2d4>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d125      	bne.n	8004c1e <UART_SetConfig+0x1aa>
 8004bd2:	4b5b      	ldr	r3, [pc, #364]	@ (8004d40 <UART_SetConfig+0x2cc>)
 8004bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bd8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004bdc:	2b30      	cmp	r3, #48	@ 0x30
 8004bde:	d016      	beq.n	8004c0e <UART_SetConfig+0x19a>
 8004be0:	2b30      	cmp	r3, #48	@ 0x30
 8004be2:	d818      	bhi.n	8004c16 <UART_SetConfig+0x1a2>
 8004be4:	2b20      	cmp	r3, #32
 8004be6:	d00a      	beq.n	8004bfe <UART_SetConfig+0x18a>
 8004be8:	2b20      	cmp	r3, #32
 8004bea:	d814      	bhi.n	8004c16 <UART_SetConfig+0x1a2>
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d002      	beq.n	8004bf6 <UART_SetConfig+0x182>
 8004bf0:	2b10      	cmp	r3, #16
 8004bf2:	d008      	beq.n	8004c06 <UART_SetConfig+0x192>
 8004bf4:	e00f      	b.n	8004c16 <UART_SetConfig+0x1a2>
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bfc:	e0ad      	b.n	8004d5a <UART_SetConfig+0x2e6>
 8004bfe:	2302      	movs	r3, #2
 8004c00:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c04:	e0a9      	b.n	8004d5a <UART_SetConfig+0x2e6>
 8004c06:	2304      	movs	r3, #4
 8004c08:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c0c:	e0a5      	b.n	8004d5a <UART_SetConfig+0x2e6>
 8004c0e:	2308      	movs	r3, #8
 8004c10:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c14:	e0a1      	b.n	8004d5a <UART_SetConfig+0x2e6>
 8004c16:	2310      	movs	r3, #16
 8004c18:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c1c:	e09d      	b.n	8004d5a <UART_SetConfig+0x2e6>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a4a      	ldr	r2, [pc, #296]	@ (8004d4c <UART_SetConfig+0x2d8>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d125      	bne.n	8004c74 <UART_SetConfig+0x200>
 8004c28:	4b45      	ldr	r3, [pc, #276]	@ (8004d40 <UART_SetConfig+0x2cc>)
 8004c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c2e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004c32:	2bc0      	cmp	r3, #192	@ 0xc0
 8004c34:	d016      	beq.n	8004c64 <UART_SetConfig+0x1f0>
 8004c36:	2bc0      	cmp	r3, #192	@ 0xc0
 8004c38:	d818      	bhi.n	8004c6c <UART_SetConfig+0x1f8>
 8004c3a:	2b80      	cmp	r3, #128	@ 0x80
 8004c3c:	d00a      	beq.n	8004c54 <UART_SetConfig+0x1e0>
 8004c3e:	2b80      	cmp	r3, #128	@ 0x80
 8004c40:	d814      	bhi.n	8004c6c <UART_SetConfig+0x1f8>
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d002      	beq.n	8004c4c <UART_SetConfig+0x1d8>
 8004c46:	2b40      	cmp	r3, #64	@ 0x40
 8004c48:	d008      	beq.n	8004c5c <UART_SetConfig+0x1e8>
 8004c4a:	e00f      	b.n	8004c6c <UART_SetConfig+0x1f8>
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c52:	e082      	b.n	8004d5a <UART_SetConfig+0x2e6>
 8004c54:	2302      	movs	r3, #2
 8004c56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c5a:	e07e      	b.n	8004d5a <UART_SetConfig+0x2e6>
 8004c5c:	2304      	movs	r3, #4
 8004c5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c62:	e07a      	b.n	8004d5a <UART_SetConfig+0x2e6>
 8004c64:	2308      	movs	r3, #8
 8004c66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c6a:	e076      	b.n	8004d5a <UART_SetConfig+0x2e6>
 8004c6c:	2310      	movs	r3, #16
 8004c6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c72:	e072      	b.n	8004d5a <UART_SetConfig+0x2e6>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a35      	ldr	r2, [pc, #212]	@ (8004d50 <UART_SetConfig+0x2dc>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d12a      	bne.n	8004cd4 <UART_SetConfig+0x260>
 8004c7e:	4b30      	ldr	r3, [pc, #192]	@ (8004d40 <UART_SetConfig+0x2cc>)
 8004c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c8c:	d01a      	beq.n	8004cc4 <UART_SetConfig+0x250>
 8004c8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c92:	d81b      	bhi.n	8004ccc <UART_SetConfig+0x258>
 8004c94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c98:	d00c      	beq.n	8004cb4 <UART_SetConfig+0x240>
 8004c9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c9e:	d815      	bhi.n	8004ccc <UART_SetConfig+0x258>
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d003      	beq.n	8004cac <UART_SetConfig+0x238>
 8004ca4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ca8:	d008      	beq.n	8004cbc <UART_SetConfig+0x248>
 8004caa:	e00f      	b.n	8004ccc <UART_SetConfig+0x258>
 8004cac:	2300      	movs	r3, #0
 8004cae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cb2:	e052      	b.n	8004d5a <UART_SetConfig+0x2e6>
 8004cb4:	2302      	movs	r3, #2
 8004cb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cba:	e04e      	b.n	8004d5a <UART_SetConfig+0x2e6>
 8004cbc:	2304      	movs	r3, #4
 8004cbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cc2:	e04a      	b.n	8004d5a <UART_SetConfig+0x2e6>
 8004cc4:	2308      	movs	r3, #8
 8004cc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cca:	e046      	b.n	8004d5a <UART_SetConfig+0x2e6>
 8004ccc:	2310      	movs	r3, #16
 8004cce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cd2:	e042      	b.n	8004d5a <UART_SetConfig+0x2e6>
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a17      	ldr	r2, [pc, #92]	@ (8004d38 <UART_SetConfig+0x2c4>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d13a      	bne.n	8004d54 <UART_SetConfig+0x2e0>
 8004cde:	4b18      	ldr	r3, [pc, #96]	@ (8004d40 <UART_SetConfig+0x2cc>)
 8004ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ce4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004ce8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004cec:	d01a      	beq.n	8004d24 <UART_SetConfig+0x2b0>
 8004cee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004cf2:	d81b      	bhi.n	8004d2c <UART_SetConfig+0x2b8>
 8004cf4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004cf8:	d00c      	beq.n	8004d14 <UART_SetConfig+0x2a0>
 8004cfa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004cfe:	d815      	bhi.n	8004d2c <UART_SetConfig+0x2b8>
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d003      	beq.n	8004d0c <UART_SetConfig+0x298>
 8004d04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d08:	d008      	beq.n	8004d1c <UART_SetConfig+0x2a8>
 8004d0a:	e00f      	b.n	8004d2c <UART_SetConfig+0x2b8>
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d12:	e022      	b.n	8004d5a <UART_SetConfig+0x2e6>
 8004d14:	2302      	movs	r3, #2
 8004d16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d1a:	e01e      	b.n	8004d5a <UART_SetConfig+0x2e6>
 8004d1c:	2304      	movs	r3, #4
 8004d1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d22:	e01a      	b.n	8004d5a <UART_SetConfig+0x2e6>
 8004d24:	2308      	movs	r3, #8
 8004d26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d2a:	e016      	b.n	8004d5a <UART_SetConfig+0x2e6>
 8004d2c:	2310      	movs	r3, #16
 8004d2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d32:	e012      	b.n	8004d5a <UART_SetConfig+0x2e6>
 8004d34:	efff69f3 	.word	0xefff69f3
 8004d38:	40008000 	.word	0x40008000
 8004d3c:	40013800 	.word	0x40013800
 8004d40:	40021000 	.word	0x40021000
 8004d44:	40004400 	.word	0x40004400
 8004d48:	40004800 	.word	0x40004800
 8004d4c:	40004c00 	.word	0x40004c00
 8004d50:	40005000 	.word	0x40005000
 8004d54:	2310      	movs	r3, #16
 8004d56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a9f      	ldr	r2, [pc, #636]	@ (8004fdc <UART_SetConfig+0x568>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d17a      	bne.n	8004e5a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d64:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004d68:	2b08      	cmp	r3, #8
 8004d6a:	d824      	bhi.n	8004db6 <UART_SetConfig+0x342>
 8004d6c:	a201      	add	r2, pc, #4	@ (adr r2, 8004d74 <UART_SetConfig+0x300>)
 8004d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d72:	bf00      	nop
 8004d74:	08004d99 	.word	0x08004d99
 8004d78:	08004db7 	.word	0x08004db7
 8004d7c:	08004da1 	.word	0x08004da1
 8004d80:	08004db7 	.word	0x08004db7
 8004d84:	08004da7 	.word	0x08004da7
 8004d88:	08004db7 	.word	0x08004db7
 8004d8c:	08004db7 	.word	0x08004db7
 8004d90:	08004db7 	.word	0x08004db7
 8004d94:	08004daf 	.word	0x08004daf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d98:	f7fe f9b0 	bl	80030fc <HAL_RCC_GetPCLK1Freq>
 8004d9c:	61f8      	str	r0, [r7, #28]
        break;
 8004d9e:	e010      	b.n	8004dc2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004da0:	4b8f      	ldr	r3, [pc, #572]	@ (8004fe0 <UART_SetConfig+0x56c>)
 8004da2:	61fb      	str	r3, [r7, #28]
        break;
 8004da4:	e00d      	b.n	8004dc2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004da6:	f7fe f911 	bl	8002fcc <HAL_RCC_GetSysClockFreq>
 8004daa:	61f8      	str	r0, [r7, #28]
        break;
 8004dac:	e009      	b.n	8004dc2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004db2:	61fb      	str	r3, [r7, #28]
        break;
 8004db4:	e005      	b.n	8004dc2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004db6:	2300      	movs	r3, #0
 8004db8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004dc0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f000 80fb 	beq.w	8004fc0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	685a      	ldr	r2, [r3, #4]
 8004dce:	4613      	mov	r3, r2
 8004dd0:	005b      	lsls	r3, r3, #1
 8004dd2:	4413      	add	r3, r2
 8004dd4:	69fa      	ldr	r2, [r7, #28]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d305      	bcc.n	8004de6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004de0:	69fa      	ldr	r2, [r7, #28]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d903      	bls.n	8004dee <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004dec:	e0e8      	b.n	8004fc0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	2200      	movs	r2, #0
 8004df2:	461c      	mov	r4, r3
 8004df4:	4615      	mov	r5, r2
 8004df6:	f04f 0200 	mov.w	r2, #0
 8004dfa:	f04f 0300 	mov.w	r3, #0
 8004dfe:	022b      	lsls	r3, r5, #8
 8004e00:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004e04:	0222      	lsls	r2, r4, #8
 8004e06:	68f9      	ldr	r1, [r7, #12]
 8004e08:	6849      	ldr	r1, [r1, #4]
 8004e0a:	0849      	lsrs	r1, r1, #1
 8004e0c:	2000      	movs	r0, #0
 8004e0e:	4688      	mov	r8, r1
 8004e10:	4681      	mov	r9, r0
 8004e12:	eb12 0a08 	adds.w	sl, r2, r8
 8004e16:	eb43 0b09 	adc.w	fp, r3, r9
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	603b      	str	r3, [r7, #0]
 8004e22:	607a      	str	r2, [r7, #4]
 8004e24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e28:	4650      	mov	r0, sl
 8004e2a:	4659      	mov	r1, fp
 8004e2c:	f7fb fedc 	bl	8000be8 <__aeabi_uldivmod>
 8004e30:	4602      	mov	r2, r0
 8004e32:	460b      	mov	r3, r1
 8004e34:	4613      	mov	r3, r2
 8004e36:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e3e:	d308      	bcc.n	8004e52 <UART_SetConfig+0x3de>
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e46:	d204      	bcs.n	8004e52 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	69ba      	ldr	r2, [r7, #24]
 8004e4e:	60da      	str	r2, [r3, #12]
 8004e50:	e0b6      	b.n	8004fc0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004e58:	e0b2      	b.n	8004fc0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	69db      	ldr	r3, [r3, #28]
 8004e5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e62:	d15e      	bne.n	8004f22 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004e64:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004e68:	2b08      	cmp	r3, #8
 8004e6a:	d828      	bhi.n	8004ebe <UART_SetConfig+0x44a>
 8004e6c:	a201      	add	r2, pc, #4	@ (adr r2, 8004e74 <UART_SetConfig+0x400>)
 8004e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e72:	bf00      	nop
 8004e74:	08004e99 	.word	0x08004e99
 8004e78:	08004ea1 	.word	0x08004ea1
 8004e7c:	08004ea9 	.word	0x08004ea9
 8004e80:	08004ebf 	.word	0x08004ebf
 8004e84:	08004eaf 	.word	0x08004eaf
 8004e88:	08004ebf 	.word	0x08004ebf
 8004e8c:	08004ebf 	.word	0x08004ebf
 8004e90:	08004ebf 	.word	0x08004ebf
 8004e94:	08004eb7 	.word	0x08004eb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e98:	f7fe f930 	bl	80030fc <HAL_RCC_GetPCLK1Freq>
 8004e9c:	61f8      	str	r0, [r7, #28]
        break;
 8004e9e:	e014      	b.n	8004eca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ea0:	f7fe f942 	bl	8003128 <HAL_RCC_GetPCLK2Freq>
 8004ea4:	61f8      	str	r0, [r7, #28]
        break;
 8004ea6:	e010      	b.n	8004eca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ea8:	4b4d      	ldr	r3, [pc, #308]	@ (8004fe0 <UART_SetConfig+0x56c>)
 8004eaa:	61fb      	str	r3, [r7, #28]
        break;
 8004eac:	e00d      	b.n	8004eca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004eae:	f7fe f88d 	bl	8002fcc <HAL_RCC_GetSysClockFreq>
 8004eb2:	61f8      	str	r0, [r7, #28]
        break;
 8004eb4:	e009      	b.n	8004eca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004eb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004eba:	61fb      	str	r3, [r7, #28]
        break;
 8004ebc:	e005      	b.n	8004eca <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004ec8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d077      	beq.n	8004fc0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	005a      	lsls	r2, r3, #1
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	085b      	lsrs	r3, r3, #1
 8004eda:	441a      	add	r2, r3
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	2b0f      	cmp	r3, #15
 8004eea:	d916      	bls.n	8004f1a <UART_SetConfig+0x4a6>
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ef2:	d212      	bcs.n	8004f1a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	f023 030f 	bic.w	r3, r3, #15
 8004efc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	085b      	lsrs	r3, r3, #1
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	f003 0307 	and.w	r3, r3, #7
 8004f08:	b29a      	uxth	r2, r3
 8004f0a:	8afb      	ldrh	r3, [r7, #22]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	8afa      	ldrh	r2, [r7, #22]
 8004f16:	60da      	str	r2, [r3, #12]
 8004f18:	e052      	b.n	8004fc0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004f20:	e04e      	b.n	8004fc0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f22:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004f26:	2b08      	cmp	r3, #8
 8004f28:	d827      	bhi.n	8004f7a <UART_SetConfig+0x506>
 8004f2a:	a201      	add	r2, pc, #4	@ (adr r2, 8004f30 <UART_SetConfig+0x4bc>)
 8004f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f30:	08004f55 	.word	0x08004f55
 8004f34:	08004f5d 	.word	0x08004f5d
 8004f38:	08004f65 	.word	0x08004f65
 8004f3c:	08004f7b 	.word	0x08004f7b
 8004f40:	08004f6b 	.word	0x08004f6b
 8004f44:	08004f7b 	.word	0x08004f7b
 8004f48:	08004f7b 	.word	0x08004f7b
 8004f4c:	08004f7b 	.word	0x08004f7b
 8004f50:	08004f73 	.word	0x08004f73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f54:	f7fe f8d2 	bl	80030fc <HAL_RCC_GetPCLK1Freq>
 8004f58:	61f8      	str	r0, [r7, #28]
        break;
 8004f5a:	e014      	b.n	8004f86 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f5c:	f7fe f8e4 	bl	8003128 <HAL_RCC_GetPCLK2Freq>
 8004f60:	61f8      	str	r0, [r7, #28]
        break;
 8004f62:	e010      	b.n	8004f86 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f64:	4b1e      	ldr	r3, [pc, #120]	@ (8004fe0 <UART_SetConfig+0x56c>)
 8004f66:	61fb      	str	r3, [r7, #28]
        break;
 8004f68:	e00d      	b.n	8004f86 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f6a:	f7fe f82f 	bl	8002fcc <HAL_RCC_GetSysClockFreq>
 8004f6e:	61f8      	str	r0, [r7, #28]
        break;
 8004f70:	e009      	b.n	8004f86 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f76:	61fb      	str	r3, [r7, #28]
        break;
 8004f78:	e005      	b.n	8004f86 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004f84:	bf00      	nop
    }

    if (pclk != 0U)
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d019      	beq.n	8004fc0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	085a      	lsrs	r2, r3, #1
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	441a      	add	r2, r3
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f9e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	2b0f      	cmp	r3, #15
 8004fa4:	d909      	bls.n	8004fba <UART_SetConfig+0x546>
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fac:	d205      	bcs.n	8004fba <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	b29a      	uxth	r2, r3
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	60da      	str	r2, [r3, #12]
 8004fb8:	e002      	b.n	8004fc0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004fcc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3728      	adds	r7, #40	@ 0x28
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fda:	bf00      	nop
 8004fdc:	40008000 	.word	0x40008000
 8004fe0:	00f42400 	.word	0x00f42400

08004fe4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff0:	f003 0308 	and.w	r3, r3, #8
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d00a      	beq.n	800500e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	430a      	orrs	r2, r1
 800500c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005012:	f003 0301 	and.w	r3, r3, #1
 8005016:	2b00      	cmp	r3, #0
 8005018:	d00a      	beq.n	8005030 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	430a      	orrs	r2, r1
 800502e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005034:	f003 0302 	and.w	r3, r3, #2
 8005038:	2b00      	cmp	r3, #0
 800503a:	d00a      	beq.n	8005052 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	430a      	orrs	r2, r1
 8005050:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005056:	f003 0304 	and.w	r3, r3, #4
 800505a:	2b00      	cmp	r3, #0
 800505c:	d00a      	beq.n	8005074 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	430a      	orrs	r2, r1
 8005072:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005078:	f003 0310 	and.w	r3, r3, #16
 800507c:	2b00      	cmp	r3, #0
 800507e:	d00a      	beq.n	8005096 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	430a      	orrs	r2, r1
 8005094:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800509a:	f003 0320 	and.w	r3, r3, #32
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d00a      	beq.n	80050b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	430a      	orrs	r2, r1
 80050b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d01a      	beq.n	80050fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	430a      	orrs	r2, r1
 80050d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050e2:	d10a      	bne.n	80050fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	430a      	orrs	r2, r1
 80050f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005102:	2b00      	cmp	r3, #0
 8005104:	d00a      	beq.n	800511c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	430a      	orrs	r2, r1
 800511a:	605a      	str	r2, [r3, #4]
  }
}
 800511c:	bf00      	nop
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b098      	sub	sp, #96	@ 0x60
 800512c:	af02      	add	r7, sp, #8
 800512e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005138:	f7fc feaa 	bl	8001e90 <HAL_GetTick>
 800513c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0308 	and.w	r3, r3, #8
 8005148:	2b08      	cmp	r3, #8
 800514a:	d12e      	bne.n	80051aa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800514c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005150:	9300      	str	r3, [sp, #0]
 8005152:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005154:	2200      	movs	r2, #0
 8005156:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 f88c 	bl	8005278 <UART_WaitOnFlagUntilTimeout>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d021      	beq.n	80051aa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800516c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800516e:	e853 3f00 	ldrex	r3, [r3]
 8005172:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005176:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800517a:	653b      	str	r3, [r7, #80]	@ 0x50
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	461a      	mov	r2, r3
 8005182:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005184:	647b      	str	r3, [r7, #68]	@ 0x44
 8005186:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005188:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800518a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800518c:	e841 2300 	strex	r3, r2, [r1]
 8005190:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005192:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005194:	2b00      	cmp	r3, #0
 8005196:	d1e6      	bne.n	8005166 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2220      	movs	r2, #32
 800519c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e062      	b.n	8005270 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0304 	and.w	r3, r3, #4
 80051b4:	2b04      	cmp	r3, #4
 80051b6:	d149      	bne.n	800524c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051b8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80051bc:	9300      	str	r3, [sp, #0]
 80051be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051c0:	2200      	movs	r2, #0
 80051c2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 f856 	bl	8005278 <UART_WaitOnFlagUntilTimeout>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d03c      	beq.n	800524c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051da:	e853 3f00 	ldrex	r3, [r3]
 80051de:	623b      	str	r3, [r7, #32]
   return(result);
 80051e0:	6a3b      	ldr	r3, [r7, #32]
 80051e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	461a      	mov	r2, r3
 80051ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80051f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051f8:	e841 2300 	strex	r3, r2, [r1]
 80051fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80051fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005200:	2b00      	cmp	r3, #0
 8005202:	d1e6      	bne.n	80051d2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	3308      	adds	r3, #8
 800520a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	e853 3f00 	ldrex	r3, [r3]
 8005212:	60fb      	str	r3, [r7, #12]
   return(result);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f023 0301 	bic.w	r3, r3, #1
 800521a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	3308      	adds	r3, #8
 8005222:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005224:	61fa      	str	r2, [r7, #28]
 8005226:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005228:	69b9      	ldr	r1, [r7, #24]
 800522a:	69fa      	ldr	r2, [r7, #28]
 800522c:	e841 2300 	strex	r3, r2, [r1]
 8005230:	617b      	str	r3, [r7, #20]
   return(result);
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d1e5      	bne.n	8005204 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2220      	movs	r2, #32
 800523c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e011      	b.n	8005270 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2220      	movs	r2, #32
 8005250:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2220      	movs	r2, #32
 8005256:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	3758      	adds	r7, #88	@ 0x58
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	603b      	str	r3, [r7, #0]
 8005284:	4613      	mov	r3, r2
 8005286:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005288:	e049      	b.n	800531e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005290:	d045      	beq.n	800531e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005292:	f7fc fdfd 	bl	8001e90 <HAL_GetTick>
 8005296:	4602      	mov	r2, r0
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	69ba      	ldr	r2, [r7, #24]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d302      	bcc.n	80052a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80052a2:	69bb      	ldr	r3, [r7, #24]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d101      	bne.n	80052ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80052a8:	2303      	movs	r3, #3
 80052aa:	e048      	b.n	800533e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 0304 	and.w	r3, r3, #4
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d031      	beq.n	800531e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	69db      	ldr	r3, [r3, #28]
 80052c0:	f003 0308 	and.w	r3, r3, #8
 80052c4:	2b08      	cmp	r3, #8
 80052c6:	d110      	bne.n	80052ea <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2208      	movs	r2, #8
 80052ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80052d0:	68f8      	ldr	r0, [r7, #12]
 80052d2:	f000 f8ff 	bl	80054d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2208      	movs	r2, #8
 80052da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e029      	b.n	800533e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	69db      	ldr	r3, [r3, #28]
 80052f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052f8:	d111      	bne.n	800531e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005302:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005304:	68f8      	ldr	r0, [r7, #12]
 8005306:	f000 f8e5 	bl	80054d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2220      	movs	r2, #32
 800530e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	e00f      	b.n	800533e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	69da      	ldr	r2, [r3, #28]
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	4013      	ands	r3, r2
 8005328:	68ba      	ldr	r2, [r7, #8]
 800532a:	429a      	cmp	r2, r3
 800532c:	bf0c      	ite	eq
 800532e:	2301      	moveq	r3, #1
 8005330:	2300      	movne	r3, #0
 8005332:	b2db      	uxtb	r3, r3
 8005334:	461a      	mov	r2, r3
 8005336:	79fb      	ldrb	r3, [r7, #7]
 8005338:	429a      	cmp	r2, r3
 800533a:	d0a6      	beq.n	800528a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3710      	adds	r7, #16
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
	...

08005348 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005348:	b480      	push	{r7}
 800534a:	b097      	sub	sp, #92	@ 0x5c
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	4613      	mov	r3, r2
 8005354:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	68ba      	ldr	r2, [r7, #8]
 800535a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	88fa      	ldrh	r2, [r7, #6]
 8005360:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	88fa      	ldrh	r2, [r7, #6]
 8005368:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2200      	movs	r2, #0
 8005370:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800537a:	d10e      	bne.n	800539a <UART_Start_Receive_IT+0x52>
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d105      	bne.n	8005390 <UART_Start_Receive_IT+0x48>
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800538a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800538e:	e02d      	b.n	80053ec <UART_Start_Receive_IT+0xa4>
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	22ff      	movs	r2, #255	@ 0xff
 8005394:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005398:	e028      	b.n	80053ec <UART_Start_Receive_IT+0xa4>
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d10d      	bne.n	80053be <UART_Start_Receive_IT+0x76>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d104      	bne.n	80053b4 <UART_Start_Receive_IT+0x6c>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	22ff      	movs	r2, #255	@ 0xff
 80053ae:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80053b2:	e01b      	b.n	80053ec <UART_Start_Receive_IT+0xa4>
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	227f      	movs	r2, #127	@ 0x7f
 80053b8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80053bc:	e016      	b.n	80053ec <UART_Start_Receive_IT+0xa4>
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80053c6:	d10d      	bne.n	80053e4 <UART_Start_Receive_IT+0x9c>
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	691b      	ldr	r3, [r3, #16]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d104      	bne.n	80053da <UART_Start_Receive_IT+0x92>
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	227f      	movs	r2, #127	@ 0x7f
 80053d4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80053d8:	e008      	b.n	80053ec <UART_Start_Receive_IT+0xa4>
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	223f      	movs	r2, #63	@ 0x3f
 80053de:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80053e2:	e003      	b.n	80053ec <UART_Start_Receive_IT+0xa4>
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2222      	movs	r2, #34	@ 0x22
 80053f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	3308      	adds	r3, #8
 8005402:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005404:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005406:	e853 3f00 	ldrex	r3, [r3]
 800540a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800540c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800540e:	f043 0301 	orr.w	r3, r3, #1
 8005412:	657b      	str	r3, [r7, #84]	@ 0x54
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	3308      	adds	r3, #8
 800541a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800541c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800541e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005420:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005422:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005424:	e841 2300 	strex	r3, r2, [r1]
 8005428:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800542a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800542c:	2b00      	cmp	r3, #0
 800542e:	d1e5      	bne.n	80053fc <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005438:	d107      	bne.n	800544a <UART_Start_Receive_IT+0x102>
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d103      	bne.n	800544a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	4a21      	ldr	r2, [pc, #132]	@ (80054cc <UART_Start_Receive_IT+0x184>)
 8005446:	669a      	str	r2, [r3, #104]	@ 0x68
 8005448:	e002      	b.n	8005450 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	4a20      	ldr	r2, [pc, #128]	@ (80054d0 <UART_Start_Receive_IT+0x188>)
 800544e:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d019      	beq.n	800548c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800545e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005460:	e853 3f00 	ldrex	r3, [r3]
 8005464:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005468:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800546c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	461a      	mov	r2, r3
 8005474:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005476:	637b      	str	r3, [r7, #52]	@ 0x34
 8005478:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800547c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800547e:	e841 2300 	strex	r3, r2, [r1]
 8005482:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005486:	2b00      	cmp	r3, #0
 8005488:	d1e6      	bne.n	8005458 <UART_Start_Receive_IT+0x110>
 800548a:	e018      	b.n	80054be <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	e853 3f00 	ldrex	r3, [r3]
 8005498:	613b      	str	r3, [r7, #16]
   return(result);
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	f043 0320 	orr.w	r3, r3, #32
 80054a0:	653b      	str	r3, [r7, #80]	@ 0x50
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	461a      	mov	r2, r3
 80054a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054aa:	623b      	str	r3, [r7, #32]
 80054ac:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ae:	69f9      	ldr	r1, [r7, #28]
 80054b0:	6a3a      	ldr	r2, [r7, #32]
 80054b2:	e841 2300 	strex	r3, r2, [r1]
 80054b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80054b8:	69bb      	ldr	r3, [r7, #24]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d1e6      	bne.n	800548c <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80054be:	2300      	movs	r3, #0
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	375c      	adds	r7, #92	@ 0x5c
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr
 80054cc:	08005951 	.word	0x08005951
 80054d0:	08005795 	.word	0x08005795

080054d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b095      	sub	sp, #84	@ 0x54
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054e4:	e853 3f00 	ldrex	r3, [r3]
 80054e8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80054ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80054f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	461a      	mov	r2, r3
 80054f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80054fc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005500:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005502:	e841 2300 	strex	r3, r2, [r1]
 8005506:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800550a:	2b00      	cmp	r3, #0
 800550c:	d1e6      	bne.n	80054dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	3308      	adds	r3, #8
 8005514:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005516:	6a3b      	ldr	r3, [r7, #32]
 8005518:	e853 3f00 	ldrex	r3, [r3]
 800551c:	61fb      	str	r3, [r7, #28]
   return(result);
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	f023 0301 	bic.w	r3, r3, #1
 8005524:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	3308      	adds	r3, #8
 800552c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800552e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005530:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005532:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005534:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005536:	e841 2300 	strex	r3, r2, [r1]
 800553a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800553c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800553e:	2b00      	cmp	r3, #0
 8005540:	d1e5      	bne.n	800550e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005546:	2b01      	cmp	r3, #1
 8005548:	d118      	bne.n	800557c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	e853 3f00 	ldrex	r3, [r3]
 8005556:	60bb      	str	r3, [r7, #8]
   return(result);
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	f023 0310 	bic.w	r3, r3, #16
 800555e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	461a      	mov	r2, r3
 8005566:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005568:	61bb      	str	r3, [r7, #24]
 800556a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556c:	6979      	ldr	r1, [r7, #20]
 800556e:	69ba      	ldr	r2, [r7, #24]
 8005570:	e841 2300 	strex	r3, r2, [r1]
 8005574:	613b      	str	r3, [r7, #16]
   return(result);
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d1e6      	bne.n	800554a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2220      	movs	r2, #32
 8005580:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005590:	bf00      	nop
 8005592:	3754      	adds	r7, #84	@ 0x54
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80055ba:	68f8      	ldr	r0, [r7, #12]
 80055bc:	f7ff fa44 	bl	8004a48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055c0:	bf00      	nop
 80055c2:	3710      	adds	r7, #16
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b08f      	sub	sp, #60	@ 0x3c
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80055d4:	2b21      	cmp	r3, #33	@ 0x21
 80055d6:	d14c      	bne.n	8005672 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80055de:	b29b      	uxth	r3, r3
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d132      	bne.n	800564a <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ea:	6a3b      	ldr	r3, [r7, #32]
 80055ec:	e853 3f00 	ldrex	r3, [r3]
 80055f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	461a      	mov	r2, r3
 8005600:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005602:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005604:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005606:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005608:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800560a:	e841 2300 	strex	r3, r2, [r1]
 800560e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005612:	2b00      	cmp	r3, #0
 8005614:	d1e6      	bne.n	80055e4 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	e853 3f00 	ldrex	r3, [r3]
 8005622:	60bb      	str	r3, [r7, #8]
   return(result);
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800562a:	633b      	str	r3, [r7, #48]	@ 0x30
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	461a      	mov	r2, r3
 8005632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005634:	61bb      	str	r3, [r7, #24]
 8005636:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005638:	6979      	ldr	r1, [r7, #20]
 800563a:	69ba      	ldr	r2, [r7, #24]
 800563c:	e841 2300 	strex	r3, r2, [r1]
 8005640:	613b      	str	r3, [r7, #16]
   return(result);
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d1e6      	bne.n	8005616 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005648:	e013      	b.n	8005672 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800564e:	781a      	ldrb	r2, [r3, #0]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800565a:	1c5a      	adds	r2, r3, #1
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005666:	b29b      	uxth	r3, r3
 8005668:	3b01      	subs	r3, #1
 800566a:	b29a      	uxth	r2, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8005672:	bf00      	nop
 8005674:	373c      	adds	r7, #60	@ 0x3c
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr

0800567e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800567e:	b480      	push	{r7}
 8005680:	b091      	sub	sp, #68	@ 0x44
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800568a:	2b21      	cmp	r3, #33	@ 0x21
 800568c:	d151      	bne.n	8005732 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005694:	b29b      	uxth	r3, r3
 8005696:	2b00      	cmp	r3, #0
 8005698:	d132      	bne.n	8005700 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a2:	e853 3f00 	ldrex	r3, [r3]
 80056a6:	623b      	str	r3, [r7, #32]
   return(result);
 80056a8:	6a3b      	ldr	r3, [r7, #32]
 80056aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	461a      	mov	r2, r3
 80056b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80056ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056bc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80056be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056c0:	e841 2300 	strex	r3, r2, [r1]
 80056c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80056c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d1e6      	bne.n	800569a <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	e853 3f00 	ldrex	r3, [r3]
 80056d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80056e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	461a      	mov	r2, r3
 80056e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056ea:	61fb      	str	r3, [r7, #28]
 80056ec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ee:	69b9      	ldr	r1, [r7, #24]
 80056f0:	69fa      	ldr	r2, [r7, #28]
 80056f2:	e841 2300 	strex	r3, r2, [r1]
 80056f6:	617b      	str	r3, [r7, #20]
   return(result);
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d1e6      	bne.n	80056cc <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80056fe:	e018      	b.n	8005732 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005704:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005706:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005708:	881a      	ldrh	r2, [r3, #0]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005712:	b292      	uxth	r2, r2
 8005714:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800571a:	1c9a      	adds	r2, r3, #2
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005726:	b29b      	uxth	r3, r3
 8005728:	3b01      	subs	r3, #1
 800572a:	b29a      	uxth	r2, r3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8005732:	bf00      	nop
 8005734:	3744      	adds	r7, #68	@ 0x44
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr

0800573e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800573e:	b580      	push	{r7, lr}
 8005740:	b088      	sub	sp, #32
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	e853 3f00 	ldrex	r3, [r3]
 8005752:	60bb      	str	r3, [r7, #8]
   return(result);
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800575a:	61fb      	str	r3, [r7, #28]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	461a      	mov	r2, r3
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	61bb      	str	r3, [r7, #24]
 8005766:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005768:	6979      	ldr	r1, [r7, #20]
 800576a:	69ba      	ldr	r2, [r7, #24]
 800576c:	e841 2300 	strex	r3, r2, [r1]
 8005770:	613b      	str	r3, [r7, #16]
   return(result);
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d1e6      	bne.n	8005746 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2220      	movs	r2, #32
 800577c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f7fb feb7 	bl	80014f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800578a:	bf00      	nop
 800578c:	3720      	adds	r7, #32
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
	...

08005794 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b09c      	sub	sp, #112	@ 0x70
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80057a2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057ac:	2b22      	cmp	r3, #34	@ 0x22
 80057ae:	f040 80be 	bne.w	800592e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80057b8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80057bc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80057c0:	b2d9      	uxtb	r1, r3
 80057c2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80057c6:	b2da      	uxtb	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057cc:	400a      	ands	r2, r1
 80057ce:	b2d2      	uxtb	r2, r2
 80057d0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057d6:	1c5a      	adds	r2, r3, #1
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	3b01      	subs	r3, #1
 80057e6:	b29a      	uxth	r2, r3
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	f040 80a3 	bne.w	8005942 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005802:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005804:	e853 3f00 	ldrex	r3, [r3]
 8005808:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800580a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800580c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005810:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	461a      	mov	r2, r3
 8005818:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800581a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800581c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005820:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005822:	e841 2300 	strex	r3, r2, [r1]
 8005826:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005828:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800582a:	2b00      	cmp	r3, #0
 800582c:	d1e6      	bne.n	80057fc <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	3308      	adds	r3, #8
 8005834:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005838:	e853 3f00 	ldrex	r3, [r3]
 800583c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800583e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005840:	f023 0301 	bic.w	r3, r3, #1
 8005844:	667b      	str	r3, [r7, #100]	@ 0x64
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	3308      	adds	r3, #8
 800584c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800584e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005850:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005852:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005854:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005856:	e841 2300 	strex	r3, r2, [r1]
 800585a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800585c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1e5      	bne.n	800582e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2220      	movs	r2, #32
 8005866:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a34      	ldr	r2, [pc, #208]	@ (800594c <UART_RxISR_8BIT+0x1b8>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d01f      	beq.n	80058c0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d018      	beq.n	80058c0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005896:	e853 3f00 	ldrex	r3, [r3]
 800589a:	623b      	str	r3, [r7, #32]
   return(result);
 800589c:	6a3b      	ldr	r3, [r7, #32]
 800589e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80058a2:	663b      	str	r3, [r7, #96]	@ 0x60
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	461a      	mov	r2, r3
 80058aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80058ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80058ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80058b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058b4:	e841 2300 	strex	r3, r2, [r1]
 80058b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80058ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d1e6      	bne.n	800588e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d12e      	bne.n	8005926 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	e853 3f00 	ldrex	r3, [r3]
 80058da:	60fb      	str	r3, [r7, #12]
   return(result);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f023 0310 	bic.w	r3, r3, #16
 80058e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	461a      	mov	r2, r3
 80058ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80058ec:	61fb      	str	r3, [r7, #28]
 80058ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f0:	69b9      	ldr	r1, [r7, #24]
 80058f2:	69fa      	ldr	r2, [r7, #28]
 80058f4:	e841 2300 	strex	r3, r2, [r1]
 80058f8:	617b      	str	r3, [r7, #20]
   return(result);
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d1e6      	bne.n	80058ce <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	69db      	ldr	r3, [r3, #28]
 8005906:	f003 0310 	and.w	r3, r3, #16
 800590a:	2b10      	cmp	r3, #16
 800590c:	d103      	bne.n	8005916 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2210      	movs	r2, #16
 8005914:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800591c:	4619      	mov	r1, r3
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f7ff f89c 	bl	8004a5c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005924:	e00d      	b.n	8005942 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f7fb fdb2 	bl	8001490 <HAL_UART_RxCpltCallback>
}
 800592c:	e009      	b.n	8005942 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	8b1b      	ldrh	r3, [r3, #24]
 8005934:	b29a      	uxth	r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f042 0208 	orr.w	r2, r2, #8
 800593e:	b292      	uxth	r2, r2
 8005940:	831a      	strh	r2, [r3, #24]
}
 8005942:	bf00      	nop
 8005944:	3770      	adds	r7, #112	@ 0x70
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	40008000 	.word	0x40008000

08005950 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b09c      	sub	sp, #112	@ 0x70
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800595e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005968:	2b22      	cmp	r3, #34	@ 0x22
 800596a:	f040 80be 	bne.w	8005aea <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005974:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800597c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800597e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8005982:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005986:	4013      	ands	r3, r2
 8005988:	b29a      	uxth	r2, r3
 800598a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800598c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005992:	1c9a      	adds	r2, r3, #2
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800599e:	b29b      	uxth	r3, r3
 80059a0:	3b01      	subs	r3, #1
 80059a2:	b29a      	uxth	r2, r3
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	f040 80a3 	bne.w	8005afe <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059c0:	e853 3f00 	ldrex	r3, [r3]
 80059c4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80059c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80059cc:	667b      	str	r3, [r7, #100]	@ 0x64
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	461a      	mov	r2, r3
 80059d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80059d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80059d8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059da:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80059dc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80059de:	e841 2300 	strex	r3, r2, [r1]
 80059e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80059e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d1e6      	bne.n	80059b8 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	3308      	adds	r3, #8
 80059f0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059f4:	e853 3f00 	ldrex	r3, [r3]
 80059f8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80059fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059fc:	f023 0301 	bic.w	r3, r3, #1
 8005a00:	663b      	str	r3, [r7, #96]	@ 0x60
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	3308      	adds	r3, #8
 8005a08:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005a0a:	643a      	str	r2, [r7, #64]	@ 0x40
 8005a0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a0e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005a10:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a12:	e841 2300 	strex	r3, r2, [r1]
 8005a16:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d1e5      	bne.n	80059ea <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2220      	movs	r2, #32
 8005a22:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a34      	ldr	r2, [pc, #208]	@ (8005b08 <UART_RxISR_16BIT+0x1b8>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d01f      	beq.n	8005a7c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d018      	beq.n	8005a7c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a50:	6a3b      	ldr	r3, [r7, #32]
 8005a52:	e853 3f00 	ldrex	r3, [r3]
 8005a56:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005a5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	461a      	mov	r2, r3
 8005a66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a6a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a6c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a70:	e841 2300 	strex	r3, r2, [r1]
 8005a74:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d1e6      	bne.n	8005a4a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d12e      	bne.n	8005ae2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	e853 3f00 	ldrex	r3, [r3]
 8005a96:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	f023 0310 	bic.w	r3, r3, #16
 8005a9e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005aa8:	61bb      	str	r3, [r7, #24]
 8005aaa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aac:	6979      	ldr	r1, [r7, #20]
 8005aae:	69ba      	ldr	r2, [r7, #24]
 8005ab0:	e841 2300 	strex	r3, r2, [r1]
 8005ab4:	613b      	str	r3, [r7, #16]
   return(result);
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d1e6      	bne.n	8005a8a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	69db      	ldr	r3, [r3, #28]
 8005ac2:	f003 0310 	and.w	r3, r3, #16
 8005ac6:	2b10      	cmp	r3, #16
 8005ac8:	d103      	bne.n	8005ad2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2210      	movs	r2, #16
 8005ad0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005ad8:	4619      	mov	r1, r3
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f7fe ffbe 	bl	8004a5c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005ae0:	e00d      	b.n	8005afe <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f7fb fcd4 	bl	8001490 <HAL_UART_RxCpltCallback>
}
 8005ae8:	e009      	b.n	8005afe <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	8b1b      	ldrh	r3, [r3, #24]
 8005af0:	b29a      	uxth	r2, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f042 0208 	orr.w	r2, r2, #8
 8005afa:	b292      	uxth	r2, r2
 8005afc:	831a      	strh	r2, [r3, #24]
}
 8005afe:	bf00      	nop
 8005b00:	3770      	adds	r7, #112	@ 0x70
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	40008000 	.word	0x40008000

08005b0c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005b14:	bf00      	nop
 8005b16:	370c      	adds	r7, #12
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <atof>:
 8005b20:	2100      	movs	r1, #0
 8005b22:	f000 be05 	b.w	8006730 <strtod>

08005b26 <sulp>:
 8005b26:	b570      	push	{r4, r5, r6, lr}
 8005b28:	4604      	mov	r4, r0
 8005b2a:	460d      	mov	r5, r1
 8005b2c:	ec45 4b10 	vmov	d0, r4, r5
 8005b30:	4616      	mov	r6, r2
 8005b32:	f003 fab9 	bl	80090a8 <__ulp>
 8005b36:	ec51 0b10 	vmov	r0, r1, d0
 8005b3a:	b17e      	cbz	r6, 8005b5c <sulp+0x36>
 8005b3c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005b40:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	dd09      	ble.n	8005b5c <sulp+0x36>
 8005b48:	051b      	lsls	r3, r3, #20
 8005b4a:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8005b4e:	2400      	movs	r4, #0
 8005b50:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8005b54:	4622      	mov	r2, r4
 8005b56:	462b      	mov	r3, r5
 8005b58:	f7fa fd4e 	bl	80005f8 <__aeabi_dmul>
 8005b5c:	ec41 0b10 	vmov	d0, r0, r1
 8005b60:	bd70      	pop	{r4, r5, r6, pc}
 8005b62:	0000      	movs	r0, r0
 8005b64:	0000      	movs	r0, r0
	...

08005b68 <_strtod_l>:
 8005b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b6c:	b09f      	sub	sp, #124	@ 0x7c
 8005b6e:	460c      	mov	r4, r1
 8005b70:	9217      	str	r2, [sp, #92]	@ 0x5c
 8005b72:	2200      	movs	r2, #0
 8005b74:	921a      	str	r2, [sp, #104]	@ 0x68
 8005b76:	9005      	str	r0, [sp, #20]
 8005b78:	f04f 0a00 	mov.w	sl, #0
 8005b7c:	f04f 0b00 	mov.w	fp, #0
 8005b80:	460a      	mov	r2, r1
 8005b82:	9219      	str	r2, [sp, #100]	@ 0x64
 8005b84:	7811      	ldrb	r1, [r2, #0]
 8005b86:	292b      	cmp	r1, #43	@ 0x2b
 8005b88:	d04a      	beq.n	8005c20 <_strtod_l+0xb8>
 8005b8a:	d838      	bhi.n	8005bfe <_strtod_l+0x96>
 8005b8c:	290d      	cmp	r1, #13
 8005b8e:	d832      	bhi.n	8005bf6 <_strtod_l+0x8e>
 8005b90:	2908      	cmp	r1, #8
 8005b92:	d832      	bhi.n	8005bfa <_strtod_l+0x92>
 8005b94:	2900      	cmp	r1, #0
 8005b96:	d03b      	beq.n	8005c10 <_strtod_l+0xa8>
 8005b98:	2200      	movs	r2, #0
 8005b9a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8005b9c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8005b9e:	782a      	ldrb	r2, [r5, #0]
 8005ba0:	2a30      	cmp	r2, #48	@ 0x30
 8005ba2:	f040 80b3 	bne.w	8005d0c <_strtod_l+0x1a4>
 8005ba6:	786a      	ldrb	r2, [r5, #1]
 8005ba8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005bac:	2a58      	cmp	r2, #88	@ 0x58
 8005bae:	d16e      	bne.n	8005c8e <_strtod_l+0x126>
 8005bb0:	9302      	str	r3, [sp, #8]
 8005bb2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005bb4:	9301      	str	r3, [sp, #4]
 8005bb6:	ab1a      	add	r3, sp, #104	@ 0x68
 8005bb8:	9300      	str	r3, [sp, #0]
 8005bba:	4a8e      	ldr	r2, [pc, #568]	@ (8005df4 <_strtod_l+0x28c>)
 8005bbc:	9805      	ldr	r0, [sp, #20]
 8005bbe:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005bc0:	a919      	add	r1, sp, #100	@ 0x64
 8005bc2:	f002 fb63 	bl	800828c <__gethex>
 8005bc6:	f010 060f 	ands.w	r6, r0, #15
 8005bca:	4604      	mov	r4, r0
 8005bcc:	d005      	beq.n	8005bda <_strtod_l+0x72>
 8005bce:	2e06      	cmp	r6, #6
 8005bd0:	d128      	bne.n	8005c24 <_strtod_l+0xbc>
 8005bd2:	3501      	adds	r5, #1
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	9519      	str	r5, [sp, #100]	@ 0x64
 8005bd8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005bda:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	f040 858e 	bne.w	80066fe <_strtod_l+0xb96>
 8005be2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005be4:	b1cb      	cbz	r3, 8005c1a <_strtod_l+0xb2>
 8005be6:	4652      	mov	r2, sl
 8005be8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8005bec:	ec43 2b10 	vmov	d0, r2, r3
 8005bf0:	b01f      	add	sp, #124	@ 0x7c
 8005bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bf6:	2920      	cmp	r1, #32
 8005bf8:	d1ce      	bne.n	8005b98 <_strtod_l+0x30>
 8005bfa:	3201      	adds	r2, #1
 8005bfc:	e7c1      	b.n	8005b82 <_strtod_l+0x1a>
 8005bfe:	292d      	cmp	r1, #45	@ 0x2d
 8005c00:	d1ca      	bne.n	8005b98 <_strtod_l+0x30>
 8005c02:	2101      	movs	r1, #1
 8005c04:	910b      	str	r1, [sp, #44]	@ 0x2c
 8005c06:	1c51      	adds	r1, r2, #1
 8005c08:	9119      	str	r1, [sp, #100]	@ 0x64
 8005c0a:	7852      	ldrb	r2, [r2, #1]
 8005c0c:	2a00      	cmp	r2, #0
 8005c0e:	d1c5      	bne.n	8005b9c <_strtod_l+0x34>
 8005c10:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005c12:	9419      	str	r4, [sp, #100]	@ 0x64
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	f040 8570 	bne.w	80066fa <_strtod_l+0xb92>
 8005c1a:	4652      	mov	r2, sl
 8005c1c:	465b      	mov	r3, fp
 8005c1e:	e7e5      	b.n	8005bec <_strtod_l+0x84>
 8005c20:	2100      	movs	r1, #0
 8005c22:	e7ef      	b.n	8005c04 <_strtod_l+0x9c>
 8005c24:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005c26:	b13a      	cbz	r2, 8005c38 <_strtod_l+0xd0>
 8005c28:	2135      	movs	r1, #53	@ 0x35
 8005c2a:	a81c      	add	r0, sp, #112	@ 0x70
 8005c2c:	f003 fb36 	bl	800929c <__copybits>
 8005c30:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005c32:	9805      	ldr	r0, [sp, #20]
 8005c34:	f002 ff04 	bl	8008a40 <_Bfree>
 8005c38:	3e01      	subs	r6, #1
 8005c3a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8005c3c:	2e04      	cmp	r6, #4
 8005c3e:	d806      	bhi.n	8005c4e <_strtod_l+0xe6>
 8005c40:	e8df f006 	tbb	[pc, r6]
 8005c44:	201d0314 	.word	0x201d0314
 8005c48:	14          	.byte	0x14
 8005c49:	00          	.byte	0x00
 8005c4a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8005c4e:	05e1      	lsls	r1, r4, #23
 8005c50:	bf48      	it	mi
 8005c52:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8005c56:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005c5a:	0d1b      	lsrs	r3, r3, #20
 8005c5c:	051b      	lsls	r3, r3, #20
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d1bb      	bne.n	8005bda <_strtod_l+0x72>
 8005c62:	f001 fbaf 	bl	80073c4 <__errno>
 8005c66:	2322      	movs	r3, #34	@ 0x22
 8005c68:	6003      	str	r3, [r0, #0]
 8005c6a:	e7b6      	b.n	8005bda <_strtod_l+0x72>
 8005c6c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8005c70:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8005c74:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005c78:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005c7c:	e7e7      	b.n	8005c4e <_strtod_l+0xe6>
 8005c7e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8005dfc <_strtod_l+0x294>
 8005c82:	e7e4      	b.n	8005c4e <_strtod_l+0xe6>
 8005c84:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8005c88:	f04f 3aff 	mov.w	sl, #4294967295
 8005c8c:	e7df      	b.n	8005c4e <_strtod_l+0xe6>
 8005c8e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005c90:	1c5a      	adds	r2, r3, #1
 8005c92:	9219      	str	r2, [sp, #100]	@ 0x64
 8005c94:	785b      	ldrb	r3, [r3, #1]
 8005c96:	2b30      	cmp	r3, #48	@ 0x30
 8005c98:	d0f9      	beq.n	8005c8e <_strtod_l+0x126>
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d09d      	beq.n	8005bda <_strtod_l+0x72>
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ca2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005ca4:	930c      	str	r3, [sp, #48]	@ 0x30
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	9308      	str	r3, [sp, #32]
 8005caa:	930a      	str	r3, [sp, #40]	@ 0x28
 8005cac:	461f      	mov	r7, r3
 8005cae:	220a      	movs	r2, #10
 8005cb0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8005cb2:	7805      	ldrb	r5, [r0, #0]
 8005cb4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8005cb8:	b2d9      	uxtb	r1, r3
 8005cba:	2909      	cmp	r1, #9
 8005cbc:	d928      	bls.n	8005d10 <_strtod_l+0x1a8>
 8005cbe:	494e      	ldr	r1, [pc, #312]	@ (8005df8 <_strtod_l+0x290>)
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	f001 fac6 	bl	8007252 <strncmp>
 8005cc6:	2800      	cmp	r0, #0
 8005cc8:	d032      	beq.n	8005d30 <_strtod_l+0x1c8>
 8005cca:	2000      	movs	r0, #0
 8005ccc:	462a      	mov	r2, r5
 8005cce:	4681      	mov	r9, r0
 8005cd0:	463d      	mov	r5, r7
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2a65      	cmp	r2, #101	@ 0x65
 8005cd6:	d001      	beq.n	8005cdc <_strtod_l+0x174>
 8005cd8:	2a45      	cmp	r2, #69	@ 0x45
 8005cda:	d114      	bne.n	8005d06 <_strtod_l+0x19e>
 8005cdc:	b91d      	cbnz	r5, 8005ce6 <_strtod_l+0x17e>
 8005cde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ce0:	4302      	orrs	r2, r0
 8005ce2:	d095      	beq.n	8005c10 <_strtod_l+0xa8>
 8005ce4:	2500      	movs	r5, #0
 8005ce6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8005ce8:	1c62      	adds	r2, r4, #1
 8005cea:	9219      	str	r2, [sp, #100]	@ 0x64
 8005cec:	7862      	ldrb	r2, [r4, #1]
 8005cee:	2a2b      	cmp	r2, #43	@ 0x2b
 8005cf0:	d077      	beq.n	8005de2 <_strtod_l+0x27a>
 8005cf2:	2a2d      	cmp	r2, #45	@ 0x2d
 8005cf4:	d07b      	beq.n	8005dee <_strtod_l+0x286>
 8005cf6:	f04f 0c00 	mov.w	ip, #0
 8005cfa:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8005cfe:	2909      	cmp	r1, #9
 8005d00:	f240 8082 	bls.w	8005e08 <_strtod_l+0x2a0>
 8005d04:	9419      	str	r4, [sp, #100]	@ 0x64
 8005d06:	f04f 0800 	mov.w	r8, #0
 8005d0a:	e0a2      	b.n	8005e52 <_strtod_l+0x2ea>
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	e7c7      	b.n	8005ca0 <_strtod_l+0x138>
 8005d10:	2f08      	cmp	r7, #8
 8005d12:	bfd5      	itete	le
 8005d14:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8005d16:	9908      	ldrgt	r1, [sp, #32]
 8005d18:	fb02 3301 	mlale	r3, r2, r1, r3
 8005d1c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005d20:	f100 0001 	add.w	r0, r0, #1
 8005d24:	bfd4      	ite	le
 8005d26:	930a      	strle	r3, [sp, #40]	@ 0x28
 8005d28:	9308      	strgt	r3, [sp, #32]
 8005d2a:	3701      	adds	r7, #1
 8005d2c:	9019      	str	r0, [sp, #100]	@ 0x64
 8005d2e:	e7bf      	b.n	8005cb0 <_strtod_l+0x148>
 8005d30:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005d32:	1c5a      	adds	r2, r3, #1
 8005d34:	9219      	str	r2, [sp, #100]	@ 0x64
 8005d36:	785a      	ldrb	r2, [r3, #1]
 8005d38:	b37f      	cbz	r7, 8005d9a <_strtod_l+0x232>
 8005d3a:	4681      	mov	r9, r0
 8005d3c:	463d      	mov	r5, r7
 8005d3e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8005d42:	2b09      	cmp	r3, #9
 8005d44:	d912      	bls.n	8005d6c <_strtod_l+0x204>
 8005d46:	2301      	movs	r3, #1
 8005d48:	e7c4      	b.n	8005cd4 <_strtod_l+0x16c>
 8005d4a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005d4c:	1c5a      	adds	r2, r3, #1
 8005d4e:	9219      	str	r2, [sp, #100]	@ 0x64
 8005d50:	785a      	ldrb	r2, [r3, #1]
 8005d52:	3001      	adds	r0, #1
 8005d54:	2a30      	cmp	r2, #48	@ 0x30
 8005d56:	d0f8      	beq.n	8005d4a <_strtod_l+0x1e2>
 8005d58:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8005d5c:	2b08      	cmp	r3, #8
 8005d5e:	f200 84d3 	bhi.w	8006708 <_strtod_l+0xba0>
 8005d62:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005d64:	930c      	str	r3, [sp, #48]	@ 0x30
 8005d66:	4681      	mov	r9, r0
 8005d68:	2000      	movs	r0, #0
 8005d6a:	4605      	mov	r5, r0
 8005d6c:	3a30      	subs	r2, #48	@ 0x30
 8005d6e:	f100 0301 	add.w	r3, r0, #1
 8005d72:	d02a      	beq.n	8005dca <_strtod_l+0x262>
 8005d74:	4499      	add	r9, r3
 8005d76:	eb00 0c05 	add.w	ip, r0, r5
 8005d7a:	462b      	mov	r3, r5
 8005d7c:	210a      	movs	r1, #10
 8005d7e:	4563      	cmp	r3, ip
 8005d80:	d10d      	bne.n	8005d9e <_strtod_l+0x236>
 8005d82:	1c69      	adds	r1, r5, #1
 8005d84:	4401      	add	r1, r0
 8005d86:	4428      	add	r0, r5
 8005d88:	2808      	cmp	r0, #8
 8005d8a:	dc16      	bgt.n	8005dba <_strtod_l+0x252>
 8005d8c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005d8e:	230a      	movs	r3, #10
 8005d90:	fb03 2300 	mla	r3, r3, r0, r2
 8005d94:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d96:	2300      	movs	r3, #0
 8005d98:	e018      	b.n	8005dcc <_strtod_l+0x264>
 8005d9a:	4638      	mov	r0, r7
 8005d9c:	e7da      	b.n	8005d54 <_strtod_l+0x1ec>
 8005d9e:	2b08      	cmp	r3, #8
 8005da0:	f103 0301 	add.w	r3, r3, #1
 8005da4:	dc03      	bgt.n	8005dae <_strtod_l+0x246>
 8005da6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8005da8:	434e      	muls	r6, r1
 8005daa:	960a      	str	r6, [sp, #40]	@ 0x28
 8005dac:	e7e7      	b.n	8005d7e <_strtod_l+0x216>
 8005dae:	2b10      	cmp	r3, #16
 8005db0:	bfde      	ittt	le
 8005db2:	9e08      	ldrle	r6, [sp, #32]
 8005db4:	434e      	mulle	r6, r1
 8005db6:	9608      	strle	r6, [sp, #32]
 8005db8:	e7e1      	b.n	8005d7e <_strtod_l+0x216>
 8005dba:	280f      	cmp	r0, #15
 8005dbc:	dceb      	bgt.n	8005d96 <_strtod_l+0x22e>
 8005dbe:	9808      	ldr	r0, [sp, #32]
 8005dc0:	230a      	movs	r3, #10
 8005dc2:	fb03 2300 	mla	r3, r3, r0, r2
 8005dc6:	9308      	str	r3, [sp, #32]
 8005dc8:	e7e5      	b.n	8005d96 <_strtod_l+0x22e>
 8005dca:	4629      	mov	r1, r5
 8005dcc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005dce:	1c50      	adds	r0, r2, #1
 8005dd0:	9019      	str	r0, [sp, #100]	@ 0x64
 8005dd2:	7852      	ldrb	r2, [r2, #1]
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	460d      	mov	r5, r1
 8005dd8:	e7b1      	b.n	8005d3e <_strtod_l+0x1d6>
 8005dda:	f04f 0900 	mov.w	r9, #0
 8005dde:	2301      	movs	r3, #1
 8005de0:	e77d      	b.n	8005cde <_strtod_l+0x176>
 8005de2:	f04f 0c00 	mov.w	ip, #0
 8005de6:	1ca2      	adds	r2, r4, #2
 8005de8:	9219      	str	r2, [sp, #100]	@ 0x64
 8005dea:	78a2      	ldrb	r2, [r4, #2]
 8005dec:	e785      	b.n	8005cfa <_strtod_l+0x192>
 8005dee:	f04f 0c01 	mov.w	ip, #1
 8005df2:	e7f8      	b.n	8005de6 <_strtod_l+0x27e>
 8005df4:	0800be00 	.word	0x0800be00
 8005df8:	0800bde8 	.word	0x0800bde8
 8005dfc:	7ff00000 	.word	0x7ff00000
 8005e00:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005e02:	1c51      	adds	r1, r2, #1
 8005e04:	9119      	str	r1, [sp, #100]	@ 0x64
 8005e06:	7852      	ldrb	r2, [r2, #1]
 8005e08:	2a30      	cmp	r2, #48	@ 0x30
 8005e0a:	d0f9      	beq.n	8005e00 <_strtod_l+0x298>
 8005e0c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8005e10:	2908      	cmp	r1, #8
 8005e12:	f63f af78 	bhi.w	8005d06 <_strtod_l+0x19e>
 8005e16:	3a30      	subs	r2, #48	@ 0x30
 8005e18:	920e      	str	r2, [sp, #56]	@ 0x38
 8005e1a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005e1c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8005e1e:	f04f 080a 	mov.w	r8, #10
 8005e22:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005e24:	1c56      	adds	r6, r2, #1
 8005e26:	9619      	str	r6, [sp, #100]	@ 0x64
 8005e28:	7852      	ldrb	r2, [r2, #1]
 8005e2a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8005e2e:	f1be 0f09 	cmp.w	lr, #9
 8005e32:	d939      	bls.n	8005ea8 <_strtod_l+0x340>
 8005e34:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005e36:	1a76      	subs	r6, r6, r1
 8005e38:	2e08      	cmp	r6, #8
 8005e3a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8005e3e:	dc03      	bgt.n	8005e48 <_strtod_l+0x2e0>
 8005e40:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005e42:	4588      	cmp	r8, r1
 8005e44:	bfa8      	it	ge
 8005e46:	4688      	movge	r8, r1
 8005e48:	f1bc 0f00 	cmp.w	ip, #0
 8005e4c:	d001      	beq.n	8005e52 <_strtod_l+0x2ea>
 8005e4e:	f1c8 0800 	rsb	r8, r8, #0
 8005e52:	2d00      	cmp	r5, #0
 8005e54:	d14e      	bne.n	8005ef4 <_strtod_l+0x38c>
 8005e56:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005e58:	4308      	orrs	r0, r1
 8005e5a:	f47f aebe 	bne.w	8005bda <_strtod_l+0x72>
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	f47f aed6 	bne.w	8005c10 <_strtod_l+0xa8>
 8005e64:	2a69      	cmp	r2, #105	@ 0x69
 8005e66:	d028      	beq.n	8005eba <_strtod_l+0x352>
 8005e68:	dc25      	bgt.n	8005eb6 <_strtod_l+0x34e>
 8005e6a:	2a49      	cmp	r2, #73	@ 0x49
 8005e6c:	d025      	beq.n	8005eba <_strtod_l+0x352>
 8005e6e:	2a4e      	cmp	r2, #78	@ 0x4e
 8005e70:	f47f aece 	bne.w	8005c10 <_strtod_l+0xa8>
 8005e74:	499b      	ldr	r1, [pc, #620]	@ (80060e4 <_strtod_l+0x57c>)
 8005e76:	a819      	add	r0, sp, #100	@ 0x64
 8005e78:	f002 fc2a 	bl	80086d0 <__match>
 8005e7c:	2800      	cmp	r0, #0
 8005e7e:	f43f aec7 	beq.w	8005c10 <_strtod_l+0xa8>
 8005e82:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	2b28      	cmp	r3, #40	@ 0x28
 8005e88:	d12e      	bne.n	8005ee8 <_strtod_l+0x380>
 8005e8a:	4997      	ldr	r1, [pc, #604]	@ (80060e8 <_strtod_l+0x580>)
 8005e8c:	aa1c      	add	r2, sp, #112	@ 0x70
 8005e8e:	a819      	add	r0, sp, #100	@ 0x64
 8005e90:	f002 fc32 	bl	80086f8 <__hexnan>
 8005e94:	2805      	cmp	r0, #5
 8005e96:	d127      	bne.n	8005ee8 <_strtod_l+0x380>
 8005e98:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005e9a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8005e9e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8005ea2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8005ea6:	e698      	b.n	8005bda <_strtod_l+0x72>
 8005ea8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005eaa:	fb08 2101 	mla	r1, r8, r1, r2
 8005eae:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8005eb2:	920e      	str	r2, [sp, #56]	@ 0x38
 8005eb4:	e7b5      	b.n	8005e22 <_strtod_l+0x2ba>
 8005eb6:	2a6e      	cmp	r2, #110	@ 0x6e
 8005eb8:	e7da      	b.n	8005e70 <_strtod_l+0x308>
 8005eba:	498c      	ldr	r1, [pc, #560]	@ (80060ec <_strtod_l+0x584>)
 8005ebc:	a819      	add	r0, sp, #100	@ 0x64
 8005ebe:	f002 fc07 	bl	80086d0 <__match>
 8005ec2:	2800      	cmp	r0, #0
 8005ec4:	f43f aea4 	beq.w	8005c10 <_strtod_l+0xa8>
 8005ec8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005eca:	4989      	ldr	r1, [pc, #548]	@ (80060f0 <_strtod_l+0x588>)
 8005ecc:	3b01      	subs	r3, #1
 8005ece:	a819      	add	r0, sp, #100	@ 0x64
 8005ed0:	9319      	str	r3, [sp, #100]	@ 0x64
 8005ed2:	f002 fbfd 	bl	80086d0 <__match>
 8005ed6:	b910      	cbnz	r0, 8005ede <_strtod_l+0x376>
 8005ed8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005eda:	3301      	adds	r3, #1
 8005edc:	9319      	str	r3, [sp, #100]	@ 0x64
 8005ede:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8006100 <_strtod_l+0x598>
 8005ee2:	f04f 0a00 	mov.w	sl, #0
 8005ee6:	e678      	b.n	8005bda <_strtod_l+0x72>
 8005ee8:	4882      	ldr	r0, [pc, #520]	@ (80060f4 <_strtod_l+0x58c>)
 8005eea:	f001 faa9 	bl	8007440 <nan>
 8005eee:	ec5b ab10 	vmov	sl, fp, d0
 8005ef2:	e672      	b.n	8005bda <_strtod_l+0x72>
 8005ef4:	eba8 0309 	sub.w	r3, r8, r9
 8005ef8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005efa:	9309      	str	r3, [sp, #36]	@ 0x24
 8005efc:	2f00      	cmp	r7, #0
 8005efe:	bf08      	it	eq
 8005f00:	462f      	moveq	r7, r5
 8005f02:	2d10      	cmp	r5, #16
 8005f04:	462c      	mov	r4, r5
 8005f06:	bfa8      	it	ge
 8005f08:	2410      	movge	r4, #16
 8005f0a:	f7fa fafb 	bl	8000504 <__aeabi_ui2d>
 8005f0e:	2d09      	cmp	r5, #9
 8005f10:	4682      	mov	sl, r0
 8005f12:	468b      	mov	fp, r1
 8005f14:	dc13      	bgt.n	8005f3e <_strtod_l+0x3d6>
 8005f16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	f43f ae5e 	beq.w	8005bda <_strtod_l+0x72>
 8005f1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f20:	dd78      	ble.n	8006014 <_strtod_l+0x4ac>
 8005f22:	2b16      	cmp	r3, #22
 8005f24:	dc5f      	bgt.n	8005fe6 <_strtod_l+0x47e>
 8005f26:	4974      	ldr	r1, [pc, #464]	@ (80060f8 <_strtod_l+0x590>)
 8005f28:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005f2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f30:	4652      	mov	r2, sl
 8005f32:	465b      	mov	r3, fp
 8005f34:	f7fa fb60 	bl	80005f8 <__aeabi_dmul>
 8005f38:	4682      	mov	sl, r0
 8005f3a:	468b      	mov	fp, r1
 8005f3c:	e64d      	b.n	8005bda <_strtod_l+0x72>
 8005f3e:	4b6e      	ldr	r3, [pc, #440]	@ (80060f8 <_strtod_l+0x590>)
 8005f40:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005f44:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8005f48:	f7fa fb56 	bl	80005f8 <__aeabi_dmul>
 8005f4c:	4682      	mov	sl, r0
 8005f4e:	9808      	ldr	r0, [sp, #32]
 8005f50:	468b      	mov	fp, r1
 8005f52:	f7fa fad7 	bl	8000504 <__aeabi_ui2d>
 8005f56:	4602      	mov	r2, r0
 8005f58:	460b      	mov	r3, r1
 8005f5a:	4650      	mov	r0, sl
 8005f5c:	4659      	mov	r1, fp
 8005f5e:	f7fa f995 	bl	800028c <__adddf3>
 8005f62:	2d0f      	cmp	r5, #15
 8005f64:	4682      	mov	sl, r0
 8005f66:	468b      	mov	fp, r1
 8005f68:	ddd5      	ble.n	8005f16 <_strtod_l+0x3ae>
 8005f6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f6c:	1b2c      	subs	r4, r5, r4
 8005f6e:	441c      	add	r4, r3
 8005f70:	2c00      	cmp	r4, #0
 8005f72:	f340 8096 	ble.w	80060a2 <_strtod_l+0x53a>
 8005f76:	f014 030f 	ands.w	r3, r4, #15
 8005f7a:	d00a      	beq.n	8005f92 <_strtod_l+0x42a>
 8005f7c:	495e      	ldr	r1, [pc, #376]	@ (80060f8 <_strtod_l+0x590>)
 8005f7e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005f82:	4652      	mov	r2, sl
 8005f84:	465b      	mov	r3, fp
 8005f86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f8a:	f7fa fb35 	bl	80005f8 <__aeabi_dmul>
 8005f8e:	4682      	mov	sl, r0
 8005f90:	468b      	mov	fp, r1
 8005f92:	f034 040f 	bics.w	r4, r4, #15
 8005f96:	d073      	beq.n	8006080 <_strtod_l+0x518>
 8005f98:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8005f9c:	dd48      	ble.n	8006030 <_strtod_l+0x4c8>
 8005f9e:	2400      	movs	r4, #0
 8005fa0:	46a0      	mov	r8, r4
 8005fa2:	940a      	str	r4, [sp, #40]	@ 0x28
 8005fa4:	46a1      	mov	r9, r4
 8005fa6:	9a05      	ldr	r2, [sp, #20]
 8005fa8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8006100 <_strtod_l+0x598>
 8005fac:	2322      	movs	r3, #34	@ 0x22
 8005fae:	6013      	str	r3, [r2, #0]
 8005fb0:	f04f 0a00 	mov.w	sl, #0
 8005fb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	f43f ae0f 	beq.w	8005bda <_strtod_l+0x72>
 8005fbc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005fbe:	9805      	ldr	r0, [sp, #20]
 8005fc0:	f002 fd3e 	bl	8008a40 <_Bfree>
 8005fc4:	9805      	ldr	r0, [sp, #20]
 8005fc6:	4649      	mov	r1, r9
 8005fc8:	f002 fd3a 	bl	8008a40 <_Bfree>
 8005fcc:	9805      	ldr	r0, [sp, #20]
 8005fce:	4641      	mov	r1, r8
 8005fd0:	f002 fd36 	bl	8008a40 <_Bfree>
 8005fd4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005fd6:	9805      	ldr	r0, [sp, #20]
 8005fd8:	f002 fd32 	bl	8008a40 <_Bfree>
 8005fdc:	9805      	ldr	r0, [sp, #20]
 8005fde:	4621      	mov	r1, r4
 8005fe0:	f002 fd2e 	bl	8008a40 <_Bfree>
 8005fe4:	e5f9      	b.n	8005bda <_strtod_l+0x72>
 8005fe6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005fe8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8005fec:	4293      	cmp	r3, r2
 8005fee:	dbbc      	blt.n	8005f6a <_strtod_l+0x402>
 8005ff0:	4c41      	ldr	r4, [pc, #260]	@ (80060f8 <_strtod_l+0x590>)
 8005ff2:	f1c5 050f 	rsb	r5, r5, #15
 8005ff6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005ffa:	4652      	mov	r2, sl
 8005ffc:	465b      	mov	r3, fp
 8005ffe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006002:	f7fa faf9 	bl	80005f8 <__aeabi_dmul>
 8006006:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006008:	1b5d      	subs	r5, r3, r5
 800600a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800600e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006012:	e78f      	b.n	8005f34 <_strtod_l+0x3cc>
 8006014:	3316      	adds	r3, #22
 8006016:	dba8      	blt.n	8005f6a <_strtod_l+0x402>
 8006018:	4b37      	ldr	r3, [pc, #220]	@ (80060f8 <_strtod_l+0x590>)
 800601a:	eba9 0808 	sub.w	r8, r9, r8
 800601e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8006022:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006026:	4650      	mov	r0, sl
 8006028:	4659      	mov	r1, fp
 800602a:	f7fa fc0f 	bl	800084c <__aeabi_ddiv>
 800602e:	e783      	b.n	8005f38 <_strtod_l+0x3d0>
 8006030:	4b32      	ldr	r3, [pc, #200]	@ (80060fc <_strtod_l+0x594>)
 8006032:	9308      	str	r3, [sp, #32]
 8006034:	2300      	movs	r3, #0
 8006036:	1124      	asrs	r4, r4, #4
 8006038:	4650      	mov	r0, sl
 800603a:	4659      	mov	r1, fp
 800603c:	461e      	mov	r6, r3
 800603e:	2c01      	cmp	r4, #1
 8006040:	dc21      	bgt.n	8006086 <_strtod_l+0x51e>
 8006042:	b10b      	cbz	r3, 8006048 <_strtod_l+0x4e0>
 8006044:	4682      	mov	sl, r0
 8006046:	468b      	mov	fp, r1
 8006048:	492c      	ldr	r1, [pc, #176]	@ (80060fc <_strtod_l+0x594>)
 800604a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800604e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006052:	4652      	mov	r2, sl
 8006054:	465b      	mov	r3, fp
 8006056:	e9d1 0100 	ldrd	r0, r1, [r1]
 800605a:	f7fa facd 	bl	80005f8 <__aeabi_dmul>
 800605e:	4b28      	ldr	r3, [pc, #160]	@ (8006100 <_strtod_l+0x598>)
 8006060:	460a      	mov	r2, r1
 8006062:	400b      	ands	r3, r1
 8006064:	4927      	ldr	r1, [pc, #156]	@ (8006104 <_strtod_l+0x59c>)
 8006066:	428b      	cmp	r3, r1
 8006068:	4682      	mov	sl, r0
 800606a:	d898      	bhi.n	8005f9e <_strtod_l+0x436>
 800606c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006070:	428b      	cmp	r3, r1
 8006072:	bf86      	itte	hi
 8006074:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8006108 <_strtod_l+0x5a0>
 8006078:	f04f 3aff 	movhi.w	sl, #4294967295
 800607c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006080:	2300      	movs	r3, #0
 8006082:	9308      	str	r3, [sp, #32]
 8006084:	e07a      	b.n	800617c <_strtod_l+0x614>
 8006086:	07e2      	lsls	r2, r4, #31
 8006088:	d505      	bpl.n	8006096 <_strtod_l+0x52e>
 800608a:	9b08      	ldr	r3, [sp, #32]
 800608c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006090:	f7fa fab2 	bl	80005f8 <__aeabi_dmul>
 8006094:	2301      	movs	r3, #1
 8006096:	9a08      	ldr	r2, [sp, #32]
 8006098:	3208      	adds	r2, #8
 800609a:	3601      	adds	r6, #1
 800609c:	1064      	asrs	r4, r4, #1
 800609e:	9208      	str	r2, [sp, #32]
 80060a0:	e7cd      	b.n	800603e <_strtod_l+0x4d6>
 80060a2:	d0ed      	beq.n	8006080 <_strtod_l+0x518>
 80060a4:	4264      	negs	r4, r4
 80060a6:	f014 020f 	ands.w	r2, r4, #15
 80060aa:	d00a      	beq.n	80060c2 <_strtod_l+0x55a>
 80060ac:	4b12      	ldr	r3, [pc, #72]	@ (80060f8 <_strtod_l+0x590>)
 80060ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80060b2:	4650      	mov	r0, sl
 80060b4:	4659      	mov	r1, fp
 80060b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ba:	f7fa fbc7 	bl	800084c <__aeabi_ddiv>
 80060be:	4682      	mov	sl, r0
 80060c0:	468b      	mov	fp, r1
 80060c2:	1124      	asrs	r4, r4, #4
 80060c4:	d0dc      	beq.n	8006080 <_strtod_l+0x518>
 80060c6:	2c1f      	cmp	r4, #31
 80060c8:	dd20      	ble.n	800610c <_strtod_l+0x5a4>
 80060ca:	2400      	movs	r4, #0
 80060cc:	46a0      	mov	r8, r4
 80060ce:	940a      	str	r4, [sp, #40]	@ 0x28
 80060d0:	46a1      	mov	r9, r4
 80060d2:	9a05      	ldr	r2, [sp, #20]
 80060d4:	2322      	movs	r3, #34	@ 0x22
 80060d6:	f04f 0a00 	mov.w	sl, #0
 80060da:	f04f 0b00 	mov.w	fp, #0
 80060de:	6013      	str	r3, [r2, #0]
 80060e0:	e768      	b.n	8005fb4 <_strtod_l+0x44c>
 80060e2:	bf00      	nop
 80060e4:	0800be4d 	.word	0x0800be4d
 80060e8:	0800bdec 	.word	0x0800bdec
 80060ec:	0800be45 	.word	0x0800be45
 80060f0:	0800bf2c 	.word	0x0800bf2c
 80060f4:	0800bf28 	.word	0x0800bf28
 80060f8:	0800c090 	.word	0x0800c090
 80060fc:	0800c068 	.word	0x0800c068
 8006100:	7ff00000 	.word	0x7ff00000
 8006104:	7ca00000 	.word	0x7ca00000
 8006108:	7fefffff 	.word	0x7fefffff
 800610c:	f014 0310 	ands.w	r3, r4, #16
 8006110:	bf18      	it	ne
 8006112:	236a      	movne	r3, #106	@ 0x6a
 8006114:	4ea9      	ldr	r6, [pc, #676]	@ (80063bc <_strtod_l+0x854>)
 8006116:	9308      	str	r3, [sp, #32]
 8006118:	4650      	mov	r0, sl
 800611a:	4659      	mov	r1, fp
 800611c:	2300      	movs	r3, #0
 800611e:	07e2      	lsls	r2, r4, #31
 8006120:	d504      	bpl.n	800612c <_strtod_l+0x5c4>
 8006122:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006126:	f7fa fa67 	bl	80005f8 <__aeabi_dmul>
 800612a:	2301      	movs	r3, #1
 800612c:	1064      	asrs	r4, r4, #1
 800612e:	f106 0608 	add.w	r6, r6, #8
 8006132:	d1f4      	bne.n	800611e <_strtod_l+0x5b6>
 8006134:	b10b      	cbz	r3, 800613a <_strtod_l+0x5d2>
 8006136:	4682      	mov	sl, r0
 8006138:	468b      	mov	fp, r1
 800613a:	9b08      	ldr	r3, [sp, #32]
 800613c:	b1b3      	cbz	r3, 800616c <_strtod_l+0x604>
 800613e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006142:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8006146:	2b00      	cmp	r3, #0
 8006148:	4659      	mov	r1, fp
 800614a:	dd0f      	ble.n	800616c <_strtod_l+0x604>
 800614c:	2b1f      	cmp	r3, #31
 800614e:	dd55      	ble.n	80061fc <_strtod_l+0x694>
 8006150:	2b34      	cmp	r3, #52	@ 0x34
 8006152:	bfde      	ittt	le
 8006154:	f04f 33ff 	movle.w	r3, #4294967295
 8006158:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800615c:	4093      	lslle	r3, r2
 800615e:	f04f 0a00 	mov.w	sl, #0
 8006162:	bfcc      	ite	gt
 8006164:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006168:	ea03 0b01 	andle.w	fp, r3, r1
 800616c:	2200      	movs	r2, #0
 800616e:	2300      	movs	r3, #0
 8006170:	4650      	mov	r0, sl
 8006172:	4659      	mov	r1, fp
 8006174:	f7fa fca8 	bl	8000ac8 <__aeabi_dcmpeq>
 8006178:	2800      	cmp	r0, #0
 800617a:	d1a6      	bne.n	80060ca <_strtod_l+0x562>
 800617c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800617e:	9300      	str	r3, [sp, #0]
 8006180:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006182:	9805      	ldr	r0, [sp, #20]
 8006184:	462b      	mov	r3, r5
 8006186:	463a      	mov	r2, r7
 8006188:	f002 fcc2 	bl	8008b10 <__s2b>
 800618c:	900a      	str	r0, [sp, #40]	@ 0x28
 800618e:	2800      	cmp	r0, #0
 8006190:	f43f af05 	beq.w	8005f9e <_strtod_l+0x436>
 8006194:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006196:	2a00      	cmp	r2, #0
 8006198:	eba9 0308 	sub.w	r3, r9, r8
 800619c:	bfa8      	it	ge
 800619e:	2300      	movge	r3, #0
 80061a0:	9312      	str	r3, [sp, #72]	@ 0x48
 80061a2:	2400      	movs	r4, #0
 80061a4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80061a8:	9316      	str	r3, [sp, #88]	@ 0x58
 80061aa:	46a0      	mov	r8, r4
 80061ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80061ae:	9805      	ldr	r0, [sp, #20]
 80061b0:	6859      	ldr	r1, [r3, #4]
 80061b2:	f002 fc05 	bl	80089c0 <_Balloc>
 80061b6:	4681      	mov	r9, r0
 80061b8:	2800      	cmp	r0, #0
 80061ba:	f43f aef4 	beq.w	8005fa6 <_strtod_l+0x43e>
 80061be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80061c0:	691a      	ldr	r2, [r3, #16]
 80061c2:	3202      	adds	r2, #2
 80061c4:	f103 010c 	add.w	r1, r3, #12
 80061c8:	0092      	lsls	r2, r2, #2
 80061ca:	300c      	adds	r0, #12
 80061cc:	f001 f927 	bl	800741e <memcpy>
 80061d0:	ec4b ab10 	vmov	d0, sl, fp
 80061d4:	9805      	ldr	r0, [sp, #20]
 80061d6:	aa1c      	add	r2, sp, #112	@ 0x70
 80061d8:	a91b      	add	r1, sp, #108	@ 0x6c
 80061da:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80061de:	f002 ffd3 	bl	8009188 <__d2b>
 80061e2:	901a      	str	r0, [sp, #104]	@ 0x68
 80061e4:	2800      	cmp	r0, #0
 80061e6:	f43f aede 	beq.w	8005fa6 <_strtod_l+0x43e>
 80061ea:	9805      	ldr	r0, [sp, #20]
 80061ec:	2101      	movs	r1, #1
 80061ee:	f002 fd25 	bl	8008c3c <__i2b>
 80061f2:	4680      	mov	r8, r0
 80061f4:	b948      	cbnz	r0, 800620a <_strtod_l+0x6a2>
 80061f6:	f04f 0800 	mov.w	r8, #0
 80061fa:	e6d4      	b.n	8005fa6 <_strtod_l+0x43e>
 80061fc:	f04f 32ff 	mov.w	r2, #4294967295
 8006200:	fa02 f303 	lsl.w	r3, r2, r3
 8006204:	ea03 0a0a 	and.w	sl, r3, sl
 8006208:	e7b0      	b.n	800616c <_strtod_l+0x604>
 800620a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800620c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800620e:	2d00      	cmp	r5, #0
 8006210:	bfab      	itete	ge
 8006212:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006214:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006216:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006218:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800621a:	bfac      	ite	ge
 800621c:	18ef      	addge	r7, r5, r3
 800621e:	1b5e      	sublt	r6, r3, r5
 8006220:	9b08      	ldr	r3, [sp, #32]
 8006222:	1aed      	subs	r5, r5, r3
 8006224:	4415      	add	r5, r2
 8006226:	4b66      	ldr	r3, [pc, #408]	@ (80063c0 <_strtod_l+0x858>)
 8006228:	3d01      	subs	r5, #1
 800622a:	429d      	cmp	r5, r3
 800622c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006230:	da50      	bge.n	80062d4 <_strtod_l+0x76c>
 8006232:	1b5b      	subs	r3, r3, r5
 8006234:	2b1f      	cmp	r3, #31
 8006236:	eba2 0203 	sub.w	r2, r2, r3
 800623a:	f04f 0101 	mov.w	r1, #1
 800623e:	dc3d      	bgt.n	80062bc <_strtod_l+0x754>
 8006240:	fa01 f303 	lsl.w	r3, r1, r3
 8006244:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006246:	2300      	movs	r3, #0
 8006248:	9310      	str	r3, [sp, #64]	@ 0x40
 800624a:	18bd      	adds	r5, r7, r2
 800624c:	9b08      	ldr	r3, [sp, #32]
 800624e:	42af      	cmp	r7, r5
 8006250:	4416      	add	r6, r2
 8006252:	441e      	add	r6, r3
 8006254:	463b      	mov	r3, r7
 8006256:	bfa8      	it	ge
 8006258:	462b      	movge	r3, r5
 800625a:	42b3      	cmp	r3, r6
 800625c:	bfa8      	it	ge
 800625e:	4633      	movge	r3, r6
 8006260:	2b00      	cmp	r3, #0
 8006262:	bfc2      	ittt	gt
 8006264:	1aed      	subgt	r5, r5, r3
 8006266:	1af6      	subgt	r6, r6, r3
 8006268:	1aff      	subgt	r7, r7, r3
 800626a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800626c:	2b00      	cmp	r3, #0
 800626e:	dd16      	ble.n	800629e <_strtod_l+0x736>
 8006270:	4641      	mov	r1, r8
 8006272:	9805      	ldr	r0, [sp, #20]
 8006274:	461a      	mov	r2, r3
 8006276:	f002 fda1 	bl	8008dbc <__pow5mult>
 800627a:	4680      	mov	r8, r0
 800627c:	2800      	cmp	r0, #0
 800627e:	d0ba      	beq.n	80061f6 <_strtod_l+0x68e>
 8006280:	4601      	mov	r1, r0
 8006282:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006284:	9805      	ldr	r0, [sp, #20]
 8006286:	f002 fcef 	bl	8008c68 <__multiply>
 800628a:	900e      	str	r0, [sp, #56]	@ 0x38
 800628c:	2800      	cmp	r0, #0
 800628e:	f43f ae8a 	beq.w	8005fa6 <_strtod_l+0x43e>
 8006292:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006294:	9805      	ldr	r0, [sp, #20]
 8006296:	f002 fbd3 	bl	8008a40 <_Bfree>
 800629a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800629c:	931a      	str	r3, [sp, #104]	@ 0x68
 800629e:	2d00      	cmp	r5, #0
 80062a0:	dc1d      	bgt.n	80062de <_strtod_l+0x776>
 80062a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	dd23      	ble.n	80062f0 <_strtod_l+0x788>
 80062a8:	4649      	mov	r1, r9
 80062aa:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80062ac:	9805      	ldr	r0, [sp, #20]
 80062ae:	f002 fd85 	bl	8008dbc <__pow5mult>
 80062b2:	4681      	mov	r9, r0
 80062b4:	b9e0      	cbnz	r0, 80062f0 <_strtod_l+0x788>
 80062b6:	f04f 0900 	mov.w	r9, #0
 80062ba:	e674      	b.n	8005fa6 <_strtod_l+0x43e>
 80062bc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80062c0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80062c4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80062c8:	35e2      	adds	r5, #226	@ 0xe2
 80062ca:	fa01 f305 	lsl.w	r3, r1, r5
 80062ce:	9310      	str	r3, [sp, #64]	@ 0x40
 80062d0:	9113      	str	r1, [sp, #76]	@ 0x4c
 80062d2:	e7ba      	b.n	800624a <_strtod_l+0x6e2>
 80062d4:	2300      	movs	r3, #0
 80062d6:	9310      	str	r3, [sp, #64]	@ 0x40
 80062d8:	2301      	movs	r3, #1
 80062da:	9313      	str	r3, [sp, #76]	@ 0x4c
 80062dc:	e7b5      	b.n	800624a <_strtod_l+0x6e2>
 80062de:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80062e0:	9805      	ldr	r0, [sp, #20]
 80062e2:	462a      	mov	r2, r5
 80062e4:	f002 fdc4 	bl	8008e70 <__lshift>
 80062e8:	901a      	str	r0, [sp, #104]	@ 0x68
 80062ea:	2800      	cmp	r0, #0
 80062ec:	d1d9      	bne.n	80062a2 <_strtod_l+0x73a>
 80062ee:	e65a      	b.n	8005fa6 <_strtod_l+0x43e>
 80062f0:	2e00      	cmp	r6, #0
 80062f2:	dd07      	ble.n	8006304 <_strtod_l+0x79c>
 80062f4:	4649      	mov	r1, r9
 80062f6:	9805      	ldr	r0, [sp, #20]
 80062f8:	4632      	mov	r2, r6
 80062fa:	f002 fdb9 	bl	8008e70 <__lshift>
 80062fe:	4681      	mov	r9, r0
 8006300:	2800      	cmp	r0, #0
 8006302:	d0d8      	beq.n	80062b6 <_strtod_l+0x74e>
 8006304:	2f00      	cmp	r7, #0
 8006306:	dd08      	ble.n	800631a <_strtod_l+0x7b2>
 8006308:	4641      	mov	r1, r8
 800630a:	9805      	ldr	r0, [sp, #20]
 800630c:	463a      	mov	r2, r7
 800630e:	f002 fdaf 	bl	8008e70 <__lshift>
 8006312:	4680      	mov	r8, r0
 8006314:	2800      	cmp	r0, #0
 8006316:	f43f ae46 	beq.w	8005fa6 <_strtod_l+0x43e>
 800631a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800631c:	9805      	ldr	r0, [sp, #20]
 800631e:	464a      	mov	r2, r9
 8006320:	f002 fe2e 	bl	8008f80 <__mdiff>
 8006324:	4604      	mov	r4, r0
 8006326:	2800      	cmp	r0, #0
 8006328:	f43f ae3d 	beq.w	8005fa6 <_strtod_l+0x43e>
 800632c:	68c3      	ldr	r3, [r0, #12]
 800632e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006330:	2300      	movs	r3, #0
 8006332:	60c3      	str	r3, [r0, #12]
 8006334:	4641      	mov	r1, r8
 8006336:	f002 fe07 	bl	8008f48 <__mcmp>
 800633a:	2800      	cmp	r0, #0
 800633c:	da46      	bge.n	80063cc <_strtod_l+0x864>
 800633e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006340:	ea53 030a 	orrs.w	r3, r3, sl
 8006344:	d16c      	bne.n	8006420 <_strtod_l+0x8b8>
 8006346:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800634a:	2b00      	cmp	r3, #0
 800634c:	d168      	bne.n	8006420 <_strtod_l+0x8b8>
 800634e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006352:	0d1b      	lsrs	r3, r3, #20
 8006354:	051b      	lsls	r3, r3, #20
 8006356:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800635a:	d961      	bls.n	8006420 <_strtod_l+0x8b8>
 800635c:	6963      	ldr	r3, [r4, #20]
 800635e:	b913      	cbnz	r3, 8006366 <_strtod_l+0x7fe>
 8006360:	6923      	ldr	r3, [r4, #16]
 8006362:	2b01      	cmp	r3, #1
 8006364:	dd5c      	ble.n	8006420 <_strtod_l+0x8b8>
 8006366:	4621      	mov	r1, r4
 8006368:	2201      	movs	r2, #1
 800636a:	9805      	ldr	r0, [sp, #20]
 800636c:	f002 fd80 	bl	8008e70 <__lshift>
 8006370:	4641      	mov	r1, r8
 8006372:	4604      	mov	r4, r0
 8006374:	f002 fde8 	bl	8008f48 <__mcmp>
 8006378:	2800      	cmp	r0, #0
 800637a:	dd51      	ble.n	8006420 <_strtod_l+0x8b8>
 800637c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006380:	9a08      	ldr	r2, [sp, #32]
 8006382:	0d1b      	lsrs	r3, r3, #20
 8006384:	051b      	lsls	r3, r3, #20
 8006386:	2a00      	cmp	r2, #0
 8006388:	d06b      	beq.n	8006462 <_strtod_l+0x8fa>
 800638a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800638e:	d868      	bhi.n	8006462 <_strtod_l+0x8fa>
 8006390:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8006394:	f67f ae9d 	bls.w	80060d2 <_strtod_l+0x56a>
 8006398:	4b0a      	ldr	r3, [pc, #40]	@ (80063c4 <_strtod_l+0x85c>)
 800639a:	4650      	mov	r0, sl
 800639c:	4659      	mov	r1, fp
 800639e:	2200      	movs	r2, #0
 80063a0:	f7fa f92a 	bl	80005f8 <__aeabi_dmul>
 80063a4:	4b08      	ldr	r3, [pc, #32]	@ (80063c8 <_strtod_l+0x860>)
 80063a6:	400b      	ands	r3, r1
 80063a8:	4682      	mov	sl, r0
 80063aa:	468b      	mov	fp, r1
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	f47f ae05 	bne.w	8005fbc <_strtod_l+0x454>
 80063b2:	9a05      	ldr	r2, [sp, #20]
 80063b4:	2322      	movs	r3, #34	@ 0x22
 80063b6:	6013      	str	r3, [r2, #0]
 80063b8:	e600      	b.n	8005fbc <_strtod_l+0x454>
 80063ba:	bf00      	nop
 80063bc:	0800be18 	.word	0x0800be18
 80063c0:	fffffc02 	.word	0xfffffc02
 80063c4:	39500000 	.word	0x39500000
 80063c8:	7ff00000 	.word	0x7ff00000
 80063cc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80063d0:	d165      	bne.n	800649e <_strtod_l+0x936>
 80063d2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80063d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80063d8:	b35a      	cbz	r2, 8006432 <_strtod_l+0x8ca>
 80063da:	4a9f      	ldr	r2, [pc, #636]	@ (8006658 <_strtod_l+0xaf0>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d12b      	bne.n	8006438 <_strtod_l+0x8d0>
 80063e0:	9b08      	ldr	r3, [sp, #32]
 80063e2:	4651      	mov	r1, sl
 80063e4:	b303      	cbz	r3, 8006428 <_strtod_l+0x8c0>
 80063e6:	4b9d      	ldr	r3, [pc, #628]	@ (800665c <_strtod_l+0xaf4>)
 80063e8:	465a      	mov	r2, fp
 80063ea:	4013      	ands	r3, r2
 80063ec:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80063f0:	f04f 32ff 	mov.w	r2, #4294967295
 80063f4:	d81b      	bhi.n	800642e <_strtod_l+0x8c6>
 80063f6:	0d1b      	lsrs	r3, r3, #20
 80063f8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80063fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006400:	4299      	cmp	r1, r3
 8006402:	d119      	bne.n	8006438 <_strtod_l+0x8d0>
 8006404:	4b96      	ldr	r3, [pc, #600]	@ (8006660 <_strtod_l+0xaf8>)
 8006406:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006408:	429a      	cmp	r2, r3
 800640a:	d102      	bne.n	8006412 <_strtod_l+0x8aa>
 800640c:	3101      	adds	r1, #1
 800640e:	f43f adca 	beq.w	8005fa6 <_strtod_l+0x43e>
 8006412:	4b92      	ldr	r3, [pc, #584]	@ (800665c <_strtod_l+0xaf4>)
 8006414:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006416:	401a      	ands	r2, r3
 8006418:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800641c:	f04f 0a00 	mov.w	sl, #0
 8006420:	9b08      	ldr	r3, [sp, #32]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d1b8      	bne.n	8006398 <_strtod_l+0x830>
 8006426:	e5c9      	b.n	8005fbc <_strtod_l+0x454>
 8006428:	f04f 33ff 	mov.w	r3, #4294967295
 800642c:	e7e8      	b.n	8006400 <_strtod_l+0x898>
 800642e:	4613      	mov	r3, r2
 8006430:	e7e6      	b.n	8006400 <_strtod_l+0x898>
 8006432:	ea53 030a 	orrs.w	r3, r3, sl
 8006436:	d0a1      	beq.n	800637c <_strtod_l+0x814>
 8006438:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800643a:	b1db      	cbz	r3, 8006474 <_strtod_l+0x90c>
 800643c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800643e:	4213      	tst	r3, r2
 8006440:	d0ee      	beq.n	8006420 <_strtod_l+0x8b8>
 8006442:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006444:	9a08      	ldr	r2, [sp, #32]
 8006446:	4650      	mov	r0, sl
 8006448:	4659      	mov	r1, fp
 800644a:	b1bb      	cbz	r3, 800647c <_strtod_l+0x914>
 800644c:	f7ff fb6b 	bl	8005b26 <sulp>
 8006450:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006454:	ec53 2b10 	vmov	r2, r3, d0
 8006458:	f7f9 ff18 	bl	800028c <__adddf3>
 800645c:	4682      	mov	sl, r0
 800645e:	468b      	mov	fp, r1
 8006460:	e7de      	b.n	8006420 <_strtod_l+0x8b8>
 8006462:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8006466:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800646a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800646e:	f04f 3aff 	mov.w	sl, #4294967295
 8006472:	e7d5      	b.n	8006420 <_strtod_l+0x8b8>
 8006474:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006476:	ea13 0f0a 	tst.w	r3, sl
 800647a:	e7e1      	b.n	8006440 <_strtod_l+0x8d8>
 800647c:	f7ff fb53 	bl	8005b26 <sulp>
 8006480:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006484:	ec53 2b10 	vmov	r2, r3, d0
 8006488:	f7f9 fefe 	bl	8000288 <__aeabi_dsub>
 800648c:	2200      	movs	r2, #0
 800648e:	2300      	movs	r3, #0
 8006490:	4682      	mov	sl, r0
 8006492:	468b      	mov	fp, r1
 8006494:	f7fa fb18 	bl	8000ac8 <__aeabi_dcmpeq>
 8006498:	2800      	cmp	r0, #0
 800649a:	d0c1      	beq.n	8006420 <_strtod_l+0x8b8>
 800649c:	e619      	b.n	80060d2 <_strtod_l+0x56a>
 800649e:	4641      	mov	r1, r8
 80064a0:	4620      	mov	r0, r4
 80064a2:	f002 fec9 	bl	8009238 <__ratio>
 80064a6:	ec57 6b10 	vmov	r6, r7, d0
 80064aa:	2200      	movs	r2, #0
 80064ac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80064b0:	4630      	mov	r0, r6
 80064b2:	4639      	mov	r1, r7
 80064b4:	f7fa fb1c 	bl	8000af0 <__aeabi_dcmple>
 80064b8:	2800      	cmp	r0, #0
 80064ba:	d06f      	beq.n	800659c <_strtod_l+0xa34>
 80064bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d17a      	bne.n	80065b8 <_strtod_l+0xa50>
 80064c2:	f1ba 0f00 	cmp.w	sl, #0
 80064c6:	d158      	bne.n	800657a <_strtod_l+0xa12>
 80064c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80064ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d15a      	bne.n	8006588 <_strtod_l+0xa20>
 80064d2:	4b64      	ldr	r3, [pc, #400]	@ (8006664 <_strtod_l+0xafc>)
 80064d4:	2200      	movs	r2, #0
 80064d6:	4630      	mov	r0, r6
 80064d8:	4639      	mov	r1, r7
 80064da:	f7fa faff 	bl	8000adc <__aeabi_dcmplt>
 80064de:	2800      	cmp	r0, #0
 80064e0:	d159      	bne.n	8006596 <_strtod_l+0xa2e>
 80064e2:	4630      	mov	r0, r6
 80064e4:	4639      	mov	r1, r7
 80064e6:	4b60      	ldr	r3, [pc, #384]	@ (8006668 <_strtod_l+0xb00>)
 80064e8:	2200      	movs	r2, #0
 80064ea:	f7fa f885 	bl	80005f8 <__aeabi_dmul>
 80064ee:	4606      	mov	r6, r0
 80064f0:	460f      	mov	r7, r1
 80064f2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80064f6:	9606      	str	r6, [sp, #24]
 80064f8:	9307      	str	r3, [sp, #28]
 80064fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80064fe:	4d57      	ldr	r5, [pc, #348]	@ (800665c <_strtod_l+0xaf4>)
 8006500:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006504:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006506:	401d      	ands	r5, r3
 8006508:	4b58      	ldr	r3, [pc, #352]	@ (800666c <_strtod_l+0xb04>)
 800650a:	429d      	cmp	r5, r3
 800650c:	f040 80b2 	bne.w	8006674 <_strtod_l+0xb0c>
 8006510:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006512:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8006516:	ec4b ab10 	vmov	d0, sl, fp
 800651a:	f002 fdc5 	bl	80090a8 <__ulp>
 800651e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006522:	ec51 0b10 	vmov	r0, r1, d0
 8006526:	f7fa f867 	bl	80005f8 <__aeabi_dmul>
 800652a:	4652      	mov	r2, sl
 800652c:	465b      	mov	r3, fp
 800652e:	f7f9 fead 	bl	800028c <__adddf3>
 8006532:	460b      	mov	r3, r1
 8006534:	4949      	ldr	r1, [pc, #292]	@ (800665c <_strtod_l+0xaf4>)
 8006536:	4a4e      	ldr	r2, [pc, #312]	@ (8006670 <_strtod_l+0xb08>)
 8006538:	4019      	ands	r1, r3
 800653a:	4291      	cmp	r1, r2
 800653c:	4682      	mov	sl, r0
 800653e:	d942      	bls.n	80065c6 <_strtod_l+0xa5e>
 8006540:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006542:	4b47      	ldr	r3, [pc, #284]	@ (8006660 <_strtod_l+0xaf8>)
 8006544:	429a      	cmp	r2, r3
 8006546:	d103      	bne.n	8006550 <_strtod_l+0x9e8>
 8006548:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800654a:	3301      	adds	r3, #1
 800654c:	f43f ad2b 	beq.w	8005fa6 <_strtod_l+0x43e>
 8006550:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8006660 <_strtod_l+0xaf8>
 8006554:	f04f 3aff 	mov.w	sl, #4294967295
 8006558:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800655a:	9805      	ldr	r0, [sp, #20]
 800655c:	f002 fa70 	bl	8008a40 <_Bfree>
 8006560:	9805      	ldr	r0, [sp, #20]
 8006562:	4649      	mov	r1, r9
 8006564:	f002 fa6c 	bl	8008a40 <_Bfree>
 8006568:	9805      	ldr	r0, [sp, #20]
 800656a:	4641      	mov	r1, r8
 800656c:	f002 fa68 	bl	8008a40 <_Bfree>
 8006570:	9805      	ldr	r0, [sp, #20]
 8006572:	4621      	mov	r1, r4
 8006574:	f002 fa64 	bl	8008a40 <_Bfree>
 8006578:	e618      	b.n	80061ac <_strtod_l+0x644>
 800657a:	f1ba 0f01 	cmp.w	sl, #1
 800657e:	d103      	bne.n	8006588 <_strtod_l+0xa20>
 8006580:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006582:	2b00      	cmp	r3, #0
 8006584:	f43f ada5 	beq.w	80060d2 <_strtod_l+0x56a>
 8006588:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8006638 <_strtod_l+0xad0>
 800658c:	4f35      	ldr	r7, [pc, #212]	@ (8006664 <_strtod_l+0xafc>)
 800658e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006592:	2600      	movs	r6, #0
 8006594:	e7b1      	b.n	80064fa <_strtod_l+0x992>
 8006596:	4f34      	ldr	r7, [pc, #208]	@ (8006668 <_strtod_l+0xb00>)
 8006598:	2600      	movs	r6, #0
 800659a:	e7aa      	b.n	80064f2 <_strtod_l+0x98a>
 800659c:	4b32      	ldr	r3, [pc, #200]	@ (8006668 <_strtod_l+0xb00>)
 800659e:	4630      	mov	r0, r6
 80065a0:	4639      	mov	r1, r7
 80065a2:	2200      	movs	r2, #0
 80065a4:	f7fa f828 	bl	80005f8 <__aeabi_dmul>
 80065a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80065aa:	4606      	mov	r6, r0
 80065ac:	460f      	mov	r7, r1
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d09f      	beq.n	80064f2 <_strtod_l+0x98a>
 80065b2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80065b6:	e7a0      	b.n	80064fa <_strtod_l+0x992>
 80065b8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8006640 <_strtod_l+0xad8>
 80065bc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80065c0:	ec57 6b17 	vmov	r6, r7, d7
 80065c4:	e799      	b.n	80064fa <_strtod_l+0x992>
 80065c6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80065ca:	9b08      	ldr	r3, [sp, #32]
 80065cc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d1c1      	bne.n	8006558 <_strtod_l+0x9f0>
 80065d4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80065d8:	0d1b      	lsrs	r3, r3, #20
 80065da:	051b      	lsls	r3, r3, #20
 80065dc:	429d      	cmp	r5, r3
 80065de:	d1bb      	bne.n	8006558 <_strtod_l+0x9f0>
 80065e0:	4630      	mov	r0, r6
 80065e2:	4639      	mov	r1, r7
 80065e4:	f7fa fb18 	bl	8000c18 <__aeabi_d2lz>
 80065e8:	f7f9 ffd8 	bl	800059c <__aeabi_l2d>
 80065ec:	4602      	mov	r2, r0
 80065ee:	460b      	mov	r3, r1
 80065f0:	4630      	mov	r0, r6
 80065f2:	4639      	mov	r1, r7
 80065f4:	f7f9 fe48 	bl	8000288 <__aeabi_dsub>
 80065f8:	460b      	mov	r3, r1
 80065fa:	4602      	mov	r2, r0
 80065fc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006600:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8006604:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006606:	ea46 060a 	orr.w	r6, r6, sl
 800660a:	431e      	orrs	r6, r3
 800660c:	d06f      	beq.n	80066ee <_strtod_l+0xb86>
 800660e:	a30e      	add	r3, pc, #56	@ (adr r3, 8006648 <_strtod_l+0xae0>)
 8006610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006614:	f7fa fa62 	bl	8000adc <__aeabi_dcmplt>
 8006618:	2800      	cmp	r0, #0
 800661a:	f47f accf 	bne.w	8005fbc <_strtod_l+0x454>
 800661e:	a30c      	add	r3, pc, #48	@ (adr r3, 8006650 <_strtod_l+0xae8>)
 8006620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006624:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006628:	f7fa fa76 	bl	8000b18 <__aeabi_dcmpgt>
 800662c:	2800      	cmp	r0, #0
 800662e:	d093      	beq.n	8006558 <_strtod_l+0x9f0>
 8006630:	e4c4      	b.n	8005fbc <_strtod_l+0x454>
 8006632:	bf00      	nop
 8006634:	f3af 8000 	nop.w
 8006638:	00000000 	.word	0x00000000
 800663c:	bff00000 	.word	0xbff00000
 8006640:	00000000 	.word	0x00000000
 8006644:	3ff00000 	.word	0x3ff00000
 8006648:	94a03595 	.word	0x94a03595
 800664c:	3fdfffff 	.word	0x3fdfffff
 8006650:	35afe535 	.word	0x35afe535
 8006654:	3fe00000 	.word	0x3fe00000
 8006658:	000fffff 	.word	0x000fffff
 800665c:	7ff00000 	.word	0x7ff00000
 8006660:	7fefffff 	.word	0x7fefffff
 8006664:	3ff00000 	.word	0x3ff00000
 8006668:	3fe00000 	.word	0x3fe00000
 800666c:	7fe00000 	.word	0x7fe00000
 8006670:	7c9fffff 	.word	0x7c9fffff
 8006674:	9b08      	ldr	r3, [sp, #32]
 8006676:	b323      	cbz	r3, 80066c2 <_strtod_l+0xb5a>
 8006678:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800667c:	d821      	bhi.n	80066c2 <_strtod_l+0xb5a>
 800667e:	a328      	add	r3, pc, #160	@ (adr r3, 8006720 <_strtod_l+0xbb8>)
 8006680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006684:	4630      	mov	r0, r6
 8006686:	4639      	mov	r1, r7
 8006688:	f7fa fa32 	bl	8000af0 <__aeabi_dcmple>
 800668c:	b1a0      	cbz	r0, 80066b8 <_strtod_l+0xb50>
 800668e:	4639      	mov	r1, r7
 8006690:	4630      	mov	r0, r6
 8006692:	f7fa fa89 	bl	8000ba8 <__aeabi_d2uiz>
 8006696:	2801      	cmp	r0, #1
 8006698:	bf38      	it	cc
 800669a:	2001      	movcc	r0, #1
 800669c:	f7f9 ff32 	bl	8000504 <__aeabi_ui2d>
 80066a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80066a2:	4606      	mov	r6, r0
 80066a4:	460f      	mov	r7, r1
 80066a6:	b9fb      	cbnz	r3, 80066e8 <_strtod_l+0xb80>
 80066a8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80066ac:	9014      	str	r0, [sp, #80]	@ 0x50
 80066ae:	9315      	str	r3, [sp, #84]	@ 0x54
 80066b0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80066b4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80066b8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80066ba:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80066be:	1b5b      	subs	r3, r3, r5
 80066c0:	9311      	str	r3, [sp, #68]	@ 0x44
 80066c2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80066c6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80066ca:	f002 fced 	bl	80090a8 <__ulp>
 80066ce:	4650      	mov	r0, sl
 80066d0:	ec53 2b10 	vmov	r2, r3, d0
 80066d4:	4659      	mov	r1, fp
 80066d6:	f7f9 ff8f 	bl	80005f8 <__aeabi_dmul>
 80066da:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80066de:	f7f9 fdd5 	bl	800028c <__adddf3>
 80066e2:	4682      	mov	sl, r0
 80066e4:	468b      	mov	fp, r1
 80066e6:	e770      	b.n	80065ca <_strtod_l+0xa62>
 80066e8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80066ec:	e7e0      	b.n	80066b0 <_strtod_l+0xb48>
 80066ee:	a30e      	add	r3, pc, #56	@ (adr r3, 8006728 <_strtod_l+0xbc0>)
 80066f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f4:	f7fa f9f2 	bl	8000adc <__aeabi_dcmplt>
 80066f8:	e798      	b.n	800662c <_strtod_l+0xac4>
 80066fa:	2300      	movs	r3, #0
 80066fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80066fe:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8006700:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006702:	6013      	str	r3, [r2, #0]
 8006704:	f7ff ba6d 	b.w	8005be2 <_strtod_l+0x7a>
 8006708:	2a65      	cmp	r2, #101	@ 0x65
 800670a:	f43f ab66 	beq.w	8005dda <_strtod_l+0x272>
 800670e:	2a45      	cmp	r2, #69	@ 0x45
 8006710:	f43f ab63 	beq.w	8005dda <_strtod_l+0x272>
 8006714:	2301      	movs	r3, #1
 8006716:	f7ff bb9e 	b.w	8005e56 <_strtod_l+0x2ee>
 800671a:	bf00      	nop
 800671c:	f3af 8000 	nop.w
 8006720:	ffc00000 	.word	0xffc00000
 8006724:	41dfffff 	.word	0x41dfffff
 8006728:	94a03595 	.word	0x94a03595
 800672c:	3fcfffff 	.word	0x3fcfffff

08006730 <strtod>:
 8006730:	460a      	mov	r2, r1
 8006732:	4601      	mov	r1, r0
 8006734:	4802      	ldr	r0, [pc, #8]	@ (8006740 <strtod+0x10>)
 8006736:	4b03      	ldr	r3, [pc, #12]	@ (8006744 <strtod+0x14>)
 8006738:	6800      	ldr	r0, [r0, #0]
 800673a:	f7ff ba15 	b.w	8005b68 <_strtod_l>
 800673e:	bf00      	nop
 8006740:	20000184 	.word	0x20000184
 8006744:	20000018 	.word	0x20000018

08006748 <__cvt>:
 8006748:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800674c:	ec57 6b10 	vmov	r6, r7, d0
 8006750:	2f00      	cmp	r7, #0
 8006752:	460c      	mov	r4, r1
 8006754:	4619      	mov	r1, r3
 8006756:	463b      	mov	r3, r7
 8006758:	bfbb      	ittet	lt
 800675a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800675e:	461f      	movlt	r7, r3
 8006760:	2300      	movge	r3, #0
 8006762:	232d      	movlt	r3, #45	@ 0x2d
 8006764:	700b      	strb	r3, [r1, #0]
 8006766:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006768:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800676c:	4691      	mov	r9, r2
 800676e:	f023 0820 	bic.w	r8, r3, #32
 8006772:	bfbc      	itt	lt
 8006774:	4632      	movlt	r2, r6
 8006776:	4616      	movlt	r6, r2
 8006778:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800677c:	d005      	beq.n	800678a <__cvt+0x42>
 800677e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006782:	d100      	bne.n	8006786 <__cvt+0x3e>
 8006784:	3401      	adds	r4, #1
 8006786:	2102      	movs	r1, #2
 8006788:	e000      	b.n	800678c <__cvt+0x44>
 800678a:	2103      	movs	r1, #3
 800678c:	ab03      	add	r3, sp, #12
 800678e:	9301      	str	r3, [sp, #4]
 8006790:	ab02      	add	r3, sp, #8
 8006792:	9300      	str	r3, [sp, #0]
 8006794:	ec47 6b10 	vmov	d0, r6, r7
 8006798:	4653      	mov	r3, sl
 800679a:	4622      	mov	r2, r4
 800679c:	f000 ff00 	bl	80075a0 <_dtoa_r>
 80067a0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80067a4:	4605      	mov	r5, r0
 80067a6:	d119      	bne.n	80067dc <__cvt+0x94>
 80067a8:	f019 0f01 	tst.w	r9, #1
 80067ac:	d00e      	beq.n	80067cc <__cvt+0x84>
 80067ae:	eb00 0904 	add.w	r9, r0, r4
 80067b2:	2200      	movs	r2, #0
 80067b4:	2300      	movs	r3, #0
 80067b6:	4630      	mov	r0, r6
 80067b8:	4639      	mov	r1, r7
 80067ba:	f7fa f985 	bl	8000ac8 <__aeabi_dcmpeq>
 80067be:	b108      	cbz	r0, 80067c4 <__cvt+0x7c>
 80067c0:	f8cd 900c 	str.w	r9, [sp, #12]
 80067c4:	2230      	movs	r2, #48	@ 0x30
 80067c6:	9b03      	ldr	r3, [sp, #12]
 80067c8:	454b      	cmp	r3, r9
 80067ca:	d31e      	bcc.n	800680a <__cvt+0xc2>
 80067cc:	9b03      	ldr	r3, [sp, #12]
 80067ce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80067d0:	1b5b      	subs	r3, r3, r5
 80067d2:	4628      	mov	r0, r5
 80067d4:	6013      	str	r3, [r2, #0]
 80067d6:	b004      	add	sp, #16
 80067d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067dc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80067e0:	eb00 0904 	add.w	r9, r0, r4
 80067e4:	d1e5      	bne.n	80067b2 <__cvt+0x6a>
 80067e6:	7803      	ldrb	r3, [r0, #0]
 80067e8:	2b30      	cmp	r3, #48	@ 0x30
 80067ea:	d10a      	bne.n	8006802 <__cvt+0xba>
 80067ec:	2200      	movs	r2, #0
 80067ee:	2300      	movs	r3, #0
 80067f0:	4630      	mov	r0, r6
 80067f2:	4639      	mov	r1, r7
 80067f4:	f7fa f968 	bl	8000ac8 <__aeabi_dcmpeq>
 80067f8:	b918      	cbnz	r0, 8006802 <__cvt+0xba>
 80067fa:	f1c4 0401 	rsb	r4, r4, #1
 80067fe:	f8ca 4000 	str.w	r4, [sl]
 8006802:	f8da 3000 	ldr.w	r3, [sl]
 8006806:	4499      	add	r9, r3
 8006808:	e7d3      	b.n	80067b2 <__cvt+0x6a>
 800680a:	1c59      	adds	r1, r3, #1
 800680c:	9103      	str	r1, [sp, #12]
 800680e:	701a      	strb	r2, [r3, #0]
 8006810:	e7d9      	b.n	80067c6 <__cvt+0x7e>

08006812 <__exponent>:
 8006812:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006814:	2900      	cmp	r1, #0
 8006816:	bfba      	itte	lt
 8006818:	4249      	neglt	r1, r1
 800681a:	232d      	movlt	r3, #45	@ 0x2d
 800681c:	232b      	movge	r3, #43	@ 0x2b
 800681e:	2909      	cmp	r1, #9
 8006820:	7002      	strb	r2, [r0, #0]
 8006822:	7043      	strb	r3, [r0, #1]
 8006824:	dd29      	ble.n	800687a <__exponent+0x68>
 8006826:	f10d 0307 	add.w	r3, sp, #7
 800682a:	461d      	mov	r5, r3
 800682c:	270a      	movs	r7, #10
 800682e:	461a      	mov	r2, r3
 8006830:	fbb1 f6f7 	udiv	r6, r1, r7
 8006834:	fb07 1416 	mls	r4, r7, r6, r1
 8006838:	3430      	adds	r4, #48	@ 0x30
 800683a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800683e:	460c      	mov	r4, r1
 8006840:	2c63      	cmp	r4, #99	@ 0x63
 8006842:	f103 33ff 	add.w	r3, r3, #4294967295
 8006846:	4631      	mov	r1, r6
 8006848:	dcf1      	bgt.n	800682e <__exponent+0x1c>
 800684a:	3130      	adds	r1, #48	@ 0x30
 800684c:	1e94      	subs	r4, r2, #2
 800684e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006852:	1c41      	adds	r1, r0, #1
 8006854:	4623      	mov	r3, r4
 8006856:	42ab      	cmp	r3, r5
 8006858:	d30a      	bcc.n	8006870 <__exponent+0x5e>
 800685a:	f10d 0309 	add.w	r3, sp, #9
 800685e:	1a9b      	subs	r3, r3, r2
 8006860:	42ac      	cmp	r4, r5
 8006862:	bf88      	it	hi
 8006864:	2300      	movhi	r3, #0
 8006866:	3302      	adds	r3, #2
 8006868:	4403      	add	r3, r0
 800686a:	1a18      	subs	r0, r3, r0
 800686c:	b003      	add	sp, #12
 800686e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006870:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006874:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006878:	e7ed      	b.n	8006856 <__exponent+0x44>
 800687a:	2330      	movs	r3, #48	@ 0x30
 800687c:	3130      	adds	r1, #48	@ 0x30
 800687e:	7083      	strb	r3, [r0, #2]
 8006880:	70c1      	strb	r1, [r0, #3]
 8006882:	1d03      	adds	r3, r0, #4
 8006884:	e7f1      	b.n	800686a <__exponent+0x58>
	...

08006888 <_printf_float>:
 8006888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800688c:	b08d      	sub	sp, #52	@ 0x34
 800688e:	460c      	mov	r4, r1
 8006890:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006894:	4616      	mov	r6, r2
 8006896:	461f      	mov	r7, r3
 8006898:	4605      	mov	r5, r0
 800689a:	f000 fd49 	bl	8007330 <_localeconv_r>
 800689e:	6803      	ldr	r3, [r0, #0]
 80068a0:	9304      	str	r3, [sp, #16]
 80068a2:	4618      	mov	r0, r3
 80068a4:	f7f9 fce4 	bl	8000270 <strlen>
 80068a8:	2300      	movs	r3, #0
 80068aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80068ac:	f8d8 3000 	ldr.w	r3, [r8]
 80068b0:	9005      	str	r0, [sp, #20]
 80068b2:	3307      	adds	r3, #7
 80068b4:	f023 0307 	bic.w	r3, r3, #7
 80068b8:	f103 0208 	add.w	r2, r3, #8
 80068bc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80068c0:	f8d4 b000 	ldr.w	fp, [r4]
 80068c4:	f8c8 2000 	str.w	r2, [r8]
 80068c8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80068cc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80068d0:	9307      	str	r3, [sp, #28]
 80068d2:	f8cd 8018 	str.w	r8, [sp, #24]
 80068d6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80068da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80068de:	4b9c      	ldr	r3, [pc, #624]	@ (8006b50 <_printf_float+0x2c8>)
 80068e0:	f04f 32ff 	mov.w	r2, #4294967295
 80068e4:	f7fa f922 	bl	8000b2c <__aeabi_dcmpun>
 80068e8:	bb70      	cbnz	r0, 8006948 <_printf_float+0xc0>
 80068ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80068ee:	4b98      	ldr	r3, [pc, #608]	@ (8006b50 <_printf_float+0x2c8>)
 80068f0:	f04f 32ff 	mov.w	r2, #4294967295
 80068f4:	f7fa f8fc 	bl	8000af0 <__aeabi_dcmple>
 80068f8:	bb30      	cbnz	r0, 8006948 <_printf_float+0xc0>
 80068fa:	2200      	movs	r2, #0
 80068fc:	2300      	movs	r3, #0
 80068fe:	4640      	mov	r0, r8
 8006900:	4649      	mov	r1, r9
 8006902:	f7fa f8eb 	bl	8000adc <__aeabi_dcmplt>
 8006906:	b110      	cbz	r0, 800690e <_printf_float+0x86>
 8006908:	232d      	movs	r3, #45	@ 0x2d
 800690a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800690e:	4a91      	ldr	r2, [pc, #580]	@ (8006b54 <_printf_float+0x2cc>)
 8006910:	4b91      	ldr	r3, [pc, #580]	@ (8006b58 <_printf_float+0x2d0>)
 8006912:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006916:	bf94      	ite	ls
 8006918:	4690      	movls	r8, r2
 800691a:	4698      	movhi	r8, r3
 800691c:	2303      	movs	r3, #3
 800691e:	6123      	str	r3, [r4, #16]
 8006920:	f02b 0304 	bic.w	r3, fp, #4
 8006924:	6023      	str	r3, [r4, #0]
 8006926:	f04f 0900 	mov.w	r9, #0
 800692a:	9700      	str	r7, [sp, #0]
 800692c:	4633      	mov	r3, r6
 800692e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006930:	4621      	mov	r1, r4
 8006932:	4628      	mov	r0, r5
 8006934:	f000 f9d2 	bl	8006cdc <_printf_common>
 8006938:	3001      	adds	r0, #1
 800693a:	f040 808d 	bne.w	8006a58 <_printf_float+0x1d0>
 800693e:	f04f 30ff 	mov.w	r0, #4294967295
 8006942:	b00d      	add	sp, #52	@ 0x34
 8006944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006948:	4642      	mov	r2, r8
 800694a:	464b      	mov	r3, r9
 800694c:	4640      	mov	r0, r8
 800694e:	4649      	mov	r1, r9
 8006950:	f7fa f8ec 	bl	8000b2c <__aeabi_dcmpun>
 8006954:	b140      	cbz	r0, 8006968 <_printf_float+0xe0>
 8006956:	464b      	mov	r3, r9
 8006958:	2b00      	cmp	r3, #0
 800695a:	bfbc      	itt	lt
 800695c:	232d      	movlt	r3, #45	@ 0x2d
 800695e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006962:	4a7e      	ldr	r2, [pc, #504]	@ (8006b5c <_printf_float+0x2d4>)
 8006964:	4b7e      	ldr	r3, [pc, #504]	@ (8006b60 <_printf_float+0x2d8>)
 8006966:	e7d4      	b.n	8006912 <_printf_float+0x8a>
 8006968:	6863      	ldr	r3, [r4, #4]
 800696a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800696e:	9206      	str	r2, [sp, #24]
 8006970:	1c5a      	adds	r2, r3, #1
 8006972:	d13b      	bne.n	80069ec <_printf_float+0x164>
 8006974:	2306      	movs	r3, #6
 8006976:	6063      	str	r3, [r4, #4]
 8006978:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800697c:	2300      	movs	r3, #0
 800697e:	6022      	str	r2, [r4, #0]
 8006980:	9303      	str	r3, [sp, #12]
 8006982:	ab0a      	add	r3, sp, #40	@ 0x28
 8006984:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006988:	ab09      	add	r3, sp, #36	@ 0x24
 800698a:	9300      	str	r3, [sp, #0]
 800698c:	6861      	ldr	r1, [r4, #4]
 800698e:	ec49 8b10 	vmov	d0, r8, r9
 8006992:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006996:	4628      	mov	r0, r5
 8006998:	f7ff fed6 	bl	8006748 <__cvt>
 800699c:	9b06      	ldr	r3, [sp, #24]
 800699e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80069a0:	2b47      	cmp	r3, #71	@ 0x47
 80069a2:	4680      	mov	r8, r0
 80069a4:	d129      	bne.n	80069fa <_printf_float+0x172>
 80069a6:	1cc8      	adds	r0, r1, #3
 80069a8:	db02      	blt.n	80069b0 <_printf_float+0x128>
 80069aa:	6863      	ldr	r3, [r4, #4]
 80069ac:	4299      	cmp	r1, r3
 80069ae:	dd41      	ble.n	8006a34 <_printf_float+0x1ac>
 80069b0:	f1aa 0a02 	sub.w	sl, sl, #2
 80069b4:	fa5f fa8a 	uxtb.w	sl, sl
 80069b8:	3901      	subs	r1, #1
 80069ba:	4652      	mov	r2, sl
 80069bc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80069c0:	9109      	str	r1, [sp, #36]	@ 0x24
 80069c2:	f7ff ff26 	bl	8006812 <__exponent>
 80069c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80069c8:	1813      	adds	r3, r2, r0
 80069ca:	2a01      	cmp	r2, #1
 80069cc:	4681      	mov	r9, r0
 80069ce:	6123      	str	r3, [r4, #16]
 80069d0:	dc02      	bgt.n	80069d8 <_printf_float+0x150>
 80069d2:	6822      	ldr	r2, [r4, #0]
 80069d4:	07d2      	lsls	r2, r2, #31
 80069d6:	d501      	bpl.n	80069dc <_printf_float+0x154>
 80069d8:	3301      	adds	r3, #1
 80069da:	6123      	str	r3, [r4, #16]
 80069dc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d0a2      	beq.n	800692a <_printf_float+0xa2>
 80069e4:	232d      	movs	r3, #45	@ 0x2d
 80069e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80069ea:	e79e      	b.n	800692a <_printf_float+0xa2>
 80069ec:	9a06      	ldr	r2, [sp, #24]
 80069ee:	2a47      	cmp	r2, #71	@ 0x47
 80069f0:	d1c2      	bne.n	8006978 <_printf_float+0xf0>
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d1c0      	bne.n	8006978 <_printf_float+0xf0>
 80069f6:	2301      	movs	r3, #1
 80069f8:	e7bd      	b.n	8006976 <_printf_float+0xee>
 80069fa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80069fe:	d9db      	bls.n	80069b8 <_printf_float+0x130>
 8006a00:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006a04:	d118      	bne.n	8006a38 <_printf_float+0x1b0>
 8006a06:	2900      	cmp	r1, #0
 8006a08:	6863      	ldr	r3, [r4, #4]
 8006a0a:	dd0b      	ble.n	8006a24 <_printf_float+0x19c>
 8006a0c:	6121      	str	r1, [r4, #16]
 8006a0e:	b913      	cbnz	r3, 8006a16 <_printf_float+0x18e>
 8006a10:	6822      	ldr	r2, [r4, #0]
 8006a12:	07d0      	lsls	r0, r2, #31
 8006a14:	d502      	bpl.n	8006a1c <_printf_float+0x194>
 8006a16:	3301      	adds	r3, #1
 8006a18:	440b      	add	r3, r1
 8006a1a:	6123      	str	r3, [r4, #16]
 8006a1c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006a1e:	f04f 0900 	mov.w	r9, #0
 8006a22:	e7db      	b.n	80069dc <_printf_float+0x154>
 8006a24:	b913      	cbnz	r3, 8006a2c <_printf_float+0x1a4>
 8006a26:	6822      	ldr	r2, [r4, #0]
 8006a28:	07d2      	lsls	r2, r2, #31
 8006a2a:	d501      	bpl.n	8006a30 <_printf_float+0x1a8>
 8006a2c:	3302      	adds	r3, #2
 8006a2e:	e7f4      	b.n	8006a1a <_printf_float+0x192>
 8006a30:	2301      	movs	r3, #1
 8006a32:	e7f2      	b.n	8006a1a <_printf_float+0x192>
 8006a34:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006a38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a3a:	4299      	cmp	r1, r3
 8006a3c:	db05      	blt.n	8006a4a <_printf_float+0x1c2>
 8006a3e:	6823      	ldr	r3, [r4, #0]
 8006a40:	6121      	str	r1, [r4, #16]
 8006a42:	07d8      	lsls	r0, r3, #31
 8006a44:	d5ea      	bpl.n	8006a1c <_printf_float+0x194>
 8006a46:	1c4b      	adds	r3, r1, #1
 8006a48:	e7e7      	b.n	8006a1a <_printf_float+0x192>
 8006a4a:	2900      	cmp	r1, #0
 8006a4c:	bfd4      	ite	le
 8006a4e:	f1c1 0202 	rsble	r2, r1, #2
 8006a52:	2201      	movgt	r2, #1
 8006a54:	4413      	add	r3, r2
 8006a56:	e7e0      	b.n	8006a1a <_printf_float+0x192>
 8006a58:	6823      	ldr	r3, [r4, #0]
 8006a5a:	055a      	lsls	r2, r3, #21
 8006a5c:	d407      	bmi.n	8006a6e <_printf_float+0x1e6>
 8006a5e:	6923      	ldr	r3, [r4, #16]
 8006a60:	4642      	mov	r2, r8
 8006a62:	4631      	mov	r1, r6
 8006a64:	4628      	mov	r0, r5
 8006a66:	47b8      	blx	r7
 8006a68:	3001      	adds	r0, #1
 8006a6a:	d12b      	bne.n	8006ac4 <_printf_float+0x23c>
 8006a6c:	e767      	b.n	800693e <_printf_float+0xb6>
 8006a6e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006a72:	f240 80dd 	bls.w	8006c30 <_printf_float+0x3a8>
 8006a76:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	f7fa f823 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a82:	2800      	cmp	r0, #0
 8006a84:	d033      	beq.n	8006aee <_printf_float+0x266>
 8006a86:	4a37      	ldr	r2, [pc, #220]	@ (8006b64 <_printf_float+0x2dc>)
 8006a88:	2301      	movs	r3, #1
 8006a8a:	4631      	mov	r1, r6
 8006a8c:	4628      	mov	r0, r5
 8006a8e:	47b8      	blx	r7
 8006a90:	3001      	adds	r0, #1
 8006a92:	f43f af54 	beq.w	800693e <_printf_float+0xb6>
 8006a96:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006a9a:	4543      	cmp	r3, r8
 8006a9c:	db02      	blt.n	8006aa4 <_printf_float+0x21c>
 8006a9e:	6823      	ldr	r3, [r4, #0]
 8006aa0:	07d8      	lsls	r0, r3, #31
 8006aa2:	d50f      	bpl.n	8006ac4 <_printf_float+0x23c>
 8006aa4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006aa8:	4631      	mov	r1, r6
 8006aaa:	4628      	mov	r0, r5
 8006aac:	47b8      	blx	r7
 8006aae:	3001      	adds	r0, #1
 8006ab0:	f43f af45 	beq.w	800693e <_printf_float+0xb6>
 8006ab4:	f04f 0900 	mov.w	r9, #0
 8006ab8:	f108 38ff 	add.w	r8, r8, #4294967295
 8006abc:	f104 0a1a 	add.w	sl, r4, #26
 8006ac0:	45c8      	cmp	r8, r9
 8006ac2:	dc09      	bgt.n	8006ad8 <_printf_float+0x250>
 8006ac4:	6823      	ldr	r3, [r4, #0]
 8006ac6:	079b      	lsls	r3, r3, #30
 8006ac8:	f100 8103 	bmi.w	8006cd2 <_printf_float+0x44a>
 8006acc:	68e0      	ldr	r0, [r4, #12]
 8006ace:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ad0:	4298      	cmp	r0, r3
 8006ad2:	bfb8      	it	lt
 8006ad4:	4618      	movlt	r0, r3
 8006ad6:	e734      	b.n	8006942 <_printf_float+0xba>
 8006ad8:	2301      	movs	r3, #1
 8006ada:	4652      	mov	r2, sl
 8006adc:	4631      	mov	r1, r6
 8006ade:	4628      	mov	r0, r5
 8006ae0:	47b8      	blx	r7
 8006ae2:	3001      	adds	r0, #1
 8006ae4:	f43f af2b 	beq.w	800693e <_printf_float+0xb6>
 8006ae8:	f109 0901 	add.w	r9, r9, #1
 8006aec:	e7e8      	b.n	8006ac0 <_printf_float+0x238>
 8006aee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	dc39      	bgt.n	8006b68 <_printf_float+0x2e0>
 8006af4:	4a1b      	ldr	r2, [pc, #108]	@ (8006b64 <_printf_float+0x2dc>)
 8006af6:	2301      	movs	r3, #1
 8006af8:	4631      	mov	r1, r6
 8006afa:	4628      	mov	r0, r5
 8006afc:	47b8      	blx	r7
 8006afe:	3001      	adds	r0, #1
 8006b00:	f43f af1d 	beq.w	800693e <_printf_float+0xb6>
 8006b04:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006b08:	ea59 0303 	orrs.w	r3, r9, r3
 8006b0c:	d102      	bne.n	8006b14 <_printf_float+0x28c>
 8006b0e:	6823      	ldr	r3, [r4, #0]
 8006b10:	07d9      	lsls	r1, r3, #31
 8006b12:	d5d7      	bpl.n	8006ac4 <_printf_float+0x23c>
 8006b14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b18:	4631      	mov	r1, r6
 8006b1a:	4628      	mov	r0, r5
 8006b1c:	47b8      	blx	r7
 8006b1e:	3001      	adds	r0, #1
 8006b20:	f43f af0d 	beq.w	800693e <_printf_float+0xb6>
 8006b24:	f04f 0a00 	mov.w	sl, #0
 8006b28:	f104 0b1a 	add.w	fp, r4, #26
 8006b2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b2e:	425b      	negs	r3, r3
 8006b30:	4553      	cmp	r3, sl
 8006b32:	dc01      	bgt.n	8006b38 <_printf_float+0x2b0>
 8006b34:	464b      	mov	r3, r9
 8006b36:	e793      	b.n	8006a60 <_printf_float+0x1d8>
 8006b38:	2301      	movs	r3, #1
 8006b3a:	465a      	mov	r2, fp
 8006b3c:	4631      	mov	r1, r6
 8006b3e:	4628      	mov	r0, r5
 8006b40:	47b8      	blx	r7
 8006b42:	3001      	adds	r0, #1
 8006b44:	f43f aefb 	beq.w	800693e <_printf_float+0xb6>
 8006b48:	f10a 0a01 	add.w	sl, sl, #1
 8006b4c:	e7ee      	b.n	8006b2c <_printf_float+0x2a4>
 8006b4e:	bf00      	nop
 8006b50:	7fefffff 	.word	0x7fefffff
 8006b54:	0800be40 	.word	0x0800be40
 8006b58:	0800be44 	.word	0x0800be44
 8006b5c:	0800be48 	.word	0x0800be48
 8006b60:	0800be4c 	.word	0x0800be4c
 8006b64:	0800be50 	.word	0x0800be50
 8006b68:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006b6a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006b6e:	4553      	cmp	r3, sl
 8006b70:	bfa8      	it	ge
 8006b72:	4653      	movge	r3, sl
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	4699      	mov	r9, r3
 8006b78:	dc36      	bgt.n	8006be8 <_printf_float+0x360>
 8006b7a:	f04f 0b00 	mov.w	fp, #0
 8006b7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b82:	f104 021a 	add.w	r2, r4, #26
 8006b86:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006b88:	9306      	str	r3, [sp, #24]
 8006b8a:	eba3 0309 	sub.w	r3, r3, r9
 8006b8e:	455b      	cmp	r3, fp
 8006b90:	dc31      	bgt.n	8006bf6 <_printf_float+0x36e>
 8006b92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b94:	459a      	cmp	sl, r3
 8006b96:	dc3a      	bgt.n	8006c0e <_printf_float+0x386>
 8006b98:	6823      	ldr	r3, [r4, #0]
 8006b9a:	07da      	lsls	r2, r3, #31
 8006b9c:	d437      	bmi.n	8006c0e <_printf_float+0x386>
 8006b9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ba0:	ebaa 0903 	sub.w	r9, sl, r3
 8006ba4:	9b06      	ldr	r3, [sp, #24]
 8006ba6:	ebaa 0303 	sub.w	r3, sl, r3
 8006baa:	4599      	cmp	r9, r3
 8006bac:	bfa8      	it	ge
 8006bae:	4699      	movge	r9, r3
 8006bb0:	f1b9 0f00 	cmp.w	r9, #0
 8006bb4:	dc33      	bgt.n	8006c1e <_printf_float+0x396>
 8006bb6:	f04f 0800 	mov.w	r8, #0
 8006bba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006bbe:	f104 0b1a 	add.w	fp, r4, #26
 8006bc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bc4:	ebaa 0303 	sub.w	r3, sl, r3
 8006bc8:	eba3 0309 	sub.w	r3, r3, r9
 8006bcc:	4543      	cmp	r3, r8
 8006bce:	f77f af79 	ble.w	8006ac4 <_printf_float+0x23c>
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	465a      	mov	r2, fp
 8006bd6:	4631      	mov	r1, r6
 8006bd8:	4628      	mov	r0, r5
 8006bda:	47b8      	blx	r7
 8006bdc:	3001      	adds	r0, #1
 8006bde:	f43f aeae 	beq.w	800693e <_printf_float+0xb6>
 8006be2:	f108 0801 	add.w	r8, r8, #1
 8006be6:	e7ec      	b.n	8006bc2 <_printf_float+0x33a>
 8006be8:	4642      	mov	r2, r8
 8006bea:	4631      	mov	r1, r6
 8006bec:	4628      	mov	r0, r5
 8006bee:	47b8      	blx	r7
 8006bf0:	3001      	adds	r0, #1
 8006bf2:	d1c2      	bne.n	8006b7a <_printf_float+0x2f2>
 8006bf4:	e6a3      	b.n	800693e <_printf_float+0xb6>
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	4631      	mov	r1, r6
 8006bfa:	4628      	mov	r0, r5
 8006bfc:	9206      	str	r2, [sp, #24]
 8006bfe:	47b8      	blx	r7
 8006c00:	3001      	adds	r0, #1
 8006c02:	f43f ae9c 	beq.w	800693e <_printf_float+0xb6>
 8006c06:	9a06      	ldr	r2, [sp, #24]
 8006c08:	f10b 0b01 	add.w	fp, fp, #1
 8006c0c:	e7bb      	b.n	8006b86 <_printf_float+0x2fe>
 8006c0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c12:	4631      	mov	r1, r6
 8006c14:	4628      	mov	r0, r5
 8006c16:	47b8      	blx	r7
 8006c18:	3001      	adds	r0, #1
 8006c1a:	d1c0      	bne.n	8006b9e <_printf_float+0x316>
 8006c1c:	e68f      	b.n	800693e <_printf_float+0xb6>
 8006c1e:	9a06      	ldr	r2, [sp, #24]
 8006c20:	464b      	mov	r3, r9
 8006c22:	4442      	add	r2, r8
 8006c24:	4631      	mov	r1, r6
 8006c26:	4628      	mov	r0, r5
 8006c28:	47b8      	blx	r7
 8006c2a:	3001      	adds	r0, #1
 8006c2c:	d1c3      	bne.n	8006bb6 <_printf_float+0x32e>
 8006c2e:	e686      	b.n	800693e <_printf_float+0xb6>
 8006c30:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006c34:	f1ba 0f01 	cmp.w	sl, #1
 8006c38:	dc01      	bgt.n	8006c3e <_printf_float+0x3b6>
 8006c3a:	07db      	lsls	r3, r3, #31
 8006c3c:	d536      	bpl.n	8006cac <_printf_float+0x424>
 8006c3e:	2301      	movs	r3, #1
 8006c40:	4642      	mov	r2, r8
 8006c42:	4631      	mov	r1, r6
 8006c44:	4628      	mov	r0, r5
 8006c46:	47b8      	blx	r7
 8006c48:	3001      	adds	r0, #1
 8006c4a:	f43f ae78 	beq.w	800693e <_printf_float+0xb6>
 8006c4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c52:	4631      	mov	r1, r6
 8006c54:	4628      	mov	r0, r5
 8006c56:	47b8      	blx	r7
 8006c58:	3001      	adds	r0, #1
 8006c5a:	f43f ae70 	beq.w	800693e <_printf_float+0xb6>
 8006c5e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006c62:	2200      	movs	r2, #0
 8006c64:	2300      	movs	r3, #0
 8006c66:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006c6a:	f7f9 ff2d 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c6e:	b9c0      	cbnz	r0, 8006ca2 <_printf_float+0x41a>
 8006c70:	4653      	mov	r3, sl
 8006c72:	f108 0201 	add.w	r2, r8, #1
 8006c76:	4631      	mov	r1, r6
 8006c78:	4628      	mov	r0, r5
 8006c7a:	47b8      	blx	r7
 8006c7c:	3001      	adds	r0, #1
 8006c7e:	d10c      	bne.n	8006c9a <_printf_float+0x412>
 8006c80:	e65d      	b.n	800693e <_printf_float+0xb6>
 8006c82:	2301      	movs	r3, #1
 8006c84:	465a      	mov	r2, fp
 8006c86:	4631      	mov	r1, r6
 8006c88:	4628      	mov	r0, r5
 8006c8a:	47b8      	blx	r7
 8006c8c:	3001      	adds	r0, #1
 8006c8e:	f43f ae56 	beq.w	800693e <_printf_float+0xb6>
 8006c92:	f108 0801 	add.w	r8, r8, #1
 8006c96:	45d0      	cmp	r8, sl
 8006c98:	dbf3      	blt.n	8006c82 <_printf_float+0x3fa>
 8006c9a:	464b      	mov	r3, r9
 8006c9c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006ca0:	e6df      	b.n	8006a62 <_printf_float+0x1da>
 8006ca2:	f04f 0800 	mov.w	r8, #0
 8006ca6:	f104 0b1a 	add.w	fp, r4, #26
 8006caa:	e7f4      	b.n	8006c96 <_printf_float+0x40e>
 8006cac:	2301      	movs	r3, #1
 8006cae:	4642      	mov	r2, r8
 8006cb0:	e7e1      	b.n	8006c76 <_printf_float+0x3ee>
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	464a      	mov	r2, r9
 8006cb6:	4631      	mov	r1, r6
 8006cb8:	4628      	mov	r0, r5
 8006cba:	47b8      	blx	r7
 8006cbc:	3001      	adds	r0, #1
 8006cbe:	f43f ae3e 	beq.w	800693e <_printf_float+0xb6>
 8006cc2:	f108 0801 	add.w	r8, r8, #1
 8006cc6:	68e3      	ldr	r3, [r4, #12]
 8006cc8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006cca:	1a5b      	subs	r3, r3, r1
 8006ccc:	4543      	cmp	r3, r8
 8006cce:	dcf0      	bgt.n	8006cb2 <_printf_float+0x42a>
 8006cd0:	e6fc      	b.n	8006acc <_printf_float+0x244>
 8006cd2:	f04f 0800 	mov.w	r8, #0
 8006cd6:	f104 0919 	add.w	r9, r4, #25
 8006cda:	e7f4      	b.n	8006cc6 <_printf_float+0x43e>

08006cdc <_printf_common>:
 8006cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ce0:	4616      	mov	r6, r2
 8006ce2:	4698      	mov	r8, r3
 8006ce4:	688a      	ldr	r2, [r1, #8]
 8006ce6:	690b      	ldr	r3, [r1, #16]
 8006ce8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006cec:	4293      	cmp	r3, r2
 8006cee:	bfb8      	it	lt
 8006cf0:	4613      	movlt	r3, r2
 8006cf2:	6033      	str	r3, [r6, #0]
 8006cf4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006cf8:	4607      	mov	r7, r0
 8006cfa:	460c      	mov	r4, r1
 8006cfc:	b10a      	cbz	r2, 8006d02 <_printf_common+0x26>
 8006cfe:	3301      	adds	r3, #1
 8006d00:	6033      	str	r3, [r6, #0]
 8006d02:	6823      	ldr	r3, [r4, #0]
 8006d04:	0699      	lsls	r1, r3, #26
 8006d06:	bf42      	ittt	mi
 8006d08:	6833      	ldrmi	r3, [r6, #0]
 8006d0a:	3302      	addmi	r3, #2
 8006d0c:	6033      	strmi	r3, [r6, #0]
 8006d0e:	6825      	ldr	r5, [r4, #0]
 8006d10:	f015 0506 	ands.w	r5, r5, #6
 8006d14:	d106      	bne.n	8006d24 <_printf_common+0x48>
 8006d16:	f104 0a19 	add.w	sl, r4, #25
 8006d1a:	68e3      	ldr	r3, [r4, #12]
 8006d1c:	6832      	ldr	r2, [r6, #0]
 8006d1e:	1a9b      	subs	r3, r3, r2
 8006d20:	42ab      	cmp	r3, r5
 8006d22:	dc26      	bgt.n	8006d72 <_printf_common+0x96>
 8006d24:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006d28:	6822      	ldr	r2, [r4, #0]
 8006d2a:	3b00      	subs	r3, #0
 8006d2c:	bf18      	it	ne
 8006d2e:	2301      	movne	r3, #1
 8006d30:	0692      	lsls	r2, r2, #26
 8006d32:	d42b      	bmi.n	8006d8c <_printf_common+0xb0>
 8006d34:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006d38:	4641      	mov	r1, r8
 8006d3a:	4638      	mov	r0, r7
 8006d3c:	47c8      	blx	r9
 8006d3e:	3001      	adds	r0, #1
 8006d40:	d01e      	beq.n	8006d80 <_printf_common+0xa4>
 8006d42:	6823      	ldr	r3, [r4, #0]
 8006d44:	6922      	ldr	r2, [r4, #16]
 8006d46:	f003 0306 	and.w	r3, r3, #6
 8006d4a:	2b04      	cmp	r3, #4
 8006d4c:	bf02      	ittt	eq
 8006d4e:	68e5      	ldreq	r5, [r4, #12]
 8006d50:	6833      	ldreq	r3, [r6, #0]
 8006d52:	1aed      	subeq	r5, r5, r3
 8006d54:	68a3      	ldr	r3, [r4, #8]
 8006d56:	bf0c      	ite	eq
 8006d58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d5c:	2500      	movne	r5, #0
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	bfc4      	itt	gt
 8006d62:	1a9b      	subgt	r3, r3, r2
 8006d64:	18ed      	addgt	r5, r5, r3
 8006d66:	2600      	movs	r6, #0
 8006d68:	341a      	adds	r4, #26
 8006d6a:	42b5      	cmp	r5, r6
 8006d6c:	d11a      	bne.n	8006da4 <_printf_common+0xc8>
 8006d6e:	2000      	movs	r0, #0
 8006d70:	e008      	b.n	8006d84 <_printf_common+0xa8>
 8006d72:	2301      	movs	r3, #1
 8006d74:	4652      	mov	r2, sl
 8006d76:	4641      	mov	r1, r8
 8006d78:	4638      	mov	r0, r7
 8006d7a:	47c8      	blx	r9
 8006d7c:	3001      	adds	r0, #1
 8006d7e:	d103      	bne.n	8006d88 <_printf_common+0xac>
 8006d80:	f04f 30ff 	mov.w	r0, #4294967295
 8006d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d88:	3501      	adds	r5, #1
 8006d8a:	e7c6      	b.n	8006d1a <_printf_common+0x3e>
 8006d8c:	18e1      	adds	r1, r4, r3
 8006d8e:	1c5a      	adds	r2, r3, #1
 8006d90:	2030      	movs	r0, #48	@ 0x30
 8006d92:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006d96:	4422      	add	r2, r4
 8006d98:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006d9c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006da0:	3302      	adds	r3, #2
 8006da2:	e7c7      	b.n	8006d34 <_printf_common+0x58>
 8006da4:	2301      	movs	r3, #1
 8006da6:	4622      	mov	r2, r4
 8006da8:	4641      	mov	r1, r8
 8006daa:	4638      	mov	r0, r7
 8006dac:	47c8      	blx	r9
 8006dae:	3001      	adds	r0, #1
 8006db0:	d0e6      	beq.n	8006d80 <_printf_common+0xa4>
 8006db2:	3601      	adds	r6, #1
 8006db4:	e7d9      	b.n	8006d6a <_printf_common+0x8e>
	...

08006db8 <_printf_i>:
 8006db8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006dbc:	7e0f      	ldrb	r7, [r1, #24]
 8006dbe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006dc0:	2f78      	cmp	r7, #120	@ 0x78
 8006dc2:	4691      	mov	r9, r2
 8006dc4:	4680      	mov	r8, r0
 8006dc6:	460c      	mov	r4, r1
 8006dc8:	469a      	mov	sl, r3
 8006dca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006dce:	d807      	bhi.n	8006de0 <_printf_i+0x28>
 8006dd0:	2f62      	cmp	r7, #98	@ 0x62
 8006dd2:	d80a      	bhi.n	8006dea <_printf_i+0x32>
 8006dd4:	2f00      	cmp	r7, #0
 8006dd6:	f000 80d2 	beq.w	8006f7e <_printf_i+0x1c6>
 8006dda:	2f58      	cmp	r7, #88	@ 0x58
 8006ddc:	f000 80b9 	beq.w	8006f52 <_printf_i+0x19a>
 8006de0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006de4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006de8:	e03a      	b.n	8006e60 <_printf_i+0xa8>
 8006dea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006dee:	2b15      	cmp	r3, #21
 8006df0:	d8f6      	bhi.n	8006de0 <_printf_i+0x28>
 8006df2:	a101      	add	r1, pc, #4	@ (adr r1, 8006df8 <_printf_i+0x40>)
 8006df4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006df8:	08006e51 	.word	0x08006e51
 8006dfc:	08006e65 	.word	0x08006e65
 8006e00:	08006de1 	.word	0x08006de1
 8006e04:	08006de1 	.word	0x08006de1
 8006e08:	08006de1 	.word	0x08006de1
 8006e0c:	08006de1 	.word	0x08006de1
 8006e10:	08006e65 	.word	0x08006e65
 8006e14:	08006de1 	.word	0x08006de1
 8006e18:	08006de1 	.word	0x08006de1
 8006e1c:	08006de1 	.word	0x08006de1
 8006e20:	08006de1 	.word	0x08006de1
 8006e24:	08006f65 	.word	0x08006f65
 8006e28:	08006e8f 	.word	0x08006e8f
 8006e2c:	08006f1f 	.word	0x08006f1f
 8006e30:	08006de1 	.word	0x08006de1
 8006e34:	08006de1 	.word	0x08006de1
 8006e38:	08006f87 	.word	0x08006f87
 8006e3c:	08006de1 	.word	0x08006de1
 8006e40:	08006e8f 	.word	0x08006e8f
 8006e44:	08006de1 	.word	0x08006de1
 8006e48:	08006de1 	.word	0x08006de1
 8006e4c:	08006f27 	.word	0x08006f27
 8006e50:	6833      	ldr	r3, [r6, #0]
 8006e52:	1d1a      	adds	r2, r3, #4
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	6032      	str	r2, [r6, #0]
 8006e58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e5c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006e60:	2301      	movs	r3, #1
 8006e62:	e09d      	b.n	8006fa0 <_printf_i+0x1e8>
 8006e64:	6833      	ldr	r3, [r6, #0]
 8006e66:	6820      	ldr	r0, [r4, #0]
 8006e68:	1d19      	adds	r1, r3, #4
 8006e6a:	6031      	str	r1, [r6, #0]
 8006e6c:	0606      	lsls	r6, r0, #24
 8006e6e:	d501      	bpl.n	8006e74 <_printf_i+0xbc>
 8006e70:	681d      	ldr	r5, [r3, #0]
 8006e72:	e003      	b.n	8006e7c <_printf_i+0xc4>
 8006e74:	0645      	lsls	r5, r0, #25
 8006e76:	d5fb      	bpl.n	8006e70 <_printf_i+0xb8>
 8006e78:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006e7c:	2d00      	cmp	r5, #0
 8006e7e:	da03      	bge.n	8006e88 <_printf_i+0xd0>
 8006e80:	232d      	movs	r3, #45	@ 0x2d
 8006e82:	426d      	negs	r5, r5
 8006e84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e88:	4859      	ldr	r0, [pc, #356]	@ (8006ff0 <_printf_i+0x238>)
 8006e8a:	230a      	movs	r3, #10
 8006e8c:	e011      	b.n	8006eb2 <_printf_i+0xfa>
 8006e8e:	6821      	ldr	r1, [r4, #0]
 8006e90:	6833      	ldr	r3, [r6, #0]
 8006e92:	0608      	lsls	r0, r1, #24
 8006e94:	f853 5b04 	ldr.w	r5, [r3], #4
 8006e98:	d402      	bmi.n	8006ea0 <_printf_i+0xe8>
 8006e9a:	0649      	lsls	r1, r1, #25
 8006e9c:	bf48      	it	mi
 8006e9e:	b2ad      	uxthmi	r5, r5
 8006ea0:	2f6f      	cmp	r7, #111	@ 0x6f
 8006ea2:	4853      	ldr	r0, [pc, #332]	@ (8006ff0 <_printf_i+0x238>)
 8006ea4:	6033      	str	r3, [r6, #0]
 8006ea6:	bf14      	ite	ne
 8006ea8:	230a      	movne	r3, #10
 8006eaa:	2308      	moveq	r3, #8
 8006eac:	2100      	movs	r1, #0
 8006eae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006eb2:	6866      	ldr	r6, [r4, #4]
 8006eb4:	60a6      	str	r6, [r4, #8]
 8006eb6:	2e00      	cmp	r6, #0
 8006eb8:	bfa2      	ittt	ge
 8006eba:	6821      	ldrge	r1, [r4, #0]
 8006ebc:	f021 0104 	bicge.w	r1, r1, #4
 8006ec0:	6021      	strge	r1, [r4, #0]
 8006ec2:	b90d      	cbnz	r5, 8006ec8 <_printf_i+0x110>
 8006ec4:	2e00      	cmp	r6, #0
 8006ec6:	d04b      	beq.n	8006f60 <_printf_i+0x1a8>
 8006ec8:	4616      	mov	r6, r2
 8006eca:	fbb5 f1f3 	udiv	r1, r5, r3
 8006ece:	fb03 5711 	mls	r7, r3, r1, r5
 8006ed2:	5dc7      	ldrb	r7, [r0, r7]
 8006ed4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006ed8:	462f      	mov	r7, r5
 8006eda:	42bb      	cmp	r3, r7
 8006edc:	460d      	mov	r5, r1
 8006ede:	d9f4      	bls.n	8006eca <_printf_i+0x112>
 8006ee0:	2b08      	cmp	r3, #8
 8006ee2:	d10b      	bne.n	8006efc <_printf_i+0x144>
 8006ee4:	6823      	ldr	r3, [r4, #0]
 8006ee6:	07df      	lsls	r7, r3, #31
 8006ee8:	d508      	bpl.n	8006efc <_printf_i+0x144>
 8006eea:	6923      	ldr	r3, [r4, #16]
 8006eec:	6861      	ldr	r1, [r4, #4]
 8006eee:	4299      	cmp	r1, r3
 8006ef0:	bfde      	ittt	le
 8006ef2:	2330      	movle	r3, #48	@ 0x30
 8006ef4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006ef8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006efc:	1b92      	subs	r2, r2, r6
 8006efe:	6122      	str	r2, [r4, #16]
 8006f00:	f8cd a000 	str.w	sl, [sp]
 8006f04:	464b      	mov	r3, r9
 8006f06:	aa03      	add	r2, sp, #12
 8006f08:	4621      	mov	r1, r4
 8006f0a:	4640      	mov	r0, r8
 8006f0c:	f7ff fee6 	bl	8006cdc <_printf_common>
 8006f10:	3001      	adds	r0, #1
 8006f12:	d14a      	bne.n	8006faa <_printf_i+0x1f2>
 8006f14:	f04f 30ff 	mov.w	r0, #4294967295
 8006f18:	b004      	add	sp, #16
 8006f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f1e:	6823      	ldr	r3, [r4, #0]
 8006f20:	f043 0320 	orr.w	r3, r3, #32
 8006f24:	6023      	str	r3, [r4, #0]
 8006f26:	4833      	ldr	r0, [pc, #204]	@ (8006ff4 <_printf_i+0x23c>)
 8006f28:	2778      	movs	r7, #120	@ 0x78
 8006f2a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006f2e:	6823      	ldr	r3, [r4, #0]
 8006f30:	6831      	ldr	r1, [r6, #0]
 8006f32:	061f      	lsls	r7, r3, #24
 8006f34:	f851 5b04 	ldr.w	r5, [r1], #4
 8006f38:	d402      	bmi.n	8006f40 <_printf_i+0x188>
 8006f3a:	065f      	lsls	r7, r3, #25
 8006f3c:	bf48      	it	mi
 8006f3e:	b2ad      	uxthmi	r5, r5
 8006f40:	6031      	str	r1, [r6, #0]
 8006f42:	07d9      	lsls	r1, r3, #31
 8006f44:	bf44      	itt	mi
 8006f46:	f043 0320 	orrmi.w	r3, r3, #32
 8006f4a:	6023      	strmi	r3, [r4, #0]
 8006f4c:	b11d      	cbz	r5, 8006f56 <_printf_i+0x19e>
 8006f4e:	2310      	movs	r3, #16
 8006f50:	e7ac      	b.n	8006eac <_printf_i+0xf4>
 8006f52:	4827      	ldr	r0, [pc, #156]	@ (8006ff0 <_printf_i+0x238>)
 8006f54:	e7e9      	b.n	8006f2a <_printf_i+0x172>
 8006f56:	6823      	ldr	r3, [r4, #0]
 8006f58:	f023 0320 	bic.w	r3, r3, #32
 8006f5c:	6023      	str	r3, [r4, #0]
 8006f5e:	e7f6      	b.n	8006f4e <_printf_i+0x196>
 8006f60:	4616      	mov	r6, r2
 8006f62:	e7bd      	b.n	8006ee0 <_printf_i+0x128>
 8006f64:	6833      	ldr	r3, [r6, #0]
 8006f66:	6825      	ldr	r5, [r4, #0]
 8006f68:	6961      	ldr	r1, [r4, #20]
 8006f6a:	1d18      	adds	r0, r3, #4
 8006f6c:	6030      	str	r0, [r6, #0]
 8006f6e:	062e      	lsls	r6, r5, #24
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	d501      	bpl.n	8006f78 <_printf_i+0x1c0>
 8006f74:	6019      	str	r1, [r3, #0]
 8006f76:	e002      	b.n	8006f7e <_printf_i+0x1c6>
 8006f78:	0668      	lsls	r0, r5, #25
 8006f7a:	d5fb      	bpl.n	8006f74 <_printf_i+0x1bc>
 8006f7c:	8019      	strh	r1, [r3, #0]
 8006f7e:	2300      	movs	r3, #0
 8006f80:	6123      	str	r3, [r4, #16]
 8006f82:	4616      	mov	r6, r2
 8006f84:	e7bc      	b.n	8006f00 <_printf_i+0x148>
 8006f86:	6833      	ldr	r3, [r6, #0]
 8006f88:	1d1a      	adds	r2, r3, #4
 8006f8a:	6032      	str	r2, [r6, #0]
 8006f8c:	681e      	ldr	r6, [r3, #0]
 8006f8e:	6862      	ldr	r2, [r4, #4]
 8006f90:	2100      	movs	r1, #0
 8006f92:	4630      	mov	r0, r6
 8006f94:	f7f9 f91c 	bl	80001d0 <memchr>
 8006f98:	b108      	cbz	r0, 8006f9e <_printf_i+0x1e6>
 8006f9a:	1b80      	subs	r0, r0, r6
 8006f9c:	6060      	str	r0, [r4, #4]
 8006f9e:	6863      	ldr	r3, [r4, #4]
 8006fa0:	6123      	str	r3, [r4, #16]
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006fa8:	e7aa      	b.n	8006f00 <_printf_i+0x148>
 8006faa:	6923      	ldr	r3, [r4, #16]
 8006fac:	4632      	mov	r2, r6
 8006fae:	4649      	mov	r1, r9
 8006fb0:	4640      	mov	r0, r8
 8006fb2:	47d0      	blx	sl
 8006fb4:	3001      	adds	r0, #1
 8006fb6:	d0ad      	beq.n	8006f14 <_printf_i+0x15c>
 8006fb8:	6823      	ldr	r3, [r4, #0]
 8006fba:	079b      	lsls	r3, r3, #30
 8006fbc:	d413      	bmi.n	8006fe6 <_printf_i+0x22e>
 8006fbe:	68e0      	ldr	r0, [r4, #12]
 8006fc0:	9b03      	ldr	r3, [sp, #12]
 8006fc2:	4298      	cmp	r0, r3
 8006fc4:	bfb8      	it	lt
 8006fc6:	4618      	movlt	r0, r3
 8006fc8:	e7a6      	b.n	8006f18 <_printf_i+0x160>
 8006fca:	2301      	movs	r3, #1
 8006fcc:	4632      	mov	r2, r6
 8006fce:	4649      	mov	r1, r9
 8006fd0:	4640      	mov	r0, r8
 8006fd2:	47d0      	blx	sl
 8006fd4:	3001      	adds	r0, #1
 8006fd6:	d09d      	beq.n	8006f14 <_printf_i+0x15c>
 8006fd8:	3501      	adds	r5, #1
 8006fda:	68e3      	ldr	r3, [r4, #12]
 8006fdc:	9903      	ldr	r1, [sp, #12]
 8006fde:	1a5b      	subs	r3, r3, r1
 8006fe0:	42ab      	cmp	r3, r5
 8006fe2:	dcf2      	bgt.n	8006fca <_printf_i+0x212>
 8006fe4:	e7eb      	b.n	8006fbe <_printf_i+0x206>
 8006fe6:	2500      	movs	r5, #0
 8006fe8:	f104 0619 	add.w	r6, r4, #25
 8006fec:	e7f5      	b.n	8006fda <_printf_i+0x222>
 8006fee:	bf00      	nop
 8006ff0:	0800be52 	.word	0x0800be52
 8006ff4:	0800be63 	.word	0x0800be63

08006ff8 <std>:
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	b510      	push	{r4, lr}
 8006ffc:	4604      	mov	r4, r0
 8006ffe:	e9c0 3300 	strd	r3, r3, [r0]
 8007002:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007006:	6083      	str	r3, [r0, #8]
 8007008:	8181      	strh	r1, [r0, #12]
 800700a:	6643      	str	r3, [r0, #100]	@ 0x64
 800700c:	81c2      	strh	r2, [r0, #14]
 800700e:	6183      	str	r3, [r0, #24]
 8007010:	4619      	mov	r1, r3
 8007012:	2208      	movs	r2, #8
 8007014:	305c      	adds	r0, #92	@ 0x5c
 8007016:	f000 f914 	bl	8007242 <memset>
 800701a:	4b0d      	ldr	r3, [pc, #52]	@ (8007050 <std+0x58>)
 800701c:	6263      	str	r3, [r4, #36]	@ 0x24
 800701e:	4b0d      	ldr	r3, [pc, #52]	@ (8007054 <std+0x5c>)
 8007020:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007022:	4b0d      	ldr	r3, [pc, #52]	@ (8007058 <std+0x60>)
 8007024:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007026:	4b0d      	ldr	r3, [pc, #52]	@ (800705c <std+0x64>)
 8007028:	6323      	str	r3, [r4, #48]	@ 0x30
 800702a:	4b0d      	ldr	r3, [pc, #52]	@ (8007060 <std+0x68>)
 800702c:	6224      	str	r4, [r4, #32]
 800702e:	429c      	cmp	r4, r3
 8007030:	d006      	beq.n	8007040 <std+0x48>
 8007032:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007036:	4294      	cmp	r4, r2
 8007038:	d002      	beq.n	8007040 <std+0x48>
 800703a:	33d0      	adds	r3, #208	@ 0xd0
 800703c:	429c      	cmp	r4, r3
 800703e:	d105      	bne.n	800704c <std+0x54>
 8007040:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007048:	f000 b9e6 	b.w	8007418 <__retarget_lock_init_recursive>
 800704c:	bd10      	pop	{r4, pc}
 800704e:	bf00      	nop
 8007050:	080071bd 	.word	0x080071bd
 8007054:	080071df 	.word	0x080071df
 8007058:	08007217 	.word	0x08007217
 800705c:	0800723b 	.word	0x0800723b
 8007060:	20000608 	.word	0x20000608

08007064 <stdio_exit_handler>:
 8007064:	4a02      	ldr	r2, [pc, #8]	@ (8007070 <stdio_exit_handler+0xc>)
 8007066:	4903      	ldr	r1, [pc, #12]	@ (8007074 <stdio_exit_handler+0x10>)
 8007068:	4803      	ldr	r0, [pc, #12]	@ (8007078 <stdio_exit_handler+0x14>)
 800706a:	f000 b869 	b.w	8007140 <_fwalk_sglue>
 800706e:	bf00      	nop
 8007070:	2000000c 	.word	0x2000000c
 8007074:	080096f5 	.word	0x080096f5
 8007078:	20000188 	.word	0x20000188

0800707c <cleanup_stdio>:
 800707c:	6841      	ldr	r1, [r0, #4]
 800707e:	4b0c      	ldr	r3, [pc, #48]	@ (80070b0 <cleanup_stdio+0x34>)
 8007080:	4299      	cmp	r1, r3
 8007082:	b510      	push	{r4, lr}
 8007084:	4604      	mov	r4, r0
 8007086:	d001      	beq.n	800708c <cleanup_stdio+0x10>
 8007088:	f002 fb34 	bl	80096f4 <_fflush_r>
 800708c:	68a1      	ldr	r1, [r4, #8]
 800708e:	4b09      	ldr	r3, [pc, #36]	@ (80070b4 <cleanup_stdio+0x38>)
 8007090:	4299      	cmp	r1, r3
 8007092:	d002      	beq.n	800709a <cleanup_stdio+0x1e>
 8007094:	4620      	mov	r0, r4
 8007096:	f002 fb2d 	bl	80096f4 <_fflush_r>
 800709a:	68e1      	ldr	r1, [r4, #12]
 800709c:	4b06      	ldr	r3, [pc, #24]	@ (80070b8 <cleanup_stdio+0x3c>)
 800709e:	4299      	cmp	r1, r3
 80070a0:	d004      	beq.n	80070ac <cleanup_stdio+0x30>
 80070a2:	4620      	mov	r0, r4
 80070a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070a8:	f002 bb24 	b.w	80096f4 <_fflush_r>
 80070ac:	bd10      	pop	{r4, pc}
 80070ae:	bf00      	nop
 80070b0:	20000608 	.word	0x20000608
 80070b4:	20000670 	.word	0x20000670
 80070b8:	200006d8 	.word	0x200006d8

080070bc <global_stdio_init.part.0>:
 80070bc:	b510      	push	{r4, lr}
 80070be:	4b0b      	ldr	r3, [pc, #44]	@ (80070ec <global_stdio_init.part.0+0x30>)
 80070c0:	4c0b      	ldr	r4, [pc, #44]	@ (80070f0 <global_stdio_init.part.0+0x34>)
 80070c2:	4a0c      	ldr	r2, [pc, #48]	@ (80070f4 <global_stdio_init.part.0+0x38>)
 80070c4:	601a      	str	r2, [r3, #0]
 80070c6:	4620      	mov	r0, r4
 80070c8:	2200      	movs	r2, #0
 80070ca:	2104      	movs	r1, #4
 80070cc:	f7ff ff94 	bl	8006ff8 <std>
 80070d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80070d4:	2201      	movs	r2, #1
 80070d6:	2109      	movs	r1, #9
 80070d8:	f7ff ff8e 	bl	8006ff8 <std>
 80070dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80070e0:	2202      	movs	r2, #2
 80070e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070e6:	2112      	movs	r1, #18
 80070e8:	f7ff bf86 	b.w	8006ff8 <std>
 80070ec:	20000740 	.word	0x20000740
 80070f0:	20000608 	.word	0x20000608
 80070f4:	08007065 	.word	0x08007065

080070f8 <__sfp_lock_acquire>:
 80070f8:	4801      	ldr	r0, [pc, #4]	@ (8007100 <__sfp_lock_acquire+0x8>)
 80070fa:	f000 b98e 	b.w	800741a <__retarget_lock_acquire_recursive>
 80070fe:	bf00      	nop
 8007100:	20000749 	.word	0x20000749

08007104 <__sfp_lock_release>:
 8007104:	4801      	ldr	r0, [pc, #4]	@ (800710c <__sfp_lock_release+0x8>)
 8007106:	f000 b989 	b.w	800741c <__retarget_lock_release_recursive>
 800710a:	bf00      	nop
 800710c:	20000749 	.word	0x20000749

08007110 <__sinit>:
 8007110:	b510      	push	{r4, lr}
 8007112:	4604      	mov	r4, r0
 8007114:	f7ff fff0 	bl	80070f8 <__sfp_lock_acquire>
 8007118:	6a23      	ldr	r3, [r4, #32]
 800711a:	b11b      	cbz	r3, 8007124 <__sinit+0x14>
 800711c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007120:	f7ff bff0 	b.w	8007104 <__sfp_lock_release>
 8007124:	4b04      	ldr	r3, [pc, #16]	@ (8007138 <__sinit+0x28>)
 8007126:	6223      	str	r3, [r4, #32]
 8007128:	4b04      	ldr	r3, [pc, #16]	@ (800713c <__sinit+0x2c>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d1f5      	bne.n	800711c <__sinit+0xc>
 8007130:	f7ff ffc4 	bl	80070bc <global_stdio_init.part.0>
 8007134:	e7f2      	b.n	800711c <__sinit+0xc>
 8007136:	bf00      	nop
 8007138:	0800707d 	.word	0x0800707d
 800713c:	20000740 	.word	0x20000740

08007140 <_fwalk_sglue>:
 8007140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007144:	4607      	mov	r7, r0
 8007146:	4688      	mov	r8, r1
 8007148:	4614      	mov	r4, r2
 800714a:	2600      	movs	r6, #0
 800714c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007150:	f1b9 0901 	subs.w	r9, r9, #1
 8007154:	d505      	bpl.n	8007162 <_fwalk_sglue+0x22>
 8007156:	6824      	ldr	r4, [r4, #0]
 8007158:	2c00      	cmp	r4, #0
 800715a:	d1f7      	bne.n	800714c <_fwalk_sglue+0xc>
 800715c:	4630      	mov	r0, r6
 800715e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007162:	89ab      	ldrh	r3, [r5, #12]
 8007164:	2b01      	cmp	r3, #1
 8007166:	d907      	bls.n	8007178 <_fwalk_sglue+0x38>
 8007168:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800716c:	3301      	adds	r3, #1
 800716e:	d003      	beq.n	8007178 <_fwalk_sglue+0x38>
 8007170:	4629      	mov	r1, r5
 8007172:	4638      	mov	r0, r7
 8007174:	47c0      	blx	r8
 8007176:	4306      	orrs	r6, r0
 8007178:	3568      	adds	r5, #104	@ 0x68
 800717a:	e7e9      	b.n	8007150 <_fwalk_sglue+0x10>

0800717c <siprintf>:
 800717c:	b40e      	push	{r1, r2, r3}
 800717e:	b500      	push	{lr}
 8007180:	b09c      	sub	sp, #112	@ 0x70
 8007182:	ab1d      	add	r3, sp, #116	@ 0x74
 8007184:	9002      	str	r0, [sp, #8]
 8007186:	9006      	str	r0, [sp, #24]
 8007188:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800718c:	4809      	ldr	r0, [pc, #36]	@ (80071b4 <siprintf+0x38>)
 800718e:	9107      	str	r1, [sp, #28]
 8007190:	9104      	str	r1, [sp, #16]
 8007192:	4909      	ldr	r1, [pc, #36]	@ (80071b8 <siprintf+0x3c>)
 8007194:	f853 2b04 	ldr.w	r2, [r3], #4
 8007198:	9105      	str	r1, [sp, #20]
 800719a:	6800      	ldr	r0, [r0, #0]
 800719c:	9301      	str	r3, [sp, #4]
 800719e:	a902      	add	r1, sp, #8
 80071a0:	f002 f928 	bl	80093f4 <_svfiprintf_r>
 80071a4:	9b02      	ldr	r3, [sp, #8]
 80071a6:	2200      	movs	r2, #0
 80071a8:	701a      	strb	r2, [r3, #0]
 80071aa:	b01c      	add	sp, #112	@ 0x70
 80071ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80071b0:	b003      	add	sp, #12
 80071b2:	4770      	bx	lr
 80071b4:	20000184 	.word	0x20000184
 80071b8:	ffff0208 	.word	0xffff0208

080071bc <__sread>:
 80071bc:	b510      	push	{r4, lr}
 80071be:	460c      	mov	r4, r1
 80071c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071c4:	f000 f8da 	bl	800737c <_read_r>
 80071c8:	2800      	cmp	r0, #0
 80071ca:	bfab      	itete	ge
 80071cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80071ce:	89a3      	ldrhlt	r3, [r4, #12]
 80071d0:	181b      	addge	r3, r3, r0
 80071d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80071d6:	bfac      	ite	ge
 80071d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80071da:	81a3      	strhlt	r3, [r4, #12]
 80071dc:	bd10      	pop	{r4, pc}

080071de <__swrite>:
 80071de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071e2:	461f      	mov	r7, r3
 80071e4:	898b      	ldrh	r3, [r1, #12]
 80071e6:	05db      	lsls	r3, r3, #23
 80071e8:	4605      	mov	r5, r0
 80071ea:	460c      	mov	r4, r1
 80071ec:	4616      	mov	r6, r2
 80071ee:	d505      	bpl.n	80071fc <__swrite+0x1e>
 80071f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071f4:	2302      	movs	r3, #2
 80071f6:	2200      	movs	r2, #0
 80071f8:	f000 f8ae 	bl	8007358 <_lseek_r>
 80071fc:	89a3      	ldrh	r3, [r4, #12]
 80071fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007202:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007206:	81a3      	strh	r3, [r4, #12]
 8007208:	4632      	mov	r2, r6
 800720a:	463b      	mov	r3, r7
 800720c:	4628      	mov	r0, r5
 800720e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007212:	f000 b8c5 	b.w	80073a0 <_write_r>

08007216 <__sseek>:
 8007216:	b510      	push	{r4, lr}
 8007218:	460c      	mov	r4, r1
 800721a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800721e:	f000 f89b 	bl	8007358 <_lseek_r>
 8007222:	1c43      	adds	r3, r0, #1
 8007224:	89a3      	ldrh	r3, [r4, #12]
 8007226:	bf15      	itete	ne
 8007228:	6560      	strne	r0, [r4, #84]	@ 0x54
 800722a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800722e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007232:	81a3      	strheq	r3, [r4, #12]
 8007234:	bf18      	it	ne
 8007236:	81a3      	strhne	r3, [r4, #12]
 8007238:	bd10      	pop	{r4, pc}

0800723a <__sclose>:
 800723a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800723e:	f000 b87b 	b.w	8007338 <_close_r>

08007242 <memset>:
 8007242:	4402      	add	r2, r0
 8007244:	4603      	mov	r3, r0
 8007246:	4293      	cmp	r3, r2
 8007248:	d100      	bne.n	800724c <memset+0xa>
 800724a:	4770      	bx	lr
 800724c:	f803 1b01 	strb.w	r1, [r3], #1
 8007250:	e7f9      	b.n	8007246 <memset+0x4>

08007252 <strncmp>:
 8007252:	b510      	push	{r4, lr}
 8007254:	b16a      	cbz	r2, 8007272 <strncmp+0x20>
 8007256:	3901      	subs	r1, #1
 8007258:	1884      	adds	r4, r0, r2
 800725a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800725e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007262:	429a      	cmp	r2, r3
 8007264:	d103      	bne.n	800726e <strncmp+0x1c>
 8007266:	42a0      	cmp	r0, r4
 8007268:	d001      	beq.n	800726e <strncmp+0x1c>
 800726a:	2a00      	cmp	r2, #0
 800726c:	d1f5      	bne.n	800725a <strncmp+0x8>
 800726e:	1ad0      	subs	r0, r2, r3
 8007270:	bd10      	pop	{r4, pc}
 8007272:	4610      	mov	r0, r2
 8007274:	e7fc      	b.n	8007270 <strncmp+0x1e>
	...

08007278 <strtok>:
 8007278:	4b16      	ldr	r3, [pc, #88]	@ (80072d4 <strtok+0x5c>)
 800727a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800727e:	681f      	ldr	r7, [r3, #0]
 8007280:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8007282:	4605      	mov	r5, r0
 8007284:	460e      	mov	r6, r1
 8007286:	b9ec      	cbnz	r4, 80072c4 <strtok+0x4c>
 8007288:	2050      	movs	r0, #80	@ 0x50
 800728a:	f001 fad1 	bl	8008830 <malloc>
 800728e:	4602      	mov	r2, r0
 8007290:	6478      	str	r0, [r7, #68]	@ 0x44
 8007292:	b920      	cbnz	r0, 800729e <strtok+0x26>
 8007294:	4b10      	ldr	r3, [pc, #64]	@ (80072d8 <strtok+0x60>)
 8007296:	4811      	ldr	r0, [pc, #68]	@ (80072dc <strtok+0x64>)
 8007298:	215b      	movs	r1, #91	@ 0x5b
 800729a:	f000 f8d9 	bl	8007450 <__assert_func>
 800729e:	e9c0 4400 	strd	r4, r4, [r0]
 80072a2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80072a6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80072aa:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80072ae:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80072b2:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80072b6:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80072ba:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80072be:	6184      	str	r4, [r0, #24]
 80072c0:	7704      	strb	r4, [r0, #28]
 80072c2:	6244      	str	r4, [r0, #36]	@ 0x24
 80072c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80072c6:	4631      	mov	r1, r6
 80072c8:	4628      	mov	r0, r5
 80072ca:	2301      	movs	r3, #1
 80072cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80072d0:	f000 b806 	b.w	80072e0 <__strtok_r>
 80072d4:	20000184 	.word	0x20000184
 80072d8:	0800be74 	.word	0x0800be74
 80072dc:	0800be8b 	.word	0x0800be8b

080072e0 <__strtok_r>:
 80072e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072e2:	4604      	mov	r4, r0
 80072e4:	b908      	cbnz	r0, 80072ea <__strtok_r+0xa>
 80072e6:	6814      	ldr	r4, [r2, #0]
 80072e8:	b144      	cbz	r4, 80072fc <__strtok_r+0x1c>
 80072ea:	4620      	mov	r0, r4
 80072ec:	f814 5b01 	ldrb.w	r5, [r4], #1
 80072f0:	460f      	mov	r7, r1
 80072f2:	f817 6b01 	ldrb.w	r6, [r7], #1
 80072f6:	b91e      	cbnz	r6, 8007300 <__strtok_r+0x20>
 80072f8:	b965      	cbnz	r5, 8007314 <__strtok_r+0x34>
 80072fa:	6015      	str	r5, [r2, #0]
 80072fc:	2000      	movs	r0, #0
 80072fe:	e005      	b.n	800730c <__strtok_r+0x2c>
 8007300:	42b5      	cmp	r5, r6
 8007302:	d1f6      	bne.n	80072f2 <__strtok_r+0x12>
 8007304:	2b00      	cmp	r3, #0
 8007306:	d1f0      	bne.n	80072ea <__strtok_r+0xa>
 8007308:	6014      	str	r4, [r2, #0]
 800730a:	7003      	strb	r3, [r0, #0]
 800730c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800730e:	461c      	mov	r4, r3
 8007310:	e00c      	b.n	800732c <__strtok_r+0x4c>
 8007312:	b915      	cbnz	r5, 800731a <__strtok_r+0x3a>
 8007314:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007318:	460e      	mov	r6, r1
 800731a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800731e:	42ab      	cmp	r3, r5
 8007320:	d1f7      	bne.n	8007312 <__strtok_r+0x32>
 8007322:	2b00      	cmp	r3, #0
 8007324:	d0f3      	beq.n	800730e <__strtok_r+0x2e>
 8007326:	2300      	movs	r3, #0
 8007328:	f804 3c01 	strb.w	r3, [r4, #-1]
 800732c:	6014      	str	r4, [r2, #0]
 800732e:	e7ed      	b.n	800730c <__strtok_r+0x2c>

08007330 <_localeconv_r>:
 8007330:	4800      	ldr	r0, [pc, #0]	@ (8007334 <_localeconv_r+0x4>)
 8007332:	4770      	bx	lr
 8007334:	20000108 	.word	0x20000108

08007338 <_close_r>:
 8007338:	b538      	push	{r3, r4, r5, lr}
 800733a:	4d06      	ldr	r5, [pc, #24]	@ (8007354 <_close_r+0x1c>)
 800733c:	2300      	movs	r3, #0
 800733e:	4604      	mov	r4, r0
 8007340:	4608      	mov	r0, r1
 8007342:	602b      	str	r3, [r5, #0]
 8007344:	f7fa fc8e 	bl	8001c64 <_close>
 8007348:	1c43      	adds	r3, r0, #1
 800734a:	d102      	bne.n	8007352 <_close_r+0x1a>
 800734c:	682b      	ldr	r3, [r5, #0]
 800734e:	b103      	cbz	r3, 8007352 <_close_r+0x1a>
 8007350:	6023      	str	r3, [r4, #0]
 8007352:	bd38      	pop	{r3, r4, r5, pc}
 8007354:	20000744 	.word	0x20000744

08007358 <_lseek_r>:
 8007358:	b538      	push	{r3, r4, r5, lr}
 800735a:	4d07      	ldr	r5, [pc, #28]	@ (8007378 <_lseek_r+0x20>)
 800735c:	4604      	mov	r4, r0
 800735e:	4608      	mov	r0, r1
 8007360:	4611      	mov	r1, r2
 8007362:	2200      	movs	r2, #0
 8007364:	602a      	str	r2, [r5, #0]
 8007366:	461a      	mov	r2, r3
 8007368:	f7fa fca3 	bl	8001cb2 <_lseek>
 800736c:	1c43      	adds	r3, r0, #1
 800736e:	d102      	bne.n	8007376 <_lseek_r+0x1e>
 8007370:	682b      	ldr	r3, [r5, #0]
 8007372:	b103      	cbz	r3, 8007376 <_lseek_r+0x1e>
 8007374:	6023      	str	r3, [r4, #0]
 8007376:	bd38      	pop	{r3, r4, r5, pc}
 8007378:	20000744 	.word	0x20000744

0800737c <_read_r>:
 800737c:	b538      	push	{r3, r4, r5, lr}
 800737e:	4d07      	ldr	r5, [pc, #28]	@ (800739c <_read_r+0x20>)
 8007380:	4604      	mov	r4, r0
 8007382:	4608      	mov	r0, r1
 8007384:	4611      	mov	r1, r2
 8007386:	2200      	movs	r2, #0
 8007388:	602a      	str	r2, [r5, #0]
 800738a:	461a      	mov	r2, r3
 800738c:	f7fa fc31 	bl	8001bf2 <_read>
 8007390:	1c43      	adds	r3, r0, #1
 8007392:	d102      	bne.n	800739a <_read_r+0x1e>
 8007394:	682b      	ldr	r3, [r5, #0]
 8007396:	b103      	cbz	r3, 800739a <_read_r+0x1e>
 8007398:	6023      	str	r3, [r4, #0]
 800739a:	bd38      	pop	{r3, r4, r5, pc}
 800739c:	20000744 	.word	0x20000744

080073a0 <_write_r>:
 80073a0:	b538      	push	{r3, r4, r5, lr}
 80073a2:	4d07      	ldr	r5, [pc, #28]	@ (80073c0 <_write_r+0x20>)
 80073a4:	4604      	mov	r4, r0
 80073a6:	4608      	mov	r0, r1
 80073a8:	4611      	mov	r1, r2
 80073aa:	2200      	movs	r2, #0
 80073ac:	602a      	str	r2, [r5, #0]
 80073ae:	461a      	mov	r2, r3
 80073b0:	f7fa fc3c 	bl	8001c2c <_write>
 80073b4:	1c43      	adds	r3, r0, #1
 80073b6:	d102      	bne.n	80073be <_write_r+0x1e>
 80073b8:	682b      	ldr	r3, [r5, #0]
 80073ba:	b103      	cbz	r3, 80073be <_write_r+0x1e>
 80073bc:	6023      	str	r3, [r4, #0]
 80073be:	bd38      	pop	{r3, r4, r5, pc}
 80073c0:	20000744 	.word	0x20000744

080073c4 <__errno>:
 80073c4:	4b01      	ldr	r3, [pc, #4]	@ (80073cc <__errno+0x8>)
 80073c6:	6818      	ldr	r0, [r3, #0]
 80073c8:	4770      	bx	lr
 80073ca:	bf00      	nop
 80073cc:	20000184 	.word	0x20000184

080073d0 <__libc_init_array>:
 80073d0:	b570      	push	{r4, r5, r6, lr}
 80073d2:	4d0d      	ldr	r5, [pc, #52]	@ (8007408 <__libc_init_array+0x38>)
 80073d4:	4c0d      	ldr	r4, [pc, #52]	@ (800740c <__libc_init_array+0x3c>)
 80073d6:	1b64      	subs	r4, r4, r5
 80073d8:	10a4      	asrs	r4, r4, #2
 80073da:	2600      	movs	r6, #0
 80073dc:	42a6      	cmp	r6, r4
 80073de:	d109      	bne.n	80073f4 <__libc_init_array+0x24>
 80073e0:	4d0b      	ldr	r5, [pc, #44]	@ (8007410 <__libc_init_array+0x40>)
 80073e2:	4c0c      	ldr	r4, [pc, #48]	@ (8007414 <__libc_init_array+0x44>)
 80073e4:	f004 fca4 	bl	800bd30 <_init>
 80073e8:	1b64      	subs	r4, r4, r5
 80073ea:	10a4      	asrs	r4, r4, #2
 80073ec:	2600      	movs	r6, #0
 80073ee:	42a6      	cmp	r6, r4
 80073f0:	d105      	bne.n	80073fe <__libc_init_array+0x2e>
 80073f2:	bd70      	pop	{r4, r5, r6, pc}
 80073f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80073f8:	4798      	blx	r3
 80073fa:	3601      	adds	r6, #1
 80073fc:	e7ee      	b.n	80073dc <__libc_init_array+0xc>
 80073fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007402:	4798      	blx	r3
 8007404:	3601      	adds	r6, #1
 8007406:	e7f2      	b.n	80073ee <__libc_init_array+0x1e>
 8007408:	0800c480 	.word	0x0800c480
 800740c:	0800c480 	.word	0x0800c480
 8007410:	0800c480 	.word	0x0800c480
 8007414:	0800c484 	.word	0x0800c484

08007418 <__retarget_lock_init_recursive>:
 8007418:	4770      	bx	lr

0800741a <__retarget_lock_acquire_recursive>:
 800741a:	4770      	bx	lr

0800741c <__retarget_lock_release_recursive>:
 800741c:	4770      	bx	lr

0800741e <memcpy>:
 800741e:	440a      	add	r2, r1
 8007420:	4291      	cmp	r1, r2
 8007422:	f100 33ff 	add.w	r3, r0, #4294967295
 8007426:	d100      	bne.n	800742a <memcpy+0xc>
 8007428:	4770      	bx	lr
 800742a:	b510      	push	{r4, lr}
 800742c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007430:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007434:	4291      	cmp	r1, r2
 8007436:	d1f9      	bne.n	800742c <memcpy+0xe>
 8007438:	bd10      	pop	{r4, pc}
 800743a:	0000      	movs	r0, r0
 800743c:	0000      	movs	r0, r0
	...

08007440 <nan>:
 8007440:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007448 <nan+0x8>
 8007444:	4770      	bx	lr
 8007446:	bf00      	nop
 8007448:	00000000 	.word	0x00000000
 800744c:	7ff80000 	.word	0x7ff80000

08007450 <__assert_func>:
 8007450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007452:	4614      	mov	r4, r2
 8007454:	461a      	mov	r2, r3
 8007456:	4b09      	ldr	r3, [pc, #36]	@ (800747c <__assert_func+0x2c>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4605      	mov	r5, r0
 800745c:	68d8      	ldr	r0, [r3, #12]
 800745e:	b954      	cbnz	r4, 8007476 <__assert_func+0x26>
 8007460:	4b07      	ldr	r3, [pc, #28]	@ (8007480 <__assert_func+0x30>)
 8007462:	461c      	mov	r4, r3
 8007464:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007468:	9100      	str	r1, [sp, #0]
 800746a:	462b      	mov	r3, r5
 800746c:	4905      	ldr	r1, [pc, #20]	@ (8007484 <__assert_func+0x34>)
 800746e:	f002 f969 	bl	8009744 <fiprintf>
 8007472:	f002 f9a3 	bl	80097bc <abort>
 8007476:	4b04      	ldr	r3, [pc, #16]	@ (8007488 <__assert_func+0x38>)
 8007478:	e7f4      	b.n	8007464 <__assert_func+0x14>
 800747a:	bf00      	nop
 800747c:	20000184 	.word	0x20000184
 8007480:	0800bf28 	.word	0x0800bf28
 8007484:	0800befa 	.word	0x0800befa
 8007488:	0800beed 	.word	0x0800beed

0800748c <quorem>:
 800748c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007490:	6903      	ldr	r3, [r0, #16]
 8007492:	690c      	ldr	r4, [r1, #16]
 8007494:	42a3      	cmp	r3, r4
 8007496:	4607      	mov	r7, r0
 8007498:	db7e      	blt.n	8007598 <quorem+0x10c>
 800749a:	3c01      	subs	r4, #1
 800749c:	f101 0814 	add.w	r8, r1, #20
 80074a0:	00a3      	lsls	r3, r4, #2
 80074a2:	f100 0514 	add.w	r5, r0, #20
 80074a6:	9300      	str	r3, [sp, #0]
 80074a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80074ac:	9301      	str	r3, [sp, #4]
 80074ae:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80074b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80074b6:	3301      	adds	r3, #1
 80074b8:	429a      	cmp	r2, r3
 80074ba:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80074be:	fbb2 f6f3 	udiv	r6, r2, r3
 80074c2:	d32e      	bcc.n	8007522 <quorem+0x96>
 80074c4:	f04f 0a00 	mov.w	sl, #0
 80074c8:	46c4      	mov	ip, r8
 80074ca:	46ae      	mov	lr, r5
 80074cc:	46d3      	mov	fp, sl
 80074ce:	f85c 3b04 	ldr.w	r3, [ip], #4
 80074d2:	b298      	uxth	r0, r3
 80074d4:	fb06 a000 	mla	r0, r6, r0, sl
 80074d8:	0c02      	lsrs	r2, r0, #16
 80074da:	0c1b      	lsrs	r3, r3, #16
 80074dc:	fb06 2303 	mla	r3, r6, r3, r2
 80074e0:	f8de 2000 	ldr.w	r2, [lr]
 80074e4:	b280      	uxth	r0, r0
 80074e6:	b292      	uxth	r2, r2
 80074e8:	1a12      	subs	r2, r2, r0
 80074ea:	445a      	add	r2, fp
 80074ec:	f8de 0000 	ldr.w	r0, [lr]
 80074f0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80074fa:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80074fe:	b292      	uxth	r2, r2
 8007500:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007504:	45e1      	cmp	r9, ip
 8007506:	f84e 2b04 	str.w	r2, [lr], #4
 800750a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800750e:	d2de      	bcs.n	80074ce <quorem+0x42>
 8007510:	9b00      	ldr	r3, [sp, #0]
 8007512:	58eb      	ldr	r3, [r5, r3]
 8007514:	b92b      	cbnz	r3, 8007522 <quorem+0x96>
 8007516:	9b01      	ldr	r3, [sp, #4]
 8007518:	3b04      	subs	r3, #4
 800751a:	429d      	cmp	r5, r3
 800751c:	461a      	mov	r2, r3
 800751e:	d32f      	bcc.n	8007580 <quorem+0xf4>
 8007520:	613c      	str	r4, [r7, #16]
 8007522:	4638      	mov	r0, r7
 8007524:	f001 fd10 	bl	8008f48 <__mcmp>
 8007528:	2800      	cmp	r0, #0
 800752a:	db25      	blt.n	8007578 <quorem+0xec>
 800752c:	4629      	mov	r1, r5
 800752e:	2000      	movs	r0, #0
 8007530:	f858 2b04 	ldr.w	r2, [r8], #4
 8007534:	f8d1 c000 	ldr.w	ip, [r1]
 8007538:	fa1f fe82 	uxth.w	lr, r2
 800753c:	fa1f f38c 	uxth.w	r3, ip
 8007540:	eba3 030e 	sub.w	r3, r3, lr
 8007544:	4403      	add	r3, r0
 8007546:	0c12      	lsrs	r2, r2, #16
 8007548:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800754c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007550:	b29b      	uxth	r3, r3
 8007552:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007556:	45c1      	cmp	r9, r8
 8007558:	f841 3b04 	str.w	r3, [r1], #4
 800755c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007560:	d2e6      	bcs.n	8007530 <quorem+0xa4>
 8007562:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007566:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800756a:	b922      	cbnz	r2, 8007576 <quorem+0xea>
 800756c:	3b04      	subs	r3, #4
 800756e:	429d      	cmp	r5, r3
 8007570:	461a      	mov	r2, r3
 8007572:	d30b      	bcc.n	800758c <quorem+0x100>
 8007574:	613c      	str	r4, [r7, #16]
 8007576:	3601      	adds	r6, #1
 8007578:	4630      	mov	r0, r6
 800757a:	b003      	add	sp, #12
 800757c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007580:	6812      	ldr	r2, [r2, #0]
 8007582:	3b04      	subs	r3, #4
 8007584:	2a00      	cmp	r2, #0
 8007586:	d1cb      	bne.n	8007520 <quorem+0x94>
 8007588:	3c01      	subs	r4, #1
 800758a:	e7c6      	b.n	800751a <quorem+0x8e>
 800758c:	6812      	ldr	r2, [r2, #0]
 800758e:	3b04      	subs	r3, #4
 8007590:	2a00      	cmp	r2, #0
 8007592:	d1ef      	bne.n	8007574 <quorem+0xe8>
 8007594:	3c01      	subs	r4, #1
 8007596:	e7ea      	b.n	800756e <quorem+0xe2>
 8007598:	2000      	movs	r0, #0
 800759a:	e7ee      	b.n	800757a <quorem+0xee>
 800759c:	0000      	movs	r0, r0
	...

080075a0 <_dtoa_r>:
 80075a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075a4:	69c7      	ldr	r7, [r0, #28]
 80075a6:	b099      	sub	sp, #100	@ 0x64
 80075a8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80075ac:	ec55 4b10 	vmov	r4, r5, d0
 80075b0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80075b2:	9109      	str	r1, [sp, #36]	@ 0x24
 80075b4:	4683      	mov	fp, r0
 80075b6:	920e      	str	r2, [sp, #56]	@ 0x38
 80075b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80075ba:	b97f      	cbnz	r7, 80075dc <_dtoa_r+0x3c>
 80075bc:	2010      	movs	r0, #16
 80075be:	f001 f937 	bl	8008830 <malloc>
 80075c2:	4602      	mov	r2, r0
 80075c4:	f8cb 001c 	str.w	r0, [fp, #28]
 80075c8:	b920      	cbnz	r0, 80075d4 <_dtoa_r+0x34>
 80075ca:	4ba7      	ldr	r3, [pc, #668]	@ (8007868 <_dtoa_r+0x2c8>)
 80075cc:	21ef      	movs	r1, #239	@ 0xef
 80075ce:	48a7      	ldr	r0, [pc, #668]	@ (800786c <_dtoa_r+0x2cc>)
 80075d0:	f7ff ff3e 	bl	8007450 <__assert_func>
 80075d4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80075d8:	6007      	str	r7, [r0, #0]
 80075da:	60c7      	str	r7, [r0, #12]
 80075dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80075e0:	6819      	ldr	r1, [r3, #0]
 80075e2:	b159      	cbz	r1, 80075fc <_dtoa_r+0x5c>
 80075e4:	685a      	ldr	r2, [r3, #4]
 80075e6:	604a      	str	r2, [r1, #4]
 80075e8:	2301      	movs	r3, #1
 80075ea:	4093      	lsls	r3, r2
 80075ec:	608b      	str	r3, [r1, #8]
 80075ee:	4658      	mov	r0, fp
 80075f0:	f001 fa26 	bl	8008a40 <_Bfree>
 80075f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80075f8:	2200      	movs	r2, #0
 80075fa:	601a      	str	r2, [r3, #0]
 80075fc:	1e2b      	subs	r3, r5, #0
 80075fe:	bfb9      	ittee	lt
 8007600:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007604:	9303      	strlt	r3, [sp, #12]
 8007606:	2300      	movge	r3, #0
 8007608:	6033      	strge	r3, [r6, #0]
 800760a:	9f03      	ldr	r7, [sp, #12]
 800760c:	4b98      	ldr	r3, [pc, #608]	@ (8007870 <_dtoa_r+0x2d0>)
 800760e:	bfbc      	itt	lt
 8007610:	2201      	movlt	r2, #1
 8007612:	6032      	strlt	r2, [r6, #0]
 8007614:	43bb      	bics	r3, r7
 8007616:	d112      	bne.n	800763e <_dtoa_r+0x9e>
 8007618:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800761a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800761e:	6013      	str	r3, [r2, #0]
 8007620:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007624:	4323      	orrs	r3, r4
 8007626:	f000 854d 	beq.w	80080c4 <_dtoa_r+0xb24>
 800762a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800762c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007884 <_dtoa_r+0x2e4>
 8007630:	2b00      	cmp	r3, #0
 8007632:	f000 854f 	beq.w	80080d4 <_dtoa_r+0xb34>
 8007636:	f10a 0303 	add.w	r3, sl, #3
 800763a:	f000 bd49 	b.w	80080d0 <_dtoa_r+0xb30>
 800763e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007642:	2200      	movs	r2, #0
 8007644:	ec51 0b17 	vmov	r0, r1, d7
 8007648:	2300      	movs	r3, #0
 800764a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800764e:	f7f9 fa3b 	bl	8000ac8 <__aeabi_dcmpeq>
 8007652:	4680      	mov	r8, r0
 8007654:	b158      	cbz	r0, 800766e <_dtoa_r+0xce>
 8007656:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007658:	2301      	movs	r3, #1
 800765a:	6013      	str	r3, [r2, #0]
 800765c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800765e:	b113      	cbz	r3, 8007666 <_dtoa_r+0xc6>
 8007660:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007662:	4b84      	ldr	r3, [pc, #528]	@ (8007874 <_dtoa_r+0x2d4>)
 8007664:	6013      	str	r3, [r2, #0]
 8007666:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007888 <_dtoa_r+0x2e8>
 800766a:	f000 bd33 	b.w	80080d4 <_dtoa_r+0xb34>
 800766e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007672:	aa16      	add	r2, sp, #88	@ 0x58
 8007674:	a917      	add	r1, sp, #92	@ 0x5c
 8007676:	4658      	mov	r0, fp
 8007678:	f001 fd86 	bl	8009188 <__d2b>
 800767c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007680:	4681      	mov	r9, r0
 8007682:	2e00      	cmp	r6, #0
 8007684:	d077      	beq.n	8007776 <_dtoa_r+0x1d6>
 8007686:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007688:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800768c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007690:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007694:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007698:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800769c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80076a0:	4619      	mov	r1, r3
 80076a2:	2200      	movs	r2, #0
 80076a4:	4b74      	ldr	r3, [pc, #464]	@ (8007878 <_dtoa_r+0x2d8>)
 80076a6:	f7f8 fdef 	bl	8000288 <__aeabi_dsub>
 80076aa:	a369      	add	r3, pc, #420	@ (adr r3, 8007850 <_dtoa_r+0x2b0>)
 80076ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b0:	f7f8 ffa2 	bl	80005f8 <__aeabi_dmul>
 80076b4:	a368      	add	r3, pc, #416	@ (adr r3, 8007858 <_dtoa_r+0x2b8>)
 80076b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ba:	f7f8 fde7 	bl	800028c <__adddf3>
 80076be:	4604      	mov	r4, r0
 80076c0:	4630      	mov	r0, r6
 80076c2:	460d      	mov	r5, r1
 80076c4:	f7f8 ff2e 	bl	8000524 <__aeabi_i2d>
 80076c8:	a365      	add	r3, pc, #404	@ (adr r3, 8007860 <_dtoa_r+0x2c0>)
 80076ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ce:	f7f8 ff93 	bl	80005f8 <__aeabi_dmul>
 80076d2:	4602      	mov	r2, r0
 80076d4:	460b      	mov	r3, r1
 80076d6:	4620      	mov	r0, r4
 80076d8:	4629      	mov	r1, r5
 80076da:	f7f8 fdd7 	bl	800028c <__adddf3>
 80076de:	4604      	mov	r4, r0
 80076e0:	460d      	mov	r5, r1
 80076e2:	f7f9 fa39 	bl	8000b58 <__aeabi_d2iz>
 80076e6:	2200      	movs	r2, #0
 80076e8:	4607      	mov	r7, r0
 80076ea:	2300      	movs	r3, #0
 80076ec:	4620      	mov	r0, r4
 80076ee:	4629      	mov	r1, r5
 80076f0:	f7f9 f9f4 	bl	8000adc <__aeabi_dcmplt>
 80076f4:	b140      	cbz	r0, 8007708 <_dtoa_r+0x168>
 80076f6:	4638      	mov	r0, r7
 80076f8:	f7f8 ff14 	bl	8000524 <__aeabi_i2d>
 80076fc:	4622      	mov	r2, r4
 80076fe:	462b      	mov	r3, r5
 8007700:	f7f9 f9e2 	bl	8000ac8 <__aeabi_dcmpeq>
 8007704:	b900      	cbnz	r0, 8007708 <_dtoa_r+0x168>
 8007706:	3f01      	subs	r7, #1
 8007708:	2f16      	cmp	r7, #22
 800770a:	d851      	bhi.n	80077b0 <_dtoa_r+0x210>
 800770c:	4b5b      	ldr	r3, [pc, #364]	@ (800787c <_dtoa_r+0x2dc>)
 800770e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007716:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800771a:	f7f9 f9df 	bl	8000adc <__aeabi_dcmplt>
 800771e:	2800      	cmp	r0, #0
 8007720:	d048      	beq.n	80077b4 <_dtoa_r+0x214>
 8007722:	3f01      	subs	r7, #1
 8007724:	2300      	movs	r3, #0
 8007726:	9312      	str	r3, [sp, #72]	@ 0x48
 8007728:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800772a:	1b9b      	subs	r3, r3, r6
 800772c:	1e5a      	subs	r2, r3, #1
 800772e:	bf44      	itt	mi
 8007730:	f1c3 0801 	rsbmi	r8, r3, #1
 8007734:	2300      	movmi	r3, #0
 8007736:	9208      	str	r2, [sp, #32]
 8007738:	bf54      	ite	pl
 800773a:	f04f 0800 	movpl.w	r8, #0
 800773e:	9308      	strmi	r3, [sp, #32]
 8007740:	2f00      	cmp	r7, #0
 8007742:	db39      	blt.n	80077b8 <_dtoa_r+0x218>
 8007744:	9b08      	ldr	r3, [sp, #32]
 8007746:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007748:	443b      	add	r3, r7
 800774a:	9308      	str	r3, [sp, #32]
 800774c:	2300      	movs	r3, #0
 800774e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007750:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007752:	2b09      	cmp	r3, #9
 8007754:	d864      	bhi.n	8007820 <_dtoa_r+0x280>
 8007756:	2b05      	cmp	r3, #5
 8007758:	bfc4      	itt	gt
 800775a:	3b04      	subgt	r3, #4
 800775c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800775e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007760:	f1a3 0302 	sub.w	r3, r3, #2
 8007764:	bfcc      	ite	gt
 8007766:	2400      	movgt	r4, #0
 8007768:	2401      	movle	r4, #1
 800776a:	2b03      	cmp	r3, #3
 800776c:	d863      	bhi.n	8007836 <_dtoa_r+0x296>
 800776e:	e8df f003 	tbb	[pc, r3]
 8007772:	372a      	.short	0x372a
 8007774:	5535      	.short	0x5535
 8007776:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800777a:	441e      	add	r6, r3
 800777c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007780:	2b20      	cmp	r3, #32
 8007782:	bfc1      	itttt	gt
 8007784:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007788:	409f      	lslgt	r7, r3
 800778a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800778e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007792:	bfd6      	itet	le
 8007794:	f1c3 0320 	rsble	r3, r3, #32
 8007798:	ea47 0003 	orrgt.w	r0, r7, r3
 800779c:	fa04 f003 	lslle.w	r0, r4, r3
 80077a0:	f7f8 feb0 	bl	8000504 <__aeabi_ui2d>
 80077a4:	2201      	movs	r2, #1
 80077a6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80077aa:	3e01      	subs	r6, #1
 80077ac:	9214      	str	r2, [sp, #80]	@ 0x50
 80077ae:	e777      	b.n	80076a0 <_dtoa_r+0x100>
 80077b0:	2301      	movs	r3, #1
 80077b2:	e7b8      	b.n	8007726 <_dtoa_r+0x186>
 80077b4:	9012      	str	r0, [sp, #72]	@ 0x48
 80077b6:	e7b7      	b.n	8007728 <_dtoa_r+0x188>
 80077b8:	427b      	negs	r3, r7
 80077ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80077bc:	2300      	movs	r3, #0
 80077be:	eba8 0807 	sub.w	r8, r8, r7
 80077c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80077c4:	e7c4      	b.n	8007750 <_dtoa_r+0x1b0>
 80077c6:	2300      	movs	r3, #0
 80077c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80077ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	dc35      	bgt.n	800783c <_dtoa_r+0x29c>
 80077d0:	2301      	movs	r3, #1
 80077d2:	9300      	str	r3, [sp, #0]
 80077d4:	9307      	str	r3, [sp, #28]
 80077d6:	461a      	mov	r2, r3
 80077d8:	920e      	str	r2, [sp, #56]	@ 0x38
 80077da:	e00b      	b.n	80077f4 <_dtoa_r+0x254>
 80077dc:	2301      	movs	r3, #1
 80077de:	e7f3      	b.n	80077c8 <_dtoa_r+0x228>
 80077e0:	2300      	movs	r3, #0
 80077e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80077e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80077e6:	18fb      	adds	r3, r7, r3
 80077e8:	9300      	str	r3, [sp, #0]
 80077ea:	3301      	adds	r3, #1
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	9307      	str	r3, [sp, #28]
 80077f0:	bfb8      	it	lt
 80077f2:	2301      	movlt	r3, #1
 80077f4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80077f8:	2100      	movs	r1, #0
 80077fa:	2204      	movs	r2, #4
 80077fc:	f102 0514 	add.w	r5, r2, #20
 8007800:	429d      	cmp	r5, r3
 8007802:	d91f      	bls.n	8007844 <_dtoa_r+0x2a4>
 8007804:	6041      	str	r1, [r0, #4]
 8007806:	4658      	mov	r0, fp
 8007808:	f001 f8da 	bl	80089c0 <_Balloc>
 800780c:	4682      	mov	sl, r0
 800780e:	2800      	cmp	r0, #0
 8007810:	d13c      	bne.n	800788c <_dtoa_r+0x2ec>
 8007812:	4b1b      	ldr	r3, [pc, #108]	@ (8007880 <_dtoa_r+0x2e0>)
 8007814:	4602      	mov	r2, r0
 8007816:	f240 11af 	movw	r1, #431	@ 0x1af
 800781a:	e6d8      	b.n	80075ce <_dtoa_r+0x2e>
 800781c:	2301      	movs	r3, #1
 800781e:	e7e0      	b.n	80077e2 <_dtoa_r+0x242>
 8007820:	2401      	movs	r4, #1
 8007822:	2300      	movs	r3, #0
 8007824:	9309      	str	r3, [sp, #36]	@ 0x24
 8007826:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007828:	f04f 33ff 	mov.w	r3, #4294967295
 800782c:	9300      	str	r3, [sp, #0]
 800782e:	9307      	str	r3, [sp, #28]
 8007830:	2200      	movs	r2, #0
 8007832:	2312      	movs	r3, #18
 8007834:	e7d0      	b.n	80077d8 <_dtoa_r+0x238>
 8007836:	2301      	movs	r3, #1
 8007838:	930b      	str	r3, [sp, #44]	@ 0x2c
 800783a:	e7f5      	b.n	8007828 <_dtoa_r+0x288>
 800783c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800783e:	9300      	str	r3, [sp, #0]
 8007840:	9307      	str	r3, [sp, #28]
 8007842:	e7d7      	b.n	80077f4 <_dtoa_r+0x254>
 8007844:	3101      	adds	r1, #1
 8007846:	0052      	lsls	r2, r2, #1
 8007848:	e7d8      	b.n	80077fc <_dtoa_r+0x25c>
 800784a:	bf00      	nop
 800784c:	f3af 8000 	nop.w
 8007850:	636f4361 	.word	0x636f4361
 8007854:	3fd287a7 	.word	0x3fd287a7
 8007858:	8b60c8b3 	.word	0x8b60c8b3
 800785c:	3fc68a28 	.word	0x3fc68a28
 8007860:	509f79fb 	.word	0x509f79fb
 8007864:	3fd34413 	.word	0x3fd34413
 8007868:	0800be74 	.word	0x0800be74
 800786c:	0800bf36 	.word	0x0800bf36
 8007870:	7ff00000 	.word	0x7ff00000
 8007874:	0800be51 	.word	0x0800be51
 8007878:	3ff80000 	.word	0x3ff80000
 800787c:	0800c090 	.word	0x0800c090
 8007880:	0800bf8e 	.word	0x0800bf8e
 8007884:	0800bf32 	.word	0x0800bf32
 8007888:	0800be50 	.word	0x0800be50
 800788c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007890:	6018      	str	r0, [r3, #0]
 8007892:	9b07      	ldr	r3, [sp, #28]
 8007894:	2b0e      	cmp	r3, #14
 8007896:	f200 80a4 	bhi.w	80079e2 <_dtoa_r+0x442>
 800789a:	2c00      	cmp	r4, #0
 800789c:	f000 80a1 	beq.w	80079e2 <_dtoa_r+0x442>
 80078a0:	2f00      	cmp	r7, #0
 80078a2:	dd33      	ble.n	800790c <_dtoa_r+0x36c>
 80078a4:	4bad      	ldr	r3, [pc, #692]	@ (8007b5c <_dtoa_r+0x5bc>)
 80078a6:	f007 020f 	and.w	r2, r7, #15
 80078aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80078ae:	ed93 7b00 	vldr	d7, [r3]
 80078b2:	05f8      	lsls	r0, r7, #23
 80078b4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80078b8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80078bc:	d516      	bpl.n	80078ec <_dtoa_r+0x34c>
 80078be:	4ba8      	ldr	r3, [pc, #672]	@ (8007b60 <_dtoa_r+0x5c0>)
 80078c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80078c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80078c8:	f7f8 ffc0 	bl	800084c <__aeabi_ddiv>
 80078cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078d0:	f004 040f 	and.w	r4, r4, #15
 80078d4:	2603      	movs	r6, #3
 80078d6:	4da2      	ldr	r5, [pc, #648]	@ (8007b60 <_dtoa_r+0x5c0>)
 80078d8:	b954      	cbnz	r4, 80078f0 <_dtoa_r+0x350>
 80078da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078e2:	f7f8 ffb3 	bl	800084c <__aeabi_ddiv>
 80078e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078ea:	e028      	b.n	800793e <_dtoa_r+0x39e>
 80078ec:	2602      	movs	r6, #2
 80078ee:	e7f2      	b.n	80078d6 <_dtoa_r+0x336>
 80078f0:	07e1      	lsls	r1, r4, #31
 80078f2:	d508      	bpl.n	8007906 <_dtoa_r+0x366>
 80078f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80078fc:	f7f8 fe7c 	bl	80005f8 <__aeabi_dmul>
 8007900:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007904:	3601      	adds	r6, #1
 8007906:	1064      	asrs	r4, r4, #1
 8007908:	3508      	adds	r5, #8
 800790a:	e7e5      	b.n	80078d8 <_dtoa_r+0x338>
 800790c:	f000 80d2 	beq.w	8007ab4 <_dtoa_r+0x514>
 8007910:	427c      	negs	r4, r7
 8007912:	4b92      	ldr	r3, [pc, #584]	@ (8007b5c <_dtoa_r+0x5bc>)
 8007914:	4d92      	ldr	r5, [pc, #584]	@ (8007b60 <_dtoa_r+0x5c0>)
 8007916:	f004 020f 	and.w	r2, r4, #15
 800791a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800791e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007922:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007926:	f7f8 fe67 	bl	80005f8 <__aeabi_dmul>
 800792a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800792e:	1124      	asrs	r4, r4, #4
 8007930:	2300      	movs	r3, #0
 8007932:	2602      	movs	r6, #2
 8007934:	2c00      	cmp	r4, #0
 8007936:	f040 80b2 	bne.w	8007a9e <_dtoa_r+0x4fe>
 800793a:	2b00      	cmp	r3, #0
 800793c:	d1d3      	bne.n	80078e6 <_dtoa_r+0x346>
 800793e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007940:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007944:	2b00      	cmp	r3, #0
 8007946:	f000 80b7 	beq.w	8007ab8 <_dtoa_r+0x518>
 800794a:	4b86      	ldr	r3, [pc, #536]	@ (8007b64 <_dtoa_r+0x5c4>)
 800794c:	2200      	movs	r2, #0
 800794e:	4620      	mov	r0, r4
 8007950:	4629      	mov	r1, r5
 8007952:	f7f9 f8c3 	bl	8000adc <__aeabi_dcmplt>
 8007956:	2800      	cmp	r0, #0
 8007958:	f000 80ae 	beq.w	8007ab8 <_dtoa_r+0x518>
 800795c:	9b07      	ldr	r3, [sp, #28]
 800795e:	2b00      	cmp	r3, #0
 8007960:	f000 80aa 	beq.w	8007ab8 <_dtoa_r+0x518>
 8007964:	9b00      	ldr	r3, [sp, #0]
 8007966:	2b00      	cmp	r3, #0
 8007968:	dd37      	ble.n	80079da <_dtoa_r+0x43a>
 800796a:	1e7b      	subs	r3, r7, #1
 800796c:	9304      	str	r3, [sp, #16]
 800796e:	4620      	mov	r0, r4
 8007970:	4b7d      	ldr	r3, [pc, #500]	@ (8007b68 <_dtoa_r+0x5c8>)
 8007972:	2200      	movs	r2, #0
 8007974:	4629      	mov	r1, r5
 8007976:	f7f8 fe3f 	bl	80005f8 <__aeabi_dmul>
 800797a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800797e:	9c00      	ldr	r4, [sp, #0]
 8007980:	3601      	adds	r6, #1
 8007982:	4630      	mov	r0, r6
 8007984:	f7f8 fdce 	bl	8000524 <__aeabi_i2d>
 8007988:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800798c:	f7f8 fe34 	bl	80005f8 <__aeabi_dmul>
 8007990:	4b76      	ldr	r3, [pc, #472]	@ (8007b6c <_dtoa_r+0x5cc>)
 8007992:	2200      	movs	r2, #0
 8007994:	f7f8 fc7a 	bl	800028c <__adddf3>
 8007998:	4605      	mov	r5, r0
 800799a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800799e:	2c00      	cmp	r4, #0
 80079a0:	f040 808d 	bne.w	8007abe <_dtoa_r+0x51e>
 80079a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079a8:	4b71      	ldr	r3, [pc, #452]	@ (8007b70 <_dtoa_r+0x5d0>)
 80079aa:	2200      	movs	r2, #0
 80079ac:	f7f8 fc6c 	bl	8000288 <__aeabi_dsub>
 80079b0:	4602      	mov	r2, r0
 80079b2:	460b      	mov	r3, r1
 80079b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80079b8:	462a      	mov	r2, r5
 80079ba:	4633      	mov	r3, r6
 80079bc:	f7f9 f8ac 	bl	8000b18 <__aeabi_dcmpgt>
 80079c0:	2800      	cmp	r0, #0
 80079c2:	f040 828b 	bne.w	8007edc <_dtoa_r+0x93c>
 80079c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079ca:	462a      	mov	r2, r5
 80079cc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80079d0:	f7f9 f884 	bl	8000adc <__aeabi_dcmplt>
 80079d4:	2800      	cmp	r0, #0
 80079d6:	f040 8128 	bne.w	8007c2a <_dtoa_r+0x68a>
 80079da:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80079de:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80079e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	f2c0 815a 	blt.w	8007c9e <_dtoa_r+0x6fe>
 80079ea:	2f0e      	cmp	r7, #14
 80079ec:	f300 8157 	bgt.w	8007c9e <_dtoa_r+0x6fe>
 80079f0:	4b5a      	ldr	r3, [pc, #360]	@ (8007b5c <_dtoa_r+0x5bc>)
 80079f2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80079f6:	ed93 7b00 	vldr	d7, [r3]
 80079fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	ed8d 7b00 	vstr	d7, [sp]
 8007a02:	da03      	bge.n	8007a0c <_dtoa_r+0x46c>
 8007a04:	9b07      	ldr	r3, [sp, #28]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	f340 8101 	ble.w	8007c0e <_dtoa_r+0x66e>
 8007a0c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007a10:	4656      	mov	r6, sl
 8007a12:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a16:	4620      	mov	r0, r4
 8007a18:	4629      	mov	r1, r5
 8007a1a:	f7f8 ff17 	bl	800084c <__aeabi_ddiv>
 8007a1e:	f7f9 f89b 	bl	8000b58 <__aeabi_d2iz>
 8007a22:	4680      	mov	r8, r0
 8007a24:	f7f8 fd7e 	bl	8000524 <__aeabi_i2d>
 8007a28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a2c:	f7f8 fde4 	bl	80005f8 <__aeabi_dmul>
 8007a30:	4602      	mov	r2, r0
 8007a32:	460b      	mov	r3, r1
 8007a34:	4620      	mov	r0, r4
 8007a36:	4629      	mov	r1, r5
 8007a38:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007a3c:	f7f8 fc24 	bl	8000288 <__aeabi_dsub>
 8007a40:	f806 4b01 	strb.w	r4, [r6], #1
 8007a44:	9d07      	ldr	r5, [sp, #28]
 8007a46:	eba6 040a 	sub.w	r4, r6, sl
 8007a4a:	42a5      	cmp	r5, r4
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	460b      	mov	r3, r1
 8007a50:	f040 8117 	bne.w	8007c82 <_dtoa_r+0x6e2>
 8007a54:	f7f8 fc1a 	bl	800028c <__adddf3>
 8007a58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a5c:	4604      	mov	r4, r0
 8007a5e:	460d      	mov	r5, r1
 8007a60:	f7f9 f85a 	bl	8000b18 <__aeabi_dcmpgt>
 8007a64:	2800      	cmp	r0, #0
 8007a66:	f040 80f9 	bne.w	8007c5c <_dtoa_r+0x6bc>
 8007a6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a6e:	4620      	mov	r0, r4
 8007a70:	4629      	mov	r1, r5
 8007a72:	f7f9 f829 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a76:	b118      	cbz	r0, 8007a80 <_dtoa_r+0x4e0>
 8007a78:	f018 0f01 	tst.w	r8, #1
 8007a7c:	f040 80ee 	bne.w	8007c5c <_dtoa_r+0x6bc>
 8007a80:	4649      	mov	r1, r9
 8007a82:	4658      	mov	r0, fp
 8007a84:	f000 ffdc 	bl	8008a40 <_Bfree>
 8007a88:	2300      	movs	r3, #0
 8007a8a:	7033      	strb	r3, [r6, #0]
 8007a8c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007a8e:	3701      	adds	r7, #1
 8007a90:	601f      	str	r7, [r3, #0]
 8007a92:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	f000 831d 	beq.w	80080d4 <_dtoa_r+0xb34>
 8007a9a:	601e      	str	r6, [r3, #0]
 8007a9c:	e31a      	b.n	80080d4 <_dtoa_r+0xb34>
 8007a9e:	07e2      	lsls	r2, r4, #31
 8007aa0:	d505      	bpl.n	8007aae <_dtoa_r+0x50e>
 8007aa2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007aa6:	f7f8 fda7 	bl	80005f8 <__aeabi_dmul>
 8007aaa:	3601      	adds	r6, #1
 8007aac:	2301      	movs	r3, #1
 8007aae:	1064      	asrs	r4, r4, #1
 8007ab0:	3508      	adds	r5, #8
 8007ab2:	e73f      	b.n	8007934 <_dtoa_r+0x394>
 8007ab4:	2602      	movs	r6, #2
 8007ab6:	e742      	b.n	800793e <_dtoa_r+0x39e>
 8007ab8:	9c07      	ldr	r4, [sp, #28]
 8007aba:	9704      	str	r7, [sp, #16]
 8007abc:	e761      	b.n	8007982 <_dtoa_r+0x3e2>
 8007abe:	4b27      	ldr	r3, [pc, #156]	@ (8007b5c <_dtoa_r+0x5bc>)
 8007ac0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007ac2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007ac6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007aca:	4454      	add	r4, sl
 8007acc:	2900      	cmp	r1, #0
 8007ace:	d053      	beq.n	8007b78 <_dtoa_r+0x5d8>
 8007ad0:	4928      	ldr	r1, [pc, #160]	@ (8007b74 <_dtoa_r+0x5d4>)
 8007ad2:	2000      	movs	r0, #0
 8007ad4:	f7f8 feba 	bl	800084c <__aeabi_ddiv>
 8007ad8:	4633      	mov	r3, r6
 8007ada:	462a      	mov	r2, r5
 8007adc:	f7f8 fbd4 	bl	8000288 <__aeabi_dsub>
 8007ae0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007ae4:	4656      	mov	r6, sl
 8007ae6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007aea:	f7f9 f835 	bl	8000b58 <__aeabi_d2iz>
 8007aee:	4605      	mov	r5, r0
 8007af0:	f7f8 fd18 	bl	8000524 <__aeabi_i2d>
 8007af4:	4602      	mov	r2, r0
 8007af6:	460b      	mov	r3, r1
 8007af8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007afc:	f7f8 fbc4 	bl	8000288 <__aeabi_dsub>
 8007b00:	3530      	adds	r5, #48	@ 0x30
 8007b02:	4602      	mov	r2, r0
 8007b04:	460b      	mov	r3, r1
 8007b06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007b0a:	f806 5b01 	strb.w	r5, [r6], #1
 8007b0e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007b12:	f7f8 ffe3 	bl	8000adc <__aeabi_dcmplt>
 8007b16:	2800      	cmp	r0, #0
 8007b18:	d171      	bne.n	8007bfe <_dtoa_r+0x65e>
 8007b1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b1e:	4911      	ldr	r1, [pc, #68]	@ (8007b64 <_dtoa_r+0x5c4>)
 8007b20:	2000      	movs	r0, #0
 8007b22:	f7f8 fbb1 	bl	8000288 <__aeabi_dsub>
 8007b26:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007b2a:	f7f8 ffd7 	bl	8000adc <__aeabi_dcmplt>
 8007b2e:	2800      	cmp	r0, #0
 8007b30:	f040 8095 	bne.w	8007c5e <_dtoa_r+0x6be>
 8007b34:	42a6      	cmp	r6, r4
 8007b36:	f43f af50 	beq.w	80079da <_dtoa_r+0x43a>
 8007b3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007b3e:	4b0a      	ldr	r3, [pc, #40]	@ (8007b68 <_dtoa_r+0x5c8>)
 8007b40:	2200      	movs	r2, #0
 8007b42:	f7f8 fd59 	bl	80005f8 <__aeabi_dmul>
 8007b46:	4b08      	ldr	r3, [pc, #32]	@ (8007b68 <_dtoa_r+0x5c8>)
 8007b48:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b52:	f7f8 fd51 	bl	80005f8 <__aeabi_dmul>
 8007b56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b5a:	e7c4      	b.n	8007ae6 <_dtoa_r+0x546>
 8007b5c:	0800c090 	.word	0x0800c090
 8007b60:	0800c068 	.word	0x0800c068
 8007b64:	3ff00000 	.word	0x3ff00000
 8007b68:	40240000 	.word	0x40240000
 8007b6c:	401c0000 	.word	0x401c0000
 8007b70:	40140000 	.word	0x40140000
 8007b74:	3fe00000 	.word	0x3fe00000
 8007b78:	4631      	mov	r1, r6
 8007b7a:	4628      	mov	r0, r5
 8007b7c:	f7f8 fd3c 	bl	80005f8 <__aeabi_dmul>
 8007b80:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007b84:	9415      	str	r4, [sp, #84]	@ 0x54
 8007b86:	4656      	mov	r6, sl
 8007b88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b8c:	f7f8 ffe4 	bl	8000b58 <__aeabi_d2iz>
 8007b90:	4605      	mov	r5, r0
 8007b92:	f7f8 fcc7 	bl	8000524 <__aeabi_i2d>
 8007b96:	4602      	mov	r2, r0
 8007b98:	460b      	mov	r3, r1
 8007b9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b9e:	f7f8 fb73 	bl	8000288 <__aeabi_dsub>
 8007ba2:	3530      	adds	r5, #48	@ 0x30
 8007ba4:	f806 5b01 	strb.w	r5, [r6], #1
 8007ba8:	4602      	mov	r2, r0
 8007baa:	460b      	mov	r3, r1
 8007bac:	42a6      	cmp	r6, r4
 8007bae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007bb2:	f04f 0200 	mov.w	r2, #0
 8007bb6:	d124      	bne.n	8007c02 <_dtoa_r+0x662>
 8007bb8:	4bac      	ldr	r3, [pc, #688]	@ (8007e6c <_dtoa_r+0x8cc>)
 8007bba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007bbe:	f7f8 fb65 	bl	800028c <__adddf3>
 8007bc2:	4602      	mov	r2, r0
 8007bc4:	460b      	mov	r3, r1
 8007bc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bca:	f7f8 ffa5 	bl	8000b18 <__aeabi_dcmpgt>
 8007bce:	2800      	cmp	r0, #0
 8007bd0:	d145      	bne.n	8007c5e <_dtoa_r+0x6be>
 8007bd2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007bd6:	49a5      	ldr	r1, [pc, #660]	@ (8007e6c <_dtoa_r+0x8cc>)
 8007bd8:	2000      	movs	r0, #0
 8007bda:	f7f8 fb55 	bl	8000288 <__aeabi_dsub>
 8007bde:	4602      	mov	r2, r0
 8007be0:	460b      	mov	r3, r1
 8007be2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007be6:	f7f8 ff79 	bl	8000adc <__aeabi_dcmplt>
 8007bea:	2800      	cmp	r0, #0
 8007bec:	f43f aef5 	beq.w	80079da <_dtoa_r+0x43a>
 8007bf0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007bf2:	1e73      	subs	r3, r6, #1
 8007bf4:	9315      	str	r3, [sp, #84]	@ 0x54
 8007bf6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007bfa:	2b30      	cmp	r3, #48	@ 0x30
 8007bfc:	d0f8      	beq.n	8007bf0 <_dtoa_r+0x650>
 8007bfe:	9f04      	ldr	r7, [sp, #16]
 8007c00:	e73e      	b.n	8007a80 <_dtoa_r+0x4e0>
 8007c02:	4b9b      	ldr	r3, [pc, #620]	@ (8007e70 <_dtoa_r+0x8d0>)
 8007c04:	f7f8 fcf8 	bl	80005f8 <__aeabi_dmul>
 8007c08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c0c:	e7bc      	b.n	8007b88 <_dtoa_r+0x5e8>
 8007c0e:	d10c      	bne.n	8007c2a <_dtoa_r+0x68a>
 8007c10:	4b98      	ldr	r3, [pc, #608]	@ (8007e74 <_dtoa_r+0x8d4>)
 8007c12:	2200      	movs	r2, #0
 8007c14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c18:	f7f8 fcee 	bl	80005f8 <__aeabi_dmul>
 8007c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c20:	f7f8 ff70 	bl	8000b04 <__aeabi_dcmpge>
 8007c24:	2800      	cmp	r0, #0
 8007c26:	f000 8157 	beq.w	8007ed8 <_dtoa_r+0x938>
 8007c2a:	2400      	movs	r4, #0
 8007c2c:	4625      	mov	r5, r4
 8007c2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007c30:	43db      	mvns	r3, r3
 8007c32:	9304      	str	r3, [sp, #16]
 8007c34:	4656      	mov	r6, sl
 8007c36:	2700      	movs	r7, #0
 8007c38:	4621      	mov	r1, r4
 8007c3a:	4658      	mov	r0, fp
 8007c3c:	f000 ff00 	bl	8008a40 <_Bfree>
 8007c40:	2d00      	cmp	r5, #0
 8007c42:	d0dc      	beq.n	8007bfe <_dtoa_r+0x65e>
 8007c44:	b12f      	cbz	r7, 8007c52 <_dtoa_r+0x6b2>
 8007c46:	42af      	cmp	r7, r5
 8007c48:	d003      	beq.n	8007c52 <_dtoa_r+0x6b2>
 8007c4a:	4639      	mov	r1, r7
 8007c4c:	4658      	mov	r0, fp
 8007c4e:	f000 fef7 	bl	8008a40 <_Bfree>
 8007c52:	4629      	mov	r1, r5
 8007c54:	4658      	mov	r0, fp
 8007c56:	f000 fef3 	bl	8008a40 <_Bfree>
 8007c5a:	e7d0      	b.n	8007bfe <_dtoa_r+0x65e>
 8007c5c:	9704      	str	r7, [sp, #16]
 8007c5e:	4633      	mov	r3, r6
 8007c60:	461e      	mov	r6, r3
 8007c62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c66:	2a39      	cmp	r2, #57	@ 0x39
 8007c68:	d107      	bne.n	8007c7a <_dtoa_r+0x6da>
 8007c6a:	459a      	cmp	sl, r3
 8007c6c:	d1f8      	bne.n	8007c60 <_dtoa_r+0x6c0>
 8007c6e:	9a04      	ldr	r2, [sp, #16]
 8007c70:	3201      	adds	r2, #1
 8007c72:	9204      	str	r2, [sp, #16]
 8007c74:	2230      	movs	r2, #48	@ 0x30
 8007c76:	f88a 2000 	strb.w	r2, [sl]
 8007c7a:	781a      	ldrb	r2, [r3, #0]
 8007c7c:	3201      	adds	r2, #1
 8007c7e:	701a      	strb	r2, [r3, #0]
 8007c80:	e7bd      	b.n	8007bfe <_dtoa_r+0x65e>
 8007c82:	4b7b      	ldr	r3, [pc, #492]	@ (8007e70 <_dtoa_r+0x8d0>)
 8007c84:	2200      	movs	r2, #0
 8007c86:	f7f8 fcb7 	bl	80005f8 <__aeabi_dmul>
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	4604      	mov	r4, r0
 8007c90:	460d      	mov	r5, r1
 8007c92:	f7f8 ff19 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c96:	2800      	cmp	r0, #0
 8007c98:	f43f aebb 	beq.w	8007a12 <_dtoa_r+0x472>
 8007c9c:	e6f0      	b.n	8007a80 <_dtoa_r+0x4e0>
 8007c9e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007ca0:	2a00      	cmp	r2, #0
 8007ca2:	f000 80db 	beq.w	8007e5c <_dtoa_r+0x8bc>
 8007ca6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ca8:	2a01      	cmp	r2, #1
 8007caa:	f300 80bf 	bgt.w	8007e2c <_dtoa_r+0x88c>
 8007cae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007cb0:	2a00      	cmp	r2, #0
 8007cb2:	f000 80b7 	beq.w	8007e24 <_dtoa_r+0x884>
 8007cb6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007cba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007cbc:	4646      	mov	r6, r8
 8007cbe:	9a08      	ldr	r2, [sp, #32]
 8007cc0:	2101      	movs	r1, #1
 8007cc2:	441a      	add	r2, r3
 8007cc4:	4658      	mov	r0, fp
 8007cc6:	4498      	add	r8, r3
 8007cc8:	9208      	str	r2, [sp, #32]
 8007cca:	f000 ffb7 	bl	8008c3c <__i2b>
 8007cce:	4605      	mov	r5, r0
 8007cd0:	b15e      	cbz	r6, 8007cea <_dtoa_r+0x74a>
 8007cd2:	9b08      	ldr	r3, [sp, #32]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	dd08      	ble.n	8007cea <_dtoa_r+0x74a>
 8007cd8:	42b3      	cmp	r3, r6
 8007cda:	9a08      	ldr	r2, [sp, #32]
 8007cdc:	bfa8      	it	ge
 8007cde:	4633      	movge	r3, r6
 8007ce0:	eba8 0803 	sub.w	r8, r8, r3
 8007ce4:	1af6      	subs	r6, r6, r3
 8007ce6:	1ad3      	subs	r3, r2, r3
 8007ce8:	9308      	str	r3, [sp, #32]
 8007cea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007cec:	b1f3      	cbz	r3, 8007d2c <_dtoa_r+0x78c>
 8007cee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	f000 80b7 	beq.w	8007e64 <_dtoa_r+0x8c4>
 8007cf6:	b18c      	cbz	r4, 8007d1c <_dtoa_r+0x77c>
 8007cf8:	4629      	mov	r1, r5
 8007cfa:	4622      	mov	r2, r4
 8007cfc:	4658      	mov	r0, fp
 8007cfe:	f001 f85d 	bl	8008dbc <__pow5mult>
 8007d02:	464a      	mov	r2, r9
 8007d04:	4601      	mov	r1, r0
 8007d06:	4605      	mov	r5, r0
 8007d08:	4658      	mov	r0, fp
 8007d0a:	f000 ffad 	bl	8008c68 <__multiply>
 8007d0e:	4649      	mov	r1, r9
 8007d10:	9004      	str	r0, [sp, #16]
 8007d12:	4658      	mov	r0, fp
 8007d14:	f000 fe94 	bl	8008a40 <_Bfree>
 8007d18:	9b04      	ldr	r3, [sp, #16]
 8007d1a:	4699      	mov	r9, r3
 8007d1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d1e:	1b1a      	subs	r2, r3, r4
 8007d20:	d004      	beq.n	8007d2c <_dtoa_r+0x78c>
 8007d22:	4649      	mov	r1, r9
 8007d24:	4658      	mov	r0, fp
 8007d26:	f001 f849 	bl	8008dbc <__pow5mult>
 8007d2a:	4681      	mov	r9, r0
 8007d2c:	2101      	movs	r1, #1
 8007d2e:	4658      	mov	r0, fp
 8007d30:	f000 ff84 	bl	8008c3c <__i2b>
 8007d34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d36:	4604      	mov	r4, r0
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	f000 81cf 	beq.w	80080dc <_dtoa_r+0xb3c>
 8007d3e:	461a      	mov	r2, r3
 8007d40:	4601      	mov	r1, r0
 8007d42:	4658      	mov	r0, fp
 8007d44:	f001 f83a 	bl	8008dbc <__pow5mult>
 8007d48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d4a:	2b01      	cmp	r3, #1
 8007d4c:	4604      	mov	r4, r0
 8007d4e:	f300 8095 	bgt.w	8007e7c <_dtoa_r+0x8dc>
 8007d52:	9b02      	ldr	r3, [sp, #8]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	f040 8087 	bne.w	8007e68 <_dtoa_r+0x8c8>
 8007d5a:	9b03      	ldr	r3, [sp, #12]
 8007d5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	f040 8089 	bne.w	8007e78 <_dtoa_r+0x8d8>
 8007d66:	9b03      	ldr	r3, [sp, #12]
 8007d68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007d6c:	0d1b      	lsrs	r3, r3, #20
 8007d6e:	051b      	lsls	r3, r3, #20
 8007d70:	b12b      	cbz	r3, 8007d7e <_dtoa_r+0x7de>
 8007d72:	9b08      	ldr	r3, [sp, #32]
 8007d74:	3301      	adds	r3, #1
 8007d76:	9308      	str	r3, [sp, #32]
 8007d78:	f108 0801 	add.w	r8, r8, #1
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	f000 81b0 	beq.w	80080e8 <_dtoa_r+0xb48>
 8007d88:	6923      	ldr	r3, [r4, #16]
 8007d8a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007d8e:	6918      	ldr	r0, [r3, #16]
 8007d90:	f000 ff08 	bl	8008ba4 <__hi0bits>
 8007d94:	f1c0 0020 	rsb	r0, r0, #32
 8007d98:	9b08      	ldr	r3, [sp, #32]
 8007d9a:	4418      	add	r0, r3
 8007d9c:	f010 001f 	ands.w	r0, r0, #31
 8007da0:	d077      	beq.n	8007e92 <_dtoa_r+0x8f2>
 8007da2:	f1c0 0320 	rsb	r3, r0, #32
 8007da6:	2b04      	cmp	r3, #4
 8007da8:	dd6b      	ble.n	8007e82 <_dtoa_r+0x8e2>
 8007daa:	9b08      	ldr	r3, [sp, #32]
 8007dac:	f1c0 001c 	rsb	r0, r0, #28
 8007db0:	4403      	add	r3, r0
 8007db2:	4480      	add	r8, r0
 8007db4:	4406      	add	r6, r0
 8007db6:	9308      	str	r3, [sp, #32]
 8007db8:	f1b8 0f00 	cmp.w	r8, #0
 8007dbc:	dd05      	ble.n	8007dca <_dtoa_r+0x82a>
 8007dbe:	4649      	mov	r1, r9
 8007dc0:	4642      	mov	r2, r8
 8007dc2:	4658      	mov	r0, fp
 8007dc4:	f001 f854 	bl	8008e70 <__lshift>
 8007dc8:	4681      	mov	r9, r0
 8007dca:	9b08      	ldr	r3, [sp, #32]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	dd05      	ble.n	8007ddc <_dtoa_r+0x83c>
 8007dd0:	4621      	mov	r1, r4
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	4658      	mov	r0, fp
 8007dd6:	f001 f84b 	bl	8008e70 <__lshift>
 8007dda:	4604      	mov	r4, r0
 8007ddc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d059      	beq.n	8007e96 <_dtoa_r+0x8f6>
 8007de2:	4621      	mov	r1, r4
 8007de4:	4648      	mov	r0, r9
 8007de6:	f001 f8af 	bl	8008f48 <__mcmp>
 8007dea:	2800      	cmp	r0, #0
 8007dec:	da53      	bge.n	8007e96 <_dtoa_r+0x8f6>
 8007dee:	1e7b      	subs	r3, r7, #1
 8007df0:	9304      	str	r3, [sp, #16]
 8007df2:	4649      	mov	r1, r9
 8007df4:	2300      	movs	r3, #0
 8007df6:	220a      	movs	r2, #10
 8007df8:	4658      	mov	r0, fp
 8007dfa:	f000 fe43 	bl	8008a84 <__multadd>
 8007dfe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e00:	4681      	mov	r9, r0
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	f000 8172 	beq.w	80080ec <_dtoa_r+0xb4c>
 8007e08:	2300      	movs	r3, #0
 8007e0a:	4629      	mov	r1, r5
 8007e0c:	220a      	movs	r2, #10
 8007e0e:	4658      	mov	r0, fp
 8007e10:	f000 fe38 	bl	8008a84 <__multadd>
 8007e14:	9b00      	ldr	r3, [sp, #0]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	4605      	mov	r5, r0
 8007e1a:	dc67      	bgt.n	8007eec <_dtoa_r+0x94c>
 8007e1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e1e:	2b02      	cmp	r3, #2
 8007e20:	dc41      	bgt.n	8007ea6 <_dtoa_r+0x906>
 8007e22:	e063      	b.n	8007eec <_dtoa_r+0x94c>
 8007e24:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007e26:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007e2a:	e746      	b.n	8007cba <_dtoa_r+0x71a>
 8007e2c:	9b07      	ldr	r3, [sp, #28]
 8007e2e:	1e5c      	subs	r4, r3, #1
 8007e30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e32:	42a3      	cmp	r3, r4
 8007e34:	bfbf      	itttt	lt
 8007e36:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007e38:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007e3a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007e3c:	1ae3      	sublt	r3, r4, r3
 8007e3e:	bfb4      	ite	lt
 8007e40:	18d2      	addlt	r2, r2, r3
 8007e42:	1b1c      	subge	r4, r3, r4
 8007e44:	9b07      	ldr	r3, [sp, #28]
 8007e46:	bfbc      	itt	lt
 8007e48:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007e4a:	2400      	movlt	r4, #0
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	bfb5      	itete	lt
 8007e50:	eba8 0603 	sublt.w	r6, r8, r3
 8007e54:	9b07      	ldrge	r3, [sp, #28]
 8007e56:	2300      	movlt	r3, #0
 8007e58:	4646      	movge	r6, r8
 8007e5a:	e730      	b.n	8007cbe <_dtoa_r+0x71e>
 8007e5c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007e5e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007e60:	4646      	mov	r6, r8
 8007e62:	e735      	b.n	8007cd0 <_dtoa_r+0x730>
 8007e64:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007e66:	e75c      	b.n	8007d22 <_dtoa_r+0x782>
 8007e68:	2300      	movs	r3, #0
 8007e6a:	e788      	b.n	8007d7e <_dtoa_r+0x7de>
 8007e6c:	3fe00000 	.word	0x3fe00000
 8007e70:	40240000 	.word	0x40240000
 8007e74:	40140000 	.word	0x40140000
 8007e78:	9b02      	ldr	r3, [sp, #8]
 8007e7a:	e780      	b.n	8007d7e <_dtoa_r+0x7de>
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e80:	e782      	b.n	8007d88 <_dtoa_r+0x7e8>
 8007e82:	d099      	beq.n	8007db8 <_dtoa_r+0x818>
 8007e84:	9a08      	ldr	r2, [sp, #32]
 8007e86:	331c      	adds	r3, #28
 8007e88:	441a      	add	r2, r3
 8007e8a:	4498      	add	r8, r3
 8007e8c:	441e      	add	r6, r3
 8007e8e:	9208      	str	r2, [sp, #32]
 8007e90:	e792      	b.n	8007db8 <_dtoa_r+0x818>
 8007e92:	4603      	mov	r3, r0
 8007e94:	e7f6      	b.n	8007e84 <_dtoa_r+0x8e4>
 8007e96:	9b07      	ldr	r3, [sp, #28]
 8007e98:	9704      	str	r7, [sp, #16]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	dc20      	bgt.n	8007ee0 <_dtoa_r+0x940>
 8007e9e:	9300      	str	r3, [sp, #0]
 8007ea0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ea2:	2b02      	cmp	r3, #2
 8007ea4:	dd1e      	ble.n	8007ee4 <_dtoa_r+0x944>
 8007ea6:	9b00      	ldr	r3, [sp, #0]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	f47f aec0 	bne.w	8007c2e <_dtoa_r+0x68e>
 8007eae:	4621      	mov	r1, r4
 8007eb0:	2205      	movs	r2, #5
 8007eb2:	4658      	mov	r0, fp
 8007eb4:	f000 fde6 	bl	8008a84 <__multadd>
 8007eb8:	4601      	mov	r1, r0
 8007eba:	4604      	mov	r4, r0
 8007ebc:	4648      	mov	r0, r9
 8007ebe:	f001 f843 	bl	8008f48 <__mcmp>
 8007ec2:	2800      	cmp	r0, #0
 8007ec4:	f77f aeb3 	ble.w	8007c2e <_dtoa_r+0x68e>
 8007ec8:	4656      	mov	r6, sl
 8007eca:	2331      	movs	r3, #49	@ 0x31
 8007ecc:	f806 3b01 	strb.w	r3, [r6], #1
 8007ed0:	9b04      	ldr	r3, [sp, #16]
 8007ed2:	3301      	adds	r3, #1
 8007ed4:	9304      	str	r3, [sp, #16]
 8007ed6:	e6ae      	b.n	8007c36 <_dtoa_r+0x696>
 8007ed8:	9c07      	ldr	r4, [sp, #28]
 8007eda:	9704      	str	r7, [sp, #16]
 8007edc:	4625      	mov	r5, r4
 8007ede:	e7f3      	b.n	8007ec8 <_dtoa_r+0x928>
 8007ee0:	9b07      	ldr	r3, [sp, #28]
 8007ee2:	9300      	str	r3, [sp, #0]
 8007ee4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	f000 8104 	beq.w	80080f4 <_dtoa_r+0xb54>
 8007eec:	2e00      	cmp	r6, #0
 8007eee:	dd05      	ble.n	8007efc <_dtoa_r+0x95c>
 8007ef0:	4629      	mov	r1, r5
 8007ef2:	4632      	mov	r2, r6
 8007ef4:	4658      	mov	r0, fp
 8007ef6:	f000 ffbb 	bl	8008e70 <__lshift>
 8007efa:	4605      	mov	r5, r0
 8007efc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d05a      	beq.n	8007fb8 <_dtoa_r+0xa18>
 8007f02:	6869      	ldr	r1, [r5, #4]
 8007f04:	4658      	mov	r0, fp
 8007f06:	f000 fd5b 	bl	80089c0 <_Balloc>
 8007f0a:	4606      	mov	r6, r0
 8007f0c:	b928      	cbnz	r0, 8007f1a <_dtoa_r+0x97a>
 8007f0e:	4b84      	ldr	r3, [pc, #528]	@ (8008120 <_dtoa_r+0xb80>)
 8007f10:	4602      	mov	r2, r0
 8007f12:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007f16:	f7ff bb5a 	b.w	80075ce <_dtoa_r+0x2e>
 8007f1a:	692a      	ldr	r2, [r5, #16]
 8007f1c:	3202      	adds	r2, #2
 8007f1e:	0092      	lsls	r2, r2, #2
 8007f20:	f105 010c 	add.w	r1, r5, #12
 8007f24:	300c      	adds	r0, #12
 8007f26:	f7ff fa7a 	bl	800741e <memcpy>
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	4631      	mov	r1, r6
 8007f2e:	4658      	mov	r0, fp
 8007f30:	f000 ff9e 	bl	8008e70 <__lshift>
 8007f34:	f10a 0301 	add.w	r3, sl, #1
 8007f38:	9307      	str	r3, [sp, #28]
 8007f3a:	9b00      	ldr	r3, [sp, #0]
 8007f3c:	4453      	add	r3, sl
 8007f3e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007f40:	9b02      	ldr	r3, [sp, #8]
 8007f42:	f003 0301 	and.w	r3, r3, #1
 8007f46:	462f      	mov	r7, r5
 8007f48:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f4a:	4605      	mov	r5, r0
 8007f4c:	9b07      	ldr	r3, [sp, #28]
 8007f4e:	4621      	mov	r1, r4
 8007f50:	3b01      	subs	r3, #1
 8007f52:	4648      	mov	r0, r9
 8007f54:	9300      	str	r3, [sp, #0]
 8007f56:	f7ff fa99 	bl	800748c <quorem>
 8007f5a:	4639      	mov	r1, r7
 8007f5c:	9002      	str	r0, [sp, #8]
 8007f5e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007f62:	4648      	mov	r0, r9
 8007f64:	f000 fff0 	bl	8008f48 <__mcmp>
 8007f68:	462a      	mov	r2, r5
 8007f6a:	9008      	str	r0, [sp, #32]
 8007f6c:	4621      	mov	r1, r4
 8007f6e:	4658      	mov	r0, fp
 8007f70:	f001 f806 	bl	8008f80 <__mdiff>
 8007f74:	68c2      	ldr	r2, [r0, #12]
 8007f76:	4606      	mov	r6, r0
 8007f78:	bb02      	cbnz	r2, 8007fbc <_dtoa_r+0xa1c>
 8007f7a:	4601      	mov	r1, r0
 8007f7c:	4648      	mov	r0, r9
 8007f7e:	f000 ffe3 	bl	8008f48 <__mcmp>
 8007f82:	4602      	mov	r2, r0
 8007f84:	4631      	mov	r1, r6
 8007f86:	4658      	mov	r0, fp
 8007f88:	920e      	str	r2, [sp, #56]	@ 0x38
 8007f8a:	f000 fd59 	bl	8008a40 <_Bfree>
 8007f8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f90:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007f92:	9e07      	ldr	r6, [sp, #28]
 8007f94:	ea43 0102 	orr.w	r1, r3, r2
 8007f98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f9a:	4319      	orrs	r1, r3
 8007f9c:	d110      	bne.n	8007fc0 <_dtoa_r+0xa20>
 8007f9e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007fa2:	d029      	beq.n	8007ff8 <_dtoa_r+0xa58>
 8007fa4:	9b08      	ldr	r3, [sp, #32]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	dd02      	ble.n	8007fb0 <_dtoa_r+0xa10>
 8007faa:	9b02      	ldr	r3, [sp, #8]
 8007fac:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007fb0:	9b00      	ldr	r3, [sp, #0]
 8007fb2:	f883 8000 	strb.w	r8, [r3]
 8007fb6:	e63f      	b.n	8007c38 <_dtoa_r+0x698>
 8007fb8:	4628      	mov	r0, r5
 8007fba:	e7bb      	b.n	8007f34 <_dtoa_r+0x994>
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	e7e1      	b.n	8007f84 <_dtoa_r+0x9e4>
 8007fc0:	9b08      	ldr	r3, [sp, #32]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	db04      	blt.n	8007fd0 <_dtoa_r+0xa30>
 8007fc6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007fc8:	430b      	orrs	r3, r1
 8007fca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007fcc:	430b      	orrs	r3, r1
 8007fce:	d120      	bne.n	8008012 <_dtoa_r+0xa72>
 8007fd0:	2a00      	cmp	r2, #0
 8007fd2:	dded      	ble.n	8007fb0 <_dtoa_r+0xa10>
 8007fd4:	4649      	mov	r1, r9
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	4658      	mov	r0, fp
 8007fda:	f000 ff49 	bl	8008e70 <__lshift>
 8007fde:	4621      	mov	r1, r4
 8007fe0:	4681      	mov	r9, r0
 8007fe2:	f000 ffb1 	bl	8008f48 <__mcmp>
 8007fe6:	2800      	cmp	r0, #0
 8007fe8:	dc03      	bgt.n	8007ff2 <_dtoa_r+0xa52>
 8007fea:	d1e1      	bne.n	8007fb0 <_dtoa_r+0xa10>
 8007fec:	f018 0f01 	tst.w	r8, #1
 8007ff0:	d0de      	beq.n	8007fb0 <_dtoa_r+0xa10>
 8007ff2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007ff6:	d1d8      	bne.n	8007faa <_dtoa_r+0xa0a>
 8007ff8:	9a00      	ldr	r2, [sp, #0]
 8007ffa:	2339      	movs	r3, #57	@ 0x39
 8007ffc:	7013      	strb	r3, [r2, #0]
 8007ffe:	4633      	mov	r3, r6
 8008000:	461e      	mov	r6, r3
 8008002:	3b01      	subs	r3, #1
 8008004:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008008:	2a39      	cmp	r2, #57	@ 0x39
 800800a:	d052      	beq.n	80080b2 <_dtoa_r+0xb12>
 800800c:	3201      	adds	r2, #1
 800800e:	701a      	strb	r2, [r3, #0]
 8008010:	e612      	b.n	8007c38 <_dtoa_r+0x698>
 8008012:	2a00      	cmp	r2, #0
 8008014:	dd07      	ble.n	8008026 <_dtoa_r+0xa86>
 8008016:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800801a:	d0ed      	beq.n	8007ff8 <_dtoa_r+0xa58>
 800801c:	9a00      	ldr	r2, [sp, #0]
 800801e:	f108 0301 	add.w	r3, r8, #1
 8008022:	7013      	strb	r3, [r2, #0]
 8008024:	e608      	b.n	8007c38 <_dtoa_r+0x698>
 8008026:	9b07      	ldr	r3, [sp, #28]
 8008028:	9a07      	ldr	r2, [sp, #28]
 800802a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800802e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008030:	4293      	cmp	r3, r2
 8008032:	d028      	beq.n	8008086 <_dtoa_r+0xae6>
 8008034:	4649      	mov	r1, r9
 8008036:	2300      	movs	r3, #0
 8008038:	220a      	movs	r2, #10
 800803a:	4658      	mov	r0, fp
 800803c:	f000 fd22 	bl	8008a84 <__multadd>
 8008040:	42af      	cmp	r7, r5
 8008042:	4681      	mov	r9, r0
 8008044:	f04f 0300 	mov.w	r3, #0
 8008048:	f04f 020a 	mov.w	r2, #10
 800804c:	4639      	mov	r1, r7
 800804e:	4658      	mov	r0, fp
 8008050:	d107      	bne.n	8008062 <_dtoa_r+0xac2>
 8008052:	f000 fd17 	bl	8008a84 <__multadd>
 8008056:	4607      	mov	r7, r0
 8008058:	4605      	mov	r5, r0
 800805a:	9b07      	ldr	r3, [sp, #28]
 800805c:	3301      	adds	r3, #1
 800805e:	9307      	str	r3, [sp, #28]
 8008060:	e774      	b.n	8007f4c <_dtoa_r+0x9ac>
 8008062:	f000 fd0f 	bl	8008a84 <__multadd>
 8008066:	4629      	mov	r1, r5
 8008068:	4607      	mov	r7, r0
 800806a:	2300      	movs	r3, #0
 800806c:	220a      	movs	r2, #10
 800806e:	4658      	mov	r0, fp
 8008070:	f000 fd08 	bl	8008a84 <__multadd>
 8008074:	4605      	mov	r5, r0
 8008076:	e7f0      	b.n	800805a <_dtoa_r+0xaba>
 8008078:	9b00      	ldr	r3, [sp, #0]
 800807a:	2b00      	cmp	r3, #0
 800807c:	bfcc      	ite	gt
 800807e:	461e      	movgt	r6, r3
 8008080:	2601      	movle	r6, #1
 8008082:	4456      	add	r6, sl
 8008084:	2700      	movs	r7, #0
 8008086:	4649      	mov	r1, r9
 8008088:	2201      	movs	r2, #1
 800808a:	4658      	mov	r0, fp
 800808c:	f000 fef0 	bl	8008e70 <__lshift>
 8008090:	4621      	mov	r1, r4
 8008092:	4681      	mov	r9, r0
 8008094:	f000 ff58 	bl	8008f48 <__mcmp>
 8008098:	2800      	cmp	r0, #0
 800809a:	dcb0      	bgt.n	8007ffe <_dtoa_r+0xa5e>
 800809c:	d102      	bne.n	80080a4 <_dtoa_r+0xb04>
 800809e:	f018 0f01 	tst.w	r8, #1
 80080a2:	d1ac      	bne.n	8007ffe <_dtoa_r+0xa5e>
 80080a4:	4633      	mov	r3, r6
 80080a6:	461e      	mov	r6, r3
 80080a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80080ac:	2a30      	cmp	r2, #48	@ 0x30
 80080ae:	d0fa      	beq.n	80080a6 <_dtoa_r+0xb06>
 80080b0:	e5c2      	b.n	8007c38 <_dtoa_r+0x698>
 80080b2:	459a      	cmp	sl, r3
 80080b4:	d1a4      	bne.n	8008000 <_dtoa_r+0xa60>
 80080b6:	9b04      	ldr	r3, [sp, #16]
 80080b8:	3301      	adds	r3, #1
 80080ba:	9304      	str	r3, [sp, #16]
 80080bc:	2331      	movs	r3, #49	@ 0x31
 80080be:	f88a 3000 	strb.w	r3, [sl]
 80080c2:	e5b9      	b.n	8007c38 <_dtoa_r+0x698>
 80080c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80080c6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008124 <_dtoa_r+0xb84>
 80080ca:	b11b      	cbz	r3, 80080d4 <_dtoa_r+0xb34>
 80080cc:	f10a 0308 	add.w	r3, sl, #8
 80080d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80080d2:	6013      	str	r3, [r2, #0]
 80080d4:	4650      	mov	r0, sl
 80080d6:	b019      	add	sp, #100	@ 0x64
 80080d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080de:	2b01      	cmp	r3, #1
 80080e0:	f77f ae37 	ble.w	8007d52 <_dtoa_r+0x7b2>
 80080e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80080e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80080e8:	2001      	movs	r0, #1
 80080ea:	e655      	b.n	8007d98 <_dtoa_r+0x7f8>
 80080ec:	9b00      	ldr	r3, [sp, #0]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	f77f aed6 	ble.w	8007ea0 <_dtoa_r+0x900>
 80080f4:	4656      	mov	r6, sl
 80080f6:	4621      	mov	r1, r4
 80080f8:	4648      	mov	r0, r9
 80080fa:	f7ff f9c7 	bl	800748c <quorem>
 80080fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008102:	f806 8b01 	strb.w	r8, [r6], #1
 8008106:	9b00      	ldr	r3, [sp, #0]
 8008108:	eba6 020a 	sub.w	r2, r6, sl
 800810c:	4293      	cmp	r3, r2
 800810e:	ddb3      	ble.n	8008078 <_dtoa_r+0xad8>
 8008110:	4649      	mov	r1, r9
 8008112:	2300      	movs	r3, #0
 8008114:	220a      	movs	r2, #10
 8008116:	4658      	mov	r0, fp
 8008118:	f000 fcb4 	bl	8008a84 <__multadd>
 800811c:	4681      	mov	r9, r0
 800811e:	e7ea      	b.n	80080f6 <_dtoa_r+0xb56>
 8008120:	0800bf8e 	.word	0x0800bf8e
 8008124:	0800bf29 	.word	0x0800bf29

08008128 <_free_r>:
 8008128:	b538      	push	{r3, r4, r5, lr}
 800812a:	4605      	mov	r5, r0
 800812c:	2900      	cmp	r1, #0
 800812e:	d041      	beq.n	80081b4 <_free_r+0x8c>
 8008130:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008134:	1f0c      	subs	r4, r1, #4
 8008136:	2b00      	cmp	r3, #0
 8008138:	bfb8      	it	lt
 800813a:	18e4      	addlt	r4, r4, r3
 800813c:	f000 fc34 	bl	80089a8 <__malloc_lock>
 8008140:	4a1d      	ldr	r2, [pc, #116]	@ (80081b8 <_free_r+0x90>)
 8008142:	6813      	ldr	r3, [r2, #0]
 8008144:	b933      	cbnz	r3, 8008154 <_free_r+0x2c>
 8008146:	6063      	str	r3, [r4, #4]
 8008148:	6014      	str	r4, [r2, #0]
 800814a:	4628      	mov	r0, r5
 800814c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008150:	f000 bc30 	b.w	80089b4 <__malloc_unlock>
 8008154:	42a3      	cmp	r3, r4
 8008156:	d908      	bls.n	800816a <_free_r+0x42>
 8008158:	6820      	ldr	r0, [r4, #0]
 800815a:	1821      	adds	r1, r4, r0
 800815c:	428b      	cmp	r3, r1
 800815e:	bf01      	itttt	eq
 8008160:	6819      	ldreq	r1, [r3, #0]
 8008162:	685b      	ldreq	r3, [r3, #4]
 8008164:	1809      	addeq	r1, r1, r0
 8008166:	6021      	streq	r1, [r4, #0]
 8008168:	e7ed      	b.n	8008146 <_free_r+0x1e>
 800816a:	461a      	mov	r2, r3
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	b10b      	cbz	r3, 8008174 <_free_r+0x4c>
 8008170:	42a3      	cmp	r3, r4
 8008172:	d9fa      	bls.n	800816a <_free_r+0x42>
 8008174:	6811      	ldr	r1, [r2, #0]
 8008176:	1850      	adds	r0, r2, r1
 8008178:	42a0      	cmp	r0, r4
 800817a:	d10b      	bne.n	8008194 <_free_r+0x6c>
 800817c:	6820      	ldr	r0, [r4, #0]
 800817e:	4401      	add	r1, r0
 8008180:	1850      	adds	r0, r2, r1
 8008182:	4283      	cmp	r3, r0
 8008184:	6011      	str	r1, [r2, #0]
 8008186:	d1e0      	bne.n	800814a <_free_r+0x22>
 8008188:	6818      	ldr	r0, [r3, #0]
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	6053      	str	r3, [r2, #4]
 800818e:	4408      	add	r0, r1
 8008190:	6010      	str	r0, [r2, #0]
 8008192:	e7da      	b.n	800814a <_free_r+0x22>
 8008194:	d902      	bls.n	800819c <_free_r+0x74>
 8008196:	230c      	movs	r3, #12
 8008198:	602b      	str	r3, [r5, #0]
 800819a:	e7d6      	b.n	800814a <_free_r+0x22>
 800819c:	6820      	ldr	r0, [r4, #0]
 800819e:	1821      	adds	r1, r4, r0
 80081a0:	428b      	cmp	r3, r1
 80081a2:	bf04      	itt	eq
 80081a4:	6819      	ldreq	r1, [r3, #0]
 80081a6:	685b      	ldreq	r3, [r3, #4]
 80081a8:	6063      	str	r3, [r4, #4]
 80081aa:	bf04      	itt	eq
 80081ac:	1809      	addeq	r1, r1, r0
 80081ae:	6021      	streq	r1, [r4, #0]
 80081b0:	6054      	str	r4, [r2, #4]
 80081b2:	e7ca      	b.n	800814a <_free_r+0x22>
 80081b4:	bd38      	pop	{r3, r4, r5, pc}
 80081b6:	bf00      	nop
 80081b8:	20000750 	.word	0x20000750

080081bc <rshift>:
 80081bc:	6903      	ldr	r3, [r0, #16]
 80081be:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80081c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80081c6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80081ca:	f100 0414 	add.w	r4, r0, #20
 80081ce:	dd45      	ble.n	800825c <rshift+0xa0>
 80081d0:	f011 011f 	ands.w	r1, r1, #31
 80081d4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80081d8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80081dc:	d10c      	bne.n	80081f8 <rshift+0x3c>
 80081de:	f100 0710 	add.w	r7, r0, #16
 80081e2:	4629      	mov	r1, r5
 80081e4:	42b1      	cmp	r1, r6
 80081e6:	d334      	bcc.n	8008252 <rshift+0x96>
 80081e8:	1a9b      	subs	r3, r3, r2
 80081ea:	009b      	lsls	r3, r3, #2
 80081ec:	1eea      	subs	r2, r5, #3
 80081ee:	4296      	cmp	r6, r2
 80081f0:	bf38      	it	cc
 80081f2:	2300      	movcc	r3, #0
 80081f4:	4423      	add	r3, r4
 80081f6:	e015      	b.n	8008224 <rshift+0x68>
 80081f8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80081fc:	f1c1 0820 	rsb	r8, r1, #32
 8008200:	40cf      	lsrs	r7, r1
 8008202:	f105 0e04 	add.w	lr, r5, #4
 8008206:	46a1      	mov	r9, r4
 8008208:	4576      	cmp	r6, lr
 800820a:	46f4      	mov	ip, lr
 800820c:	d815      	bhi.n	800823a <rshift+0x7e>
 800820e:	1a9a      	subs	r2, r3, r2
 8008210:	0092      	lsls	r2, r2, #2
 8008212:	3a04      	subs	r2, #4
 8008214:	3501      	adds	r5, #1
 8008216:	42ae      	cmp	r6, r5
 8008218:	bf38      	it	cc
 800821a:	2200      	movcc	r2, #0
 800821c:	18a3      	adds	r3, r4, r2
 800821e:	50a7      	str	r7, [r4, r2]
 8008220:	b107      	cbz	r7, 8008224 <rshift+0x68>
 8008222:	3304      	adds	r3, #4
 8008224:	1b1a      	subs	r2, r3, r4
 8008226:	42a3      	cmp	r3, r4
 8008228:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800822c:	bf08      	it	eq
 800822e:	2300      	moveq	r3, #0
 8008230:	6102      	str	r2, [r0, #16]
 8008232:	bf08      	it	eq
 8008234:	6143      	streq	r3, [r0, #20]
 8008236:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800823a:	f8dc c000 	ldr.w	ip, [ip]
 800823e:	fa0c fc08 	lsl.w	ip, ip, r8
 8008242:	ea4c 0707 	orr.w	r7, ip, r7
 8008246:	f849 7b04 	str.w	r7, [r9], #4
 800824a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800824e:	40cf      	lsrs	r7, r1
 8008250:	e7da      	b.n	8008208 <rshift+0x4c>
 8008252:	f851 cb04 	ldr.w	ip, [r1], #4
 8008256:	f847 cf04 	str.w	ip, [r7, #4]!
 800825a:	e7c3      	b.n	80081e4 <rshift+0x28>
 800825c:	4623      	mov	r3, r4
 800825e:	e7e1      	b.n	8008224 <rshift+0x68>

08008260 <__hexdig_fun>:
 8008260:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008264:	2b09      	cmp	r3, #9
 8008266:	d802      	bhi.n	800826e <__hexdig_fun+0xe>
 8008268:	3820      	subs	r0, #32
 800826a:	b2c0      	uxtb	r0, r0
 800826c:	4770      	bx	lr
 800826e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008272:	2b05      	cmp	r3, #5
 8008274:	d801      	bhi.n	800827a <__hexdig_fun+0x1a>
 8008276:	3847      	subs	r0, #71	@ 0x47
 8008278:	e7f7      	b.n	800826a <__hexdig_fun+0xa>
 800827a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800827e:	2b05      	cmp	r3, #5
 8008280:	d801      	bhi.n	8008286 <__hexdig_fun+0x26>
 8008282:	3827      	subs	r0, #39	@ 0x27
 8008284:	e7f1      	b.n	800826a <__hexdig_fun+0xa>
 8008286:	2000      	movs	r0, #0
 8008288:	4770      	bx	lr
	...

0800828c <__gethex>:
 800828c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008290:	b085      	sub	sp, #20
 8008292:	468a      	mov	sl, r1
 8008294:	9302      	str	r3, [sp, #8]
 8008296:	680b      	ldr	r3, [r1, #0]
 8008298:	9001      	str	r0, [sp, #4]
 800829a:	4690      	mov	r8, r2
 800829c:	1c9c      	adds	r4, r3, #2
 800829e:	46a1      	mov	r9, r4
 80082a0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80082a4:	2830      	cmp	r0, #48	@ 0x30
 80082a6:	d0fa      	beq.n	800829e <__gethex+0x12>
 80082a8:	eba9 0303 	sub.w	r3, r9, r3
 80082ac:	f1a3 0b02 	sub.w	fp, r3, #2
 80082b0:	f7ff ffd6 	bl	8008260 <__hexdig_fun>
 80082b4:	4605      	mov	r5, r0
 80082b6:	2800      	cmp	r0, #0
 80082b8:	d168      	bne.n	800838c <__gethex+0x100>
 80082ba:	49a0      	ldr	r1, [pc, #640]	@ (800853c <__gethex+0x2b0>)
 80082bc:	2201      	movs	r2, #1
 80082be:	4648      	mov	r0, r9
 80082c0:	f7fe ffc7 	bl	8007252 <strncmp>
 80082c4:	4607      	mov	r7, r0
 80082c6:	2800      	cmp	r0, #0
 80082c8:	d167      	bne.n	800839a <__gethex+0x10e>
 80082ca:	f899 0001 	ldrb.w	r0, [r9, #1]
 80082ce:	4626      	mov	r6, r4
 80082d0:	f7ff ffc6 	bl	8008260 <__hexdig_fun>
 80082d4:	2800      	cmp	r0, #0
 80082d6:	d062      	beq.n	800839e <__gethex+0x112>
 80082d8:	4623      	mov	r3, r4
 80082da:	7818      	ldrb	r0, [r3, #0]
 80082dc:	2830      	cmp	r0, #48	@ 0x30
 80082de:	4699      	mov	r9, r3
 80082e0:	f103 0301 	add.w	r3, r3, #1
 80082e4:	d0f9      	beq.n	80082da <__gethex+0x4e>
 80082e6:	f7ff ffbb 	bl	8008260 <__hexdig_fun>
 80082ea:	fab0 f580 	clz	r5, r0
 80082ee:	096d      	lsrs	r5, r5, #5
 80082f0:	f04f 0b01 	mov.w	fp, #1
 80082f4:	464a      	mov	r2, r9
 80082f6:	4616      	mov	r6, r2
 80082f8:	3201      	adds	r2, #1
 80082fa:	7830      	ldrb	r0, [r6, #0]
 80082fc:	f7ff ffb0 	bl	8008260 <__hexdig_fun>
 8008300:	2800      	cmp	r0, #0
 8008302:	d1f8      	bne.n	80082f6 <__gethex+0x6a>
 8008304:	498d      	ldr	r1, [pc, #564]	@ (800853c <__gethex+0x2b0>)
 8008306:	2201      	movs	r2, #1
 8008308:	4630      	mov	r0, r6
 800830a:	f7fe ffa2 	bl	8007252 <strncmp>
 800830e:	2800      	cmp	r0, #0
 8008310:	d13f      	bne.n	8008392 <__gethex+0x106>
 8008312:	b944      	cbnz	r4, 8008326 <__gethex+0x9a>
 8008314:	1c74      	adds	r4, r6, #1
 8008316:	4622      	mov	r2, r4
 8008318:	4616      	mov	r6, r2
 800831a:	3201      	adds	r2, #1
 800831c:	7830      	ldrb	r0, [r6, #0]
 800831e:	f7ff ff9f 	bl	8008260 <__hexdig_fun>
 8008322:	2800      	cmp	r0, #0
 8008324:	d1f8      	bne.n	8008318 <__gethex+0x8c>
 8008326:	1ba4      	subs	r4, r4, r6
 8008328:	00a7      	lsls	r7, r4, #2
 800832a:	7833      	ldrb	r3, [r6, #0]
 800832c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008330:	2b50      	cmp	r3, #80	@ 0x50
 8008332:	d13e      	bne.n	80083b2 <__gethex+0x126>
 8008334:	7873      	ldrb	r3, [r6, #1]
 8008336:	2b2b      	cmp	r3, #43	@ 0x2b
 8008338:	d033      	beq.n	80083a2 <__gethex+0x116>
 800833a:	2b2d      	cmp	r3, #45	@ 0x2d
 800833c:	d034      	beq.n	80083a8 <__gethex+0x11c>
 800833e:	1c71      	adds	r1, r6, #1
 8008340:	2400      	movs	r4, #0
 8008342:	7808      	ldrb	r0, [r1, #0]
 8008344:	f7ff ff8c 	bl	8008260 <__hexdig_fun>
 8008348:	1e43      	subs	r3, r0, #1
 800834a:	b2db      	uxtb	r3, r3
 800834c:	2b18      	cmp	r3, #24
 800834e:	d830      	bhi.n	80083b2 <__gethex+0x126>
 8008350:	f1a0 0210 	sub.w	r2, r0, #16
 8008354:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008358:	f7ff ff82 	bl	8008260 <__hexdig_fun>
 800835c:	f100 3cff 	add.w	ip, r0, #4294967295
 8008360:	fa5f fc8c 	uxtb.w	ip, ip
 8008364:	f1bc 0f18 	cmp.w	ip, #24
 8008368:	f04f 030a 	mov.w	r3, #10
 800836c:	d91e      	bls.n	80083ac <__gethex+0x120>
 800836e:	b104      	cbz	r4, 8008372 <__gethex+0xe6>
 8008370:	4252      	negs	r2, r2
 8008372:	4417      	add	r7, r2
 8008374:	f8ca 1000 	str.w	r1, [sl]
 8008378:	b1ed      	cbz	r5, 80083b6 <__gethex+0x12a>
 800837a:	f1bb 0f00 	cmp.w	fp, #0
 800837e:	bf0c      	ite	eq
 8008380:	2506      	moveq	r5, #6
 8008382:	2500      	movne	r5, #0
 8008384:	4628      	mov	r0, r5
 8008386:	b005      	add	sp, #20
 8008388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800838c:	2500      	movs	r5, #0
 800838e:	462c      	mov	r4, r5
 8008390:	e7b0      	b.n	80082f4 <__gethex+0x68>
 8008392:	2c00      	cmp	r4, #0
 8008394:	d1c7      	bne.n	8008326 <__gethex+0x9a>
 8008396:	4627      	mov	r7, r4
 8008398:	e7c7      	b.n	800832a <__gethex+0x9e>
 800839a:	464e      	mov	r6, r9
 800839c:	462f      	mov	r7, r5
 800839e:	2501      	movs	r5, #1
 80083a0:	e7c3      	b.n	800832a <__gethex+0x9e>
 80083a2:	2400      	movs	r4, #0
 80083a4:	1cb1      	adds	r1, r6, #2
 80083a6:	e7cc      	b.n	8008342 <__gethex+0xb6>
 80083a8:	2401      	movs	r4, #1
 80083aa:	e7fb      	b.n	80083a4 <__gethex+0x118>
 80083ac:	fb03 0002 	mla	r0, r3, r2, r0
 80083b0:	e7ce      	b.n	8008350 <__gethex+0xc4>
 80083b2:	4631      	mov	r1, r6
 80083b4:	e7de      	b.n	8008374 <__gethex+0xe8>
 80083b6:	eba6 0309 	sub.w	r3, r6, r9
 80083ba:	3b01      	subs	r3, #1
 80083bc:	4629      	mov	r1, r5
 80083be:	2b07      	cmp	r3, #7
 80083c0:	dc0a      	bgt.n	80083d8 <__gethex+0x14c>
 80083c2:	9801      	ldr	r0, [sp, #4]
 80083c4:	f000 fafc 	bl	80089c0 <_Balloc>
 80083c8:	4604      	mov	r4, r0
 80083ca:	b940      	cbnz	r0, 80083de <__gethex+0x152>
 80083cc:	4b5c      	ldr	r3, [pc, #368]	@ (8008540 <__gethex+0x2b4>)
 80083ce:	4602      	mov	r2, r0
 80083d0:	21e4      	movs	r1, #228	@ 0xe4
 80083d2:	485c      	ldr	r0, [pc, #368]	@ (8008544 <__gethex+0x2b8>)
 80083d4:	f7ff f83c 	bl	8007450 <__assert_func>
 80083d8:	3101      	adds	r1, #1
 80083da:	105b      	asrs	r3, r3, #1
 80083dc:	e7ef      	b.n	80083be <__gethex+0x132>
 80083de:	f100 0a14 	add.w	sl, r0, #20
 80083e2:	2300      	movs	r3, #0
 80083e4:	4655      	mov	r5, sl
 80083e6:	469b      	mov	fp, r3
 80083e8:	45b1      	cmp	r9, r6
 80083ea:	d337      	bcc.n	800845c <__gethex+0x1d0>
 80083ec:	f845 bb04 	str.w	fp, [r5], #4
 80083f0:	eba5 050a 	sub.w	r5, r5, sl
 80083f4:	10ad      	asrs	r5, r5, #2
 80083f6:	6125      	str	r5, [r4, #16]
 80083f8:	4658      	mov	r0, fp
 80083fa:	f000 fbd3 	bl	8008ba4 <__hi0bits>
 80083fe:	016d      	lsls	r5, r5, #5
 8008400:	f8d8 6000 	ldr.w	r6, [r8]
 8008404:	1a2d      	subs	r5, r5, r0
 8008406:	42b5      	cmp	r5, r6
 8008408:	dd54      	ble.n	80084b4 <__gethex+0x228>
 800840a:	1bad      	subs	r5, r5, r6
 800840c:	4629      	mov	r1, r5
 800840e:	4620      	mov	r0, r4
 8008410:	f000 ff67 	bl	80092e2 <__any_on>
 8008414:	4681      	mov	r9, r0
 8008416:	b178      	cbz	r0, 8008438 <__gethex+0x1ac>
 8008418:	1e6b      	subs	r3, r5, #1
 800841a:	1159      	asrs	r1, r3, #5
 800841c:	f003 021f 	and.w	r2, r3, #31
 8008420:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008424:	f04f 0901 	mov.w	r9, #1
 8008428:	fa09 f202 	lsl.w	r2, r9, r2
 800842c:	420a      	tst	r2, r1
 800842e:	d003      	beq.n	8008438 <__gethex+0x1ac>
 8008430:	454b      	cmp	r3, r9
 8008432:	dc36      	bgt.n	80084a2 <__gethex+0x216>
 8008434:	f04f 0902 	mov.w	r9, #2
 8008438:	4629      	mov	r1, r5
 800843a:	4620      	mov	r0, r4
 800843c:	f7ff febe 	bl	80081bc <rshift>
 8008440:	442f      	add	r7, r5
 8008442:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008446:	42bb      	cmp	r3, r7
 8008448:	da42      	bge.n	80084d0 <__gethex+0x244>
 800844a:	9801      	ldr	r0, [sp, #4]
 800844c:	4621      	mov	r1, r4
 800844e:	f000 faf7 	bl	8008a40 <_Bfree>
 8008452:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008454:	2300      	movs	r3, #0
 8008456:	6013      	str	r3, [r2, #0]
 8008458:	25a3      	movs	r5, #163	@ 0xa3
 800845a:	e793      	b.n	8008384 <__gethex+0xf8>
 800845c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008460:	2a2e      	cmp	r2, #46	@ 0x2e
 8008462:	d012      	beq.n	800848a <__gethex+0x1fe>
 8008464:	2b20      	cmp	r3, #32
 8008466:	d104      	bne.n	8008472 <__gethex+0x1e6>
 8008468:	f845 bb04 	str.w	fp, [r5], #4
 800846c:	f04f 0b00 	mov.w	fp, #0
 8008470:	465b      	mov	r3, fp
 8008472:	7830      	ldrb	r0, [r6, #0]
 8008474:	9303      	str	r3, [sp, #12]
 8008476:	f7ff fef3 	bl	8008260 <__hexdig_fun>
 800847a:	9b03      	ldr	r3, [sp, #12]
 800847c:	f000 000f 	and.w	r0, r0, #15
 8008480:	4098      	lsls	r0, r3
 8008482:	ea4b 0b00 	orr.w	fp, fp, r0
 8008486:	3304      	adds	r3, #4
 8008488:	e7ae      	b.n	80083e8 <__gethex+0x15c>
 800848a:	45b1      	cmp	r9, r6
 800848c:	d8ea      	bhi.n	8008464 <__gethex+0x1d8>
 800848e:	492b      	ldr	r1, [pc, #172]	@ (800853c <__gethex+0x2b0>)
 8008490:	9303      	str	r3, [sp, #12]
 8008492:	2201      	movs	r2, #1
 8008494:	4630      	mov	r0, r6
 8008496:	f7fe fedc 	bl	8007252 <strncmp>
 800849a:	9b03      	ldr	r3, [sp, #12]
 800849c:	2800      	cmp	r0, #0
 800849e:	d1e1      	bne.n	8008464 <__gethex+0x1d8>
 80084a0:	e7a2      	b.n	80083e8 <__gethex+0x15c>
 80084a2:	1ea9      	subs	r1, r5, #2
 80084a4:	4620      	mov	r0, r4
 80084a6:	f000 ff1c 	bl	80092e2 <__any_on>
 80084aa:	2800      	cmp	r0, #0
 80084ac:	d0c2      	beq.n	8008434 <__gethex+0x1a8>
 80084ae:	f04f 0903 	mov.w	r9, #3
 80084b2:	e7c1      	b.n	8008438 <__gethex+0x1ac>
 80084b4:	da09      	bge.n	80084ca <__gethex+0x23e>
 80084b6:	1b75      	subs	r5, r6, r5
 80084b8:	4621      	mov	r1, r4
 80084ba:	9801      	ldr	r0, [sp, #4]
 80084bc:	462a      	mov	r2, r5
 80084be:	f000 fcd7 	bl	8008e70 <__lshift>
 80084c2:	1b7f      	subs	r7, r7, r5
 80084c4:	4604      	mov	r4, r0
 80084c6:	f100 0a14 	add.w	sl, r0, #20
 80084ca:	f04f 0900 	mov.w	r9, #0
 80084ce:	e7b8      	b.n	8008442 <__gethex+0x1b6>
 80084d0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80084d4:	42bd      	cmp	r5, r7
 80084d6:	dd6f      	ble.n	80085b8 <__gethex+0x32c>
 80084d8:	1bed      	subs	r5, r5, r7
 80084da:	42ae      	cmp	r6, r5
 80084dc:	dc34      	bgt.n	8008548 <__gethex+0x2bc>
 80084de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80084e2:	2b02      	cmp	r3, #2
 80084e4:	d022      	beq.n	800852c <__gethex+0x2a0>
 80084e6:	2b03      	cmp	r3, #3
 80084e8:	d024      	beq.n	8008534 <__gethex+0x2a8>
 80084ea:	2b01      	cmp	r3, #1
 80084ec:	d115      	bne.n	800851a <__gethex+0x28e>
 80084ee:	42ae      	cmp	r6, r5
 80084f0:	d113      	bne.n	800851a <__gethex+0x28e>
 80084f2:	2e01      	cmp	r6, #1
 80084f4:	d10b      	bne.n	800850e <__gethex+0x282>
 80084f6:	9a02      	ldr	r2, [sp, #8]
 80084f8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80084fc:	6013      	str	r3, [r2, #0]
 80084fe:	2301      	movs	r3, #1
 8008500:	6123      	str	r3, [r4, #16]
 8008502:	f8ca 3000 	str.w	r3, [sl]
 8008506:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008508:	2562      	movs	r5, #98	@ 0x62
 800850a:	601c      	str	r4, [r3, #0]
 800850c:	e73a      	b.n	8008384 <__gethex+0xf8>
 800850e:	1e71      	subs	r1, r6, #1
 8008510:	4620      	mov	r0, r4
 8008512:	f000 fee6 	bl	80092e2 <__any_on>
 8008516:	2800      	cmp	r0, #0
 8008518:	d1ed      	bne.n	80084f6 <__gethex+0x26a>
 800851a:	9801      	ldr	r0, [sp, #4]
 800851c:	4621      	mov	r1, r4
 800851e:	f000 fa8f 	bl	8008a40 <_Bfree>
 8008522:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008524:	2300      	movs	r3, #0
 8008526:	6013      	str	r3, [r2, #0]
 8008528:	2550      	movs	r5, #80	@ 0x50
 800852a:	e72b      	b.n	8008384 <__gethex+0xf8>
 800852c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800852e:	2b00      	cmp	r3, #0
 8008530:	d1f3      	bne.n	800851a <__gethex+0x28e>
 8008532:	e7e0      	b.n	80084f6 <__gethex+0x26a>
 8008534:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008536:	2b00      	cmp	r3, #0
 8008538:	d1dd      	bne.n	80084f6 <__gethex+0x26a>
 800853a:	e7ee      	b.n	800851a <__gethex+0x28e>
 800853c:	0800bde8 	.word	0x0800bde8
 8008540:	0800bf8e 	.word	0x0800bf8e
 8008544:	0800bf9f 	.word	0x0800bf9f
 8008548:	1e6f      	subs	r7, r5, #1
 800854a:	f1b9 0f00 	cmp.w	r9, #0
 800854e:	d130      	bne.n	80085b2 <__gethex+0x326>
 8008550:	b127      	cbz	r7, 800855c <__gethex+0x2d0>
 8008552:	4639      	mov	r1, r7
 8008554:	4620      	mov	r0, r4
 8008556:	f000 fec4 	bl	80092e2 <__any_on>
 800855a:	4681      	mov	r9, r0
 800855c:	117a      	asrs	r2, r7, #5
 800855e:	2301      	movs	r3, #1
 8008560:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008564:	f007 071f 	and.w	r7, r7, #31
 8008568:	40bb      	lsls	r3, r7
 800856a:	4213      	tst	r3, r2
 800856c:	4629      	mov	r1, r5
 800856e:	4620      	mov	r0, r4
 8008570:	bf18      	it	ne
 8008572:	f049 0902 	orrne.w	r9, r9, #2
 8008576:	f7ff fe21 	bl	80081bc <rshift>
 800857a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800857e:	1b76      	subs	r6, r6, r5
 8008580:	2502      	movs	r5, #2
 8008582:	f1b9 0f00 	cmp.w	r9, #0
 8008586:	d047      	beq.n	8008618 <__gethex+0x38c>
 8008588:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800858c:	2b02      	cmp	r3, #2
 800858e:	d015      	beq.n	80085bc <__gethex+0x330>
 8008590:	2b03      	cmp	r3, #3
 8008592:	d017      	beq.n	80085c4 <__gethex+0x338>
 8008594:	2b01      	cmp	r3, #1
 8008596:	d109      	bne.n	80085ac <__gethex+0x320>
 8008598:	f019 0f02 	tst.w	r9, #2
 800859c:	d006      	beq.n	80085ac <__gethex+0x320>
 800859e:	f8da 3000 	ldr.w	r3, [sl]
 80085a2:	ea49 0903 	orr.w	r9, r9, r3
 80085a6:	f019 0f01 	tst.w	r9, #1
 80085aa:	d10e      	bne.n	80085ca <__gethex+0x33e>
 80085ac:	f045 0510 	orr.w	r5, r5, #16
 80085b0:	e032      	b.n	8008618 <__gethex+0x38c>
 80085b2:	f04f 0901 	mov.w	r9, #1
 80085b6:	e7d1      	b.n	800855c <__gethex+0x2d0>
 80085b8:	2501      	movs	r5, #1
 80085ba:	e7e2      	b.n	8008582 <__gethex+0x2f6>
 80085bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80085be:	f1c3 0301 	rsb	r3, r3, #1
 80085c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80085c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d0f0      	beq.n	80085ac <__gethex+0x320>
 80085ca:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80085ce:	f104 0314 	add.w	r3, r4, #20
 80085d2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80085d6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80085da:	f04f 0c00 	mov.w	ip, #0
 80085de:	4618      	mov	r0, r3
 80085e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80085e4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80085e8:	d01b      	beq.n	8008622 <__gethex+0x396>
 80085ea:	3201      	adds	r2, #1
 80085ec:	6002      	str	r2, [r0, #0]
 80085ee:	2d02      	cmp	r5, #2
 80085f0:	f104 0314 	add.w	r3, r4, #20
 80085f4:	d13c      	bne.n	8008670 <__gethex+0x3e4>
 80085f6:	f8d8 2000 	ldr.w	r2, [r8]
 80085fa:	3a01      	subs	r2, #1
 80085fc:	42b2      	cmp	r2, r6
 80085fe:	d109      	bne.n	8008614 <__gethex+0x388>
 8008600:	1171      	asrs	r1, r6, #5
 8008602:	2201      	movs	r2, #1
 8008604:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008608:	f006 061f 	and.w	r6, r6, #31
 800860c:	fa02 f606 	lsl.w	r6, r2, r6
 8008610:	421e      	tst	r6, r3
 8008612:	d13a      	bne.n	800868a <__gethex+0x3fe>
 8008614:	f045 0520 	orr.w	r5, r5, #32
 8008618:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800861a:	601c      	str	r4, [r3, #0]
 800861c:	9b02      	ldr	r3, [sp, #8]
 800861e:	601f      	str	r7, [r3, #0]
 8008620:	e6b0      	b.n	8008384 <__gethex+0xf8>
 8008622:	4299      	cmp	r1, r3
 8008624:	f843 cc04 	str.w	ip, [r3, #-4]
 8008628:	d8d9      	bhi.n	80085de <__gethex+0x352>
 800862a:	68a3      	ldr	r3, [r4, #8]
 800862c:	459b      	cmp	fp, r3
 800862e:	db17      	blt.n	8008660 <__gethex+0x3d4>
 8008630:	6861      	ldr	r1, [r4, #4]
 8008632:	9801      	ldr	r0, [sp, #4]
 8008634:	3101      	adds	r1, #1
 8008636:	f000 f9c3 	bl	80089c0 <_Balloc>
 800863a:	4681      	mov	r9, r0
 800863c:	b918      	cbnz	r0, 8008646 <__gethex+0x3ba>
 800863e:	4b1a      	ldr	r3, [pc, #104]	@ (80086a8 <__gethex+0x41c>)
 8008640:	4602      	mov	r2, r0
 8008642:	2184      	movs	r1, #132	@ 0x84
 8008644:	e6c5      	b.n	80083d2 <__gethex+0x146>
 8008646:	6922      	ldr	r2, [r4, #16]
 8008648:	3202      	adds	r2, #2
 800864a:	f104 010c 	add.w	r1, r4, #12
 800864e:	0092      	lsls	r2, r2, #2
 8008650:	300c      	adds	r0, #12
 8008652:	f7fe fee4 	bl	800741e <memcpy>
 8008656:	4621      	mov	r1, r4
 8008658:	9801      	ldr	r0, [sp, #4]
 800865a:	f000 f9f1 	bl	8008a40 <_Bfree>
 800865e:	464c      	mov	r4, r9
 8008660:	6923      	ldr	r3, [r4, #16]
 8008662:	1c5a      	adds	r2, r3, #1
 8008664:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008668:	6122      	str	r2, [r4, #16]
 800866a:	2201      	movs	r2, #1
 800866c:	615a      	str	r2, [r3, #20]
 800866e:	e7be      	b.n	80085ee <__gethex+0x362>
 8008670:	6922      	ldr	r2, [r4, #16]
 8008672:	455a      	cmp	r2, fp
 8008674:	dd0b      	ble.n	800868e <__gethex+0x402>
 8008676:	2101      	movs	r1, #1
 8008678:	4620      	mov	r0, r4
 800867a:	f7ff fd9f 	bl	80081bc <rshift>
 800867e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008682:	3701      	adds	r7, #1
 8008684:	42bb      	cmp	r3, r7
 8008686:	f6ff aee0 	blt.w	800844a <__gethex+0x1be>
 800868a:	2501      	movs	r5, #1
 800868c:	e7c2      	b.n	8008614 <__gethex+0x388>
 800868e:	f016 061f 	ands.w	r6, r6, #31
 8008692:	d0fa      	beq.n	800868a <__gethex+0x3fe>
 8008694:	4453      	add	r3, sl
 8008696:	f1c6 0620 	rsb	r6, r6, #32
 800869a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800869e:	f000 fa81 	bl	8008ba4 <__hi0bits>
 80086a2:	42b0      	cmp	r0, r6
 80086a4:	dbe7      	blt.n	8008676 <__gethex+0x3ea>
 80086a6:	e7f0      	b.n	800868a <__gethex+0x3fe>
 80086a8:	0800bf8e 	.word	0x0800bf8e

080086ac <L_shift>:
 80086ac:	f1c2 0208 	rsb	r2, r2, #8
 80086b0:	0092      	lsls	r2, r2, #2
 80086b2:	b570      	push	{r4, r5, r6, lr}
 80086b4:	f1c2 0620 	rsb	r6, r2, #32
 80086b8:	6843      	ldr	r3, [r0, #4]
 80086ba:	6804      	ldr	r4, [r0, #0]
 80086bc:	fa03 f506 	lsl.w	r5, r3, r6
 80086c0:	432c      	orrs	r4, r5
 80086c2:	40d3      	lsrs	r3, r2
 80086c4:	6004      	str	r4, [r0, #0]
 80086c6:	f840 3f04 	str.w	r3, [r0, #4]!
 80086ca:	4288      	cmp	r0, r1
 80086cc:	d3f4      	bcc.n	80086b8 <L_shift+0xc>
 80086ce:	bd70      	pop	{r4, r5, r6, pc}

080086d0 <__match>:
 80086d0:	b530      	push	{r4, r5, lr}
 80086d2:	6803      	ldr	r3, [r0, #0]
 80086d4:	3301      	adds	r3, #1
 80086d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086da:	b914      	cbnz	r4, 80086e2 <__match+0x12>
 80086dc:	6003      	str	r3, [r0, #0]
 80086de:	2001      	movs	r0, #1
 80086e0:	bd30      	pop	{r4, r5, pc}
 80086e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086e6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80086ea:	2d19      	cmp	r5, #25
 80086ec:	bf98      	it	ls
 80086ee:	3220      	addls	r2, #32
 80086f0:	42a2      	cmp	r2, r4
 80086f2:	d0f0      	beq.n	80086d6 <__match+0x6>
 80086f4:	2000      	movs	r0, #0
 80086f6:	e7f3      	b.n	80086e0 <__match+0x10>

080086f8 <__hexnan>:
 80086f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086fc:	680b      	ldr	r3, [r1, #0]
 80086fe:	6801      	ldr	r1, [r0, #0]
 8008700:	115e      	asrs	r6, r3, #5
 8008702:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008706:	f013 031f 	ands.w	r3, r3, #31
 800870a:	b087      	sub	sp, #28
 800870c:	bf18      	it	ne
 800870e:	3604      	addne	r6, #4
 8008710:	2500      	movs	r5, #0
 8008712:	1f37      	subs	r7, r6, #4
 8008714:	4682      	mov	sl, r0
 8008716:	4690      	mov	r8, r2
 8008718:	9301      	str	r3, [sp, #4]
 800871a:	f846 5c04 	str.w	r5, [r6, #-4]
 800871e:	46b9      	mov	r9, r7
 8008720:	463c      	mov	r4, r7
 8008722:	9502      	str	r5, [sp, #8]
 8008724:	46ab      	mov	fp, r5
 8008726:	784a      	ldrb	r2, [r1, #1]
 8008728:	1c4b      	adds	r3, r1, #1
 800872a:	9303      	str	r3, [sp, #12]
 800872c:	b342      	cbz	r2, 8008780 <__hexnan+0x88>
 800872e:	4610      	mov	r0, r2
 8008730:	9105      	str	r1, [sp, #20]
 8008732:	9204      	str	r2, [sp, #16]
 8008734:	f7ff fd94 	bl	8008260 <__hexdig_fun>
 8008738:	2800      	cmp	r0, #0
 800873a:	d151      	bne.n	80087e0 <__hexnan+0xe8>
 800873c:	9a04      	ldr	r2, [sp, #16]
 800873e:	9905      	ldr	r1, [sp, #20]
 8008740:	2a20      	cmp	r2, #32
 8008742:	d818      	bhi.n	8008776 <__hexnan+0x7e>
 8008744:	9b02      	ldr	r3, [sp, #8]
 8008746:	459b      	cmp	fp, r3
 8008748:	dd13      	ble.n	8008772 <__hexnan+0x7a>
 800874a:	454c      	cmp	r4, r9
 800874c:	d206      	bcs.n	800875c <__hexnan+0x64>
 800874e:	2d07      	cmp	r5, #7
 8008750:	dc04      	bgt.n	800875c <__hexnan+0x64>
 8008752:	462a      	mov	r2, r5
 8008754:	4649      	mov	r1, r9
 8008756:	4620      	mov	r0, r4
 8008758:	f7ff ffa8 	bl	80086ac <L_shift>
 800875c:	4544      	cmp	r4, r8
 800875e:	d952      	bls.n	8008806 <__hexnan+0x10e>
 8008760:	2300      	movs	r3, #0
 8008762:	f1a4 0904 	sub.w	r9, r4, #4
 8008766:	f844 3c04 	str.w	r3, [r4, #-4]
 800876a:	f8cd b008 	str.w	fp, [sp, #8]
 800876e:	464c      	mov	r4, r9
 8008770:	461d      	mov	r5, r3
 8008772:	9903      	ldr	r1, [sp, #12]
 8008774:	e7d7      	b.n	8008726 <__hexnan+0x2e>
 8008776:	2a29      	cmp	r2, #41	@ 0x29
 8008778:	d157      	bne.n	800882a <__hexnan+0x132>
 800877a:	3102      	adds	r1, #2
 800877c:	f8ca 1000 	str.w	r1, [sl]
 8008780:	f1bb 0f00 	cmp.w	fp, #0
 8008784:	d051      	beq.n	800882a <__hexnan+0x132>
 8008786:	454c      	cmp	r4, r9
 8008788:	d206      	bcs.n	8008798 <__hexnan+0xa0>
 800878a:	2d07      	cmp	r5, #7
 800878c:	dc04      	bgt.n	8008798 <__hexnan+0xa0>
 800878e:	462a      	mov	r2, r5
 8008790:	4649      	mov	r1, r9
 8008792:	4620      	mov	r0, r4
 8008794:	f7ff ff8a 	bl	80086ac <L_shift>
 8008798:	4544      	cmp	r4, r8
 800879a:	d936      	bls.n	800880a <__hexnan+0x112>
 800879c:	f1a8 0204 	sub.w	r2, r8, #4
 80087a0:	4623      	mov	r3, r4
 80087a2:	f853 1b04 	ldr.w	r1, [r3], #4
 80087a6:	f842 1f04 	str.w	r1, [r2, #4]!
 80087aa:	429f      	cmp	r7, r3
 80087ac:	d2f9      	bcs.n	80087a2 <__hexnan+0xaa>
 80087ae:	1b3b      	subs	r3, r7, r4
 80087b0:	f023 0303 	bic.w	r3, r3, #3
 80087b4:	3304      	adds	r3, #4
 80087b6:	3401      	adds	r4, #1
 80087b8:	3e03      	subs	r6, #3
 80087ba:	42b4      	cmp	r4, r6
 80087bc:	bf88      	it	hi
 80087be:	2304      	movhi	r3, #4
 80087c0:	4443      	add	r3, r8
 80087c2:	2200      	movs	r2, #0
 80087c4:	f843 2b04 	str.w	r2, [r3], #4
 80087c8:	429f      	cmp	r7, r3
 80087ca:	d2fb      	bcs.n	80087c4 <__hexnan+0xcc>
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	b91b      	cbnz	r3, 80087d8 <__hexnan+0xe0>
 80087d0:	4547      	cmp	r7, r8
 80087d2:	d128      	bne.n	8008826 <__hexnan+0x12e>
 80087d4:	2301      	movs	r3, #1
 80087d6:	603b      	str	r3, [r7, #0]
 80087d8:	2005      	movs	r0, #5
 80087da:	b007      	add	sp, #28
 80087dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087e0:	3501      	adds	r5, #1
 80087e2:	2d08      	cmp	r5, #8
 80087e4:	f10b 0b01 	add.w	fp, fp, #1
 80087e8:	dd06      	ble.n	80087f8 <__hexnan+0x100>
 80087ea:	4544      	cmp	r4, r8
 80087ec:	d9c1      	bls.n	8008772 <__hexnan+0x7a>
 80087ee:	2300      	movs	r3, #0
 80087f0:	f844 3c04 	str.w	r3, [r4, #-4]
 80087f4:	2501      	movs	r5, #1
 80087f6:	3c04      	subs	r4, #4
 80087f8:	6822      	ldr	r2, [r4, #0]
 80087fa:	f000 000f 	and.w	r0, r0, #15
 80087fe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008802:	6020      	str	r0, [r4, #0]
 8008804:	e7b5      	b.n	8008772 <__hexnan+0x7a>
 8008806:	2508      	movs	r5, #8
 8008808:	e7b3      	b.n	8008772 <__hexnan+0x7a>
 800880a:	9b01      	ldr	r3, [sp, #4]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d0dd      	beq.n	80087cc <__hexnan+0xd4>
 8008810:	f1c3 0320 	rsb	r3, r3, #32
 8008814:	f04f 32ff 	mov.w	r2, #4294967295
 8008818:	40da      	lsrs	r2, r3
 800881a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800881e:	4013      	ands	r3, r2
 8008820:	f846 3c04 	str.w	r3, [r6, #-4]
 8008824:	e7d2      	b.n	80087cc <__hexnan+0xd4>
 8008826:	3f04      	subs	r7, #4
 8008828:	e7d0      	b.n	80087cc <__hexnan+0xd4>
 800882a:	2004      	movs	r0, #4
 800882c:	e7d5      	b.n	80087da <__hexnan+0xe2>
	...

08008830 <malloc>:
 8008830:	4b02      	ldr	r3, [pc, #8]	@ (800883c <malloc+0xc>)
 8008832:	4601      	mov	r1, r0
 8008834:	6818      	ldr	r0, [r3, #0]
 8008836:	f000 b825 	b.w	8008884 <_malloc_r>
 800883a:	bf00      	nop
 800883c:	20000184 	.word	0x20000184

08008840 <sbrk_aligned>:
 8008840:	b570      	push	{r4, r5, r6, lr}
 8008842:	4e0f      	ldr	r6, [pc, #60]	@ (8008880 <sbrk_aligned+0x40>)
 8008844:	460c      	mov	r4, r1
 8008846:	6831      	ldr	r1, [r6, #0]
 8008848:	4605      	mov	r5, r0
 800884a:	b911      	cbnz	r1, 8008852 <sbrk_aligned+0x12>
 800884c:	f000 ffa6 	bl	800979c <_sbrk_r>
 8008850:	6030      	str	r0, [r6, #0]
 8008852:	4621      	mov	r1, r4
 8008854:	4628      	mov	r0, r5
 8008856:	f000 ffa1 	bl	800979c <_sbrk_r>
 800885a:	1c43      	adds	r3, r0, #1
 800885c:	d103      	bne.n	8008866 <sbrk_aligned+0x26>
 800885e:	f04f 34ff 	mov.w	r4, #4294967295
 8008862:	4620      	mov	r0, r4
 8008864:	bd70      	pop	{r4, r5, r6, pc}
 8008866:	1cc4      	adds	r4, r0, #3
 8008868:	f024 0403 	bic.w	r4, r4, #3
 800886c:	42a0      	cmp	r0, r4
 800886e:	d0f8      	beq.n	8008862 <sbrk_aligned+0x22>
 8008870:	1a21      	subs	r1, r4, r0
 8008872:	4628      	mov	r0, r5
 8008874:	f000 ff92 	bl	800979c <_sbrk_r>
 8008878:	3001      	adds	r0, #1
 800887a:	d1f2      	bne.n	8008862 <sbrk_aligned+0x22>
 800887c:	e7ef      	b.n	800885e <sbrk_aligned+0x1e>
 800887e:	bf00      	nop
 8008880:	2000074c 	.word	0x2000074c

08008884 <_malloc_r>:
 8008884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008888:	1ccd      	adds	r5, r1, #3
 800888a:	f025 0503 	bic.w	r5, r5, #3
 800888e:	3508      	adds	r5, #8
 8008890:	2d0c      	cmp	r5, #12
 8008892:	bf38      	it	cc
 8008894:	250c      	movcc	r5, #12
 8008896:	2d00      	cmp	r5, #0
 8008898:	4606      	mov	r6, r0
 800889a:	db01      	blt.n	80088a0 <_malloc_r+0x1c>
 800889c:	42a9      	cmp	r1, r5
 800889e:	d904      	bls.n	80088aa <_malloc_r+0x26>
 80088a0:	230c      	movs	r3, #12
 80088a2:	6033      	str	r3, [r6, #0]
 80088a4:	2000      	movs	r0, #0
 80088a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008980 <_malloc_r+0xfc>
 80088ae:	f000 f87b 	bl	80089a8 <__malloc_lock>
 80088b2:	f8d8 3000 	ldr.w	r3, [r8]
 80088b6:	461c      	mov	r4, r3
 80088b8:	bb44      	cbnz	r4, 800890c <_malloc_r+0x88>
 80088ba:	4629      	mov	r1, r5
 80088bc:	4630      	mov	r0, r6
 80088be:	f7ff ffbf 	bl	8008840 <sbrk_aligned>
 80088c2:	1c43      	adds	r3, r0, #1
 80088c4:	4604      	mov	r4, r0
 80088c6:	d158      	bne.n	800897a <_malloc_r+0xf6>
 80088c8:	f8d8 4000 	ldr.w	r4, [r8]
 80088cc:	4627      	mov	r7, r4
 80088ce:	2f00      	cmp	r7, #0
 80088d0:	d143      	bne.n	800895a <_malloc_r+0xd6>
 80088d2:	2c00      	cmp	r4, #0
 80088d4:	d04b      	beq.n	800896e <_malloc_r+0xea>
 80088d6:	6823      	ldr	r3, [r4, #0]
 80088d8:	4639      	mov	r1, r7
 80088da:	4630      	mov	r0, r6
 80088dc:	eb04 0903 	add.w	r9, r4, r3
 80088e0:	f000 ff5c 	bl	800979c <_sbrk_r>
 80088e4:	4581      	cmp	r9, r0
 80088e6:	d142      	bne.n	800896e <_malloc_r+0xea>
 80088e8:	6821      	ldr	r1, [r4, #0]
 80088ea:	1a6d      	subs	r5, r5, r1
 80088ec:	4629      	mov	r1, r5
 80088ee:	4630      	mov	r0, r6
 80088f0:	f7ff ffa6 	bl	8008840 <sbrk_aligned>
 80088f4:	3001      	adds	r0, #1
 80088f6:	d03a      	beq.n	800896e <_malloc_r+0xea>
 80088f8:	6823      	ldr	r3, [r4, #0]
 80088fa:	442b      	add	r3, r5
 80088fc:	6023      	str	r3, [r4, #0]
 80088fe:	f8d8 3000 	ldr.w	r3, [r8]
 8008902:	685a      	ldr	r2, [r3, #4]
 8008904:	bb62      	cbnz	r2, 8008960 <_malloc_r+0xdc>
 8008906:	f8c8 7000 	str.w	r7, [r8]
 800890a:	e00f      	b.n	800892c <_malloc_r+0xa8>
 800890c:	6822      	ldr	r2, [r4, #0]
 800890e:	1b52      	subs	r2, r2, r5
 8008910:	d420      	bmi.n	8008954 <_malloc_r+0xd0>
 8008912:	2a0b      	cmp	r2, #11
 8008914:	d917      	bls.n	8008946 <_malloc_r+0xc2>
 8008916:	1961      	adds	r1, r4, r5
 8008918:	42a3      	cmp	r3, r4
 800891a:	6025      	str	r5, [r4, #0]
 800891c:	bf18      	it	ne
 800891e:	6059      	strne	r1, [r3, #4]
 8008920:	6863      	ldr	r3, [r4, #4]
 8008922:	bf08      	it	eq
 8008924:	f8c8 1000 	streq.w	r1, [r8]
 8008928:	5162      	str	r2, [r4, r5]
 800892a:	604b      	str	r3, [r1, #4]
 800892c:	4630      	mov	r0, r6
 800892e:	f000 f841 	bl	80089b4 <__malloc_unlock>
 8008932:	f104 000b 	add.w	r0, r4, #11
 8008936:	1d23      	adds	r3, r4, #4
 8008938:	f020 0007 	bic.w	r0, r0, #7
 800893c:	1ac2      	subs	r2, r0, r3
 800893e:	bf1c      	itt	ne
 8008940:	1a1b      	subne	r3, r3, r0
 8008942:	50a3      	strne	r3, [r4, r2]
 8008944:	e7af      	b.n	80088a6 <_malloc_r+0x22>
 8008946:	6862      	ldr	r2, [r4, #4]
 8008948:	42a3      	cmp	r3, r4
 800894a:	bf0c      	ite	eq
 800894c:	f8c8 2000 	streq.w	r2, [r8]
 8008950:	605a      	strne	r2, [r3, #4]
 8008952:	e7eb      	b.n	800892c <_malloc_r+0xa8>
 8008954:	4623      	mov	r3, r4
 8008956:	6864      	ldr	r4, [r4, #4]
 8008958:	e7ae      	b.n	80088b8 <_malloc_r+0x34>
 800895a:	463c      	mov	r4, r7
 800895c:	687f      	ldr	r7, [r7, #4]
 800895e:	e7b6      	b.n	80088ce <_malloc_r+0x4a>
 8008960:	461a      	mov	r2, r3
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	42a3      	cmp	r3, r4
 8008966:	d1fb      	bne.n	8008960 <_malloc_r+0xdc>
 8008968:	2300      	movs	r3, #0
 800896a:	6053      	str	r3, [r2, #4]
 800896c:	e7de      	b.n	800892c <_malloc_r+0xa8>
 800896e:	230c      	movs	r3, #12
 8008970:	6033      	str	r3, [r6, #0]
 8008972:	4630      	mov	r0, r6
 8008974:	f000 f81e 	bl	80089b4 <__malloc_unlock>
 8008978:	e794      	b.n	80088a4 <_malloc_r+0x20>
 800897a:	6005      	str	r5, [r0, #0]
 800897c:	e7d6      	b.n	800892c <_malloc_r+0xa8>
 800897e:	bf00      	nop
 8008980:	20000750 	.word	0x20000750

08008984 <__ascii_mbtowc>:
 8008984:	b082      	sub	sp, #8
 8008986:	b901      	cbnz	r1, 800898a <__ascii_mbtowc+0x6>
 8008988:	a901      	add	r1, sp, #4
 800898a:	b142      	cbz	r2, 800899e <__ascii_mbtowc+0x1a>
 800898c:	b14b      	cbz	r3, 80089a2 <__ascii_mbtowc+0x1e>
 800898e:	7813      	ldrb	r3, [r2, #0]
 8008990:	600b      	str	r3, [r1, #0]
 8008992:	7812      	ldrb	r2, [r2, #0]
 8008994:	1e10      	subs	r0, r2, #0
 8008996:	bf18      	it	ne
 8008998:	2001      	movne	r0, #1
 800899a:	b002      	add	sp, #8
 800899c:	4770      	bx	lr
 800899e:	4610      	mov	r0, r2
 80089a0:	e7fb      	b.n	800899a <__ascii_mbtowc+0x16>
 80089a2:	f06f 0001 	mvn.w	r0, #1
 80089a6:	e7f8      	b.n	800899a <__ascii_mbtowc+0x16>

080089a8 <__malloc_lock>:
 80089a8:	4801      	ldr	r0, [pc, #4]	@ (80089b0 <__malloc_lock+0x8>)
 80089aa:	f7fe bd36 	b.w	800741a <__retarget_lock_acquire_recursive>
 80089ae:	bf00      	nop
 80089b0:	20000748 	.word	0x20000748

080089b4 <__malloc_unlock>:
 80089b4:	4801      	ldr	r0, [pc, #4]	@ (80089bc <__malloc_unlock+0x8>)
 80089b6:	f7fe bd31 	b.w	800741c <__retarget_lock_release_recursive>
 80089ba:	bf00      	nop
 80089bc:	20000748 	.word	0x20000748

080089c0 <_Balloc>:
 80089c0:	b570      	push	{r4, r5, r6, lr}
 80089c2:	69c6      	ldr	r6, [r0, #28]
 80089c4:	4604      	mov	r4, r0
 80089c6:	460d      	mov	r5, r1
 80089c8:	b976      	cbnz	r6, 80089e8 <_Balloc+0x28>
 80089ca:	2010      	movs	r0, #16
 80089cc:	f7ff ff30 	bl	8008830 <malloc>
 80089d0:	4602      	mov	r2, r0
 80089d2:	61e0      	str	r0, [r4, #28]
 80089d4:	b920      	cbnz	r0, 80089e0 <_Balloc+0x20>
 80089d6:	4b18      	ldr	r3, [pc, #96]	@ (8008a38 <_Balloc+0x78>)
 80089d8:	4818      	ldr	r0, [pc, #96]	@ (8008a3c <_Balloc+0x7c>)
 80089da:	216b      	movs	r1, #107	@ 0x6b
 80089dc:	f7fe fd38 	bl	8007450 <__assert_func>
 80089e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80089e4:	6006      	str	r6, [r0, #0]
 80089e6:	60c6      	str	r6, [r0, #12]
 80089e8:	69e6      	ldr	r6, [r4, #28]
 80089ea:	68f3      	ldr	r3, [r6, #12]
 80089ec:	b183      	cbz	r3, 8008a10 <_Balloc+0x50>
 80089ee:	69e3      	ldr	r3, [r4, #28]
 80089f0:	68db      	ldr	r3, [r3, #12]
 80089f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80089f6:	b9b8      	cbnz	r0, 8008a28 <_Balloc+0x68>
 80089f8:	2101      	movs	r1, #1
 80089fa:	fa01 f605 	lsl.w	r6, r1, r5
 80089fe:	1d72      	adds	r2, r6, #5
 8008a00:	0092      	lsls	r2, r2, #2
 8008a02:	4620      	mov	r0, r4
 8008a04:	f000 fee1 	bl	80097ca <_calloc_r>
 8008a08:	b160      	cbz	r0, 8008a24 <_Balloc+0x64>
 8008a0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008a0e:	e00e      	b.n	8008a2e <_Balloc+0x6e>
 8008a10:	2221      	movs	r2, #33	@ 0x21
 8008a12:	2104      	movs	r1, #4
 8008a14:	4620      	mov	r0, r4
 8008a16:	f000 fed8 	bl	80097ca <_calloc_r>
 8008a1a:	69e3      	ldr	r3, [r4, #28]
 8008a1c:	60f0      	str	r0, [r6, #12]
 8008a1e:	68db      	ldr	r3, [r3, #12]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d1e4      	bne.n	80089ee <_Balloc+0x2e>
 8008a24:	2000      	movs	r0, #0
 8008a26:	bd70      	pop	{r4, r5, r6, pc}
 8008a28:	6802      	ldr	r2, [r0, #0]
 8008a2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008a2e:	2300      	movs	r3, #0
 8008a30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008a34:	e7f7      	b.n	8008a26 <_Balloc+0x66>
 8008a36:	bf00      	nop
 8008a38:	0800be74 	.word	0x0800be74
 8008a3c:	0800bfff 	.word	0x0800bfff

08008a40 <_Bfree>:
 8008a40:	b570      	push	{r4, r5, r6, lr}
 8008a42:	69c6      	ldr	r6, [r0, #28]
 8008a44:	4605      	mov	r5, r0
 8008a46:	460c      	mov	r4, r1
 8008a48:	b976      	cbnz	r6, 8008a68 <_Bfree+0x28>
 8008a4a:	2010      	movs	r0, #16
 8008a4c:	f7ff fef0 	bl	8008830 <malloc>
 8008a50:	4602      	mov	r2, r0
 8008a52:	61e8      	str	r0, [r5, #28]
 8008a54:	b920      	cbnz	r0, 8008a60 <_Bfree+0x20>
 8008a56:	4b09      	ldr	r3, [pc, #36]	@ (8008a7c <_Bfree+0x3c>)
 8008a58:	4809      	ldr	r0, [pc, #36]	@ (8008a80 <_Bfree+0x40>)
 8008a5a:	218f      	movs	r1, #143	@ 0x8f
 8008a5c:	f7fe fcf8 	bl	8007450 <__assert_func>
 8008a60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a64:	6006      	str	r6, [r0, #0]
 8008a66:	60c6      	str	r6, [r0, #12]
 8008a68:	b13c      	cbz	r4, 8008a7a <_Bfree+0x3a>
 8008a6a:	69eb      	ldr	r3, [r5, #28]
 8008a6c:	6862      	ldr	r2, [r4, #4]
 8008a6e:	68db      	ldr	r3, [r3, #12]
 8008a70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008a74:	6021      	str	r1, [r4, #0]
 8008a76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008a7a:	bd70      	pop	{r4, r5, r6, pc}
 8008a7c:	0800be74 	.word	0x0800be74
 8008a80:	0800bfff 	.word	0x0800bfff

08008a84 <__multadd>:
 8008a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a88:	690d      	ldr	r5, [r1, #16]
 8008a8a:	4607      	mov	r7, r0
 8008a8c:	460c      	mov	r4, r1
 8008a8e:	461e      	mov	r6, r3
 8008a90:	f101 0c14 	add.w	ip, r1, #20
 8008a94:	2000      	movs	r0, #0
 8008a96:	f8dc 3000 	ldr.w	r3, [ip]
 8008a9a:	b299      	uxth	r1, r3
 8008a9c:	fb02 6101 	mla	r1, r2, r1, r6
 8008aa0:	0c1e      	lsrs	r6, r3, #16
 8008aa2:	0c0b      	lsrs	r3, r1, #16
 8008aa4:	fb02 3306 	mla	r3, r2, r6, r3
 8008aa8:	b289      	uxth	r1, r1
 8008aaa:	3001      	adds	r0, #1
 8008aac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008ab0:	4285      	cmp	r5, r0
 8008ab2:	f84c 1b04 	str.w	r1, [ip], #4
 8008ab6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008aba:	dcec      	bgt.n	8008a96 <__multadd+0x12>
 8008abc:	b30e      	cbz	r6, 8008b02 <__multadd+0x7e>
 8008abe:	68a3      	ldr	r3, [r4, #8]
 8008ac0:	42ab      	cmp	r3, r5
 8008ac2:	dc19      	bgt.n	8008af8 <__multadd+0x74>
 8008ac4:	6861      	ldr	r1, [r4, #4]
 8008ac6:	4638      	mov	r0, r7
 8008ac8:	3101      	adds	r1, #1
 8008aca:	f7ff ff79 	bl	80089c0 <_Balloc>
 8008ace:	4680      	mov	r8, r0
 8008ad0:	b928      	cbnz	r0, 8008ade <__multadd+0x5a>
 8008ad2:	4602      	mov	r2, r0
 8008ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8008b08 <__multadd+0x84>)
 8008ad6:	480d      	ldr	r0, [pc, #52]	@ (8008b0c <__multadd+0x88>)
 8008ad8:	21ba      	movs	r1, #186	@ 0xba
 8008ada:	f7fe fcb9 	bl	8007450 <__assert_func>
 8008ade:	6922      	ldr	r2, [r4, #16]
 8008ae0:	3202      	adds	r2, #2
 8008ae2:	f104 010c 	add.w	r1, r4, #12
 8008ae6:	0092      	lsls	r2, r2, #2
 8008ae8:	300c      	adds	r0, #12
 8008aea:	f7fe fc98 	bl	800741e <memcpy>
 8008aee:	4621      	mov	r1, r4
 8008af0:	4638      	mov	r0, r7
 8008af2:	f7ff ffa5 	bl	8008a40 <_Bfree>
 8008af6:	4644      	mov	r4, r8
 8008af8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008afc:	3501      	adds	r5, #1
 8008afe:	615e      	str	r6, [r3, #20]
 8008b00:	6125      	str	r5, [r4, #16]
 8008b02:	4620      	mov	r0, r4
 8008b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b08:	0800bf8e 	.word	0x0800bf8e
 8008b0c:	0800bfff 	.word	0x0800bfff

08008b10 <__s2b>:
 8008b10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b14:	460c      	mov	r4, r1
 8008b16:	4615      	mov	r5, r2
 8008b18:	461f      	mov	r7, r3
 8008b1a:	2209      	movs	r2, #9
 8008b1c:	3308      	adds	r3, #8
 8008b1e:	4606      	mov	r6, r0
 8008b20:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b24:	2100      	movs	r1, #0
 8008b26:	2201      	movs	r2, #1
 8008b28:	429a      	cmp	r2, r3
 8008b2a:	db09      	blt.n	8008b40 <__s2b+0x30>
 8008b2c:	4630      	mov	r0, r6
 8008b2e:	f7ff ff47 	bl	80089c0 <_Balloc>
 8008b32:	b940      	cbnz	r0, 8008b46 <__s2b+0x36>
 8008b34:	4602      	mov	r2, r0
 8008b36:	4b19      	ldr	r3, [pc, #100]	@ (8008b9c <__s2b+0x8c>)
 8008b38:	4819      	ldr	r0, [pc, #100]	@ (8008ba0 <__s2b+0x90>)
 8008b3a:	21d3      	movs	r1, #211	@ 0xd3
 8008b3c:	f7fe fc88 	bl	8007450 <__assert_func>
 8008b40:	0052      	lsls	r2, r2, #1
 8008b42:	3101      	adds	r1, #1
 8008b44:	e7f0      	b.n	8008b28 <__s2b+0x18>
 8008b46:	9b08      	ldr	r3, [sp, #32]
 8008b48:	6143      	str	r3, [r0, #20]
 8008b4a:	2d09      	cmp	r5, #9
 8008b4c:	f04f 0301 	mov.w	r3, #1
 8008b50:	6103      	str	r3, [r0, #16]
 8008b52:	dd16      	ble.n	8008b82 <__s2b+0x72>
 8008b54:	f104 0909 	add.w	r9, r4, #9
 8008b58:	46c8      	mov	r8, r9
 8008b5a:	442c      	add	r4, r5
 8008b5c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008b60:	4601      	mov	r1, r0
 8008b62:	3b30      	subs	r3, #48	@ 0x30
 8008b64:	220a      	movs	r2, #10
 8008b66:	4630      	mov	r0, r6
 8008b68:	f7ff ff8c 	bl	8008a84 <__multadd>
 8008b6c:	45a0      	cmp	r8, r4
 8008b6e:	d1f5      	bne.n	8008b5c <__s2b+0x4c>
 8008b70:	f1a5 0408 	sub.w	r4, r5, #8
 8008b74:	444c      	add	r4, r9
 8008b76:	1b2d      	subs	r5, r5, r4
 8008b78:	1963      	adds	r3, r4, r5
 8008b7a:	42bb      	cmp	r3, r7
 8008b7c:	db04      	blt.n	8008b88 <__s2b+0x78>
 8008b7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b82:	340a      	adds	r4, #10
 8008b84:	2509      	movs	r5, #9
 8008b86:	e7f6      	b.n	8008b76 <__s2b+0x66>
 8008b88:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008b8c:	4601      	mov	r1, r0
 8008b8e:	3b30      	subs	r3, #48	@ 0x30
 8008b90:	220a      	movs	r2, #10
 8008b92:	4630      	mov	r0, r6
 8008b94:	f7ff ff76 	bl	8008a84 <__multadd>
 8008b98:	e7ee      	b.n	8008b78 <__s2b+0x68>
 8008b9a:	bf00      	nop
 8008b9c:	0800bf8e 	.word	0x0800bf8e
 8008ba0:	0800bfff 	.word	0x0800bfff

08008ba4 <__hi0bits>:
 8008ba4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008ba8:	4603      	mov	r3, r0
 8008baa:	bf36      	itet	cc
 8008bac:	0403      	lslcc	r3, r0, #16
 8008bae:	2000      	movcs	r0, #0
 8008bb0:	2010      	movcc	r0, #16
 8008bb2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008bb6:	bf3c      	itt	cc
 8008bb8:	021b      	lslcc	r3, r3, #8
 8008bba:	3008      	addcc	r0, #8
 8008bbc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008bc0:	bf3c      	itt	cc
 8008bc2:	011b      	lslcc	r3, r3, #4
 8008bc4:	3004      	addcc	r0, #4
 8008bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bca:	bf3c      	itt	cc
 8008bcc:	009b      	lslcc	r3, r3, #2
 8008bce:	3002      	addcc	r0, #2
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	db05      	blt.n	8008be0 <__hi0bits+0x3c>
 8008bd4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008bd8:	f100 0001 	add.w	r0, r0, #1
 8008bdc:	bf08      	it	eq
 8008bde:	2020      	moveq	r0, #32
 8008be0:	4770      	bx	lr

08008be2 <__lo0bits>:
 8008be2:	6803      	ldr	r3, [r0, #0]
 8008be4:	4602      	mov	r2, r0
 8008be6:	f013 0007 	ands.w	r0, r3, #7
 8008bea:	d00b      	beq.n	8008c04 <__lo0bits+0x22>
 8008bec:	07d9      	lsls	r1, r3, #31
 8008bee:	d421      	bmi.n	8008c34 <__lo0bits+0x52>
 8008bf0:	0798      	lsls	r0, r3, #30
 8008bf2:	bf49      	itett	mi
 8008bf4:	085b      	lsrmi	r3, r3, #1
 8008bf6:	089b      	lsrpl	r3, r3, #2
 8008bf8:	2001      	movmi	r0, #1
 8008bfa:	6013      	strmi	r3, [r2, #0]
 8008bfc:	bf5c      	itt	pl
 8008bfe:	6013      	strpl	r3, [r2, #0]
 8008c00:	2002      	movpl	r0, #2
 8008c02:	4770      	bx	lr
 8008c04:	b299      	uxth	r1, r3
 8008c06:	b909      	cbnz	r1, 8008c0c <__lo0bits+0x2a>
 8008c08:	0c1b      	lsrs	r3, r3, #16
 8008c0a:	2010      	movs	r0, #16
 8008c0c:	b2d9      	uxtb	r1, r3
 8008c0e:	b909      	cbnz	r1, 8008c14 <__lo0bits+0x32>
 8008c10:	3008      	adds	r0, #8
 8008c12:	0a1b      	lsrs	r3, r3, #8
 8008c14:	0719      	lsls	r1, r3, #28
 8008c16:	bf04      	itt	eq
 8008c18:	091b      	lsreq	r3, r3, #4
 8008c1a:	3004      	addeq	r0, #4
 8008c1c:	0799      	lsls	r1, r3, #30
 8008c1e:	bf04      	itt	eq
 8008c20:	089b      	lsreq	r3, r3, #2
 8008c22:	3002      	addeq	r0, #2
 8008c24:	07d9      	lsls	r1, r3, #31
 8008c26:	d403      	bmi.n	8008c30 <__lo0bits+0x4e>
 8008c28:	085b      	lsrs	r3, r3, #1
 8008c2a:	f100 0001 	add.w	r0, r0, #1
 8008c2e:	d003      	beq.n	8008c38 <__lo0bits+0x56>
 8008c30:	6013      	str	r3, [r2, #0]
 8008c32:	4770      	bx	lr
 8008c34:	2000      	movs	r0, #0
 8008c36:	4770      	bx	lr
 8008c38:	2020      	movs	r0, #32
 8008c3a:	4770      	bx	lr

08008c3c <__i2b>:
 8008c3c:	b510      	push	{r4, lr}
 8008c3e:	460c      	mov	r4, r1
 8008c40:	2101      	movs	r1, #1
 8008c42:	f7ff febd 	bl	80089c0 <_Balloc>
 8008c46:	4602      	mov	r2, r0
 8008c48:	b928      	cbnz	r0, 8008c56 <__i2b+0x1a>
 8008c4a:	4b05      	ldr	r3, [pc, #20]	@ (8008c60 <__i2b+0x24>)
 8008c4c:	4805      	ldr	r0, [pc, #20]	@ (8008c64 <__i2b+0x28>)
 8008c4e:	f240 1145 	movw	r1, #325	@ 0x145
 8008c52:	f7fe fbfd 	bl	8007450 <__assert_func>
 8008c56:	2301      	movs	r3, #1
 8008c58:	6144      	str	r4, [r0, #20]
 8008c5a:	6103      	str	r3, [r0, #16]
 8008c5c:	bd10      	pop	{r4, pc}
 8008c5e:	bf00      	nop
 8008c60:	0800bf8e 	.word	0x0800bf8e
 8008c64:	0800bfff 	.word	0x0800bfff

08008c68 <__multiply>:
 8008c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c6c:	4614      	mov	r4, r2
 8008c6e:	690a      	ldr	r2, [r1, #16]
 8008c70:	6923      	ldr	r3, [r4, #16]
 8008c72:	429a      	cmp	r2, r3
 8008c74:	bfa8      	it	ge
 8008c76:	4623      	movge	r3, r4
 8008c78:	460f      	mov	r7, r1
 8008c7a:	bfa4      	itt	ge
 8008c7c:	460c      	movge	r4, r1
 8008c7e:	461f      	movge	r7, r3
 8008c80:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008c84:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008c88:	68a3      	ldr	r3, [r4, #8]
 8008c8a:	6861      	ldr	r1, [r4, #4]
 8008c8c:	eb0a 0609 	add.w	r6, sl, r9
 8008c90:	42b3      	cmp	r3, r6
 8008c92:	b085      	sub	sp, #20
 8008c94:	bfb8      	it	lt
 8008c96:	3101      	addlt	r1, #1
 8008c98:	f7ff fe92 	bl	80089c0 <_Balloc>
 8008c9c:	b930      	cbnz	r0, 8008cac <__multiply+0x44>
 8008c9e:	4602      	mov	r2, r0
 8008ca0:	4b44      	ldr	r3, [pc, #272]	@ (8008db4 <__multiply+0x14c>)
 8008ca2:	4845      	ldr	r0, [pc, #276]	@ (8008db8 <__multiply+0x150>)
 8008ca4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008ca8:	f7fe fbd2 	bl	8007450 <__assert_func>
 8008cac:	f100 0514 	add.w	r5, r0, #20
 8008cb0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008cb4:	462b      	mov	r3, r5
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	4543      	cmp	r3, r8
 8008cba:	d321      	bcc.n	8008d00 <__multiply+0x98>
 8008cbc:	f107 0114 	add.w	r1, r7, #20
 8008cc0:	f104 0214 	add.w	r2, r4, #20
 8008cc4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008cc8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008ccc:	9302      	str	r3, [sp, #8]
 8008cce:	1b13      	subs	r3, r2, r4
 8008cd0:	3b15      	subs	r3, #21
 8008cd2:	f023 0303 	bic.w	r3, r3, #3
 8008cd6:	3304      	adds	r3, #4
 8008cd8:	f104 0715 	add.w	r7, r4, #21
 8008cdc:	42ba      	cmp	r2, r7
 8008cde:	bf38      	it	cc
 8008ce0:	2304      	movcc	r3, #4
 8008ce2:	9301      	str	r3, [sp, #4]
 8008ce4:	9b02      	ldr	r3, [sp, #8]
 8008ce6:	9103      	str	r1, [sp, #12]
 8008ce8:	428b      	cmp	r3, r1
 8008cea:	d80c      	bhi.n	8008d06 <__multiply+0x9e>
 8008cec:	2e00      	cmp	r6, #0
 8008cee:	dd03      	ble.n	8008cf8 <__multiply+0x90>
 8008cf0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d05b      	beq.n	8008db0 <__multiply+0x148>
 8008cf8:	6106      	str	r6, [r0, #16]
 8008cfa:	b005      	add	sp, #20
 8008cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d00:	f843 2b04 	str.w	r2, [r3], #4
 8008d04:	e7d8      	b.n	8008cb8 <__multiply+0x50>
 8008d06:	f8b1 a000 	ldrh.w	sl, [r1]
 8008d0a:	f1ba 0f00 	cmp.w	sl, #0
 8008d0e:	d024      	beq.n	8008d5a <__multiply+0xf2>
 8008d10:	f104 0e14 	add.w	lr, r4, #20
 8008d14:	46a9      	mov	r9, r5
 8008d16:	f04f 0c00 	mov.w	ip, #0
 8008d1a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008d1e:	f8d9 3000 	ldr.w	r3, [r9]
 8008d22:	fa1f fb87 	uxth.w	fp, r7
 8008d26:	b29b      	uxth	r3, r3
 8008d28:	fb0a 330b 	mla	r3, sl, fp, r3
 8008d2c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008d30:	f8d9 7000 	ldr.w	r7, [r9]
 8008d34:	4463      	add	r3, ip
 8008d36:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008d3a:	fb0a c70b 	mla	r7, sl, fp, ip
 8008d3e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008d42:	b29b      	uxth	r3, r3
 8008d44:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008d48:	4572      	cmp	r2, lr
 8008d4a:	f849 3b04 	str.w	r3, [r9], #4
 8008d4e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008d52:	d8e2      	bhi.n	8008d1a <__multiply+0xb2>
 8008d54:	9b01      	ldr	r3, [sp, #4]
 8008d56:	f845 c003 	str.w	ip, [r5, r3]
 8008d5a:	9b03      	ldr	r3, [sp, #12]
 8008d5c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008d60:	3104      	adds	r1, #4
 8008d62:	f1b9 0f00 	cmp.w	r9, #0
 8008d66:	d021      	beq.n	8008dac <__multiply+0x144>
 8008d68:	682b      	ldr	r3, [r5, #0]
 8008d6a:	f104 0c14 	add.w	ip, r4, #20
 8008d6e:	46ae      	mov	lr, r5
 8008d70:	f04f 0a00 	mov.w	sl, #0
 8008d74:	f8bc b000 	ldrh.w	fp, [ip]
 8008d78:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008d7c:	fb09 770b 	mla	r7, r9, fp, r7
 8008d80:	4457      	add	r7, sl
 8008d82:	b29b      	uxth	r3, r3
 8008d84:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008d88:	f84e 3b04 	str.w	r3, [lr], #4
 8008d8c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008d90:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008d94:	f8be 3000 	ldrh.w	r3, [lr]
 8008d98:	fb09 330a 	mla	r3, r9, sl, r3
 8008d9c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008da0:	4562      	cmp	r2, ip
 8008da2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008da6:	d8e5      	bhi.n	8008d74 <__multiply+0x10c>
 8008da8:	9f01      	ldr	r7, [sp, #4]
 8008daa:	51eb      	str	r3, [r5, r7]
 8008dac:	3504      	adds	r5, #4
 8008dae:	e799      	b.n	8008ce4 <__multiply+0x7c>
 8008db0:	3e01      	subs	r6, #1
 8008db2:	e79b      	b.n	8008cec <__multiply+0x84>
 8008db4:	0800bf8e 	.word	0x0800bf8e
 8008db8:	0800bfff 	.word	0x0800bfff

08008dbc <__pow5mult>:
 8008dbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008dc0:	4615      	mov	r5, r2
 8008dc2:	f012 0203 	ands.w	r2, r2, #3
 8008dc6:	4607      	mov	r7, r0
 8008dc8:	460e      	mov	r6, r1
 8008dca:	d007      	beq.n	8008ddc <__pow5mult+0x20>
 8008dcc:	4c25      	ldr	r4, [pc, #148]	@ (8008e64 <__pow5mult+0xa8>)
 8008dce:	3a01      	subs	r2, #1
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008dd6:	f7ff fe55 	bl	8008a84 <__multadd>
 8008dda:	4606      	mov	r6, r0
 8008ddc:	10ad      	asrs	r5, r5, #2
 8008dde:	d03d      	beq.n	8008e5c <__pow5mult+0xa0>
 8008de0:	69fc      	ldr	r4, [r7, #28]
 8008de2:	b97c      	cbnz	r4, 8008e04 <__pow5mult+0x48>
 8008de4:	2010      	movs	r0, #16
 8008de6:	f7ff fd23 	bl	8008830 <malloc>
 8008dea:	4602      	mov	r2, r0
 8008dec:	61f8      	str	r0, [r7, #28]
 8008dee:	b928      	cbnz	r0, 8008dfc <__pow5mult+0x40>
 8008df0:	4b1d      	ldr	r3, [pc, #116]	@ (8008e68 <__pow5mult+0xac>)
 8008df2:	481e      	ldr	r0, [pc, #120]	@ (8008e6c <__pow5mult+0xb0>)
 8008df4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008df8:	f7fe fb2a 	bl	8007450 <__assert_func>
 8008dfc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008e00:	6004      	str	r4, [r0, #0]
 8008e02:	60c4      	str	r4, [r0, #12]
 8008e04:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008e08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008e0c:	b94c      	cbnz	r4, 8008e22 <__pow5mult+0x66>
 8008e0e:	f240 2171 	movw	r1, #625	@ 0x271
 8008e12:	4638      	mov	r0, r7
 8008e14:	f7ff ff12 	bl	8008c3c <__i2b>
 8008e18:	2300      	movs	r3, #0
 8008e1a:	f8c8 0008 	str.w	r0, [r8, #8]
 8008e1e:	4604      	mov	r4, r0
 8008e20:	6003      	str	r3, [r0, #0]
 8008e22:	f04f 0900 	mov.w	r9, #0
 8008e26:	07eb      	lsls	r3, r5, #31
 8008e28:	d50a      	bpl.n	8008e40 <__pow5mult+0x84>
 8008e2a:	4631      	mov	r1, r6
 8008e2c:	4622      	mov	r2, r4
 8008e2e:	4638      	mov	r0, r7
 8008e30:	f7ff ff1a 	bl	8008c68 <__multiply>
 8008e34:	4631      	mov	r1, r6
 8008e36:	4680      	mov	r8, r0
 8008e38:	4638      	mov	r0, r7
 8008e3a:	f7ff fe01 	bl	8008a40 <_Bfree>
 8008e3e:	4646      	mov	r6, r8
 8008e40:	106d      	asrs	r5, r5, #1
 8008e42:	d00b      	beq.n	8008e5c <__pow5mult+0xa0>
 8008e44:	6820      	ldr	r0, [r4, #0]
 8008e46:	b938      	cbnz	r0, 8008e58 <__pow5mult+0x9c>
 8008e48:	4622      	mov	r2, r4
 8008e4a:	4621      	mov	r1, r4
 8008e4c:	4638      	mov	r0, r7
 8008e4e:	f7ff ff0b 	bl	8008c68 <__multiply>
 8008e52:	6020      	str	r0, [r4, #0]
 8008e54:	f8c0 9000 	str.w	r9, [r0]
 8008e58:	4604      	mov	r4, r0
 8008e5a:	e7e4      	b.n	8008e26 <__pow5mult+0x6a>
 8008e5c:	4630      	mov	r0, r6
 8008e5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e62:	bf00      	nop
 8008e64:	0800c058 	.word	0x0800c058
 8008e68:	0800be74 	.word	0x0800be74
 8008e6c:	0800bfff 	.word	0x0800bfff

08008e70 <__lshift>:
 8008e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e74:	460c      	mov	r4, r1
 8008e76:	6849      	ldr	r1, [r1, #4]
 8008e78:	6923      	ldr	r3, [r4, #16]
 8008e7a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008e7e:	68a3      	ldr	r3, [r4, #8]
 8008e80:	4607      	mov	r7, r0
 8008e82:	4691      	mov	r9, r2
 8008e84:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008e88:	f108 0601 	add.w	r6, r8, #1
 8008e8c:	42b3      	cmp	r3, r6
 8008e8e:	db0b      	blt.n	8008ea8 <__lshift+0x38>
 8008e90:	4638      	mov	r0, r7
 8008e92:	f7ff fd95 	bl	80089c0 <_Balloc>
 8008e96:	4605      	mov	r5, r0
 8008e98:	b948      	cbnz	r0, 8008eae <__lshift+0x3e>
 8008e9a:	4602      	mov	r2, r0
 8008e9c:	4b28      	ldr	r3, [pc, #160]	@ (8008f40 <__lshift+0xd0>)
 8008e9e:	4829      	ldr	r0, [pc, #164]	@ (8008f44 <__lshift+0xd4>)
 8008ea0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008ea4:	f7fe fad4 	bl	8007450 <__assert_func>
 8008ea8:	3101      	adds	r1, #1
 8008eaa:	005b      	lsls	r3, r3, #1
 8008eac:	e7ee      	b.n	8008e8c <__lshift+0x1c>
 8008eae:	2300      	movs	r3, #0
 8008eb0:	f100 0114 	add.w	r1, r0, #20
 8008eb4:	f100 0210 	add.w	r2, r0, #16
 8008eb8:	4618      	mov	r0, r3
 8008eba:	4553      	cmp	r3, sl
 8008ebc:	db33      	blt.n	8008f26 <__lshift+0xb6>
 8008ebe:	6920      	ldr	r0, [r4, #16]
 8008ec0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008ec4:	f104 0314 	add.w	r3, r4, #20
 8008ec8:	f019 091f 	ands.w	r9, r9, #31
 8008ecc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008ed0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008ed4:	d02b      	beq.n	8008f2e <__lshift+0xbe>
 8008ed6:	f1c9 0e20 	rsb	lr, r9, #32
 8008eda:	468a      	mov	sl, r1
 8008edc:	2200      	movs	r2, #0
 8008ede:	6818      	ldr	r0, [r3, #0]
 8008ee0:	fa00 f009 	lsl.w	r0, r0, r9
 8008ee4:	4310      	orrs	r0, r2
 8008ee6:	f84a 0b04 	str.w	r0, [sl], #4
 8008eea:	f853 2b04 	ldr.w	r2, [r3], #4
 8008eee:	459c      	cmp	ip, r3
 8008ef0:	fa22 f20e 	lsr.w	r2, r2, lr
 8008ef4:	d8f3      	bhi.n	8008ede <__lshift+0x6e>
 8008ef6:	ebac 0304 	sub.w	r3, ip, r4
 8008efa:	3b15      	subs	r3, #21
 8008efc:	f023 0303 	bic.w	r3, r3, #3
 8008f00:	3304      	adds	r3, #4
 8008f02:	f104 0015 	add.w	r0, r4, #21
 8008f06:	4584      	cmp	ip, r0
 8008f08:	bf38      	it	cc
 8008f0a:	2304      	movcc	r3, #4
 8008f0c:	50ca      	str	r2, [r1, r3]
 8008f0e:	b10a      	cbz	r2, 8008f14 <__lshift+0xa4>
 8008f10:	f108 0602 	add.w	r6, r8, #2
 8008f14:	3e01      	subs	r6, #1
 8008f16:	4638      	mov	r0, r7
 8008f18:	612e      	str	r6, [r5, #16]
 8008f1a:	4621      	mov	r1, r4
 8008f1c:	f7ff fd90 	bl	8008a40 <_Bfree>
 8008f20:	4628      	mov	r0, r5
 8008f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f26:	f842 0f04 	str.w	r0, [r2, #4]!
 8008f2a:	3301      	adds	r3, #1
 8008f2c:	e7c5      	b.n	8008eba <__lshift+0x4a>
 8008f2e:	3904      	subs	r1, #4
 8008f30:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f34:	f841 2f04 	str.w	r2, [r1, #4]!
 8008f38:	459c      	cmp	ip, r3
 8008f3a:	d8f9      	bhi.n	8008f30 <__lshift+0xc0>
 8008f3c:	e7ea      	b.n	8008f14 <__lshift+0xa4>
 8008f3e:	bf00      	nop
 8008f40:	0800bf8e 	.word	0x0800bf8e
 8008f44:	0800bfff 	.word	0x0800bfff

08008f48 <__mcmp>:
 8008f48:	690a      	ldr	r2, [r1, #16]
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	6900      	ldr	r0, [r0, #16]
 8008f4e:	1a80      	subs	r0, r0, r2
 8008f50:	b530      	push	{r4, r5, lr}
 8008f52:	d10e      	bne.n	8008f72 <__mcmp+0x2a>
 8008f54:	3314      	adds	r3, #20
 8008f56:	3114      	adds	r1, #20
 8008f58:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008f5c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008f60:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008f64:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008f68:	4295      	cmp	r5, r2
 8008f6a:	d003      	beq.n	8008f74 <__mcmp+0x2c>
 8008f6c:	d205      	bcs.n	8008f7a <__mcmp+0x32>
 8008f6e:	f04f 30ff 	mov.w	r0, #4294967295
 8008f72:	bd30      	pop	{r4, r5, pc}
 8008f74:	42a3      	cmp	r3, r4
 8008f76:	d3f3      	bcc.n	8008f60 <__mcmp+0x18>
 8008f78:	e7fb      	b.n	8008f72 <__mcmp+0x2a>
 8008f7a:	2001      	movs	r0, #1
 8008f7c:	e7f9      	b.n	8008f72 <__mcmp+0x2a>
	...

08008f80 <__mdiff>:
 8008f80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f84:	4689      	mov	r9, r1
 8008f86:	4606      	mov	r6, r0
 8008f88:	4611      	mov	r1, r2
 8008f8a:	4648      	mov	r0, r9
 8008f8c:	4614      	mov	r4, r2
 8008f8e:	f7ff ffdb 	bl	8008f48 <__mcmp>
 8008f92:	1e05      	subs	r5, r0, #0
 8008f94:	d112      	bne.n	8008fbc <__mdiff+0x3c>
 8008f96:	4629      	mov	r1, r5
 8008f98:	4630      	mov	r0, r6
 8008f9a:	f7ff fd11 	bl	80089c0 <_Balloc>
 8008f9e:	4602      	mov	r2, r0
 8008fa0:	b928      	cbnz	r0, 8008fae <__mdiff+0x2e>
 8008fa2:	4b3f      	ldr	r3, [pc, #252]	@ (80090a0 <__mdiff+0x120>)
 8008fa4:	f240 2137 	movw	r1, #567	@ 0x237
 8008fa8:	483e      	ldr	r0, [pc, #248]	@ (80090a4 <__mdiff+0x124>)
 8008faa:	f7fe fa51 	bl	8007450 <__assert_func>
 8008fae:	2301      	movs	r3, #1
 8008fb0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008fb4:	4610      	mov	r0, r2
 8008fb6:	b003      	add	sp, #12
 8008fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fbc:	bfbc      	itt	lt
 8008fbe:	464b      	movlt	r3, r9
 8008fc0:	46a1      	movlt	r9, r4
 8008fc2:	4630      	mov	r0, r6
 8008fc4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008fc8:	bfba      	itte	lt
 8008fca:	461c      	movlt	r4, r3
 8008fcc:	2501      	movlt	r5, #1
 8008fce:	2500      	movge	r5, #0
 8008fd0:	f7ff fcf6 	bl	80089c0 <_Balloc>
 8008fd4:	4602      	mov	r2, r0
 8008fd6:	b918      	cbnz	r0, 8008fe0 <__mdiff+0x60>
 8008fd8:	4b31      	ldr	r3, [pc, #196]	@ (80090a0 <__mdiff+0x120>)
 8008fda:	f240 2145 	movw	r1, #581	@ 0x245
 8008fde:	e7e3      	b.n	8008fa8 <__mdiff+0x28>
 8008fe0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008fe4:	6926      	ldr	r6, [r4, #16]
 8008fe6:	60c5      	str	r5, [r0, #12]
 8008fe8:	f109 0310 	add.w	r3, r9, #16
 8008fec:	f109 0514 	add.w	r5, r9, #20
 8008ff0:	f104 0e14 	add.w	lr, r4, #20
 8008ff4:	f100 0b14 	add.w	fp, r0, #20
 8008ff8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008ffc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009000:	9301      	str	r3, [sp, #4]
 8009002:	46d9      	mov	r9, fp
 8009004:	f04f 0c00 	mov.w	ip, #0
 8009008:	9b01      	ldr	r3, [sp, #4]
 800900a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800900e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009012:	9301      	str	r3, [sp, #4]
 8009014:	fa1f f38a 	uxth.w	r3, sl
 8009018:	4619      	mov	r1, r3
 800901a:	b283      	uxth	r3, r0
 800901c:	1acb      	subs	r3, r1, r3
 800901e:	0c00      	lsrs	r0, r0, #16
 8009020:	4463      	add	r3, ip
 8009022:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009026:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800902a:	b29b      	uxth	r3, r3
 800902c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009030:	4576      	cmp	r6, lr
 8009032:	f849 3b04 	str.w	r3, [r9], #4
 8009036:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800903a:	d8e5      	bhi.n	8009008 <__mdiff+0x88>
 800903c:	1b33      	subs	r3, r6, r4
 800903e:	3b15      	subs	r3, #21
 8009040:	f023 0303 	bic.w	r3, r3, #3
 8009044:	3415      	adds	r4, #21
 8009046:	3304      	adds	r3, #4
 8009048:	42a6      	cmp	r6, r4
 800904a:	bf38      	it	cc
 800904c:	2304      	movcc	r3, #4
 800904e:	441d      	add	r5, r3
 8009050:	445b      	add	r3, fp
 8009052:	461e      	mov	r6, r3
 8009054:	462c      	mov	r4, r5
 8009056:	4544      	cmp	r4, r8
 8009058:	d30e      	bcc.n	8009078 <__mdiff+0xf8>
 800905a:	f108 0103 	add.w	r1, r8, #3
 800905e:	1b49      	subs	r1, r1, r5
 8009060:	f021 0103 	bic.w	r1, r1, #3
 8009064:	3d03      	subs	r5, #3
 8009066:	45a8      	cmp	r8, r5
 8009068:	bf38      	it	cc
 800906a:	2100      	movcc	r1, #0
 800906c:	440b      	add	r3, r1
 800906e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009072:	b191      	cbz	r1, 800909a <__mdiff+0x11a>
 8009074:	6117      	str	r7, [r2, #16]
 8009076:	e79d      	b.n	8008fb4 <__mdiff+0x34>
 8009078:	f854 1b04 	ldr.w	r1, [r4], #4
 800907c:	46e6      	mov	lr, ip
 800907e:	0c08      	lsrs	r0, r1, #16
 8009080:	fa1c fc81 	uxtah	ip, ip, r1
 8009084:	4471      	add	r1, lr
 8009086:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800908a:	b289      	uxth	r1, r1
 800908c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009090:	f846 1b04 	str.w	r1, [r6], #4
 8009094:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009098:	e7dd      	b.n	8009056 <__mdiff+0xd6>
 800909a:	3f01      	subs	r7, #1
 800909c:	e7e7      	b.n	800906e <__mdiff+0xee>
 800909e:	bf00      	nop
 80090a0:	0800bf8e 	.word	0x0800bf8e
 80090a4:	0800bfff 	.word	0x0800bfff

080090a8 <__ulp>:
 80090a8:	b082      	sub	sp, #8
 80090aa:	ed8d 0b00 	vstr	d0, [sp]
 80090ae:	9a01      	ldr	r2, [sp, #4]
 80090b0:	4b0f      	ldr	r3, [pc, #60]	@ (80090f0 <__ulp+0x48>)
 80090b2:	4013      	ands	r3, r2
 80090b4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	dc08      	bgt.n	80090ce <__ulp+0x26>
 80090bc:	425b      	negs	r3, r3
 80090be:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80090c2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80090c6:	da04      	bge.n	80090d2 <__ulp+0x2a>
 80090c8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80090cc:	4113      	asrs	r3, r2
 80090ce:	2200      	movs	r2, #0
 80090d0:	e008      	b.n	80090e4 <__ulp+0x3c>
 80090d2:	f1a2 0314 	sub.w	r3, r2, #20
 80090d6:	2b1e      	cmp	r3, #30
 80090d8:	bfda      	itte	le
 80090da:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80090de:	40da      	lsrle	r2, r3
 80090e0:	2201      	movgt	r2, #1
 80090e2:	2300      	movs	r3, #0
 80090e4:	4619      	mov	r1, r3
 80090e6:	4610      	mov	r0, r2
 80090e8:	ec41 0b10 	vmov	d0, r0, r1
 80090ec:	b002      	add	sp, #8
 80090ee:	4770      	bx	lr
 80090f0:	7ff00000 	.word	0x7ff00000

080090f4 <__b2d>:
 80090f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090f8:	6906      	ldr	r6, [r0, #16]
 80090fa:	f100 0814 	add.w	r8, r0, #20
 80090fe:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009102:	1f37      	subs	r7, r6, #4
 8009104:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009108:	4610      	mov	r0, r2
 800910a:	f7ff fd4b 	bl	8008ba4 <__hi0bits>
 800910e:	f1c0 0320 	rsb	r3, r0, #32
 8009112:	280a      	cmp	r0, #10
 8009114:	600b      	str	r3, [r1, #0]
 8009116:	491b      	ldr	r1, [pc, #108]	@ (8009184 <__b2d+0x90>)
 8009118:	dc15      	bgt.n	8009146 <__b2d+0x52>
 800911a:	f1c0 0c0b 	rsb	ip, r0, #11
 800911e:	fa22 f30c 	lsr.w	r3, r2, ip
 8009122:	45b8      	cmp	r8, r7
 8009124:	ea43 0501 	orr.w	r5, r3, r1
 8009128:	bf34      	ite	cc
 800912a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800912e:	2300      	movcs	r3, #0
 8009130:	3015      	adds	r0, #21
 8009132:	fa02 f000 	lsl.w	r0, r2, r0
 8009136:	fa23 f30c 	lsr.w	r3, r3, ip
 800913a:	4303      	orrs	r3, r0
 800913c:	461c      	mov	r4, r3
 800913e:	ec45 4b10 	vmov	d0, r4, r5
 8009142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009146:	45b8      	cmp	r8, r7
 8009148:	bf3a      	itte	cc
 800914a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800914e:	f1a6 0708 	subcc.w	r7, r6, #8
 8009152:	2300      	movcs	r3, #0
 8009154:	380b      	subs	r0, #11
 8009156:	d012      	beq.n	800917e <__b2d+0x8a>
 8009158:	f1c0 0120 	rsb	r1, r0, #32
 800915c:	fa23 f401 	lsr.w	r4, r3, r1
 8009160:	4082      	lsls	r2, r0
 8009162:	4322      	orrs	r2, r4
 8009164:	4547      	cmp	r7, r8
 8009166:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800916a:	bf8c      	ite	hi
 800916c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009170:	2200      	movls	r2, #0
 8009172:	4083      	lsls	r3, r0
 8009174:	40ca      	lsrs	r2, r1
 8009176:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800917a:	4313      	orrs	r3, r2
 800917c:	e7de      	b.n	800913c <__b2d+0x48>
 800917e:	ea42 0501 	orr.w	r5, r2, r1
 8009182:	e7db      	b.n	800913c <__b2d+0x48>
 8009184:	3ff00000 	.word	0x3ff00000

08009188 <__d2b>:
 8009188:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800918c:	460f      	mov	r7, r1
 800918e:	2101      	movs	r1, #1
 8009190:	ec59 8b10 	vmov	r8, r9, d0
 8009194:	4616      	mov	r6, r2
 8009196:	f7ff fc13 	bl	80089c0 <_Balloc>
 800919a:	4604      	mov	r4, r0
 800919c:	b930      	cbnz	r0, 80091ac <__d2b+0x24>
 800919e:	4602      	mov	r2, r0
 80091a0:	4b23      	ldr	r3, [pc, #140]	@ (8009230 <__d2b+0xa8>)
 80091a2:	4824      	ldr	r0, [pc, #144]	@ (8009234 <__d2b+0xac>)
 80091a4:	f240 310f 	movw	r1, #783	@ 0x30f
 80091a8:	f7fe f952 	bl	8007450 <__assert_func>
 80091ac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80091b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80091b4:	b10d      	cbz	r5, 80091ba <__d2b+0x32>
 80091b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80091ba:	9301      	str	r3, [sp, #4]
 80091bc:	f1b8 0300 	subs.w	r3, r8, #0
 80091c0:	d023      	beq.n	800920a <__d2b+0x82>
 80091c2:	4668      	mov	r0, sp
 80091c4:	9300      	str	r3, [sp, #0]
 80091c6:	f7ff fd0c 	bl	8008be2 <__lo0bits>
 80091ca:	e9dd 1200 	ldrd	r1, r2, [sp]
 80091ce:	b1d0      	cbz	r0, 8009206 <__d2b+0x7e>
 80091d0:	f1c0 0320 	rsb	r3, r0, #32
 80091d4:	fa02 f303 	lsl.w	r3, r2, r3
 80091d8:	430b      	orrs	r3, r1
 80091da:	40c2      	lsrs	r2, r0
 80091dc:	6163      	str	r3, [r4, #20]
 80091de:	9201      	str	r2, [sp, #4]
 80091e0:	9b01      	ldr	r3, [sp, #4]
 80091e2:	61a3      	str	r3, [r4, #24]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	bf0c      	ite	eq
 80091e8:	2201      	moveq	r2, #1
 80091ea:	2202      	movne	r2, #2
 80091ec:	6122      	str	r2, [r4, #16]
 80091ee:	b1a5      	cbz	r5, 800921a <__d2b+0x92>
 80091f0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80091f4:	4405      	add	r5, r0
 80091f6:	603d      	str	r5, [r7, #0]
 80091f8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80091fc:	6030      	str	r0, [r6, #0]
 80091fe:	4620      	mov	r0, r4
 8009200:	b003      	add	sp, #12
 8009202:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009206:	6161      	str	r1, [r4, #20]
 8009208:	e7ea      	b.n	80091e0 <__d2b+0x58>
 800920a:	a801      	add	r0, sp, #4
 800920c:	f7ff fce9 	bl	8008be2 <__lo0bits>
 8009210:	9b01      	ldr	r3, [sp, #4]
 8009212:	6163      	str	r3, [r4, #20]
 8009214:	3020      	adds	r0, #32
 8009216:	2201      	movs	r2, #1
 8009218:	e7e8      	b.n	80091ec <__d2b+0x64>
 800921a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800921e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009222:	6038      	str	r0, [r7, #0]
 8009224:	6918      	ldr	r0, [r3, #16]
 8009226:	f7ff fcbd 	bl	8008ba4 <__hi0bits>
 800922a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800922e:	e7e5      	b.n	80091fc <__d2b+0x74>
 8009230:	0800bf8e 	.word	0x0800bf8e
 8009234:	0800bfff 	.word	0x0800bfff

08009238 <__ratio>:
 8009238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800923c:	b085      	sub	sp, #20
 800923e:	e9cd 1000 	strd	r1, r0, [sp]
 8009242:	a902      	add	r1, sp, #8
 8009244:	f7ff ff56 	bl	80090f4 <__b2d>
 8009248:	9800      	ldr	r0, [sp, #0]
 800924a:	a903      	add	r1, sp, #12
 800924c:	ec55 4b10 	vmov	r4, r5, d0
 8009250:	f7ff ff50 	bl	80090f4 <__b2d>
 8009254:	9b01      	ldr	r3, [sp, #4]
 8009256:	6919      	ldr	r1, [r3, #16]
 8009258:	9b00      	ldr	r3, [sp, #0]
 800925a:	691b      	ldr	r3, [r3, #16]
 800925c:	1ac9      	subs	r1, r1, r3
 800925e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009262:	1a9b      	subs	r3, r3, r2
 8009264:	ec5b ab10 	vmov	sl, fp, d0
 8009268:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800926c:	2b00      	cmp	r3, #0
 800926e:	bfce      	itee	gt
 8009270:	462a      	movgt	r2, r5
 8009272:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009276:	465a      	movle	r2, fp
 8009278:	462f      	mov	r7, r5
 800927a:	46d9      	mov	r9, fp
 800927c:	bfcc      	ite	gt
 800927e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009282:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009286:	464b      	mov	r3, r9
 8009288:	4652      	mov	r2, sl
 800928a:	4620      	mov	r0, r4
 800928c:	4639      	mov	r1, r7
 800928e:	f7f7 fadd 	bl	800084c <__aeabi_ddiv>
 8009292:	ec41 0b10 	vmov	d0, r0, r1
 8009296:	b005      	add	sp, #20
 8009298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800929c <__copybits>:
 800929c:	3901      	subs	r1, #1
 800929e:	b570      	push	{r4, r5, r6, lr}
 80092a0:	1149      	asrs	r1, r1, #5
 80092a2:	6914      	ldr	r4, [r2, #16]
 80092a4:	3101      	adds	r1, #1
 80092a6:	f102 0314 	add.w	r3, r2, #20
 80092aa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80092ae:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80092b2:	1f05      	subs	r5, r0, #4
 80092b4:	42a3      	cmp	r3, r4
 80092b6:	d30c      	bcc.n	80092d2 <__copybits+0x36>
 80092b8:	1aa3      	subs	r3, r4, r2
 80092ba:	3b11      	subs	r3, #17
 80092bc:	f023 0303 	bic.w	r3, r3, #3
 80092c0:	3211      	adds	r2, #17
 80092c2:	42a2      	cmp	r2, r4
 80092c4:	bf88      	it	hi
 80092c6:	2300      	movhi	r3, #0
 80092c8:	4418      	add	r0, r3
 80092ca:	2300      	movs	r3, #0
 80092cc:	4288      	cmp	r0, r1
 80092ce:	d305      	bcc.n	80092dc <__copybits+0x40>
 80092d0:	bd70      	pop	{r4, r5, r6, pc}
 80092d2:	f853 6b04 	ldr.w	r6, [r3], #4
 80092d6:	f845 6f04 	str.w	r6, [r5, #4]!
 80092da:	e7eb      	b.n	80092b4 <__copybits+0x18>
 80092dc:	f840 3b04 	str.w	r3, [r0], #4
 80092e0:	e7f4      	b.n	80092cc <__copybits+0x30>

080092e2 <__any_on>:
 80092e2:	f100 0214 	add.w	r2, r0, #20
 80092e6:	6900      	ldr	r0, [r0, #16]
 80092e8:	114b      	asrs	r3, r1, #5
 80092ea:	4298      	cmp	r0, r3
 80092ec:	b510      	push	{r4, lr}
 80092ee:	db11      	blt.n	8009314 <__any_on+0x32>
 80092f0:	dd0a      	ble.n	8009308 <__any_on+0x26>
 80092f2:	f011 011f 	ands.w	r1, r1, #31
 80092f6:	d007      	beq.n	8009308 <__any_on+0x26>
 80092f8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80092fc:	fa24 f001 	lsr.w	r0, r4, r1
 8009300:	fa00 f101 	lsl.w	r1, r0, r1
 8009304:	428c      	cmp	r4, r1
 8009306:	d10b      	bne.n	8009320 <__any_on+0x3e>
 8009308:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800930c:	4293      	cmp	r3, r2
 800930e:	d803      	bhi.n	8009318 <__any_on+0x36>
 8009310:	2000      	movs	r0, #0
 8009312:	bd10      	pop	{r4, pc}
 8009314:	4603      	mov	r3, r0
 8009316:	e7f7      	b.n	8009308 <__any_on+0x26>
 8009318:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800931c:	2900      	cmp	r1, #0
 800931e:	d0f5      	beq.n	800930c <__any_on+0x2a>
 8009320:	2001      	movs	r0, #1
 8009322:	e7f6      	b.n	8009312 <__any_on+0x30>

08009324 <__ascii_wctomb>:
 8009324:	4603      	mov	r3, r0
 8009326:	4608      	mov	r0, r1
 8009328:	b141      	cbz	r1, 800933c <__ascii_wctomb+0x18>
 800932a:	2aff      	cmp	r2, #255	@ 0xff
 800932c:	d904      	bls.n	8009338 <__ascii_wctomb+0x14>
 800932e:	228a      	movs	r2, #138	@ 0x8a
 8009330:	601a      	str	r2, [r3, #0]
 8009332:	f04f 30ff 	mov.w	r0, #4294967295
 8009336:	4770      	bx	lr
 8009338:	700a      	strb	r2, [r1, #0]
 800933a:	2001      	movs	r0, #1
 800933c:	4770      	bx	lr

0800933e <__ssputs_r>:
 800933e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009342:	688e      	ldr	r6, [r1, #8]
 8009344:	461f      	mov	r7, r3
 8009346:	42be      	cmp	r6, r7
 8009348:	680b      	ldr	r3, [r1, #0]
 800934a:	4682      	mov	sl, r0
 800934c:	460c      	mov	r4, r1
 800934e:	4690      	mov	r8, r2
 8009350:	d82d      	bhi.n	80093ae <__ssputs_r+0x70>
 8009352:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009356:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800935a:	d026      	beq.n	80093aa <__ssputs_r+0x6c>
 800935c:	6965      	ldr	r5, [r4, #20]
 800935e:	6909      	ldr	r1, [r1, #16]
 8009360:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009364:	eba3 0901 	sub.w	r9, r3, r1
 8009368:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800936c:	1c7b      	adds	r3, r7, #1
 800936e:	444b      	add	r3, r9
 8009370:	106d      	asrs	r5, r5, #1
 8009372:	429d      	cmp	r5, r3
 8009374:	bf38      	it	cc
 8009376:	461d      	movcc	r5, r3
 8009378:	0553      	lsls	r3, r2, #21
 800937a:	d527      	bpl.n	80093cc <__ssputs_r+0x8e>
 800937c:	4629      	mov	r1, r5
 800937e:	f7ff fa81 	bl	8008884 <_malloc_r>
 8009382:	4606      	mov	r6, r0
 8009384:	b360      	cbz	r0, 80093e0 <__ssputs_r+0xa2>
 8009386:	6921      	ldr	r1, [r4, #16]
 8009388:	464a      	mov	r2, r9
 800938a:	f7fe f848 	bl	800741e <memcpy>
 800938e:	89a3      	ldrh	r3, [r4, #12]
 8009390:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009394:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009398:	81a3      	strh	r3, [r4, #12]
 800939a:	6126      	str	r6, [r4, #16]
 800939c:	6165      	str	r5, [r4, #20]
 800939e:	444e      	add	r6, r9
 80093a0:	eba5 0509 	sub.w	r5, r5, r9
 80093a4:	6026      	str	r6, [r4, #0]
 80093a6:	60a5      	str	r5, [r4, #8]
 80093a8:	463e      	mov	r6, r7
 80093aa:	42be      	cmp	r6, r7
 80093ac:	d900      	bls.n	80093b0 <__ssputs_r+0x72>
 80093ae:	463e      	mov	r6, r7
 80093b0:	6820      	ldr	r0, [r4, #0]
 80093b2:	4632      	mov	r2, r6
 80093b4:	4641      	mov	r1, r8
 80093b6:	f000 f9d7 	bl	8009768 <memmove>
 80093ba:	68a3      	ldr	r3, [r4, #8]
 80093bc:	1b9b      	subs	r3, r3, r6
 80093be:	60a3      	str	r3, [r4, #8]
 80093c0:	6823      	ldr	r3, [r4, #0]
 80093c2:	4433      	add	r3, r6
 80093c4:	6023      	str	r3, [r4, #0]
 80093c6:	2000      	movs	r0, #0
 80093c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093cc:	462a      	mov	r2, r5
 80093ce:	f000 fa10 	bl	80097f2 <_realloc_r>
 80093d2:	4606      	mov	r6, r0
 80093d4:	2800      	cmp	r0, #0
 80093d6:	d1e0      	bne.n	800939a <__ssputs_r+0x5c>
 80093d8:	6921      	ldr	r1, [r4, #16]
 80093da:	4650      	mov	r0, sl
 80093dc:	f7fe fea4 	bl	8008128 <_free_r>
 80093e0:	230c      	movs	r3, #12
 80093e2:	f8ca 3000 	str.w	r3, [sl]
 80093e6:	89a3      	ldrh	r3, [r4, #12]
 80093e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80093ec:	81a3      	strh	r3, [r4, #12]
 80093ee:	f04f 30ff 	mov.w	r0, #4294967295
 80093f2:	e7e9      	b.n	80093c8 <__ssputs_r+0x8a>

080093f4 <_svfiprintf_r>:
 80093f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093f8:	4698      	mov	r8, r3
 80093fa:	898b      	ldrh	r3, [r1, #12]
 80093fc:	061b      	lsls	r3, r3, #24
 80093fe:	b09d      	sub	sp, #116	@ 0x74
 8009400:	4607      	mov	r7, r0
 8009402:	460d      	mov	r5, r1
 8009404:	4614      	mov	r4, r2
 8009406:	d510      	bpl.n	800942a <_svfiprintf_r+0x36>
 8009408:	690b      	ldr	r3, [r1, #16]
 800940a:	b973      	cbnz	r3, 800942a <_svfiprintf_r+0x36>
 800940c:	2140      	movs	r1, #64	@ 0x40
 800940e:	f7ff fa39 	bl	8008884 <_malloc_r>
 8009412:	6028      	str	r0, [r5, #0]
 8009414:	6128      	str	r0, [r5, #16]
 8009416:	b930      	cbnz	r0, 8009426 <_svfiprintf_r+0x32>
 8009418:	230c      	movs	r3, #12
 800941a:	603b      	str	r3, [r7, #0]
 800941c:	f04f 30ff 	mov.w	r0, #4294967295
 8009420:	b01d      	add	sp, #116	@ 0x74
 8009422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009426:	2340      	movs	r3, #64	@ 0x40
 8009428:	616b      	str	r3, [r5, #20]
 800942a:	2300      	movs	r3, #0
 800942c:	9309      	str	r3, [sp, #36]	@ 0x24
 800942e:	2320      	movs	r3, #32
 8009430:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009434:	f8cd 800c 	str.w	r8, [sp, #12]
 8009438:	2330      	movs	r3, #48	@ 0x30
 800943a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80095d8 <_svfiprintf_r+0x1e4>
 800943e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009442:	f04f 0901 	mov.w	r9, #1
 8009446:	4623      	mov	r3, r4
 8009448:	469a      	mov	sl, r3
 800944a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800944e:	b10a      	cbz	r2, 8009454 <_svfiprintf_r+0x60>
 8009450:	2a25      	cmp	r2, #37	@ 0x25
 8009452:	d1f9      	bne.n	8009448 <_svfiprintf_r+0x54>
 8009454:	ebba 0b04 	subs.w	fp, sl, r4
 8009458:	d00b      	beq.n	8009472 <_svfiprintf_r+0x7e>
 800945a:	465b      	mov	r3, fp
 800945c:	4622      	mov	r2, r4
 800945e:	4629      	mov	r1, r5
 8009460:	4638      	mov	r0, r7
 8009462:	f7ff ff6c 	bl	800933e <__ssputs_r>
 8009466:	3001      	adds	r0, #1
 8009468:	f000 80a7 	beq.w	80095ba <_svfiprintf_r+0x1c6>
 800946c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800946e:	445a      	add	r2, fp
 8009470:	9209      	str	r2, [sp, #36]	@ 0x24
 8009472:	f89a 3000 	ldrb.w	r3, [sl]
 8009476:	2b00      	cmp	r3, #0
 8009478:	f000 809f 	beq.w	80095ba <_svfiprintf_r+0x1c6>
 800947c:	2300      	movs	r3, #0
 800947e:	f04f 32ff 	mov.w	r2, #4294967295
 8009482:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009486:	f10a 0a01 	add.w	sl, sl, #1
 800948a:	9304      	str	r3, [sp, #16]
 800948c:	9307      	str	r3, [sp, #28]
 800948e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009492:	931a      	str	r3, [sp, #104]	@ 0x68
 8009494:	4654      	mov	r4, sl
 8009496:	2205      	movs	r2, #5
 8009498:	f814 1b01 	ldrb.w	r1, [r4], #1
 800949c:	484e      	ldr	r0, [pc, #312]	@ (80095d8 <_svfiprintf_r+0x1e4>)
 800949e:	f7f6 fe97 	bl	80001d0 <memchr>
 80094a2:	9a04      	ldr	r2, [sp, #16]
 80094a4:	b9d8      	cbnz	r0, 80094de <_svfiprintf_r+0xea>
 80094a6:	06d0      	lsls	r0, r2, #27
 80094a8:	bf44      	itt	mi
 80094aa:	2320      	movmi	r3, #32
 80094ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80094b0:	0711      	lsls	r1, r2, #28
 80094b2:	bf44      	itt	mi
 80094b4:	232b      	movmi	r3, #43	@ 0x2b
 80094b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80094ba:	f89a 3000 	ldrb.w	r3, [sl]
 80094be:	2b2a      	cmp	r3, #42	@ 0x2a
 80094c0:	d015      	beq.n	80094ee <_svfiprintf_r+0xfa>
 80094c2:	9a07      	ldr	r2, [sp, #28]
 80094c4:	4654      	mov	r4, sl
 80094c6:	2000      	movs	r0, #0
 80094c8:	f04f 0c0a 	mov.w	ip, #10
 80094cc:	4621      	mov	r1, r4
 80094ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80094d2:	3b30      	subs	r3, #48	@ 0x30
 80094d4:	2b09      	cmp	r3, #9
 80094d6:	d94b      	bls.n	8009570 <_svfiprintf_r+0x17c>
 80094d8:	b1b0      	cbz	r0, 8009508 <_svfiprintf_r+0x114>
 80094da:	9207      	str	r2, [sp, #28]
 80094dc:	e014      	b.n	8009508 <_svfiprintf_r+0x114>
 80094de:	eba0 0308 	sub.w	r3, r0, r8
 80094e2:	fa09 f303 	lsl.w	r3, r9, r3
 80094e6:	4313      	orrs	r3, r2
 80094e8:	9304      	str	r3, [sp, #16]
 80094ea:	46a2      	mov	sl, r4
 80094ec:	e7d2      	b.n	8009494 <_svfiprintf_r+0xa0>
 80094ee:	9b03      	ldr	r3, [sp, #12]
 80094f0:	1d19      	adds	r1, r3, #4
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	9103      	str	r1, [sp, #12]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	bfbb      	ittet	lt
 80094fa:	425b      	neglt	r3, r3
 80094fc:	f042 0202 	orrlt.w	r2, r2, #2
 8009500:	9307      	strge	r3, [sp, #28]
 8009502:	9307      	strlt	r3, [sp, #28]
 8009504:	bfb8      	it	lt
 8009506:	9204      	strlt	r2, [sp, #16]
 8009508:	7823      	ldrb	r3, [r4, #0]
 800950a:	2b2e      	cmp	r3, #46	@ 0x2e
 800950c:	d10a      	bne.n	8009524 <_svfiprintf_r+0x130>
 800950e:	7863      	ldrb	r3, [r4, #1]
 8009510:	2b2a      	cmp	r3, #42	@ 0x2a
 8009512:	d132      	bne.n	800957a <_svfiprintf_r+0x186>
 8009514:	9b03      	ldr	r3, [sp, #12]
 8009516:	1d1a      	adds	r2, r3, #4
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	9203      	str	r2, [sp, #12]
 800951c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009520:	3402      	adds	r4, #2
 8009522:	9305      	str	r3, [sp, #20]
 8009524:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80095e8 <_svfiprintf_r+0x1f4>
 8009528:	7821      	ldrb	r1, [r4, #0]
 800952a:	2203      	movs	r2, #3
 800952c:	4650      	mov	r0, sl
 800952e:	f7f6 fe4f 	bl	80001d0 <memchr>
 8009532:	b138      	cbz	r0, 8009544 <_svfiprintf_r+0x150>
 8009534:	9b04      	ldr	r3, [sp, #16]
 8009536:	eba0 000a 	sub.w	r0, r0, sl
 800953a:	2240      	movs	r2, #64	@ 0x40
 800953c:	4082      	lsls	r2, r0
 800953e:	4313      	orrs	r3, r2
 8009540:	3401      	adds	r4, #1
 8009542:	9304      	str	r3, [sp, #16]
 8009544:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009548:	4824      	ldr	r0, [pc, #144]	@ (80095dc <_svfiprintf_r+0x1e8>)
 800954a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800954e:	2206      	movs	r2, #6
 8009550:	f7f6 fe3e 	bl	80001d0 <memchr>
 8009554:	2800      	cmp	r0, #0
 8009556:	d036      	beq.n	80095c6 <_svfiprintf_r+0x1d2>
 8009558:	4b21      	ldr	r3, [pc, #132]	@ (80095e0 <_svfiprintf_r+0x1ec>)
 800955a:	bb1b      	cbnz	r3, 80095a4 <_svfiprintf_r+0x1b0>
 800955c:	9b03      	ldr	r3, [sp, #12]
 800955e:	3307      	adds	r3, #7
 8009560:	f023 0307 	bic.w	r3, r3, #7
 8009564:	3308      	adds	r3, #8
 8009566:	9303      	str	r3, [sp, #12]
 8009568:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800956a:	4433      	add	r3, r6
 800956c:	9309      	str	r3, [sp, #36]	@ 0x24
 800956e:	e76a      	b.n	8009446 <_svfiprintf_r+0x52>
 8009570:	fb0c 3202 	mla	r2, ip, r2, r3
 8009574:	460c      	mov	r4, r1
 8009576:	2001      	movs	r0, #1
 8009578:	e7a8      	b.n	80094cc <_svfiprintf_r+0xd8>
 800957a:	2300      	movs	r3, #0
 800957c:	3401      	adds	r4, #1
 800957e:	9305      	str	r3, [sp, #20]
 8009580:	4619      	mov	r1, r3
 8009582:	f04f 0c0a 	mov.w	ip, #10
 8009586:	4620      	mov	r0, r4
 8009588:	f810 2b01 	ldrb.w	r2, [r0], #1
 800958c:	3a30      	subs	r2, #48	@ 0x30
 800958e:	2a09      	cmp	r2, #9
 8009590:	d903      	bls.n	800959a <_svfiprintf_r+0x1a6>
 8009592:	2b00      	cmp	r3, #0
 8009594:	d0c6      	beq.n	8009524 <_svfiprintf_r+0x130>
 8009596:	9105      	str	r1, [sp, #20]
 8009598:	e7c4      	b.n	8009524 <_svfiprintf_r+0x130>
 800959a:	fb0c 2101 	mla	r1, ip, r1, r2
 800959e:	4604      	mov	r4, r0
 80095a0:	2301      	movs	r3, #1
 80095a2:	e7f0      	b.n	8009586 <_svfiprintf_r+0x192>
 80095a4:	ab03      	add	r3, sp, #12
 80095a6:	9300      	str	r3, [sp, #0]
 80095a8:	462a      	mov	r2, r5
 80095aa:	4b0e      	ldr	r3, [pc, #56]	@ (80095e4 <_svfiprintf_r+0x1f0>)
 80095ac:	a904      	add	r1, sp, #16
 80095ae:	4638      	mov	r0, r7
 80095b0:	f7fd f96a 	bl	8006888 <_printf_float>
 80095b4:	1c42      	adds	r2, r0, #1
 80095b6:	4606      	mov	r6, r0
 80095b8:	d1d6      	bne.n	8009568 <_svfiprintf_r+0x174>
 80095ba:	89ab      	ldrh	r3, [r5, #12]
 80095bc:	065b      	lsls	r3, r3, #25
 80095be:	f53f af2d 	bmi.w	800941c <_svfiprintf_r+0x28>
 80095c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80095c4:	e72c      	b.n	8009420 <_svfiprintf_r+0x2c>
 80095c6:	ab03      	add	r3, sp, #12
 80095c8:	9300      	str	r3, [sp, #0]
 80095ca:	462a      	mov	r2, r5
 80095cc:	4b05      	ldr	r3, [pc, #20]	@ (80095e4 <_svfiprintf_r+0x1f0>)
 80095ce:	a904      	add	r1, sp, #16
 80095d0:	4638      	mov	r0, r7
 80095d2:	f7fd fbf1 	bl	8006db8 <_printf_i>
 80095d6:	e7ed      	b.n	80095b4 <_svfiprintf_r+0x1c0>
 80095d8:	0800c259 	.word	0x0800c259
 80095dc:	0800c263 	.word	0x0800c263
 80095e0:	08006889 	.word	0x08006889
 80095e4:	0800933f 	.word	0x0800933f
 80095e8:	0800c25f 	.word	0x0800c25f

080095ec <__sflush_r>:
 80095ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80095f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095f4:	0716      	lsls	r6, r2, #28
 80095f6:	4605      	mov	r5, r0
 80095f8:	460c      	mov	r4, r1
 80095fa:	d454      	bmi.n	80096a6 <__sflush_r+0xba>
 80095fc:	684b      	ldr	r3, [r1, #4]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	dc02      	bgt.n	8009608 <__sflush_r+0x1c>
 8009602:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009604:	2b00      	cmp	r3, #0
 8009606:	dd48      	ble.n	800969a <__sflush_r+0xae>
 8009608:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800960a:	2e00      	cmp	r6, #0
 800960c:	d045      	beq.n	800969a <__sflush_r+0xae>
 800960e:	2300      	movs	r3, #0
 8009610:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009614:	682f      	ldr	r7, [r5, #0]
 8009616:	6a21      	ldr	r1, [r4, #32]
 8009618:	602b      	str	r3, [r5, #0]
 800961a:	d030      	beq.n	800967e <__sflush_r+0x92>
 800961c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800961e:	89a3      	ldrh	r3, [r4, #12]
 8009620:	0759      	lsls	r1, r3, #29
 8009622:	d505      	bpl.n	8009630 <__sflush_r+0x44>
 8009624:	6863      	ldr	r3, [r4, #4]
 8009626:	1ad2      	subs	r2, r2, r3
 8009628:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800962a:	b10b      	cbz	r3, 8009630 <__sflush_r+0x44>
 800962c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800962e:	1ad2      	subs	r2, r2, r3
 8009630:	2300      	movs	r3, #0
 8009632:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009634:	6a21      	ldr	r1, [r4, #32]
 8009636:	4628      	mov	r0, r5
 8009638:	47b0      	blx	r6
 800963a:	1c43      	adds	r3, r0, #1
 800963c:	89a3      	ldrh	r3, [r4, #12]
 800963e:	d106      	bne.n	800964e <__sflush_r+0x62>
 8009640:	6829      	ldr	r1, [r5, #0]
 8009642:	291d      	cmp	r1, #29
 8009644:	d82b      	bhi.n	800969e <__sflush_r+0xb2>
 8009646:	4a2a      	ldr	r2, [pc, #168]	@ (80096f0 <__sflush_r+0x104>)
 8009648:	410a      	asrs	r2, r1
 800964a:	07d6      	lsls	r6, r2, #31
 800964c:	d427      	bmi.n	800969e <__sflush_r+0xb2>
 800964e:	2200      	movs	r2, #0
 8009650:	6062      	str	r2, [r4, #4]
 8009652:	04d9      	lsls	r1, r3, #19
 8009654:	6922      	ldr	r2, [r4, #16]
 8009656:	6022      	str	r2, [r4, #0]
 8009658:	d504      	bpl.n	8009664 <__sflush_r+0x78>
 800965a:	1c42      	adds	r2, r0, #1
 800965c:	d101      	bne.n	8009662 <__sflush_r+0x76>
 800965e:	682b      	ldr	r3, [r5, #0]
 8009660:	b903      	cbnz	r3, 8009664 <__sflush_r+0x78>
 8009662:	6560      	str	r0, [r4, #84]	@ 0x54
 8009664:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009666:	602f      	str	r7, [r5, #0]
 8009668:	b1b9      	cbz	r1, 800969a <__sflush_r+0xae>
 800966a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800966e:	4299      	cmp	r1, r3
 8009670:	d002      	beq.n	8009678 <__sflush_r+0x8c>
 8009672:	4628      	mov	r0, r5
 8009674:	f7fe fd58 	bl	8008128 <_free_r>
 8009678:	2300      	movs	r3, #0
 800967a:	6363      	str	r3, [r4, #52]	@ 0x34
 800967c:	e00d      	b.n	800969a <__sflush_r+0xae>
 800967e:	2301      	movs	r3, #1
 8009680:	4628      	mov	r0, r5
 8009682:	47b0      	blx	r6
 8009684:	4602      	mov	r2, r0
 8009686:	1c50      	adds	r0, r2, #1
 8009688:	d1c9      	bne.n	800961e <__sflush_r+0x32>
 800968a:	682b      	ldr	r3, [r5, #0]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d0c6      	beq.n	800961e <__sflush_r+0x32>
 8009690:	2b1d      	cmp	r3, #29
 8009692:	d001      	beq.n	8009698 <__sflush_r+0xac>
 8009694:	2b16      	cmp	r3, #22
 8009696:	d11e      	bne.n	80096d6 <__sflush_r+0xea>
 8009698:	602f      	str	r7, [r5, #0]
 800969a:	2000      	movs	r0, #0
 800969c:	e022      	b.n	80096e4 <__sflush_r+0xf8>
 800969e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096a2:	b21b      	sxth	r3, r3
 80096a4:	e01b      	b.n	80096de <__sflush_r+0xf2>
 80096a6:	690f      	ldr	r7, [r1, #16]
 80096a8:	2f00      	cmp	r7, #0
 80096aa:	d0f6      	beq.n	800969a <__sflush_r+0xae>
 80096ac:	0793      	lsls	r3, r2, #30
 80096ae:	680e      	ldr	r6, [r1, #0]
 80096b0:	bf08      	it	eq
 80096b2:	694b      	ldreq	r3, [r1, #20]
 80096b4:	600f      	str	r7, [r1, #0]
 80096b6:	bf18      	it	ne
 80096b8:	2300      	movne	r3, #0
 80096ba:	eba6 0807 	sub.w	r8, r6, r7
 80096be:	608b      	str	r3, [r1, #8]
 80096c0:	f1b8 0f00 	cmp.w	r8, #0
 80096c4:	dde9      	ble.n	800969a <__sflush_r+0xae>
 80096c6:	6a21      	ldr	r1, [r4, #32]
 80096c8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80096ca:	4643      	mov	r3, r8
 80096cc:	463a      	mov	r2, r7
 80096ce:	4628      	mov	r0, r5
 80096d0:	47b0      	blx	r6
 80096d2:	2800      	cmp	r0, #0
 80096d4:	dc08      	bgt.n	80096e8 <__sflush_r+0xfc>
 80096d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096de:	81a3      	strh	r3, [r4, #12]
 80096e0:	f04f 30ff 	mov.w	r0, #4294967295
 80096e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096e8:	4407      	add	r7, r0
 80096ea:	eba8 0800 	sub.w	r8, r8, r0
 80096ee:	e7e7      	b.n	80096c0 <__sflush_r+0xd4>
 80096f0:	dfbffffe 	.word	0xdfbffffe

080096f4 <_fflush_r>:
 80096f4:	b538      	push	{r3, r4, r5, lr}
 80096f6:	690b      	ldr	r3, [r1, #16]
 80096f8:	4605      	mov	r5, r0
 80096fa:	460c      	mov	r4, r1
 80096fc:	b913      	cbnz	r3, 8009704 <_fflush_r+0x10>
 80096fe:	2500      	movs	r5, #0
 8009700:	4628      	mov	r0, r5
 8009702:	bd38      	pop	{r3, r4, r5, pc}
 8009704:	b118      	cbz	r0, 800970e <_fflush_r+0x1a>
 8009706:	6a03      	ldr	r3, [r0, #32]
 8009708:	b90b      	cbnz	r3, 800970e <_fflush_r+0x1a>
 800970a:	f7fd fd01 	bl	8007110 <__sinit>
 800970e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d0f3      	beq.n	80096fe <_fflush_r+0xa>
 8009716:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009718:	07d0      	lsls	r0, r2, #31
 800971a:	d404      	bmi.n	8009726 <_fflush_r+0x32>
 800971c:	0599      	lsls	r1, r3, #22
 800971e:	d402      	bmi.n	8009726 <_fflush_r+0x32>
 8009720:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009722:	f7fd fe7a 	bl	800741a <__retarget_lock_acquire_recursive>
 8009726:	4628      	mov	r0, r5
 8009728:	4621      	mov	r1, r4
 800972a:	f7ff ff5f 	bl	80095ec <__sflush_r>
 800972e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009730:	07da      	lsls	r2, r3, #31
 8009732:	4605      	mov	r5, r0
 8009734:	d4e4      	bmi.n	8009700 <_fflush_r+0xc>
 8009736:	89a3      	ldrh	r3, [r4, #12]
 8009738:	059b      	lsls	r3, r3, #22
 800973a:	d4e1      	bmi.n	8009700 <_fflush_r+0xc>
 800973c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800973e:	f7fd fe6d 	bl	800741c <__retarget_lock_release_recursive>
 8009742:	e7dd      	b.n	8009700 <_fflush_r+0xc>

08009744 <fiprintf>:
 8009744:	b40e      	push	{r1, r2, r3}
 8009746:	b503      	push	{r0, r1, lr}
 8009748:	4601      	mov	r1, r0
 800974a:	ab03      	add	r3, sp, #12
 800974c:	4805      	ldr	r0, [pc, #20]	@ (8009764 <fiprintf+0x20>)
 800974e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009752:	6800      	ldr	r0, [r0, #0]
 8009754:	9301      	str	r3, [sp, #4]
 8009756:	f000 f8a3 	bl	80098a0 <_vfiprintf_r>
 800975a:	b002      	add	sp, #8
 800975c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009760:	b003      	add	sp, #12
 8009762:	4770      	bx	lr
 8009764:	20000184 	.word	0x20000184

08009768 <memmove>:
 8009768:	4288      	cmp	r0, r1
 800976a:	b510      	push	{r4, lr}
 800976c:	eb01 0402 	add.w	r4, r1, r2
 8009770:	d902      	bls.n	8009778 <memmove+0x10>
 8009772:	4284      	cmp	r4, r0
 8009774:	4623      	mov	r3, r4
 8009776:	d807      	bhi.n	8009788 <memmove+0x20>
 8009778:	1e43      	subs	r3, r0, #1
 800977a:	42a1      	cmp	r1, r4
 800977c:	d008      	beq.n	8009790 <memmove+0x28>
 800977e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009782:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009786:	e7f8      	b.n	800977a <memmove+0x12>
 8009788:	4402      	add	r2, r0
 800978a:	4601      	mov	r1, r0
 800978c:	428a      	cmp	r2, r1
 800978e:	d100      	bne.n	8009792 <memmove+0x2a>
 8009790:	bd10      	pop	{r4, pc}
 8009792:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009796:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800979a:	e7f7      	b.n	800978c <memmove+0x24>

0800979c <_sbrk_r>:
 800979c:	b538      	push	{r3, r4, r5, lr}
 800979e:	4d06      	ldr	r5, [pc, #24]	@ (80097b8 <_sbrk_r+0x1c>)
 80097a0:	2300      	movs	r3, #0
 80097a2:	4604      	mov	r4, r0
 80097a4:	4608      	mov	r0, r1
 80097a6:	602b      	str	r3, [r5, #0]
 80097a8:	f7f8 fa90 	bl	8001ccc <_sbrk>
 80097ac:	1c43      	adds	r3, r0, #1
 80097ae:	d102      	bne.n	80097b6 <_sbrk_r+0x1a>
 80097b0:	682b      	ldr	r3, [r5, #0]
 80097b2:	b103      	cbz	r3, 80097b6 <_sbrk_r+0x1a>
 80097b4:	6023      	str	r3, [r4, #0]
 80097b6:	bd38      	pop	{r3, r4, r5, pc}
 80097b8:	20000744 	.word	0x20000744

080097bc <abort>:
 80097bc:	b508      	push	{r3, lr}
 80097be:	2006      	movs	r0, #6
 80097c0:	f000 fa42 	bl	8009c48 <raise>
 80097c4:	2001      	movs	r0, #1
 80097c6:	f7f8 fa09 	bl	8001bdc <_exit>

080097ca <_calloc_r>:
 80097ca:	b570      	push	{r4, r5, r6, lr}
 80097cc:	fba1 5402 	umull	r5, r4, r1, r2
 80097d0:	b93c      	cbnz	r4, 80097e2 <_calloc_r+0x18>
 80097d2:	4629      	mov	r1, r5
 80097d4:	f7ff f856 	bl	8008884 <_malloc_r>
 80097d8:	4606      	mov	r6, r0
 80097da:	b928      	cbnz	r0, 80097e8 <_calloc_r+0x1e>
 80097dc:	2600      	movs	r6, #0
 80097de:	4630      	mov	r0, r6
 80097e0:	bd70      	pop	{r4, r5, r6, pc}
 80097e2:	220c      	movs	r2, #12
 80097e4:	6002      	str	r2, [r0, #0]
 80097e6:	e7f9      	b.n	80097dc <_calloc_r+0x12>
 80097e8:	462a      	mov	r2, r5
 80097ea:	4621      	mov	r1, r4
 80097ec:	f7fd fd29 	bl	8007242 <memset>
 80097f0:	e7f5      	b.n	80097de <_calloc_r+0x14>

080097f2 <_realloc_r>:
 80097f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097f6:	4680      	mov	r8, r0
 80097f8:	4615      	mov	r5, r2
 80097fa:	460c      	mov	r4, r1
 80097fc:	b921      	cbnz	r1, 8009808 <_realloc_r+0x16>
 80097fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009802:	4611      	mov	r1, r2
 8009804:	f7ff b83e 	b.w	8008884 <_malloc_r>
 8009808:	b92a      	cbnz	r2, 8009816 <_realloc_r+0x24>
 800980a:	f7fe fc8d 	bl	8008128 <_free_r>
 800980e:	2400      	movs	r4, #0
 8009810:	4620      	mov	r0, r4
 8009812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009816:	f000 fa33 	bl	8009c80 <_malloc_usable_size_r>
 800981a:	4285      	cmp	r5, r0
 800981c:	4606      	mov	r6, r0
 800981e:	d802      	bhi.n	8009826 <_realloc_r+0x34>
 8009820:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009824:	d8f4      	bhi.n	8009810 <_realloc_r+0x1e>
 8009826:	4629      	mov	r1, r5
 8009828:	4640      	mov	r0, r8
 800982a:	f7ff f82b 	bl	8008884 <_malloc_r>
 800982e:	4607      	mov	r7, r0
 8009830:	2800      	cmp	r0, #0
 8009832:	d0ec      	beq.n	800980e <_realloc_r+0x1c>
 8009834:	42b5      	cmp	r5, r6
 8009836:	462a      	mov	r2, r5
 8009838:	4621      	mov	r1, r4
 800983a:	bf28      	it	cs
 800983c:	4632      	movcs	r2, r6
 800983e:	f7fd fdee 	bl	800741e <memcpy>
 8009842:	4621      	mov	r1, r4
 8009844:	4640      	mov	r0, r8
 8009846:	f7fe fc6f 	bl	8008128 <_free_r>
 800984a:	463c      	mov	r4, r7
 800984c:	e7e0      	b.n	8009810 <_realloc_r+0x1e>

0800984e <__sfputc_r>:
 800984e:	6893      	ldr	r3, [r2, #8]
 8009850:	3b01      	subs	r3, #1
 8009852:	2b00      	cmp	r3, #0
 8009854:	b410      	push	{r4}
 8009856:	6093      	str	r3, [r2, #8]
 8009858:	da08      	bge.n	800986c <__sfputc_r+0x1e>
 800985a:	6994      	ldr	r4, [r2, #24]
 800985c:	42a3      	cmp	r3, r4
 800985e:	db01      	blt.n	8009864 <__sfputc_r+0x16>
 8009860:	290a      	cmp	r1, #10
 8009862:	d103      	bne.n	800986c <__sfputc_r+0x1e>
 8009864:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009868:	f000 b932 	b.w	8009ad0 <__swbuf_r>
 800986c:	6813      	ldr	r3, [r2, #0]
 800986e:	1c58      	adds	r0, r3, #1
 8009870:	6010      	str	r0, [r2, #0]
 8009872:	7019      	strb	r1, [r3, #0]
 8009874:	4608      	mov	r0, r1
 8009876:	f85d 4b04 	ldr.w	r4, [sp], #4
 800987a:	4770      	bx	lr

0800987c <__sfputs_r>:
 800987c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800987e:	4606      	mov	r6, r0
 8009880:	460f      	mov	r7, r1
 8009882:	4614      	mov	r4, r2
 8009884:	18d5      	adds	r5, r2, r3
 8009886:	42ac      	cmp	r4, r5
 8009888:	d101      	bne.n	800988e <__sfputs_r+0x12>
 800988a:	2000      	movs	r0, #0
 800988c:	e007      	b.n	800989e <__sfputs_r+0x22>
 800988e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009892:	463a      	mov	r2, r7
 8009894:	4630      	mov	r0, r6
 8009896:	f7ff ffda 	bl	800984e <__sfputc_r>
 800989a:	1c43      	adds	r3, r0, #1
 800989c:	d1f3      	bne.n	8009886 <__sfputs_r+0xa>
 800989e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080098a0 <_vfiprintf_r>:
 80098a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098a4:	460d      	mov	r5, r1
 80098a6:	b09d      	sub	sp, #116	@ 0x74
 80098a8:	4614      	mov	r4, r2
 80098aa:	4698      	mov	r8, r3
 80098ac:	4606      	mov	r6, r0
 80098ae:	b118      	cbz	r0, 80098b8 <_vfiprintf_r+0x18>
 80098b0:	6a03      	ldr	r3, [r0, #32]
 80098b2:	b90b      	cbnz	r3, 80098b8 <_vfiprintf_r+0x18>
 80098b4:	f7fd fc2c 	bl	8007110 <__sinit>
 80098b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80098ba:	07d9      	lsls	r1, r3, #31
 80098bc:	d405      	bmi.n	80098ca <_vfiprintf_r+0x2a>
 80098be:	89ab      	ldrh	r3, [r5, #12]
 80098c0:	059a      	lsls	r2, r3, #22
 80098c2:	d402      	bmi.n	80098ca <_vfiprintf_r+0x2a>
 80098c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80098c6:	f7fd fda8 	bl	800741a <__retarget_lock_acquire_recursive>
 80098ca:	89ab      	ldrh	r3, [r5, #12]
 80098cc:	071b      	lsls	r3, r3, #28
 80098ce:	d501      	bpl.n	80098d4 <_vfiprintf_r+0x34>
 80098d0:	692b      	ldr	r3, [r5, #16]
 80098d2:	b99b      	cbnz	r3, 80098fc <_vfiprintf_r+0x5c>
 80098d4:	4629      	mov	r1, r5
 80098d6:	4630      	mov	r0, r6
 80098d8:	f000 f938 	bl	8009b4c <__swsetup_r>
 80098dc:	b170      	cbz	r0, 80098fc <_vfiprintf_r+0x5c>
 80098de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80098e0:	07dc      	lsls	r4, r3, #31
 80098e2:	d504      	bpl.n	80098ee <_vfiprintf_r+0x4e>
 80098e4:	f04f 30ff 	mov.w	r0, #4294967295
 80098e8:	b01d      	add	sp, #116	@ 0x74
 80098ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098ee:	89ab      	ldrh	r3, [r5, #12]
 80098f0:	0598      	lsls	r0, r3, #22
 80098f2:	d4f7      	bmi.n	80098e4 <_vfiprintf_r+0x44>
 80098f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80098f6:	f7fd fd91 	bl	800741c <__retarget_lock_release_recursive>
 80098fa:	e7f3      	b.n	80098e4 <_vfiprintf_r+0x44>
 80098fc:	2300      	movs	r3, #0
 80098fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8009900:	2320      	movs	r3, #32
 8009902:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009906:	f8cd 800c 	str.w	r8, [sp, #12]
 800990a:	2330      	movs	r3, #48	@ 0x30
 800990c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009abc <_vfiprintf_r+0x21c>
 8009910:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009914:	f04f 0901 	mov.w	r9, #1
 8009918:	4623      	mov	r3, r4
 800991a:	469a      	mov	sl, r3
 800991c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009920:	b10a      	cbz	r2, 8009926 <_vfiprintf_r+0x86>
 8009922:	2a25      	cmp	r2, #37	@ 0x25
 8009924:	d1f9      	bne.n	800991a <_vfiprintf_r+0x7a>
 8009926:	ebba 0b04 	subs.w	fp, sl, r4
 800992a:	d00b      	beq.n	8009944 <_vfiprintf_r+0xa4>
 800992c:	465b      	mov	r3, fp
 800992e:	4622      	mov	r2, r4
 8009930:	4629      	mov	r1, r5
 8009932:	4630      	mov	r0, r6
 8009934:	f7ff ffa2 	bl	800987c <__sfputs_r>
 8009938:	3001      	adds	r0, #1
 800993a:	f000 80a7 	beq.w	8009a8c <_vfiprintf_r+0x1ec>
 800993e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009940:	445a      	add	r2, fp
 8009942:	9209      	str	r2, [sp, #36]	@ 0x24
 8009944:	f89a 3000 	ldrb.w	r3, [sl]
 8009948:	2b00      	cmp	r3, #0
 800994a:	f000 809f 	beq.w	8009a8c <_vfiprintf_r+0x1ec>
 800994e:	2300      	movs	r3, #0
 8009950:	f04f 32ff 	mov.w	r2, #4294967295
 8009954:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009958:	f10a 0a01 	add.w	sl, sl, #1
 800995c:	9304      	str	r3, [sp, #16]
 800995e:	9307      	str	r3, [sp, #28]
 8009960:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009964:	931a      	str	r3, [sp, #104]	@ 0x68
 8009966:	4654      	mov	r4, sl
 8009968:	2205      	movs	r2, #5
 800996a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800996e:	4853      	ldr	r0, [pc, #332]	@ (8009abc <_vfiprintf_r+0x21c>)
 8009970:	f7f6 fc2e 	bl	80001d0 <memchr>
 8009974:	9a04      	ldr	r2, [sp, #16]
 8009976:	b9d8      	cbnz	r0, 80099b0 <_vfiprintf_r+0x110>
 8009978:	06d1      	lsls	r1, r2, #27
 800997a:	bf44      	itt	mi
 800997c:	2320      	movmi	r3, #32
 800997e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009982:	0713      	lsls	r3, r2, #28
 8009984:	bf44      	itt	mi
 8009986:	232b      	movmi	r3, #43	@ 0x2b
 8009988:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800998c:	f89a 3000 	ldrb.w	r3, [sl]
 8009990:	2b2a      	cmp	r3, #42	@ 0x2a
 8009992:	d015      	beq.n	80099c0 <_vfiprintf_r+0x120>
 8009994:	9a07      	ldr	r2, [sp, #28]
 8009996:	4654      	mov	r4, sl
 8009998:	2000      	movs	r0, #0
 800999a:	f04f 0c0a 	mov.w	ip, #10
 800999e:	4621      	mov	r1, r4
 80099a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099a4:	3b30      	subs	r3, #48	@ 0x30
 80099a6:	2b09      	cmp	r3, #9
 80099a8:	d94b      	bls.n	8009a42 <_vfiprintf_r+0x1a2>
 80099aa:	b1b0      	cbz	r0, 80099da <_vfiprintf_r+0x13a>
 80099ac:	9207      	str	r2, [sp, #28]
 80099ae:	e014      	b.n	80099da <_vfiprintf_r+0x13a>
 80099b0:	eba0 0308 	sub.w	r3, r0, r8
 80099b4:	fa09 f303 	lsl.w	r3, r9, r3
 80099b8:	4313      	orrs	r3, r2
 80099ba:	9304      	str	r3, [sp, #16]
 80099bc:	46a2      	mov	sl, r4
 80099be:	e7d2      	b.n	8009966 <_vfiprintf_r+0xc6>
 80099c0:	9b03      	ldr	r3, [sp, #12]
 80099c2:	1d19      	adds	r1, r3, #4
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	9103      	str	r1, [sp, #12]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	bfbb      	ittet	lt
 80099cc:	425b      	neglt	r3, r3
 80099ce:	f042 0202 	orrlt.w	r2, r2, #2
 80099d2:	9307      	strge	r3, [sp, #28]
 80099d4:	9307      	strlt	r3, [sp, #28]
 80099d6:	bfb8      	it	lt
 80099d8:	9204      	strlt	r2, [sp, #16]
 80099da:	7823      	ldrb	r3, [r4, #0]
 80099dc:	2b2e      	cmp	r3, #46	@ 0x2e
 80099de:	d10a      	bne.n	80099f6 <_vfiprintf_r+0x156>
 80099e0:	7863      	ldrb	r3, [r4, #1]
 80099e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80099e4:	d132      	bne.n	8009a4c <_vfiprintf_r+0x1ac>
 80099e6:	9b03      	ldr	r3, [sp, #12]
 80099e8:	1d1a      	adds	r2, r3, #4
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	9203      	str	r2, [sp, #12]
 80099ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80099f2:	3402      	adds	r4, #2
 80099f4:	9305      	str	r3, [sp, #20]
 80099f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009acc <_vfiprintf_r+0x22c>
 80099fa:	7821      	ldrb	r1, [r4, #0]
 80099fc:	2203      	movs	r2, #3
 80099fe:	4650      	mov	r0, sl
 8009a00:	f7f6 fbe6 	bl	80001d0 <memchr>
 8009a04:	b138      	cbz	r0, 8009a16 <_vfiprintf_r+0x176>
 8009a06:	9b04      	ldr	r3, [sp, #16]
 8009a08:	eba0 000a 	sub.w	r0, r0, sl
 8009a0c:	2240      	movs	r2, #64	@ 0x40
 8009a0e:	4082      	lsls	r2, r0
 8009a10:	4313      	orrs	r3, r2
 8009a12:	3401      	adds	r4, #1
 8009a14:	9304      	str	r3, [sp, #16]
 8009a16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a1a:	4829      	ldr	r0, [pc, #164]	@ (8009ac0 <_vfiprintf_r+0x220>)
 8009a1c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009a20:	2206      	movs	r2, #6
 8009a22:	f7f6 fbd5 	bl	80001d0 <memchr>
 8009a26:	2800      	cmp	r0, #0
 8009a28:	d03f      	beq.n	8009aaa <_vfiprintf_r+0x20a>
 8009a2a:	4b26      	ldr	r3, [pc, #152]	@ (8009ac4 <_vfiprintf_r+0x224>)
 8009a2c:	bb1b      	cbnz	r3, 8009a76 <_vfiprintf_r+0x1d6>
 8009a2e:	9b03      	ldr	r3, [sp, #12]
 8009a30:	3307      	adds	r3, #7
 8009a32:	f023 0307 	bic.w	r3, r3, #7
 8009a36:	3308      	adds	r3, #8
 8009a38:	9303      	str	r3, [sp, #12]
 8009a3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a3c:	443b      	add	r3, r7
 8009a3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a40:	e76a      	b.n	8009918 <_vfiprintf_r+0x78>
 8009a42:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a46:	460c      	mov	r4, r1
 8009a48:	2001      	movs	r0, #1
 8009a4a:	e7a8      	b.n	800999e <_vfiprintf_r+0xfe>
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	3401      	adds	r4, #1
 8009a50:	9305      	str	r3, [sp, #20]
 8009a52:	4619      	mov	r1, r3
 8009a54:	f04f 0c0a 	mov.w	ip, #10
 8009a58:	4620      	mov	r0, r4
 8009a5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a5e:	3a30      	subs	r2, #48	@ 0x30
 8009a60:	2a09      	cmp	r2, #9
 8009a62:	d903      	bls.n	8009a6c <_vfiprintf_r+0x1cc>
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d0c6      	beq.n	80099f6 <_vfiprintf_r+0x156>
 8009a68:	9105      	str	r1, [sp, #20]
 8009a6a:	e7c4      	b.n	80099f6 <_vfiprintf_r+0x156>
 8009a6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a70:	4604      	mov	r4, r0
 8009a72:	2301      	movs	r3, #1
 8009a74:	e7f0      	b.n	8009a58 <_vfiprintf_r+0x1b8>
 8009a76:	ab03      	add	r3, sp, #12
 8009a78:	9300      	str	r3, [sp, #0]
 8009a7a:	462a      	mov	r2, r5
 8009a7c:	4b12      	ldr	r3, [pc, #72]	@ (8009ac8 <_vfiprintf_r+0x228>)
 8009a7e:	a904      	add	r1, sp, #16
 8009a80:	4630      	mov	r0, r6
 8009a82:	f7fc ff01 	bl	8006888 <_printf_float>
 8009a86:	4607      	mov	r7, r0
 8009a88:	1c78      	adds	r0, r7, #1
 8009a8a:	d1d6      	bne.n	8009a3a <_vfiprintf_r+0x19a>
 8009a8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009a8e:	07d9      	lsls	r1, r3, #31
 8009a90:	d405      	bmi.n	8009a9e <_vfiprintf_r+0x1fe>
 8009a92:	89ab      	ldrh	r3, [r5, #12]
 8009a94:	059a      	lsls	r2, r3, #22
 8009a96:	d402      	bmi.n	8009a9e <_vfiprintf_r+0x1fe>
 8009a98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009a9a:	f7fd fcbf 	bl	800741c <__retarget_lock_release_recursive>
 8009a9e:	89ab      	ldrh	r3, [r5, #12]
 8009aa0:	065b      	lsls	r3, r3, #25
 8009aa2:	f53f af1f 	bmi.w	80098e4 <_vfiprintf_r+0x44>
 8009aa6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009aa8:	e71e      	b.n	80098e8 <_vfiprintf_r+0x48>
 8009aaa:	ab03      	add	r3, sp, #12
 8009aac:	9300      	str	r3, [sp, #0]
 8009aae:	462a      	mov	r2, r5
 8009ab0:	4b05      	ldr	r3, [pc, #20]	@ (8009ac8 <_vfiprintf_r+0x228>)
 8009ab2:	a904      	add	r1, sp, #16
 8009ab4:	4630      	mov	r0, r6
 8009ab6:	f7fd f97f 	bl	8006db8 <_printf_i>
 8009aba:	e7e4      	b.n	8009a86 <_vfiprintf_r+0x1e6>
 8009abc:	0800c259 	.word	0x0800c259
 8009ac0:	0800c263 	.word	0x0800c263
 8009ac4:	08006889 	.word	0x08006889
 8009ac8:	0800987d 	.word	0x0800987d
 8009acc:	0800c25f 	.word	0x0800c25f

08009ad0 <__swbuf_r>:
 8009ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ad2:	460e      	mov	r6, r1
 8009ad4:	4614      	mov	r4, r2
 8009ad6:	4605      	mov	r5, r0
 8009ad8:	b118      	cbz	r0, 8009ae2 <__swbuf_r+0x12>
 8009ada:	6a03      	ldr	r3, [r0, #32]
 8009adc:	b90b      	cbnz	r3, 8009ae2 <__swbuf_r+0x12>
 8009ade:	f7fd fb17 	bl	8007110 <__sinit>
 8009ae2:	69a3      	ldr	r3, [r4, #24]
 8009ae4:	60a3      	str	r3, [r4, #8]
 8009ae6:	89a3      	ldrh	r3, [r4, #12]
 8009ae8:	071a      	lsls	r2, r3, #28
 8009aea:	d501      	bpl.n	8009af0 <__swbuf_r+0x20>
 8009aec:	6923      	ldr	r3, [r4, #16]
 8009aee:	b943      	cbnz	r3, 8009b02 <__swbuf_r+0x32>
 8009af0:	4621      	mov	r1, r4
 8009af2:	4628      	mov	r0, r5
 8009af4:	f000 f82a 	bl	8009b4c <__swsetup_r>
 8009af8:	b118      	cbz	r0, 8009b02 <__swbuf_r+0x32>
 8009afa:	f04f 37ff 	mov.w	r7, #4294967295
 8009afe:	4638      	mov	r0, r7
 8009b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b02:	6823      	ldr	r3, [r4, #0]
 8009b04:	6922      	ldr	r2, [r4, #16]
 8009b06:	1a98      	subs	r0, r3, r2
 8009b08:	6963      	ldr	r3, [r4, #20]
 8009b0a:	b2f6      	uxtb	r6, r6
 8009b0c:	4283      	cmp	r3, r0
 8009b0e:	4637      	mov	r7, r6
 8009b10:	dc05      	bgt.n	8009b1e <__swbuf_r+0x4e>
 8009b12:	4621      	mov	r1, r4
 8009b14:	4628      	mov	r0, r5
 8009b16:	f7ff fded 	bl	80096f4 <_fflush_r>
 8009b1a:	2800      	cmp	r0, #0
 8009b1c:	d1ed      	bne.n	8009afa <__swbuf_r+0x2a>
 8009b1e:	68a3      	ldr	r3, [r4, #8]
 8009b20:	3b01      	subs	r3, #1
 8009b22:	60a3      	str	r3, [r4, #8]
 8009b24:	6823      	ldr	r3, [r4, #0]
 8009b26:	1c5a      	adds	r2, r3, #1
 8009b28:	6022      	str	r2, [r4, #0]
 8009b2a:	701e      	strb	r6, [r3, #0]
 8009b2c:	6962      	ldr	r2, [r4, #20]
 8009b2e:	1c43      	adds	r3, r0, #1
 8009b30:	429a      	cmp	r2, r3
 8009b32:	d004      	beq.n	8009b3e <__swbuf_r+0x6e>
 8009b34:	89a3      	ldrh	r3, [r4, #12]
 8009b36:	07db      	lsls	r3, r3, #31
 8009b38:	d5e1      	bpl.n	8009afe <__swbuf_r+0x2e>
 8009b3a:	2e0a      	cmp	r6, #10
 8009b3c:	d1df      	bne.n	8009afe <__swbuf_r+0x2e>
 8009b3e:	4621      	mov	r1, r4
 8009b40:	4628      	mov	r0, r5
 8009b42:	f7ff fdd7 	bl	80096f4 <_fflush_r>
 8009b46:	2800      	cmp	r0, #0
 8009b48:	d0d9      	beq.n	8009afe <__swbuf_r+0x2e>
 8009b4a:	e7d6      	b.n	8009afa <__swbuf_r+0x2a>

08009b4c <__swsetup_r>:
 8009b4c:	b538      	push	{r3, r4, r5, lr}
 8009b4e:	4b29      	ldr	r3, [pc, #164]	@ (8009bf4 <__swsetup_r+0xa8>)
 8009b50:	4605      	mov	r5, r0
 8009b52:	6818      	ldr	r0, [r3, #0]
 8009b54:	460c      	mov	r4, r1
 8009b56:	b118      	cbz	r0, 8009b60 <__swsetup_r+0x14>
 8009b58:	6a03      	ldr	r3, [r0, #32]
 8009b5a:	b90b      	cbnz	r3, 8009b60 <__swsetup_r+0x14>
 8009b5c:	f7fd fad8 	bl	8007110 <__sinit>
 8009b60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b64:	0719      	lsls	r1, r3, #28
 8009b66:	d422      	bmi.n	8009bae <__swsetup_r+0x62>
 8009b68:	06da      	lsls	r2, r3, #27
 8009b6a:	d407      	bmi.n	8009b7c <__swsetup_r+0x30>
 8009b6c:	2209      	movs	r2, #9
 8009b6e:	602a      	str	r2, [r5, #0]
 8009b70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b74:	81a3      	strh	r3, [r4, #12]
 8009b76:	f04f 30ff 	mov.w	r0, #4294967295
 8009b7a:	e033      	b.n	8009be4 <__swsetup_r+0x98>
 8009b7c:	0758      	lsls	r0, r3, #29
 8009b7e:	d512      	bpl.n	8009ba6 <__swsetup_r+0x5a>
 8009b80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009b82:	b141      	cbz	r1, 8009b96 <__swsetup_r+0x4a>
 8009b84:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009b88:	4299      	cmp	r1, r3
 8009b8a:	d002      	beq.n	8009b92 <__swsetup_r+0x46>
 8009b8c:	4628      	mov	r0, r5
 8009b8e:	f7fe facb 	bl	8008128 <_free_r>
 8009b92:	2300      	movs	r3, #0
 8009b94:	6363      	str	r3, [r4, #52]	@ 0x34
 8009b96:	89a3      	ldrh	r3, [r4, #12]
 8009b98:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009b9c:	81a3      	strh	r3, [r4, #12]
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	6063      	str	r3, [r4, #4]
 8009ba2:	6923      	ldr	r3, [r4, #16]
 8009ba4:	6023      	str	r3, [r4, #0]
 8009ba6:	89a3      	ldrh	r3, [r4, #12]
 8009ba8:	f043 0308 	orr.w	r3, r3, #8
 8009bac:	81a3      	strh	r3, [r4, #12]
 8009bae:	6923      	ldr	r3, [r4, #16]
 8009bb0:	b94b      	cbnz	r3, 8009bc6 <__swsetup_r+0x7a>
 8009bb2:	89a3      	ldrh	r3, [r4, #12]
 8009bb4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009bb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009bbc:	d003      	beq.n	8009bc6 <__swsetup_r+0x7a>
 8009bbe:	4621      	mov	r1, r4
 8009bc0:	4628      	mov	r0, r5
 8009bc2:	f000 f88b 	bl	8009cdc <__smakebuf_r>
 8009bc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bca:	f013 0201 	ands.w	r2, r3, #1
 8009bce:	d00a      	beq.n	8009be6 <__swsetup_r+0x9a>
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	60a2      	str	r2, [r4, #8]
 8009bd4:	6962      	ldr	r2, [r4, #20]
 8009bd6:	4252      	negs	r2, r2
 8009bd8:	61a2      	str	r2, [r4, #24]
 8009bda:	6922      	ldr	r2, [r4, #16]
 8009bdc:	b942      	cbnz	r2, 8009bf0 <__swsetup_r+0xa4>
 8009bde:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009be2:	d1c5      	bne.n	8009b70 <__swsetup_r+0x24>
 8009be4:	bd38      	pop	{r3, r4, r5, pc}
 8009be6:	0799      	lsls	r1, r3, #30
 8009be8:	bf58      	it	pl
 8009bea:	6962      	ldrpl	r2, [r4, #20]
 8009bec:	60a2      	str	r2, [r4, #8]
 8009bee:	e7f4      	b.n	8009bda <__swsetup_r+0x8e>
 8009bf0:	2000      	movs	r0, #0
 8009bf2:	e7f7      	b.n	8009be4 <__swsetup_r+0x98>
 8009bf4:	20000184 	.word	0x20000184

08009bf8 <_raise_r>:
 8009bf8:	291f      	cmp	r1, #31
 8009bfa:	b538      	push	{r3, r4, r5, lr}
 8009bfc:	4605      	mov	r5, r0
 8009bfe:	460c      	mov	r4, r1
 8009c00:	d904      	bls.n	8009c0c <_raise_r+0x14>
 8009c02:	2316      	movs	r3, #22
 8009c04:	6003      	str	r3, [r0, #0]
 8009c06:	f04f 30ff 	mov.w	r0, #4294967295
 8009c0a:	bd38      	pop	{r3, r4, r5, pc}
 8009c0c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009c0e:	b112      	cbz	r2, 8009c16 <_raise_r+0x1e>
 8009c10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009c14:	b94b      	cbnz	r3, 8009c2a <_raise_r+0x32>
 8009c16:	4628      	mov	r0, r5
 8009c18:	f000 f830 	bl	8009c7c <_getpid_r>
 8009c1c:	4622      	mov	r2, r4
 8009c1e:	4601      	mov	r1, r0
 8009c20:	4628      	mov	r0, r5
 8009c22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c26:	f000 b817 	b.w	8009c58 <_kill_r>
 8009c2a:	2b01      	cmp	r3, #1
 8009c2c:	d00a      	beq.n	8009c44 <_raise_r+0x4c>
 8009c2e:	1c59      	adds	r1, r3, #1
 8009c30:	d103      	bne.n	8009c3a <_raise_r+0x42>
 8009c32:	2316      	movs	r3, #22
 8009c34:	6003      	str	r3, [r0, #0]
 8009c36:	2001      	movs	r0, #1
 8009c38:	e7e7      	b.n	8009c0a <_raise_r+0x12>
 8009c3a:	2100      	movs	r1, #0
 8009c3c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009c40:	4620      	mov	r0, r4
 8009c42:	4798      	blx	r3
 8009c44:	2000      	movs	r0, #0
 8009c46:	e7e0      	b.n	8009c0a <_raise_r+0x12>

08009c48 <raise>:
 8009c48:	4b02      	ldr	r3, [pc, #8]	@ (8009c54 <raise+0xc>)
 8009c4a:	4601      	mov	r1, r0
 8009c4c:	6818      	ldr	r0, [r3, #0]
 8009c4e:	f7ff bfd3 	b.w	8009bf8 <_raise_r>
 8009c52:	bf00      	nop
 8009c54:	20000184 	.word	0x20000184

08009c58 <_kill_r>:
 8009c58:	b538      	push	{r3, r4, r5, lr}
 8009c5a:	4d07      	ldr	r5, [pc, #28]	@ (8009c78 <_kill_r+0x20>)
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	4604      	mov	r4, r0
 8009c60:	4608      	mov	r0, r1
 8009c62:	4611      	mov	r1, r2
 8009c64:	602b      	str	r3, [r5, #0]
 8009c66:	f7f7 ffa9 	bl	8001bbc <_kill>
 8009c6a:	1c43      	adds	r3, r0, #1
 8009c6c:	d102      	bne.n	8009c74 <_kill_r+0x1c>
 8009c6e:	682b      	ldr	r3, [r5, #0]
 8009c70:	b103      	cbz	r3, 8009c74 <_kill_r+0x1c>
 8009c72:	6023      	str	r3, [r4, #0]
 8009c74:	bd38      	pop	{r3, r4, r5, pc}
 8009c76:	bf00      	nop
 8009c78:	20000744 	.word	0x20000744

08009c7c <_getpid_r>:
 8009c7c:	f7f7 bf96 	b.w	8001bac <_getpid>

08009c80 <_malloc_usable_size_r>:
 8009c80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c84:	1f18      	subs	r0, r3, #4
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	bfbc      	itt	lt
 8009c8a:	580b      	ldrlt	r3, [r1, r0]
 8009c8c:	18c0      	addlt	r0, r0, r3
 8009c8e:	4770      	bx	lr

08009c90 <__swhatbuf_r>:
 8009c90:	b570      	push	{r4, r5, r6, lr}
 8009c92:	460c      	mov	r4, r1
 8009c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c98:	2900      	cmp	r1, #0
 8009c9a:	b096      	sub	sp, #88	@ 0x58
 8009c9c:	4615      	mov	r5, r2
 8009c9e:	461e      	mov	r6, r3
 8009ca0:	da0d      	bge.n	8009cbe <__swhatbuf_r+0x2e>
 8009ca2:	89a3      	ldrh	r3, [r4, #12]
 8009ca4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009ca8:	f04f 0100 	mov.w	r1, #0
 8009cac:	bf14      	ite	ne
 8009cae:	2340      	movne	r3, #64	@ 0x40
 8009cb0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009cb4:	2000      	movs	r0, #0
 8009cb6:	6031      	str	r1, [r6, #0]
 8009cb8:	602b      	str	r3, [r5, #0]
 8009cba:	b016      	add	sp, #88	@ 0x58
 8009cbc:	bd70      	pop	{r4, r5, r6, pc}
 8009cbe:	466a      	mov	r2, sp
 8009cc0:	f000 f848 	bl	8009d54 <_fstat_r>
 8009cc4:	2800      	cmp	r0, #0
 8009cc6:	dbec      	blt.n	8009ca2 <__swhatbuf_r+0x12>
 8009cc8:	9901      	ldr	r1, [sp, #4]
 8009cca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009cce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009cd2:	4259      	negs	r1, r3
 8009cd4:	4159      	adcs	r1, r3
 8009cd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009cda:	e7eb      	b.n	8009cb4 <__swhatbuf_r+0x24>

08009cdc <__smakebuf_r>:
 8009cdc:	898b      	ldrh	r3, [r1, #12]
 8009cde:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ce0:	079d      	lsls	r5, r3, #30
 8009ce2:	4606      	mov	r6, r0
 8009ce4:	460c      	mov	r4, r1
 8009ce6:	d507      	bpl.n	8009cf8 <__smakebuf_r+0x1c>
 8009ce8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009cec:	6023      	str	r3, [r4, #0]
 8009cee:	6123      	str	r3, [r4, #16]
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	6163      	str	r3, [r4, #20]
 8009cf4:	b003      	add	sp, #12
 8009cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cf8:	ab01      	add	r3, sp, #4
 8009cfa:	466a      	mov	r2, sp
 8009cfc:	f7ff ffc8 	bl	8009c90 <__swhatbuf_r>
 8009d00:	9f00      	ldr	r7, [sp, #0]
 8009d02:	4605      	mov	r5, r0
 8009d04:	4639      	mov	r1, r7
 8009d06:	4630      	mov	r0, r6
 8009d08:	f7fe fdbc 	bl	8008884 <_malloc_r>
 8009d0c:	b948      	cbnz	r0, 8009d22 <__smakebuf_r+0x46>
 8009d0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d12:	059a      	lsls	r2, r3, #22
 8009d14:	d4ee      	bmi.n	8009cf4 <__smakebuf_r+0x18>
 8009d16:	f023 0303 	bic.w	r3, r3, #3
 8009d1a:	f043 0302 	orr.w	r3, r3, #2
 8009d1e:	81a3      	strh	r3, [r4, #12]
 8009d20:	e7e2      	b.n	8009ce8 <__smakebuf_r+0xc>
 8009d22:	89a3      	ldrh	r3, [r4, #12]
 8009d24:	6020      	str	r0, [r4, #0]
 8009d26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d2a:	81a3      	strh	r3, [r4, #12]
 8009d2c:	9b01      	ldr	r3, [sp, #4]
 8009d2e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009d32:	b15b      	cbz	r3, 8009d4c <__smakebuf_r+0x70>
 8009d34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d38:	4630      	mov	r0, r6
 8009d3a:	f000 f81d 	bl	8009d78 <_isatty_r>
 8009d3e:	b128      	cbz	r0, 8009d4c <__smakebuf_r+0x70>
 8009d40:	89a3      	ldrh	r3, [r4, #12]
 8009d42:	f023 0303 	bic.w	r3, r3, #3
 8009d46:	f043 0301 	orr.w	r3, r3, #1
 8009d4a:	81a3      	strh	r3, [r4, #12]
 8009d4c:	89a3      	ldrh	r3, [r4, #12]
 8009d4e:	431d      	orrs	r5, r3
 8009d50:	81a5      	strh	r5, [r4, #12]
 8009d52:	e7cf      	b.n	8009cf4 <__smakebuf_r+0x18>

08009d54 <_fstat_r>:
 8009d54:	b538      	push	{r3, r4, r5, lr}
 8009d56:	4d07      	ldr	r5, [pc, #28]	@ (8009d74 <_fstat_r+0x20>)
 8009d58:	2300      	movs	r3, #0
 8009d5a:	4604      	mov	r4, r0
 8009d5c:	4608      	mov	r0, r1
 8009d5e:	4611      	mov	r1, r2
 8009d60:	602b      	str	r3, [r5, #0]
 8009d62:	f7f7 ff8b 	bl	8001c7c <_fstat>
 8009d66:	1c43      	adds	r3, r0, #1
 8009d68:	d102      	bne.n	8009d70 <_fstat_r+0x1c>
 8009d6a:	682b      	ldr	r3, [r5, #0]
 8009d6c:	b103      	cbz	r3, 8009d70 <_fstat_r+0x1c>
 8009d6e:	6023      	str	r3, [r4, #0]
 8009d70:	bd38      	pop	{r3, r4, r5, pc}
 8009d72:	bf00      	nop
 8009d74:	20000744 	.word	0x20000744

08009d78 <_isatty_r>:
 8009d78:	b538      	push	{r3, r4, r5, lr}
 8009d7a:	4d06      	ldr	r5, [pc, #24]	@ (8009d94 <_isatty_r+0x1c>)
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	4604      	mov	r4, r0
 8009d80:	4608      	mov	r0, r1
 8009d82:	602b      	str	r3, [r5, #0]
 8009d84:	f7f7 ff8a 	bl	8001c9c <_isatty>
 8009d88:	1c43      	adds	r3, r0, #1
 8009d8a:	d102      	bne.n	8009d92 <_isatty_r+0x1a>
 8009d8c:	682b      	ldr	r3, [r5, #0]
 8009d8e:	b103      	cbz	r3, 8009d92 <_isatty_r+0x1a>
 8009d90:	6023      	str	r3, [r4, #0]
 8009d92:	bd38      	pop	{r3, r4, r5, pc}
 8009d94:	20000744 	.word	0x20000744

08009d98 <pow>:
 8009d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d9a:	ed2d 8b02 	vpush	{d8}
 8009d9e:	eeb0 8a40 	vmov.f32	s16, s0
 8009da2:	eef0 8a60 	vmov.f32	s17, s1
 8009da6:	ec55 4b11 	vmov	r4, r5, d1
 8009daa:	f000 fbe9 	bl	800a580 <__ieee754_pow>
 8009dae:	4622      	mov	r2, r4
 8009db0:	462b      	mov	r3, r5
 8009db2:	4620      	mov	r0, r4
 8009db4:	4629      	mov	r1, r5
 8009db6:	ec57 6b10 	vmov	r6, r7, d0
 8009dba:	f7f6 feb7 	bl	8000b2c <__aeabi_dcmpun>
 8009dbe:	2800      	cmp	r0, #0
 8009dc0:	d13b      	bne.n	8009e3a <pow+0xa2>
 8009dc2:	ec51 0b18 	vmov	r0, r1, d8
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	2300      	movs	r3, #0
 8009dca:	f7f6 fe7d 	bl	8000ac8 <__aeabi_dcmpeq>
 8009dce:	b1b8      	cbz	r0, 8009e00 <pow+0x68>
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	4620      	mov	r0, r4
 8009dd6:	4629      	mov	r1, r5
 8009dd8:	f7f6 fe76 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ddc:	2800      	cmp	r0, #0
 8009dde:	d146      	bne.n	8009e6e <pow+0xd6>
 8009de0:	ec45 4b10 	vmov	d0, r4, r5
 8009de4:	f000 f91c 	bl	800a020 <finite>
 8009de8:	b338      	cbz	r0, 8009e3a <pow+0xa2>
 8009dea:	2200      	movs	r2, #0
 8009dec:	2300      	movs	r3, #0
 8009dee:	4620      	mov	r0, r4
 8009df0:	4629      	mov	r1, r5
 8009df2:	f7f6 fe73 	bl	8000adc <__aeabi_dcmplt>
 8009df6:	b300      	cbz	r0, 8009e3a <pow+0xa2>
 8009df8:	f7fd fae4 	bl	80073c4 <__errno>
 8009dfc:	2322      	movs	r3, #34	@ 0x22
 8009dfe:	e01b      	b.n	8009e38 <pow+0xa0>
 8009e00:	ec47 6b10 	vmov	d0, r6, r7
 8009e04:	f000 f90c 	bl	800a020 <finite>
 8009e08:	b9e0      	cbnz	r0, 8009e44 <pow+0xac>
 8009e0a:	eeb0 0a48 	vmov.f32	s0, s16
 8009e0e:	eef0 0a68 	vmov.f32	s1, s17
 8009e12:	f000 f905 	bl	800a020 <finite>
 8009e16:	b1a8      	cbz	r0, 8009e44 <pow+0xac>
 8009e18:	ec45 4b10 	vmov	d0, r4, r5
 8009e1c:	f000 f900 	bl	800a020 <finite>
 8009e20:	b180      	cbz	r0, 8009e44 <pow+0xac>
 8009e22:	4632      	mov	r2, r6
 8009e24:	463b      	mov	r3, r7
 8009e26:	4630      	mov	r0, r6
 8009e28:	4639      	mov	r1, r7
 8009e2a:	f7f6 fe7f 	bl	8000b2c <__aeabi_dcmpun>
 8009e2e:	2800      	cmp	r0, #0
 8009e30:	d0e2      	beq.n	8009df8 <pow+0x60>
 8009e32:	f7fd fac7 	bl	80073c4 <__errno>
 8009e36:	2321      	movs	r3, #33	@ 0x21
 8009e38:	6003      	str	r3, [r0, #0]
 8009e3a:	ecbd 8b02 	vpop	{d8}
 8009e3e:	ec47 6b10 	vmov	d0, r6, r7
 8009e42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e44:	2200      	movs	r2, #0
 8009e46:	2300      	movs	r3, #0
 8009e48:	4630      	mov	r0, r6
 8009e4a:	4639      	mov	r1, r7
 8009e4c:	f7f6 fe3c 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e50:	2800      	cmp	r0, #0
 8009e52:	d0f2      	beq.n	8009e3a <pow+0xa2>
 8009e54:	eeb0 0a48 	vmov.f32	s0, s16
 8009e58:	eef0 0a68 	vmov.f32	s1, s17
 8009e5c:	f000 f8e0 	bl	800a020 <finite>
 8009e60:	2800      	cmp	r0, #0
 8009e62:	d0ea      	beq.n	8009e3a <pow+0xa2>
 8009e64:	ec45 4b10 	vmov	d0, r4, r5
 8009e68:	f000 f8da 	bl	800a020 <finite>
 8009e6c:	e7c3      	b.n	8009df6 <pow+0x5e>
 8009e6e:	4f01      	ldr	r7, [pc, #4]	@ (8009e74 <pow+0xdc>)
 8009e70:	2600      	movs	r6, #0
 8009e72:	e7e2      	b.n	8009e3a <pow+0xa2>
 8009e74:	3ff00000 	.word	0x3ff00000

08009e78 <sqrt>:
 8009e78:	b538      	push	{r3, r4, r5, lr}
 8009e7a:	ed2d 8b02 	vpush	{d8}
 8009e7e:	ec55 4b10 	vmov	r4, r5, d0
 8009e82:	f000 f8d9 	bl	800a038 <__ieee754_sqrt>
 8009e86:	4622      	mov	r2, r4
 8009e88:	462b      	mov	r3, r5
 8009e8a:	4620      	mov	r0, r4
 8009e8c:	4629      	mov	r1, r5
 8009e8e:	eeb0 8a40 	vmov.f32	s16, s0
 8009e92:	eef0 8a60 	vmov.f32	s17, s1
 8009e96:	f7f6 fe49 	bl	8000b2c <__aeabi_dcmpun>
 8009e9a:	b990      	cbnz	r0, 8009ec2 <sqrt+0x4a>
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	4620      	mov	r0, r4
 8009ea2:	4629      	mov	r1, r5
 8009ea4:	f7f6 fe1a 	bl	8000adc <__aeabi_dcmplt>
 8009ea8:	b158      	cbz	r0, 8009ec2 <sqrt+0x4a>
 8009eaa:	f7fd fa8b 	bl	80073c4 <__errno>
 8009eae:	2321      	movs	r3, #33	@ 0x21
 8009eb0:	6003      	str	r3, [r0, #0]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	4610      	mov	r0, r2
 8009eb8:	4619      	mov	r1, r3
 8009eba:	f7f6 fcc7 	bl	800084c <__aeabi_ddiv>
 8009ebe:	ec41 0b18 	vmov	d8, r0, r1
 8009ec2:	eeb0 0a48 	vmov.f32	s0, s16
 8009ec6:	eef0 0a68 	vmov.f32	s1, s17
 8009eca:	ecbd 8b02 	vpop	{d8}
 8009ece:	bd38      	pop	{r3, r4, r5, pc}

08009ed0 <cos>:
 8009ed0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009ed2:	ec53 2b10 	vmov	r2, r3, d0
 8009ed6:	4826      	ldr	r0, [pc, #152]	@ (8009f70 <cos+0xa0>)
 8009ed8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009edc:	4281      	cmp	r1, r0
 8009ede:	d806      	bhi.n	8009eee <cos+0x1e>
 8009ee0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8009f68 <cos+0x98>
 8009ee4:	b005      	add	sp, #20
 8009ee6:	f85d eb04 	ldr.w	lr, [sp], #4
 8009eea:	f000 b9c5 	b.w	800a278 <__kernel_cos>
 8009eee:	4821      	ldr	r0, [pc, #132]	@ (8009f74 <cos+0xa4>)
 8009ef0:	4281      	cmp	r1, r0
 8009ef2:	d908      	bls.n	8009f06 <cos+0x36>
 8009ef4:	4610      	mov	r0, r2
 8009ef6:	4619      	mov	r1, r3
 8009ef8:	f7f6 f9c6 	bl	8000288 <__aeabi_dsub>
 8009efc:	ec41 0b10 	vmov	d0, r0, r1
 8009f00:	b005      	add	sp, #20
 8009f02:	f85d fb04 	ldr.w	pc, [sp], #4
 8009f06:	4668      	mov	r0, sp
 8009f08:	f001 f87e 	bl	800b008 <__ieee754_rem_pio2>
 8009f0c:	f000 0003 	and.w	r0, r0, #3
 8009f10:	2801      	cmp	r0, #1
 8009f12:	d00b      	beq.n	8009f2c <cos+0x5c>
 8009f14:	2802      	cmp	r0, #2
 8009f16:	d015      	beq.n	8009f44 <cos+0x74>
 8009f18:	b9d8      	cbnz	r0, 8009f52 <cos+0x82>
 8009f1a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009f1e:	ed9d 0b00 	vldr	d0, [sp]
 8009f22:	f000 f9a9 	bl	800a278 <__kernel_cos>
 8009f26:	ec51 0b10 	vmov	r0, r1, d0
 8009f2a:	e7e7      	b.n	8009efc <cos+0x2c>
 8009f2c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009f30:	ed9d 0b00 	vldr	d0, [sp]
 8009f34:	f000 fa68 	bl	800a408 <__kernel_sin>
 8009f38:	ec53 2b10 	vmov	r2, r3, d0
 8009f3c:	4610      	mov	r0, r2
 8009f3e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8009f42:	e7db      	b.n	8009efc <cos+0x2c>
 8009f44:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009f48:	ed9d 0b00 	vldr	d0, [sp]
 8009f4c:	f000 f994 	bl	800a278 <__kernel_cos>
 8009f50:	e7f2      	b.n	8009f38 <cos+0x68>
 8009f52:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009f56:	ed9d 0b00 	vldr	d0, [sp]
 8009f5a:	2001      	movs	r0, #1
 8009f5c:	f000 fa54 	bl	800a408 <__kernel_sin>
 8009f60:	e7e1      	b.n	8009f26 <cos+0x56>
 8009f62:	bf00      	nop
 8009f64:	f3af 8000 	nop.w
	...
 8009f70:	3fe921fb 	.word	0x3fe921fb
 8009f74:	7fefffff 	.word	0x7fefffff

08009f78 <sin>:
 8009f78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009f7a:	ec53 2b10 	vmov	r2, r3, d0
 8009f7e:	4826      	ldr	r0, [pc, #152]	@ (800a018 <sin+0xa0>)
 8009f80:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009f84:	4281      	cmp	r1, r0
 8009f86:	d807      	bhi.n	8009f98 <sin+0x20>
 8009f88:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800a010 <sin+0x98>
 8009f8c:	2000      	movs	r0, #0
 8009f8e:	b005      	add	sp, #20
 8009f90:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f94:	f000 ba38 	b.w	800a408 <__kernel_sin>
 8009f98:	4820      	ldr	r0, [pc, #128]	@ (800a01c <sin+0xa4>)
 8009f9a:	4281      	cmp	r1, r0
 8009f9c:	d908      	bls.n	8009fb0 <sin+0x38>
 8009f9e:	4610      	mov	r0, r2
 8009fa0:	4619      	mov	r1, r3
 8009fa2:	f7f6 f971 	bl	8000288 <__aeabi_dsub>
 8009fa6:	ec41 0b10 	vmov	d0, r0, r1
 8009faa:	b005      	add	sp, #20
 8009fac:	f85d fb04 	ldr.w	pc, [sp], #4
 8009fb0:	4668      	mov	r0, sp
 8009fb2:	f001 f829 	bl	800b008 <__ieee754_rem_pio2>
 8009fb6:	f000 0003 	and.w	r0, r0, #3
 8009fba:	2801      	cmp	r0, #1
 8009fbc:	d00c      	beq.n	8009fd8 <sin+0x60>
 8009fbe:	2802      	cmp	r0, #2
 8009fc0:	d011      	beq.n	8009fe6 <sin+0x6e>
 8009fc2:	b9e8      	cbnz	r0, 800a000 <sin+0x88>
 8009fc4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009fc8:	ed9d 0b00 	vldr	d0, [sp]
 8009fcc:	2001      	movs	r0, #1
 8009fce:	f000 fa1b 	bl	800a408 <__kernel_sin>
 8009fd2:	ec51 0b10 	vmov	r0, r1, d0
 8009fd6:	e7e6      	b.n	8009fa6 <sin+0x2e>
 8009fd8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009fdc:	ed9d 0b00 	vldr	d0, [sp]
 8009fe0:	f000 f94a 	bl	800a278 <__kernel_cos>
 8009fe4:	e7f5      	b.n	8009fd2 <sin+0x5a>
 8009fe6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009fea:	ed9d 0b00 	vldr	d0, [sp]
 8009fee:	2001      	movs	r0, #1
 8009ff0:	f000 fa0a 	bl	800a408 <__kernel_sin>
 8009ff4:	ec53 2b10 	vmov	r2, r3, d0
 8009ff8:	4610      	mov	r0, r2
 8009ffa:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8009ffe:	e7d2      	b.n	8009fa6 <sin+0x2e>
 800a000:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a004:	ed9d 0b00 	vldr	d0, [sp]
 800a008:	f000 f936 	bl	800a278 <__kernel_cos>
 800a00c:	e7f2      	b.n	8009ff4 <sin+0x7c>
 800a00e:	bf00      	nop
	...
 800a018:	3fe921fb 	.word	0x3fe921fb
 800a01c:	7fefffff 	.word	0x7fefffff

0800a020 <finite>:
 800a020:	b082      	sub	sp, #8
 800a022:	ed8d 0b00 	vstr	d0, [sp]
 800a026:	9801      	ldr	r0, [sp, #4]
 800a028:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800a02c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800a030:	0fc0      	lsrs	r0, r0, #31
 800a032:	b002      	add	sp, #8
 800a034:	4770      	bx	lr
	...

0800a038 <__ieee754_sqrt>:
 800a038:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a03c:	4a68      	ldr	r2, [pc, #416]	@ (800a1e0 <__ieee754_sqrt+0x1a8>)
 800a03e:	ec55 4b10 	vmov	r4, r5, d0
 800a042:	43aa      	bics	r2, r5
 800a044:	462b      	mov	r3, r5
 800a046:	4621      	mov	r1, r4
 800a048:	d110      	bne.n	800a06c <__ieee754_sqrt+0x34>
 800a04a:	4622      	mov	r2, r4
 800a04c:	4620      	mov	r0, r4
 800a04e:	4629      	mov	r1, r5
 800a050:	f7f6 fad2 	bl	80005f8 <__aeabi_dmul>
 800a054:	4602      	mov	r2, r0
 800a056:	460b      	mov	r3, r1
 800a058:	4620      	mov	r0, r4
 800a05a:	4629      	mov	r1, r5
 800a05c:	f7f6 f916 	bl	800028c <__adddf3>
 800a060:	4604      	mov	r4, r0
 800a062:	460d      	mov	r5, r1
 800a064:	ec45 4b10 	vmov	d0, r4, r5
 800a068:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a06c:	2d00      	cmp	r5, #0
 800a06e:	dc0e      	bgt.n	800a08e <__ieee754_sqrt+0x56>
 800a070:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800a074:	4322      	orrs	r2, r4
 800a076:	d0f5      	beq.n	800a064 <__ieee754_sqrt+0x2c>
 800a078:	b19d      	cbz	r5, 800a0a2 <__ieee754_sqrt+0x6a>
 800a07a:	4622      	mov	r2, r4
 800a07c:	4620      	mov	r0, r4
 800a07e:	4629      	mov	r1, r5
 800a080:	f7f6 f902 	bl	8000288 <__aeabi_dsub>
 800a084:	4602      	mov	r2, r0
 800a086:	460b      	mov	r3, r1
 800a088:	f7f6 fbe0 	bl	800084c <__aeabi_ddiv>
 800a08c:	e7e8      	b.n	800a060 <__ieee754_sqrt+0x28>
 800a08e:	152a      	asrs	r2, r5, #20
 800a090:	d115      	bne.n	800a0be <__ieee754_sqrt+0x86>
 800a092:	2000      	movs	r0, #0
 800a094:	e009      	b.n	800a0aa <__ieee754_sqrt+0x72>
 800a096:	0acb      	lsrs	r3, r1, #11
 800a098:	3a15      	subs	r2, #21
 800a09a:	0549      	lsls	r1, r1, #21
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d0fa      	beq.n	800a096 <__ieee754_sqrt+0x5e>
 800a0a0:	e7f7      	b.n	800a092 <__ieee754_sqrt+0x5a>
 800a0a2:	462a      	mov	r2, r5
 800a0a4:	e7fa      	b.n	800a09c <__ieee754_sqrt+0x64>
 800a0a6:	005b      	lsls	r3, r3, #1
 800a0a8:	3001      	adds	r0, #1
 800a0aa:	02dc      	lsls	r4, r3, #11
 800a0ac:	d5fb      	bpl.n	800a0a6 <__ieee754_sqrt+0x6e>
 800a0ae:	1e44      	subs	r4, r0, #1
 800a0b0:	1b12      	subs	r2, r2, r4
 800a0b2:	f1c0 0420 	rsb	r4, r0, #32
 800a0b6:	fa21 f404 	lsr.w	r4, r1, r4
 800a0ba:	4323      	orrs	r3, r4
 800a0bc:	4081      	lsls	r1, r0
 800a0be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a0c2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800a0c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a0ca:	07d2      	lsls	r2, r2, #31
 800a0cc:	bf5c      	itt	pl
 800a0ce:	005b      	lslpl	r3, r3, #1
 800a0d0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800a0d4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a0d8:	bf58      	it	pl
 800a0da:	0049      	lslpl	r1, r1, #1
 800a0dc:	2600      	movs	r6, #0
 800a0de:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800a0e2:	106d      	asrs	r5, r5, #1
 800a0e4:	0049      	lsls	r1, r1, #1
 800a0e6:	2016      	movs	r0, #22
 800a0e8:	4632      	mov	r2, r6
 800a0ea:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800a0ee:	1917      	adds	r7, r2, r4
 800a0f0:	429f      	cmp	r7, r3
 800a0f2:	bfde      	ittt	le
 800a0f4:	193a      	addle	r2, r7, r4
 800a0f6:	1bdb      	suble	r3, r3, r7
 800a0f8:	1936      	addle	r6, r6, r4
 800a0fa:	0fcf      	lsrs	r7, r1, #31
 800a0fc:	3801      	subs	r0, #1
 800a0fe:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800a102:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a106:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a10a:	d1f0      	bne.n	800a0ee <__ieee754_sqrt+0xb6>
 800a10c:	4604      	mov	r4, r0
 800a10e:	2720      	movs	r7, #32
 800a110:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800a114:	429a      	cmp	r2, r3
 800a116:	eb00 0e0c 	add.w	lr, r0, ip
 800a11a:	db02      	blt.n	800a122 <__ieee754_sqrt+0xea>
 800a11c:	d113      	bne.n	800a146 <__ieee754_sqrt+0x10e>
 800a11e:	458e      	cmp	lr, r1
 800a120:	d811      	bhi.n	800a146 <__ieee754_sqrt+0x10e>
 800a122:	f1be 0f00 	cmp.w	lr, #0
 800a126:	eb0e 000c 	add.w	r0, lr, ip
 800a12a:	da42      	bge.n	800a1b2 <__ieee754_sqrt+0x17a>
 800a12c:	2800      	cmp	r0, #0
 800a12e:	db40      	blt.n	800a1b2 <__ieee754_sqrt+0x17a>
 800a130:	f102 0801 	add.w	r8, r2, #1
 800a134:	1a9b      	subs	r3, r3, r2
 800a136:	458e      	cmp	lr, r1
 800a138:	bf88      	it	hi
 800a13a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800a13e:	eba1 010e 	sub.w	r1, r1, lr
 800a142:	4464      	add	r4, ip
 800a144:	4642      	mov	r2, r8
 800a146:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800a14a:	3f01      	subs	r7, #1
 800a14c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800a150:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a154:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800a158:	d1dc      	bne.n	800a114 <__ieee754_sqrt+0xdc>
 800a15a:	4319      	orrs	r1, r3
 800a15c:	d01b      	beq.n	800a196 <__ieee754_sqrt+0x15e>
 800a15e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800a1e4 <__ieee754_sqrt+0x1ac>
 800a162:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800a1e8 <__ieee754_sqrt+0x1b0>
 800a166:	e9da 0100 	ldrd	r0, r1, [sl]
 800a16a:	e9db 2300 	ldrd	r2, r3, [fp]
 800a16e:	f7f6 f88b 	bl	8000288 <__aeabi_dsub>
 800a172:	e9da 8900 	ldrd	r8, r9, [sl]
 800a176:	4602      	mov	r2, r0
 800a178:	460b      	mov	r3, r1
 800a17a:	4640      	mov	r0, r8
 800a17c:	4649      	mov	r1, r9
 800a17e:	f7f6 fcb7 	bl	8000af0 <__aeabi_dcmple>
 800a182:	b140      	cbz	r0, 800a196 <__ieee754_sqrt+0x15e>
 800a184:	f1b4 3fff 	cmp.w	r4, #4294967295
 800a188:	e9da 0100 	ldrd	r0, r1, [sl]
 800a18c:	e9db 2300 	ldrd	r2, r3, [fp]
 800a190:	d111      	bne.n	800a1b6 <__ieee754_sqrt+0x17e>
 800a192:	3601      	adds	r6, #1
 800a194:	463c      	mov	r4, r7
 800a196:	1072      	asrs	r2, r6, #1
 800a198:	0863      	lsrs	r3, r4, #1
 800a19a:	07f1      	lsls	r1, r6, #31
 800a19c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800a1a0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800a1a4:	bf48      	it	mi
 800a1a6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800a1aa:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	e756      	b.n	800a060 <__ieee754_sqrt+0x28>
 800a1b2:	4690      	mov	r8, r2
 800a1b4:	e7be      	b.n	800a134 <__ieee754_sqrt+0xfc>
 800a1b6:	f7f6 f869 	bl	800028c <__adddf3>
 800a1ba:	e9da 8900 	ldrd	r8, r9, [sl]
 800a1be:	4602      	mov	r2, r0
 800a1c0:	460b      	mov	r3, r1
 800a1c2:	4640      	mov	r0, r8
 800a1c4:	4649      	mov	r1, r9
 800a1c6:	f7f6 fc89 	bl	8000adc <__aeabi_dcmplt>
 800a1ca:	b120      	cbz	r0, 800a1d6 <__ieee754_sqrt+0x19e>
 800a1cc:	1ca0      	adds	r0, r4, #2
 800a1ce:	bf08      	it	eq
 800a1d0:	3601      	addeq	r6, #1
 800a1d2:	3402      	adds	r4, #2
 800a1d4:	e7df      	b.n	800a196 <__ieee754_sqrt+0x15e>
 800a1d6:	1c63      	adds	r3, r4, #1
 800a1d8:	f023 0401 	bic.w	r4, r3, #1
 800a1dc:	e7db      	b.n	800a196 <__ieee754_sqrt+0x15e>
 800a1de:	bf00      	nop
 800a1e0:	7ff00000 	.word	0x7ff00000
 800a1e4:	200001e0 	.word	0x200001e0
 800a1e8:	200001d8 	.word	0x200001d8

0800a1ec <round>:
 800a1ec:	ec51 0b10 	vmov	r0, r1, d0
 800a1f0:	b570      	push	{r4, r5, r6, lr}
 800a1f2:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800a1f6:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800a1fa:	2a13      	cmp	r2, #19
 800a1fc:	460b      	mov	r3, r1
 800a1fe:	4605      	mov	r5, r0
 800a200:	dc1b      	bgt.n	800a23a <round+0x4e>
 800a202:	2a00      	cmp	r2, #0
 800a204:	da0b      	bge.n	800a21e <round+0x32>
 800a206:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800a20a:	3201      	adds	r2, #1
 800a20c:	bf04      	itt	eq
 800a20e:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800a212:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800a216:	2200      	movs	r2, #0
 800a218:	4619      	mov	r1, r3
 800a21a:	4610      	mov	r0, r2
 800a21c:	e015      	b.n	800a24a <round+0x5e>
 800a21e:	4c15      	ldr	r4, [pc, #84]	@ (800a274 <round+0x88>)
 800a220:	4114      	asrs	r4, r2
 800a222:	ea04 0601 	and.w	r6, r4, r1
 800a226:	4306      	orrs	r6, r0
 800a228:	d00f      	beq.n	800a24a <round+0x5e>
 800a22a:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800a22e:	fa41 f202 	asr.w	r2, r1, r2
 800a232:	4413      	add	r3, r2
 800a234:	ea23 0304 	bic.w	r3, r3, r4
 800a238:	e7ed      	b.n	800a216 <round+0x2a>
 800a23a:	2a33      	cmp	r2, #51	@ 0x33
 800a23c:	dd08      	ble.n	800a250 <round+0x64>
 800a23e:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800a242:	d102      	bne.n	800a24a <round+0x5e>
 800a244:	4602      	mov	r2, r0
 800a246:	f7f6 f821 	bl	800028c <__adddf3>
 800a24a:	ec41 0b10 	vmov	d0, r0, r1
 800a24e:	bd70      	pop	{r4, r5, r6, pc}
 800a250:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 800a254:	f04f 34ff 	mov.w	r4, #4294967295
 800a258:	40f4      	lsrs	r4, r6
 800a25a:	4204      	tst	r4, r0
 800a25c:	d0f5      	beq.n	800a24a <round+0x5e>
 800a25e:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800a262:	2201      	movs	r2, #1
 800a264:	408a      	lsls	r2, r1
 800a266:	1952      	adds	r2, r2, r5
 800a268:	bf28      	it	cs
 800a26a:	3301      	addcs	r3, #1
 800a26c:	ea22 0204 	bic.w	r2, r2, r4
 800a270:	e7d2      	b.n	800a218 <round+0x2c>
 800a272:	bf00      	nop
 800a274:	000fffff 	.word	0x000fffff

0800a278 <__kernel_cos>:
 800a278:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a27c:	ec57 6b10 	vmov	r6, r7, d0
 800a280:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800a284:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800a288:	ed8d 1b00 	vstr	d1, [sp]
 800a28c:	d206      	bcs.n	800a29c <__kernel_cos+0x24>
 800a28e:	4630      	mov	r0, r6
 800a290:	4639      	mov	r1, r7
 800a292:	f7f6 fc61 	bl	8000b58 <__aeabi_d2iz>
 800a296:	2800      	cmp	r0, #0
 800a298:	f000 8088 	beq.w	800a3ac <__kernel_cos+0x134>
 800a29c:	4632      	mov	r2, r6
 800a29e:	463b      	mov	r3, r7
 800a2a0:	4630      	mov	r0, r6
 800a2a2:	4639      	mov	r1, r7
 800a2a4:	f7f6 f9a8 	bl	80005f8 <__aeabi_dmul>
 800a2a8:	4b51      	ldr	r3, [pc, #324]	@ (800a3f0 <__kernel_cos+0x178>)
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	4604      	mov	r4, r0
 800a2ae:	460d      	mov	r5, r1
 800a2b0:	f7f6 f9a2 	bl	80005f8 <__aeabi_dmul>
 800a2b4:	a340      	add	r3, pc, #256	@ (adr r3, 800a3b8 <__kernel_cos+0x140>)
 800a2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ba:	4682      	mov	sl, r0
 800a2bc:	468b      	mov	fp, r1
 800a2be:	4620      	mov	r0, r4
 800a2c0:	4629      	mov	r1, r5
 800a2c2:	f7f6 f999 	bl	80005f8 <__aeabi_dmul>
 800a2c6:	a33e      	add	r3, pc, #248	@ (adr r3, 800a3c0 <__kernel_cos+0x148>)
 800a2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2cc:	f7f5 ffde 	bl	800028c <__adddf3>
 800a2d0:	4622      	mov	r2, r4
 800a2d2:	462b      	mov	r3, r5
 800a2d4:	f7f6 f990 	bl	80005f8 <__aeabi_dmul>
 800a2d8:	a33b      	add	r3, pc, #236	@ (adr r3, 800a3c8 <__kernel_cos+0x150>)
 800a2da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2de:	f7f5 ffd3 	bl	8000288 <__aeabi_dsub>
 800a2e2:	4622      	mov	r2, r4
 800a2e4:	462b      	mov	r3, r5
 800a2e6:	f7f6 f987 	bl	80005f8 <__aeabi_dmul>
 800a2ea:	a339      	add	r3, pc, #228	@ (adr r3, 800a3d0 <__kernel_cos+0x158>)
 800a2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2f0:	f7f5 ffcc 	bl	800028c <__adddf3>
 800a2f4:	4622      	mov	r2, r4
 800a2f6:	462b      	mov	r3, r5
 800a2f8:	f7f6 f97e 	bl	80005f8 <__aeabi_dmul>
 800a2fc:	a336      	add	r3, pc, #216	@ (adr r3, 800a3d8 <__kernel_cos+0x160>)
 800a2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a302:	f7f5 ffc1 	bl	8000288 <__aeabi_dsub>
 800a306:	4622      	mov	r2, r4
 800a308:	462b      	mov	r3, r5
 800a30a:	f7f6 f975 	bl	80005f8 <__aeabi_dmul>
 800a30e:	a334      	add	r3, pc, #208	@ (adr r3, 800a3e0 <__kernel_cos+0x168>)
 800a310:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a314:	f7f5 ffba 	bl	800028c <__adddf3>
 800a318:	4622      	mov	r2, r4
 800a31a:	462b      	mov	r3, r5
 800a31c:	f7f6 f96c 	bl	80005f8 <__aeabi_dmul>
 800a320:	4622      	mov	r2, r4
 800a322:	462b      	mov	r3, r5
 800a324:	f7f6 f968 	bl	80005f8 <__aeabi_dmul>
 800a328:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a32c:	4604      	mov	r4, r0
 800a32e:	460d      	mov	r5, r1
 800a330:	4630      	mov	r0, r6
 800a332:	4639      	mov	r1, r7
 800a334:	f7f6 f960 	bl	80005f8 <__aeabi_dmul>
 800a338:	460b      	mov	r3, r1
 800a33a:	4602      	mov	r2, r0
 800a33c:	4629      	mov	r1, r5
 800a33e:	4620      	mov	r0, r4
 800a340:	f7f5 ffa2 	bl	8000288 <__aeabi_dsub>
 800a344:	4b2b      	ldr	r3, [pc, #172]	@ (800a3f4 <__kernel_cos+0x17c>)
 800a346:	4598      	cmp	r8, r3
 800a348:	4606      	mov	r6, r0
 800a34a:	460f      	mov	r7, r1
 800a34c:	d810      	bhi.n	800a370 <__kernel_cos+0xf8>
 800a34e:	4602      	mov	r2, r0
 800a350:	460b      	mov	r3, r1
 800a352:	4650      	mov	r0, sl
 800a354:	4659      	mov	r1, fp
 800a356:	f7f5 ff97 	bl	8000288 <__aeabi_dsub>
 800a35a:	460b      	mov	r3, r1
 800a35c:	4926      	ldr	r1, [pc, #152]	@ (800a3f8 <__kernel_cos+0x180>)
 800a35e:	4602      	mov	r2, r0
 800a360:	2000      	movs	r0, #0
 800a362:	f7f5 ff91 	bl	8000288 <__aeabi_dsub>
 800a366:	ec41 0b10 	vmov	d0, r0, r1
 800a36a:	b003      	add	sp, #12
 800a36c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a370:	4b22      	ldr	r3, [pc, #136]	@ (800a3fc <__kernel_cos+0x184>)
 800a372:	4921      	ldr	r1, [pc, #132]	@ (800a3f8 <__kernel_cos+0x180>)
 800a374:	4598      	cmp	r8, r3
 800a376:	bf8c      	ite	hi
 800a378:	4d21      	ldrhi	r5, [pc, #132]	@ (800a400 <__kernel_cos+0x188>)
 800a37a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800a37e:	2400      	movs	r4, #0
 800a380:	4622      	mov	r2, r4
 800a382:	462b      	mov	r3, r5
 800a384:	2000      	movs	r0, #0
 800a386:	f7f5 ff7f 	bl	8000288 <__aeabi_dsub>
 800a38a:	4622      	mov	r2, r4
 800a38c:	4680      	mov	r8, r0
 800a38e:	4689      	mov	r9, r1
 800a390:	462b      	mov	r3, r5
 800a392:	4650      	mov	r0, sl
 800a394:	4659      	mov	r1, fp
 800a396:	f7f5 ff77 	bl	8000288 <__aeabi_dsub>
 800a39a:	4632      	mov	r2, r6
 800a39c:	463b      	mov	r3, r7
 800a39e:	f7f5 ff73 	bl	8000288 <__aeabi_dsub>
 800a3a2:	4602      	mov	r2, r0
 800a3a4:	460b      	mov	r3, r1
 800a3a6:	4640      	mov	r0, r8
 800a3a8:	4649      	mov	r1, r9
 800a3aa:	e7da      	b.n	800a362 <__kernel_cos+0xea>
 800a3ac:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800a3e8 <__kernel_cos+0x170>
 800a3b0:	e7db      	b.n	800a36a <__kernel_cos+0xf2>
 800a3b2:	bf00      	nop
 800a3b4:	f3af 8000 	nop.w
 800a3b8:	be8838d4 	.word	0xbe8838d4
 800a3bc:	bda8fae9 	.word	0xbda8fae9
 800a3c0:	bdb4b1c4 	.word	0xbdb4b1c4
 800a3c4:	3e21ee9e 	.word	0x3e21ee9e
 800a3c8:	809c52ad 	.word	0x809c52ad
 800a3cc:	3e927e4f 	.word	0x3e927e4f
 800a3d0:	19cb1590 	.word	0x19cb1590
 800a3d4:	3efa01a0 	.word	0x3efa01a0
 800a3d8:	16c15177 	.word	0x16c15177
 800a3dc:	3f56c16c 	.word	0x3f56c16c
 800a3e0:	5555554c 	.word	0x5555554c
 800a3e4:	3fa55555 	.word	0x3fa55555
 800a3e8:	00000000 	.word	0x00000000
 800a3ec:	3ff00000 	.word	0x3ff00000
 800a3f0:	3fe00000 	.word	0x3fe00000
 800a3f4:	3fd33332 	.word	0x3fd33332
 800a3f8:	3ff00000 	.word	0x3ff00000
 800a3fc:	3fe90000 	.word	0x3fe90000
 800a400:	3fd20000 	.word	0x3fd20000
 800a404:	00000000 	.word	0x00000000

0800a408 <__kernel_sin>:
 800a408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a40c:	ec55 4b10 	vmov	r4, r5, d0
 800a410:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800a414:	b085      	sub	sp, #20
 800a416:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800a41a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800a41e:	4680      	mov	r8, r0
 800a420:	d205      	bcs.n	800a42e <__kernel_sin+0x26>
 800a422:	4620      	mov	r0, r4
 800a424:	4629      	mov	r1, r5
 800a426:	f7f6 fb97 	bl	8000b58 <__aeabi_d2iz>
 800a42a:	2800      	cmp	r0, #0
 800a42c:	d052      	beq.n	800a4d4 <__kernel_sin+0xcc>
 800a42e:	4622      	mov	r2, r4
 800a430:	462b      	mov	r3, r5
 800a432:	4620      	mov	r0, r4
 800a434:	4629      	mov	r1, r5
 800a436:	f7f6 f8df 	bl	80005f8 <__aeabi_dmul>
 800a43a:	4682      	mov	sl, r0
 800a43c:	468b      	mov	fp, r1
 800a43e:	4602      	mov	r2, r0
 800a440:	460b      	mov	r3, r1
 800a442:	4620      	mov	r0, r4
 800a444:	4629      	mov	r1, r5
 800a446:	f7f6 f8d7 	bl	80005f8 <__aeabi_dmul>
 800a44a:	a342      	add	r3, pc, #264	@ (adr r3, 800a554 <__kernel_sin+0x14c>)
 800a44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a450:	e9cd 0100 	strd	r0, r1, [sp]
 800a454:	4650      	mov	r0, sl
 800a456:	4659      	mov	r1, fp
 800a458:	f7f6 f8ce 	bl	80005f8 <__aeabi_dmul>
 800a45c:	a33f      	add	r3, pc, #252	@ (adr r3, 800a55c <__kernel_sin+0x154>)
 800a45e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a462:	f7f5 ff11 	bl	8000288 <__aeabi_dsub>
 800a466:	4652      	mov	r2, sl
 800a468:	465b      	mov	r3, fp
 800a46a:	f7f6 f8c5 	bl	80005f8 <__aeabi_dmul>
 800a46e:	a33d      	add	r3, pc, #244	@ (adr r3, 800a564 <__kernel_sin+0x15c>)
 800a470:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a474:	f7f5 ff0a 	bl	800028c <__adddf3>
 800a478:	4652      	mov	r2, sl
 800a47a:	465b      	mov	r3, fp
 800a47c:	f7f6 f8bc 	bl	80005f8 <__aeabi_dmul>
 800a480:	a33a      	add	r3, pc, #232	@ (adr r3, 800a56c <__kernel_sin+0x164>)
 800a482:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a486:	f7f5 feff 	bl	8000288 <__aeabi_dsub>
 800a48a:	4652      	mov	r2, sl
 800a48c:	465b      	mov	r3, fp
 800a48e:	f7f6 f8b3 	bl	80005f8 <__aeabi_dmul>
 800a492:	a338      	add	r3, pc, #224	@ (adr r3, 800a574 <__kernel_sin+0x16c>)
 800a494:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a498:	f7f5 fef8 	bl	800028c <__adddf3>
 800a49c:	4606      	mov	r6, r0
 800a49e:	460f      	mov	r7, r1
 800a4a0:	f1b8 0f00 	cmp.w	r8, #0
 800a4a4:	d11b      	bne.n	800a4de <__kernel_sin+0xd6>
 800a4a6:	4602      	mov	r2, r0
 800a4a8:	460b      	mov	r3, r1
 800a4aa:	4650      	mov	r0, sl
 800a4ac:	4659      	mov	r1, fp
 800a4ae:	f7f6 f8a3 	bl	80005f8 <__aeabi_dmul>
 800a4b2:	a325      	add	r3, pc, #148	@ (adr r3, 800a548 <__kernel_sin+0x140>)
 800a4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4b8:	f7f5 fee6 	bl	8000288 <__aeabi_dsub>
 800a4bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a4c0:	f7f6 f89a 	bl	80005f8 <__aeabi_dmul>
 800a4c4:	4602      	mov	r2, r0
 800a4c6:	460b      	mov	r3, r1
 800a4c8:	4620      	mov	r0, r4
 800a4ca:	4629      	mov	r1, r5
 800a4cc:	f7f5 fede 	bl	800028c <__adddf3>
 800a4d0:	4604      	mov	r4, r0
 800a4d2:	460d      	mov	r5, r1
 800a4d4:	ec45 4b10 	vmov	d0, r4, r5
 800a4d8:	b005      	add	sp, #20
 800a4da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4e2:	4b1b      	ldr	r3, [pc, #108]	@ (800a550 <__kernel_sin+0x148>)
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	f7f6 f887 	bl	80005f8 <__aeabi_dmul>
 800a4ea:	4632      	mov	r2, r6
 800a4ec:	4680      	mov	r8, r0
 800a4ee:	4689      	mov	r9, r1
 800a4f0:	463b      	mov	r3, r7
 800a4f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a4f6:	f7f6 f87f 	bl	80005f8 <__aeabi_dmul>
 800a4fa:	4602      	mov	r2, r0
 800a4fc:	460b      	mov	r3, r1
 800a4fe:	4640      	mov	r0, r8
 800a500:	4649      	mov	r1, r9
 800a502:	f7f5 fec1 	bl	8000288 <__aeabi_dsub>
 800a506:	4652      	mov	r2, sl
 800a508:	465b      	mov	r3, fp
 800a50a:	f7f6 f875 	bl	80005f8 <__aeabi_dmul>
 800a50e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a512:	f7f5 feb9 	bl	8000288 <__aeabi_dsub>
 800a516:	a30c      	add	r3, pc, #48	@ (adr r3, 800a548 <__kernel_sin+0x140>)
 800a518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a51c:	4606      	mov	r6, r0
 800a51e:	460f      	mov	r7, r1
 800a520:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a524:	f7f6 f868 	bl	80005f8 <__aeabi_dmul>
 800a528:	4602      	mov	r2, r0
 800a52a:	460b      	mov	r3, r1
 800a52c:	4630      	mov	r0, r6
 800a52e:	4639      	mov	r1, r7
 800a530:	f7f5 feac 	bl	800028c <__adddf3>
 800a534:	4602      	mov	r2, r0
 800a536:	460b      	mov	r3, r1
 800a538:	4620      	mov	r0, r4
 800a53a:	4629      	mov	r1, r5
 800a53c:	f7f5 fea4 	bl	8000288 <__aeabi_dsub>
 800a540:	e7c6      	b.n	800a4d0 <__kernel_sin+0xc8>
 800a542:	bf00      	nop
 800a544:	f3af 8000 	nop.w
 800a548:	55555549 	.word	0x55555549
 800a54c:	3fc55555 	.word	0x3fc55555
 800a550:	3fe00000 	.word	0x3fe00000
 800a554:	5acfd57c 	.word	0x5acfd57c
 800a558:	3de5d93a 	.word	0x3de5d93a
 800a55c:	8a2b9ceb 	.word	0x8a2b9ceb
 800a560:	3e5ae5e6 	.word	0x3e5ae5e6
 800a564:	57b1fe7d 	.word	0x57b1fe7d
 800a568:	3ec71de3 	.word	0x3ec71de3
 800a56c:	19c161d5 	.word	0x19c161d5
 800a570:	3f2a01a0 	.word	0x3f2a01a0
 800a574:	1110f8a6 	.word	0x1110f8a6
 800a578:	3f811111 	.word	0x3f811111
 800a57c:	00000000 	.word	0x00000000

0800a580 <__ieee754_pow>:
 800a580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a584:	b091      	sub	sp, #68	@ 0x44
 800a586:	ed8d 1b00 	vstr	d1, [sp]
 800a58a:	e9dd 1900 	ldrd	r1, r9, [sp]
 800a58e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800a592:	ea5a 0001 	orrs.w	r0, sl, r1
 800a596:	ec57 6b10 	vmov	r6, r7, d0
 800a59a:	d113      	bne.n	800a5c4 <__ieee754_pow+0x44>
 800a59c:	19b3      	adds	r3, r6, r6
 800a59e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800a5a2:	4152      	adcs	r2, r2
 800a5a4:	4298      	cmp	r0, r3
 800a5a6:	4b98      	ldr	r3, [pc, #608]	@ (800a808 <__ieee754_pow+0x288>)
 800a5a8:	4193      	sbcs	r3, r2
 800a5aa:	f080 84ea 	bcs.w	800af82 <__ieee754_pow+0xa02>
 800a5ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a5b2:	4630      	mov	r0, r6
 800a5b4:	4639      	mov	r1, r7
 800a5b6:	f7f5 fe69 	bl	800028c <__adddf3>
 800a5ba:	ec41 0b10 	vmov	d0, r0, r1
 800a5be:	b011      	add	sp, #68	@ 0x44
 800a5c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5c4:	4a91      	ldr	r2, [pc, #580]	@ (800a80c <__ieee754_pow+0x28c>)
 800a5c6:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800a5ca:	4590      	cmp	r8, r2
 800a5cc:	463d      	mov	r5, r7
 800a5ce:	4633      	mov	r3, r6
 800a5d0:	d806      	bhi.n	800a5e0 <__ieee754_pow+0x60>
 800a5d2:	d101      	bne.n	800a5d8 <__ieee754_pow+0x58>
 800a5d4:	2e00      	cmp	r6, #0
 800a5d6:	d1ea      	bne.n	800a5ae <__ieee754_pow+0x2e>
 800a5d8:	4592      	cmp	sl, r2
 800a5da:	d801      	bhi.n	800a5e0 <__ieee754_pow+0x60>
 800a5dc:	d10e      	bne.n	800a5fc <__ieee754_pow+0x7c>
 800a5de:	b169      	cbz	r1, 800a5fc <__ieee754_pow+0x7c>
 800a5e0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800a5e4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800a5e8:	431d      	orrs	r5, r3
 800a5ea:	d1e0      	bne.n	800a5ae <__ieee754_pow+0x2e>
 800a5ec:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a5f0:	18db      	adds	r3, r3, r3
 800a5f2:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800a5f6:	4152      	adcs	r2, r2
 800a5f8:	429d      	cmp	r5, r3
 800a5fa:	e7d4      	b.n	800a5a6 <__ieee754_pow+0x26>
 800a5fc:	2d00      	cmp	r5, #0
 800a5fe:	46c3      	mov	fp, r8
 800a600:	da3a      	bge.n	800a678 <__ieee754_pow+0xf8>
 800a602:	4a83      	ldr	r2, [pc, #524]	@ (800a810 <__ieee754_pow+0x290>)
 800a604:	4592      	cmp	sl, r2
 800a606:	d84d      	bhi.n	800a6a4 <__ieee754_pow+0x124>
 800a608:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800a60c:	4592      	cmp	sl, r2
 800a60e:	f240 84c7 	bls.w	800afa0 <__ieee754_pow+0xa20>
 800a612:	ea4f 522a 	mov.w	r2, sl, asr #20
 800a616:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800a61a:	2a14      	cmp	r2, #20
 800a61c:	dd0f      	ble.n	800a63e <__ieee754_pow+0xbe>
 800a61e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800a622:	fa21 f402 	lsr.w	r4, r1, r2
 800a626:	fa04 f202 	lsl.w	r2, r4, r2
 800a62a:	428a      	cmp	r2, r1
 800a62c:	f040 84b8 	bne.w	800afa0 <__ieee754_pow+0xa20>
 800a630:	f004 0401 	and.w	r4, r4, #1
 800a634:	f1c4 0402 	rsb	r4, r4, #2
 800a638:	2900      	cmp	r1, #0
 800a63a:	d158      	bne.n	800a6ee <__ieee754_pow+0x16e>
 800a63c:	e00e      	b.n	800a65c <__ieee754_pow+0xdc>
 800a63e:	2900      	cmp	r1, #0
 800a640:	d154      	bne.n	800a6ec <__ieee754_pow+0x16c>
 800a642:	f1c2 0214 	rsb	r2, r2, #20
 800a646:	fa4a f402 	asr.w	r4, sl, r2
 800a64a:	fa04 f202 	lsl.w	r2, r4, r2
 800a64e:	4552      	cmp	r2, sl
 800a650:	f040 84a3 	bne.w	800af9a <__ieee754_pow+0xa1a>
 800a654:	f004 0401 	and.w	r4, r4, #1
 800a658:	f1c4 0402 	rsb	r4, r4, #2
 800a65c:	4a6d      	ldr	r2, [pc, #436]	@ (800a814 <__ieee754_pow+0x294>)
 800a65e:	4592      	cmp	sl, r2
 800a660:	d12e      	bne.n	800a6c0 <__ieee754_pow+0x140>
 800a662:	f1b9 0f00 	cmp.w	r9, #0
 800a666:	f280 8494 	bge.w	800af92 <__ieee754_pow+0xa12>
 800a66a:	496a      	ldr	r1, [pc, #424]	@ (800a814 <__ieee754_pow+0x294>)
 800a66c:	4632      	mov	r2, r6
 800a66e:	463b      	mov	r3, r7
 800a670:	2000      	movs	r0, #0
 800a672:	f7f6 f8eb 	bl	800084c <__aeabi_ddiv>
 800a676:	e7a0      	b.n	800a5ba <__ieee754_pow+0x3a>
 800a678:	2400      	movs	r4, #0
 800a67a:	bbc1      	cbnz	r1, 800a6ee <__ieee754_pow+0x16e>
 800a67c:	4a63      	ldr	r2, [pc, #396]	@ (800a80c <__ieee754_pow+0x28c>)
 800a67e:	4592      	cmp	sl, r2
 800a680:	d1ec      	bne.n	800a65c <__ieee754_pow+0xdc>
 800a682:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800a686:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800a68a:	431a      	orrs	r2, r3
 800a68c:	f000 8479 	beq.w	800af82 <__ieee754_pow+0xa02>
 800a690:	4b61      	ldr	r3, [pc, #388]	@ (800a818 <__ieee754_pow+0x298>)
 800a692:	4598      	cmp	r8, r3
 800a694:	d908      	bls.n	800a6a8 <__ieee754_pow+0x128>
 800a696:	f1b9 0f00 	cmp.w	r9, #0
 800a69a:	f2c0 8476 	blt.w	800af8a <__ieee754_pow+0xa0a>
 800a69e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a6a2:	e78a      	b.n	800a5ba <__ieee754_pow+0x3a>
 800a6a4:	2402      	movs	r4, #2
 800a6a6:	e7e8      	b.n	800a67a <__ieee754_pow+0xfa>
 800a6a8:	f1b9 0f00 	cmp.w	r9, #0
 800a6ac:	f04f 0000 	mov.w	r0, #0
 800a6b0:	f04f 0100 	mov.w	r1, #0
 800a6b4:	da81      	bge.n	800a5ba <__ieee754_pow+0x3a>
 800a6b6:	e9dd 0300 	ldrd	r0, r3, [sp]
 800a6ba:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800a6be:	e77c      	b.n	800a5ba <__ieee754_pow+0x3a>
 800a6c0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800a6c4:	d106      	bne.n	800a6d4 <__ieee754_pow+0x154>
 800a6c6:	4632      	mov	r2, r6
 800a6c8:	463b      	mov	r3, r7
 800a6ca:	4630      	mov	r0, r6
 800a6cc:	4639      	mov	r1, r7
 800a6ce:	f7f5 ff93 	bl	80005f8 <__aeabi_dmul>
 800a6d2:	e772      	b.n	800a5ba <__ieee754_pow+0x3a>
 800a6d4:	4a51      	ldr	r2, [pc, #324]	@ (800a81c <__ieee754_pow+0x29c>)
 800a6d6:	4591      	cmp	r9, r2
 800a6d8:	d109      	bne.n	800a6ee <__ieee754_pow+0x16e>
 800a6da:	2d00      	cmp	r5, #0
 800a6dc:	db07      	blt.n	800a6ee <__ieee754_pow+0x16e>
 800a6de:	ec47 6b10 	vmov	d0, r6, r7
 800a6e2:	b011      	add	sp, #68	@ 0x44
 800a6e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6e8:	f7ff bca6 	b.w	800a038 <__ieee754_sqrt>
 800a6ec:	2400      	movs	r4, #0
 800a6ee:	ec47 6b10 	vmov	d0, r6, r7
 800a6f2:	9302      	str	r3, [sp, #8]
 800a6f4:	f000 fe84 	bl	800b400 <fabs>
 800a6f8:	9b02      	ldr	r3, [sp, #8]
 800a6fa:	ec51 0b10 	vmov	r0, r1, d0
 800a6fe:	bb53      	cbnz	r3, 800a756 <__ieee754_pow+0x1d6>
 800a700:	4b44      	ldr	r3, [pc, #272]	@ (800a814 <__ieee754_pow+0x294>)
 800a702:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800a706:	429a      	cmp	r2, r3
 800a708:	d002      	beq.n	800a710 <__ieee754_pow+0x190>
 800a70a:	f1b8 0f00 	cmp.w	r8, #0
 800a70e:	d122      	bne.n	800a756 <__ieee754_pow+0x1d6>
 800a710:	f1b9 0f00 	cmp.w	r9, #0
 800a714:	da05      	bge.n	800a722 <__ieee754_pow+0x1a2>
 800a716:	4602      	mov	r2, r0
 800a718:	460b      	mov	r3, r1
 800a71a:	2000      	movs	r0, #0
 800a71c:	493d      	ldr	r1, [pc, #244]	@ (800a814 <__ieee754_pow+0x294>)
 800a71e:	f7f6 f895 	bl	800084c <__aeabi_ddiv>
 800a722:	2d00      	cmp	r5, #0
 800a724:	f6bf af49 	bge.w	800a5ba <__ieee754_pow+0x3a>
 800a728:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800a72c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800a730:	ea58 0804 	orrs.w	r8, r8, r4
 800a734:	d108      	bne.n	800a748 <__ieee754_pow+0x1c8>
 800a736:	4602      	mov	r2, r0
 800a738:	460b      	mov	r3, r1
 800a73a:	4610      	mov	r0, r2
 800a73c:	4619      	mov	r1, r3
 800a73e:	f7f5 fda3 	bl	8000288 <__aeabi_dsub>
 800a742:	4602      	mov	r2, r0
 800a744:	460b      	mov	r3, r1
 800a746:	e794      	b.n	800a672 <__ieee754_pow+0xf2>
 800a748:	2c01      	cmp	r4, #1
 800a74a:	f47f af36 	bne.w	800a5ba <__ieee754_pow+0x3a>
 800a74e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a752:	4619      	mov	r1, r3
 800a754:	e731      	b.n	800a5ba <__ieee754_pow+0x3a>
 800a756:	0feb      	lsrs	r3, r5, #31
 800a758:	3b01      	subs	r3, #1
 800a75a:	ea53 0204 	orrs.w	r2, r3, r4
 800a75e:	d102      	bne.n	800a766 <__ieee754_pow+0x1e6>
 800a760:	4632      	mov	r2, r6
 800a762:	463b      	mov	r3, r7
 800a764:	e7e9      	b.n	800a73a <__ieee754_pow+0x1ba>
 800a766:	3c01      	subs	r4, #1
 800a768:	431c      	orrs	r4, r3
 800a76a:	d016      	beq.n	800a79a <__ieee754_pow+0x21a>
 800a76c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800a7f8 <__ieee754_pow+0x278>
 800a770:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800a774:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a778:	f240 8112 	bls.w	800a9a0 <__ieee754_pow+0x420>
 800a77c:	4b28      	ldr	r3, [pc, #160]	@ (800a820 <__ieee754_pow+0x2a0>)
 800a77e:	459a      	cmp	sl, r3
 800a780:	4b25      	ldr	r3, [pc, #148]	@ (800a818 <__ieee754_pow+0x298>)
 800a782:	d916      	bls.n	800a7b2 <__ieee754_pow+0x232>
 800a784:	4598      	cmp	r8, r3
 800a786:	d80b      	bhi.n	800a7a0 <__ieee754_pow+0x220>
 800a788:	f1b9 0f00 	cmp.w	r9, #0
 800a78c:	da0b      	bge.n	800a7a6 <__ieee754_pow+0x226>
 800a78e:	2000      	movs	r0, #0
 800a790:	b011      	add	sp, #68	@ 0x44
 800a792:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a796:	f000 beef 	b.w	800b578 <__math_oflow>
 800a79a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800a800 <__ieee754_pow+0x280>
 800a79e:	e7e7      	b.n	800a770 <__ieee754_pow+0x1f0>
 800a7a0:	f1b9 0f00 	cmp.w	r9, #0
 800a7a4:	dcf3      	bgt.n	800a78e <__ieee754_pow+0x20e>
 800a7a6:	2000      	movs	r0, #0
 800a7a8:	b011      	add	sp, #68	@ 0x44
 800a7aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7ae:	f000 bedb 	b.w	800b568 <__math_uflow>
 800a7b2:	4598      	cmp	r8, r3
 800a7b4:	d20c      	bcs.n	800a7d0 <__ieee754_pow+0x250>
 800a7b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	2300      	movs	r3, #0
 800a7be:	f7f6 f98d 	bl	8000adc <__aeabi_dcmplt>
 800a7c2:	3800      	subs	r0, #0
 800a7c4:	bf18      	it	ne
 800a7c6:	2001      	movne	r0, #1
 800a7c8:	f1b9 0f00 	cmp.w	r9, #0
 800a7cc:	daec      	bge.n	800a7a8 <__ieee754_pow+0x228>
 800a7ce:	e7df      	b.n	800a790 <__ieee754_pow+0x210>
 800a7d0:	4b10      	ldr	r3, [pc, #64]	@ (800a814 <__ieee754_pow+0x294>)
 800a7d2:	4598      	cmp	r8, r3
 800a7d4:	f04f 0200 	mov.w	r2, #0
 800a7d8:	d924      	bls.n	800a824 <__ieee754_pow+0x2a4>
 800a7da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7de:	2300      	movs	r3, #0
 800a7e0:	f7f6 f97c 	bl	8000adc <__aeabi_dcmplt>
 800a7e4:	3800      	subs	r0, #0
 800a7e6:	bf18      	it	ne
 800a7e8:	2001      	movne	r0, #1
 800a7ea:	f1b9 0f00 	cmp.w	r9, #0
 800a7ee:	dccf      	bgt.n	800a790 <__ieee754_pow+0x210>
 800a7f0:	e7da      	b.n	800a7a8 <__ieee754_pow+0x228>
 800a7f2:	bf00      	nop
 800a7f4:	f3af 8000 	nop.w
 800a7f8:	00000000 	.word	0x00000000
 800a7fc:	3ff00000 	.word	0x3ff00000
 800a800:	00000000 	.word	0x00000000
 800a804:	bff00000 	.word	0xbff00000
 800a808:	fff00000 	.word	0xfff00000
 800a80c:	7ff00000 	.word	0x7ff00000
 800a810:	433fffff 	.word	0x433fffff
 800a814:	3ff00000 	.word	0x3ff00000
 800a818:	3fefffff 	.word	0x3fefffff
 800a81c:	3fe00000 	.word	0x3fe00000
 800a820:	43f00000 	.word	0x43f00000
 800a824:	4b5a      	ldr	r3, [pc, #360]	@ (800a990 <__ieee754_pow+0x410>)
 800a826:	f7f5 fd2f 	bl	8000288 <__aeabi_dsub>
 800a82a:	a351      	add	r3, pc, #324	@ (adr r3, 800a970 <__ieee754_pow+0x3f0>)
 800a82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a830:	4604      	mov	r4, r0
 800a832:	460d      	mov	r5, r1
 800a834:	f7f5 fee0 	bl	80005f8 <__aeabi_dmul>
 800a838:	a34f      	add	r3, pc, #316	@ (adr r3, 800a978 <__ieee754_pow+0x3f8>)
 800a83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a83e:	4606      	mov	r6, r0
 800a840:	460f      	mov	r7, r1
 800a842:	4620      	mov	r0, r4
 800a844:	4629      	mov	r1, r5
 800a846:	f7f5 fed7 	bl	80005f8 <__aeabi_dmul>
 800a84a:	4b52      	ldr	r3, [pc, #328]	@ (800a994 <__ieee754_pow+0x414>)
 800a84c:	4682      	mov	sl, r0
 800a84e:	468b      	mov	fp, r1
 800a850:	2200      	movs	r2, #0
 800a852:	4620      	mov	r0, r4
 800a854:	4629      	mov	r1, r5
 800a856:	f7f5 fecf 	bl	80005f8 <__aeabi_dmul>
 800a85a:	4602      	mov	r2, r0
 800a85c:	460b      	mov	r3, r1
 800a85e:	a148      	add	r1, pc, #288	@ (adr r1, 800a980 <__ieee754_pow+0x400>)
 800a860:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a864:	f7f5 fd10 	bl	8000288 <__aeabi_dsub>
 800a868:	4622      	mov	r2, r4
 800a86a:	462b      	mov	r3, r5
 800a86c:	f7f5 fec4 	bl	80005f8 <__aeabi_dmul>
 800a870:	4602      	mov	r2, r0
 800a872:	460b      	mov	r3, r1
 800a874:	2000      	movs	r0, #0
 800a876:	4948      	ldr	r1, [pc, #288]	@ (800a998 <__ieee754_pow+0x418>)
 800a878:	f7f5 fd06 	bl	8000288 <__aeabi_dsub>
 800a87c:	4622      	mov	r2, r4
 800a87e:	4680      	mov	r8, r0
 800a880:	4689      	mov	r9, r1
 800a882:	462b      	mov	r3, r5
 800a884:	4620      	mov	r0, r4
 800a886:	4629      	mov	r1, r5
 800a888:	f7f5 feb6 	bl	80005f8 <__aeabi_dmul>
 800a88c:	4602      	mov	r2, r0
 800a88e:	460b      	mov	r3, r1
 800a890:	4640      	mov	r0, r8
 800a892:	4649      	mov	r1, r9
 800a894:	f7f5 feb0 	bl	80005f8 <__aeabi_dmul>
 800a898:	a33b      	add	r3, pc, #236	@ (adr r3, 800a988 <__ieee754_pow+0x408>)
 800a89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a89e:	f7f5 feab 	bl	80005f8 <__aeabi_dmul>
 800a8a2:	4602      	mov	r2, r0
 800a8a4:	460b      	mov	r3, r1
 800a8a6:	4650      	mov	r0, sl
 800a8a8:	4659      	mov	r1, fp
 800a8aa:	f7f5 fced 	bl	8000288 <__aeabi_dsub>
 800a8ae:	4602      	mov	r2, r0
 800a8b0:	460b      	mov	r3, r1
 800a8b2:	4680      	mov	r8, r0
 800a8b4:	4689      	mov	r9, r1
 800a8b6:	4630      	mov	r0, r6
 800a8b8:	4639      	mov	r1, r7
 800a8ba:	f7f5 fce7 	bl	800028c <__adddf3>
 800a8be:	2400      	movs	r4, #0
 800a8c0:	4632      	mov	r2, r6
 800a8c2:	463b      	mov	r3, r7
 800a8c4:	4620      	mov	r0, r4
 800a8c6:	460d      	mov	r5, r1
 800a8c8:	f7f5 fcde 	bl	8000288 <__aeabi_dsub>
 800a8cc:	4602      	mov	r2, r0
 800a8ce:	460b      	mov	r3, r1
 800a8d0:	4640      	mov	r0, r8
 800a8d2:	4649      	mov	r1, r9
 800a8d4:	f7f5 fcd8 	bl	8000288 <__aeabi_dsub>
 800a8d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a8dc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	9304      	str	r3, [sp, #16]
 800a8e4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800a8e8:	4606      	mov	r6, r0
 800a8ea:	460f      	mov	r7, r1
 800a8ec:	4652      	mov	r2, sl
 800a8ee:	465b      	mov	r3, fp
 800a8f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a8f4:	f7f5 fcc8 	bl	8000288 <__aeabi_dsub>
 800a8f8:	4622      	mov	r2, r4
 800a8fa:	462b      	mov	r3, r5
 800a8fc:	f7f5 fe7c 	bl	80005f8 <__aeabi_dmul>
 800a900:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a904:	4680      	mov	r8, r0
 800a906:	4689      	mov	r9, r1
 800a908:	4630      	mov	r0, r6
 800a90a:	4639      	mov	r1, r7
 800a90c:	f7f5 fe74 	bl	80005f8 <__aeabi_dmul>
 800a910:	4602      	mov	r2, r0
 800a912:	460b      	mov	r3, r1
 800a914:	4640      	mov	r0, r8
 800a916:	4649      	mov	r1, r9
 800a918:	f7f5 fcb8 	bl	800028c <__adddf3>
 800a91c:	4652      	mov	r2, sl
 800a91e:	465b      	mov	r3, fp
 800a920:	4606      	mov	r6, r0
 800a922:	460f      	mov	r7, r1
 800a924:	4620      	mov	r0, r4
 800a926:	4629      	mov	r1, r5
 800a928:	f7f5 fe66 	bl	80005f8 <__aeabi_dmul>
 800a92c:	460b      	mov	r3, r1
 800a92e:	4602      	mov	r2, r0
 800a930:	4680      	mov	r8, r0
 800a932:	4689      	mov	r9, r1
 800a934:	4630      	mov	r0, r6
 800a936:	4639      	mov	r1, r7
 800a938:	f7f5 fca8 	bl	800028c <__adddf3>
 800a93c:	4b17      	ldr	r3, [pc, #92]	@ (800a99c <__ieee754_pow+0x41c>)
 800a93e:	4299      	cmp	r1, r3
 800a940:	4604      	mov	r4, r0
 800a942:	460d      	mov	r5, r1
 800a944:	468a      	mov	sl, r1
 800a946:	468b      	mov	fp, r1
 800a948:	f340 82ef 	ble.w	800af2a <__ieee754_pow+0x9aa>
 800a94c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800a950:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800a954:	4303      	orrs	r3, r0
 800a956:	f000 81e8 	beq.w	800ad2a <__ieee754_pow+0x7aa>
 800a95a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a95e:	2200      	movs	r2, #0
 800a960:	2300      	movs	r3, #0
 800a962:	f7f6 f8bb 	bl	8000adc <__aeabi_dcmplt>
 800a966:	3800      	subs	r0, #0
 800a968:	bf18      	it	ne
 800a96a:	2001      	movne	r0, #1
 800a96c:	e710      	b.n	800a790 <__ieee754_pow+0x210>
 800a96e:	bf00      	nop
 800a970:	60000000 	.word	0x60000000
 800a974:	3ff71547 	.word	0x3ff71547
 800a978:	f85ddf44 	.word	0xf85ddf44
 800a97c:	3e54ae0b 	.word	0x3e54ae0b
 800a980:	55555555 	.word	0x55555555
 800a984:	3fd55555 	.word	0x3fd55555
 800a988:	652b82fe 	.word	0x652b82fe
 800a98c:	3ff71547 	.word	0x3ff71547
 800a990:	3ff00000 	.word	0x3ff00000
 800a994:	3fd00000 	.word	0x3fd00000
 800a998:	3fe00000 	.word	0x3fe00000
 800a99c:	408fffff 	.word	0x408fffff
 800a9a0:	4bd5      	ldr	r3, [pc, #852]	@ (800acf8 <__ieee754_pow+0x778>)
 800a9a2:	402b      	ands	r3, r5
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	b92b      	cbnz	r3, 800a9b4 <__ieee754_pow+0x434>
 800a9a8:	4bd4      	ldr	r3, [pc, #848]	@ (800acfc <__ieee754_pow+0x77c>)
 800a9aa:	f7f5 fe25 	bl	80005f8 <__aeabi_dmul>
 800a9ae:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800a9b2:	468b      	mov	fp, r1
 800a9b4:	ea4f 532b 	mov.w	r3, fp, asr #20
 800a9b8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800a9bc:	4413      	add	r3, r2
 800a9be:	930a      	str	r3, [sp, #40]	@ 0x28
 800a9c0:	4bcf      	ldr	r3, [pc, #828]	@ (800ad00 <__ieee754_pow+0x780>)
 800a9c2:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800a9c6:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800a9ca:	459b      	cmp	fp, r3
 800a9cc:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a9d0:	dd08      	ble.n	800a9e4 <__ieee754_pow+0x464>
 800a9d2:	4bcc      	ldr	r3, [pc, #816]	@ (800ad04 <__ieee754_pow+0x784>)
 800a9d4:	459b      	cmp	fp, r3
 800a9d6:	f340 81a5 	ble.w	800ad24 <__ieee754_pow+0x7a4>
 800a9da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a9dc:	3301      	adds	r3, #1
 800a9de:	930a      	str	r3, [sp, #40]	@ 0x28
 800a9e0:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800a9e4:	f04f 0a00 	mov.w	sl, #0
 800a9e8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800a9ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a9ee:	4bc6      	ldr	r3, [pc, #792]	@ (800ad08 <__ieee754_pow+0x788>)
 800a9f0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a9f4:	ed93 7b00 	vldr	d7, [r3]
 800a9f8:	4629      	mov	r1, r5
 800a9fa:	ec53 2b17 	vmov	r2, r3, d7
 800a9fe:	ed8d 7b06 	vstr	d7, [sp, #24]
 800aa02:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800aa06:	f7f5 fc3f 	bl	8000288 <__aeabi_dsub>
 800aa0a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800aa0e:	4606      	mov	r6, r0
 800aa10:	460f      	mov	r7, r1
 800aa12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa16:	f7f5 fc39 	bl	800028c <__adddf3>
 800aa1a:	4602      	mov	r2, r0
 800aa1c:	460b      	mov	r3, r1
 800aa1e:	2000      	movs	r0, #0
 800aa20:	49ba      	ldr	r1, [pc, #744]	@ (800ad0c <__ieee754_pow+0x78c>)
 800aa22:	f7f5 ff13 	bl	800084c <__aeabi_ddiv>
 800aa26:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800aa2a:	4602      	mov	r2, r0
 800aa2c:	460b      	mov	r3, r1
 800aa2e:	4630      	mov	r0, r6
 800aa30:	4639      	mov	r1, r7
 800aa32:	f7f5 fde1 	bl	80005f8 <__aeabi_dmul>
 800aa36:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aa3a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800aa3e:	106d      	asrs	r5, r5, #1
 800aa40:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800aa44:	f04f 0b00 	mov.w	fp, #0
 800aa48:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800aa4c:	4661      	mov	r1, ip
 800aa4e:	2200      	movs	r2, #0
 800aa50:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800aa54:	4658      	mov	r0, fp
 800aa56:	46e1      	mov	r9, ip
 800aa58:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800aa5c:	4614      	mov	r4, r2
 800aa5e:	461d      	mov	r5, r3
 800aa60:	f7f5 fdca 	bl	80005f8 <__aeabi_dmul>
 800aa64:	4602      	mov	r2, r0
 800aa66:	460b      	mov	r3, r1
 800aa68:	4630      	mov	r0, r6
 800aa6a:	4639      	mov	r1, r7
 800aa6c:	f7f5 fc0c 	bl	8000288 <__aeabi_dsub>
 800aa70:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aa74:	4606      	mov	r6, r0
 800aa76:	460f      	mov	r7, r1
 800aa78:	4620      	mov	r0, r4
 800aa7a:	4629      	mov	r1, r5
 800aa7c:	f7f5 fc04 	bl	8000288 <__aeabi_dsub>
 800aa80:	4602      	mov	r2, r0
 800aa82:	460b      	mov	r3, r1
 800aa84:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800aa88:	f7f5 fbfe 	bl	8000288 <__aeabi_dsub>
 800aa8c:	465a      	mov	r2, fp
 800aa8e:	464b      	mov	r3, r9
 800aa90:	f7f5 fdb2 	bl	80005f8 <__aeabi_dmul>
 800aa94:	4602      	mov	r2, r0
 800aa96:	460b      	mov	r3, r1
 800aa98:	4630      	mov	r0, r6
 800aa9a:	4639      	mov	r1, r7
 800aa9c:	f7f5 fbf4 	bl	8000288 <__aeabi_dsub>
 800aaa0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800aaa4:	f7f5 fda8 	bl	80005f8 <__aeabi_dmul>
 800aaa8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aaac:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800aab0:	4610      	mov	r0, r2
 800aab2:	4619      	mov	r1, r3
 800aab4:	f7f5 fda0 	bl	80005f8 <__aeabi_dmul>
 800aab8:	a37d      	add	r3, pc, #500	@ (adr r3, 800acb0 <__ieee754_pow+0x730>)
 800aaba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aabe:	4604      	mov	r4, r0
 800aac0:	460d      	mov	r5, r1
 800aac2:	f7f5 fd99 	bl	80005f8 <__aeabi_dmul>
 800aac6:	a37c      	add	r3, pc, #496	@ (adr r3, 800acb8 <__ieee754_pow+0x738>)
 800aac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aacc:	f7f5 fbde 	bl	800028c <__adddf3>
 800aad0:	4622      	mov	r2, r4
 800aad2:	462b      	mov	r3, r5
 800aad4:	f7f5 fd90 	bl	80005f8 <__aeabi_dmul>
 800aad8:	a379      	add	r3, pc, #484	@ (adr r3, 800acc0 <__ieee754_pow+0x740>)
 800aada:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aade:	f7f5 fbd5 	bl	800028c <__adddf3>
 800aae2:	4622      	mov	r2, r4
 800aae4:	462b      	mov	r3, r5
 800aae6:	f7f5 fd87 	bl	80005f8 <__aeabi_dmul>
 800aaea:	a377      	add	r3, pc, #476	@ (adr r3, 800acc8 <__ieee754_pow+0x748>)
 800aaec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf0:	f7f5 fbcc 	bl	800028c <__adddf3>
 800aaf4:	4622      	mov	r2, r4
 800aaf6:	462b      	mov	r3, r5
 800aaf8:	f7f5 fd7e 	bl	80005f8 <__aeabi_dmul>
 800aafc:	a374      	add	r3, pc, #464	@ (adr r3, 800acd0 <__ieee754_pow+0x750>)
 800aafe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab02:	f7f5 fbc3 	bl	800028c <__adddf3>
 800ab06:	4622      	mov	r2, r4
 800ab08:	462b      	mov	r3, r5
 800ab0a:	f7f5 fd75 	bl	80005f8 <__aeabi_dmul>
 800ab0e:	a372      	add	r3, pc, #456	@ (adr r3, 800acd8 <__ieee754_pow+0x758>)
 800ab10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab14:	f7f5 fbba 	bl	800028c <__adddf3>
 800ab18:	4622      	mov	r2, r4
 800ab1a:	4606      	mov	r6, r0
 800ab1c:	460f      	mov	r7, r1
 800ab1e:	462b      	mov	r3, r5
 800ab20:	4620      	mov	r0, r4
 800ab22:	4629      	mov	r1, r5
 800ab24:	f7f5 fd68 	bl	80005f8 <__aeabi_dmul>
 800ab28:	4602      	mov	r2, r0
 800ab2a:	460b      	mov	r3, r1
 800ab2c:	4630      	mov	r0, r6
 800ab2e:	4639      	mov	r1, r7
 800ab30:	f7f5 fd62 	bl	80005f8 <__aeabi_dmul>
 800ab34:	465a      	mov	r2, fp
 800ab36:	4604      	mov	r4, r0
 800ab38:	460d      	mov	r5, r1
 800ab3a:	464b      	mov	r3, r9
 800ab3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab40:	f7f5 fba4 	bl	800028c <__adddf3>
 800ab44:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ab48:	f7f5 fd56 	bl	80005f8 <__aeabi_dmul>
 800ab4c:	4622      	mov	r2, r4
 800ab4e:	462b      	mov	r3, r5
 800ab50:	f7f5 fb9c 	bl	800028c <__adddf3>
 800ab54:	465a      	mov	r2, fp
 800ab56:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ab5a:	464b      	mov	r3, r9
 800ab5c:	4658      	mov	r0, fp
 800ab5e:	4649      	mov	r1, r9
 800ab60:	f7f5 fd4a 	bl	80005f8 <__aeabi_dmul>
 800ab64:	4b6a      	ldr	r3, [pc, #424]	@ (800ad10 <__ieee754_pow+0x790>)
 800ab66:	2200      	movs	r2, #0
 800ab68:	4606      	mov	r6, r0
 800ab6a:	460f      	mov	r7, r1
 800ab6c:	f7f5 fb8e 	bl	800028c <__adddf3>
 800ab70:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ab74:	f7f5 fb8a 	bl	800028c <__adddf3>
 800ab78:	46d8      	mov	r8, fp
 800ab7a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800ab7e:	460d      	mov	r5, r1
 800ab80:	465a      	mov	r2, fp
 800ab82:	460b      	mov	r3, r1
 800ab84:	4640      	mov	r0, r8
 800ab86:	4649      	mov	r1, r9
 800ab88:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800ab8c:	f7f5 fd34 	bl	80005f8 <__aeabi_dmul>
 800ab90:	465c      	mov	r4, fp
 800ab92:	4680      	mov	r8, r0
 800ab94:	4689      	mov	r9, r1
 800ab96:	4b5e      	ldr	r3, [pc, #376]	@ (800ad10 <__ieee754_pow+0x790>)
 800ab98:	2200      	movs	r2, #0
 800ab9a:	4620      	mov	r0, r4
 800ab9c:	4629      	mov	r1, r5
 800ab9e:	f7f5 fb73 	bl	8000288 <__aeabi_dsub>
 800aba2:	4632      	mov	r2, r6
 800aba4:	463b      	mov	r3, r7
 800aba6:	f7f5 fb6f 	bl	8000288 <__aeabi_dsub>
 800abaa:	4602      	mov	r2, r0
 800abac:	460b      	mov	r3, r1
 800abae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800abb2:	f7f5 fb69 	bl	8000288 <__aeabi_dsub>
 800abb6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800abba:	f7f5 fd1d 	bl	80005f8 <__aeabi_dmul>
 800abbe:	4622      	mov	r2, r4
 800abc0:	4606      	mov	r6, r0
 800abc2:	460f      	mov	r7, r1
 800abc4:	462b      	mov	r3, r5
 800abc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800abca:	f7f5 fd15 	bl	80005f8 <__aeabi_dmul>
 800abce:	4602      	mov	r2, r0
 800abd0:	460b      	mov	r3, r1
 800abd2:	4630      	mov	r0, r6
 800abd4:	4639      	mov	r1, r7
 800abd6:	f7f5 fb59 	bl	800028c <__adddf3>
 800abda:	4606      	mov	r6, r0
 800abdc:	460f      	mov	r7, r1
 800abde:	4602      	mov	r2, r0
 800abe0:	460b      	mov	r3, r1
 800abe2:	4640      	mov	r0, r8
 800abe4:	4649      	mov	r1, r9
 800abe6:	f7f5 fb51 	bl	800028c <__adddf3>
 800abea:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800abee:	a33c      	add	r3, pc, #240	@ (adr r3, 800ace0 <__ieee754_pow+0x760>)
 800abf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf4:	4658      	mov	r0, fp
 800abf6:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800abfa:	460d      	mov	r5, r1
 800abfc:	f7f5 fcfc 	bl	80005f8 <__aeabi_dmul>
 800ac00:	465c      	mov	r4, fp
 800ac02:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ac06:	4642      	mov	r2, r8
 800ac08:	464b      	mov	r3, r9
 800ac0a:	4620      	mov	r0, r4
 800ac0c:	4629      	mov	r1, r5
 800ac0e:	f7f5 fb3b 	bl	8000288 <__aeabi_dsub>
 800ac12:	4602      	mov	r2, r0
 800ac14:	460b      	mov	r3, r1
 800ac16:	4630      	mov	r0, r6
 800ac18:	4639      	mov	r1, r7
 800ac1a:	f7f5 fb35 	bl	8000288 <__aeabi_dsub>
 800ac1e:	a332      	add	r3, pc, #200	@ (adr r3, 800ace8 <__ieee754_pow+0x768>)
 800ac20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac24:	f7f5 fce8 	bl	80005f8 <__aeabi_dmul>
 800ac28:	a331      	add	r3, pc, #196	@ (adr r3, 800acf0 <__ieee754_pow+0x770>)
 800ac2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac2e:	4606      	mov	r6, r0
 800ac30:	460f      	mov	r7, r1
 800ac32:	4620      	mov	r0, r4
 800ac34:	4629      	mov	r1, r5
 800ac36:	f7f5 fcdf 	bl	80005f8 <__aeabi_dmul>
 800ac3a:	4602      	mov	r2, r0
 800ac3c:	460b      	mov	r3, r1
 800ac3e:	4630      	mov	r0, r6
 800ac40:	4639      	mov	r1, r7
 800ac42:	f7f5 fb23 	bl	800028c <__adddf3>
 800ac46:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ac48:	4b32      	ldr	r3, [pc, #200]	@ (800ad14 <__ieee754_pow+0x794>)
 800ac4a:	4413      	add	r3, r2
 800ac4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac50:	f7f5 fb1c 	bl	800028c <__adddf3>
 800ac54:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ac58:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ac5a:	f7f5 fc63 	bl	8000524 <__aeabi_i2d>
 800ac5e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ac60:	4b2d      	ldr	r3, [pc, #180]	@ (800ad18 <__ieee754_pow+0x798>)
 800ac62:	4413      	add	r3, r2
 800ac64:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ac68:	4606      	mov	r6, r0
 800ac6a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ac6e:	460f      	mov	r7, r1
 800ac70:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac74:	f7f5 fb0a 	bl	800028c <__adddf3>
 800ac78:	4642      	mov	r2, r8
 800ac7a:	464b      	mov	r3, r9
 800ac7c:	f7f5 fb06 	bl	800028c <__adddf3>
 800ac80:	4632      	mov	r2, r6
 800ac82:	463b      	mov	r3, r7
 800ac84:	f7f5 fb02 	bl	800028c <__adddf3>
 800ac88:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800ac8c:	4632      	mov	r2, r6
 800ac8e:	463b      	mov	r3, r7
 800ac90:	4658      	mov	r0, fp
 800ac92:	460d      	mov	r5, r1
 800ac94:	f7f5 faf8 	bl	8000288 <__aeabi_dsub>
 800ac98:	4642      	mov	r2, r8
 800ac9a:	464b      	mov	r3, r9
 800ac9c:	f7f5 faf4 	bl	8000288 <__aeabi_dsub>
 800aca0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aca4:	f7f5 faf0 	bl	8000288 <__aeabi_dsub>
 800aca8:	465c      	mov	r4, fp
 800acaa:	4602      	mov	r2, r0
 800acac:	e036      	b.n	800ad1c <__ieee754_pow+0x79c>
 800acae:	bf00      	nop
 800acb0:	4a454eef 	.word	0x4a454eef
 800acb4:	3fca7e28 	.word	0x3fca7e28
 800acb8:	93c9db65 	.word	0x93c9db65
 800acbc:	3fcd864a 	.word	0x3fcd864a
 800acc0:	a91d4101 	.word	0xa91d4101
 800acc4:	3fd17460 	.word	0x3fd17460
 800acc8:	518f264d 	.word	0x518f264d
 800accc:	3fd55555 	.word	0x3fd55555
 800acd0:	db6fabff 	.word	0xdb6fabff
 800acd4:	3fdb6db6 	.word	0x3fdb6db6
 800acd8:	33333303 	.word	0x33333303
 800acdc:	3fe33333 	.word	0x3fe33333
 800ace0:	e0000000 	.word	0xe0000000
 800ace4:	3feec709 	.word	0x3feec709
 800ace8:	dc3a03fd 	.word	0xdc3a03fd
 800acec:	3feec709 	.word	0x3feec709
 800acf0:	145b01f5 	.word	0x145b01f5
 800acf4:	be3e2fe0 	.word	0xbe3e2fe0
 800acf8:	7ff00000 	.word	0x7ff00000
 800acfc:	43400000 	.word	0x43400000
 800ad00:	0003988e 	.word	0x0003988e
 800ad04:	000bb679 	.word	0x000bb679
 800ad08:	0800c290 	.word	0x0800c290
 800ad0c:	3ff00000 	.word	0x3ff00000
 800ad10:	40080000 	.word	0x40080000
 800ad14:	0800c270 	.word	0x0800c270
 800ad18:	0800c280 	.word	0x0800c280
 800ad1c:	460b      	mov	r3, r1
 800ad1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ad22:	e5d7      	b.n	800a8d4 <__ieee754_pow+0x354>
 800ad24:	f04f 0a01 	mov.w	sl, #1
 800ad28:	e65e      	b.n	800a9e8 <__ieee754_pow+0x468>
 800ad2a:	a3b4      	add	r3, pc, #720	@ (adr r3, 800affc <__ieee754_pow+0xa7c>)
 800ad2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad30:	4630      	mov	r0, r6
 800ad32:	4639      	mov	r1, r7
 800ad34:	f7f5 faaa 	bl	800028c <__adddf3>
 800ad38:	4642      	mov	r2, r8
 800ad3a:	e9cd 0100 	strd	r0, r1, [sp]
 800ad3e:	464b      	mov	r3, r9
 800ad40:	4620      	mov	r0, r4
 800ad42:	4629      	mov	r1, r5
 800ad44:	f7f5 faa0 	bl	8000288 <__aeabi_dsub>
 800ad48:	4602      	mov	r2, r0
 800ad4a:	460b      	mov	r3, r1
 800ad4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ad50:	f7f5 fee2 	bl	8000b18 <__aeabi_dcmpgt>
 800ad54:	2800      	cmp	r0, #0
 800ad56:	f47f ae00 	bne.w	800a95a <__ieee754_pow+0x3da>
 800ad5a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800ad5e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800ad62:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800ad66:	fa43 fa0a 	asr.w	sl, r3, sl
 800ad6a:	44da      	add	sl, fp
 800ad6c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800ad70:	489d      	ldr	r0, [pc, #628]	@ (800afe8 <__ieee754_pow+0xa68>)
 800ad72:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800ad76:	4108      	asrs	r0, r1
 800ad78:	ea00 030a 	and.w	r3, r0, sl
 800ad7c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800ad80:	f1c1 0114 	rsb	r1, r1, #20
 800ad84:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800ad88:	fa4a fa01 	asr.w	sl, sl, r1
 800ad8c:	f1bb 0f00 	cmp.w	fp, #0
 800ad90:	4640      	mov	r0, r8
 800ad92:	4649      	mov	r1, r9
 800ad94:	f04f 0200 	mov.w	r2, #0
 800ad98:	bfb8      	it	lt
 800ad9a:	f1ca 0a00 	rsblt	sl, sl, #0
 800ad9e:	f7f5 fa73 	bl	8000288 <__aeabi_dsub>
 800ada2:	4680      	mov	r8, r0
 800ada4:	4689      	mov	r9, r1
 800ada6:	4632      	mov	r2, r6
 800ada8:	463b      	mov	r3, r7
 800adaa:	4640      	mov	r0, r8
 800adac:	4649      	mov	r1, r9
 800adae:	f7f5 fa6d 	bl	800028c <__adddf3>
 800adb2:	2400      	movs	r4, #0
 800adb4:	a37c      	add	r3, pc, #496	@ (adr r3, 800afa8 <__ieee754_pow+0xa28>)
 800adb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adba:	4620      	mov	r0, r4
 800adbc:	460d      	mov	r5, r1
 800adbe:	f7f5 fc1b 	bl	80005f8 <__aeabi_dmul>
 800adc2:	4642      	mov	r2, r8
 800adc4:	e9cd 0100 	strd	r0, r1, [sp]
 800adc8:	464b      	mov	r3, r9
 800adca:	4620      	mov	r0, r4
 800adcc:	4629      	mov	r1, r5
 800adce:	f7f5 fa5b 	bl	8000288 <__aeabi_dsub>
 800add2:	4602      	mov	r2, r0
 800add4:	460b      	mov	r3, r1
 800add6:	4630      	mov	r0, r6
 800add8:	4639      	mov	r1, r7
 800adda:	f7f5 fa55 	bl	8000288 <__aeabi_dsub>
 800adde:	a374      	add	r3, pc, #464	@ (adr r3, 800afb0 <__ieee754_pow+0xa30>)
 800ade0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ade4:	f7f5 fc08 	bl	80005f8 <__aeabi_dmul>
 800ade8:	a373      	add	r3, pc, #460	@ (adr r3, 800afb8 <__ieee754_pow+0xa38>)
 800adea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adee:	4680      	mov	r8, r0
 800adf0:	4689      	mov	r9, r1
 800adf2:	4620      	mov	r0, r4
 800adf4:	4629      	mov	r1, r5
 800adf6:	f7f5 fbff 	bl	80005f8 <__aeabi_dmul>
 800adfa:	4602      	mov	r2, r0
 800adfc:	460b      	mov	r3, r1
 800adfe:	4640      	mov	r0, r8
 800ae00:	4649      	mov	r1, r9
 800ae02:	f7f5 fa43 	bl	800028c <__adddf3>
 800ae06:	4604      	mov	r4, r0
 800ae08:	460d      	mov	r5, r1
 800ae0a:	4602      	mov	r2, r0
 800ae0c:	460b      	mov	r3, r1
 800ae0e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ae12:	f7f5 fa3b 	bl	800028c <__adddf3>
 800ae16:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae1a:	4680      	mov	r8, r0
 800ae1c:	4689      	mov	r9, r1
 800ae1e:	f7f5 fa33 	bl	8000288 <__aeabi_dsub>
 800ae22:	4602      	mov	r2, r0
 800ae24:	460b      	mov	r3, r1
 800ae26:	4620      	mov	r0, r4
 800ae28:	4629      	mov	r1, r5
 800ae2a:	f7f5 fa2d 	bl	8000288 <__aeabi_dsub>
 800ae2e:	4642      	mov	r2, r8
 800ae30:	4606      	mov	r6, r0
 800ae32:	460f      	mov	r7, r1
 800ae34:	464b      	mov	r3, r9
 800ae36:	4640      	mov	r0, r8
 800ae38:	4649      	mov	r1, r9
 800ae3a:	f7f5 fbdd 	bl	80005f8 <__aeabi_dmul>
 800ae3e:	a360      	add	r3, pc, #384	@ (adr r3, 800afc0 <__ieee754_pow+0xa40>)
 800ae40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae44:	4604      	mov	r4, r0
 800ae46:	460d      	mov	r5, r1
 800ae48:	f7f5 fbd6 	bl	80005f8 <__aeabi_dmul>
 800ae4c:	a35e      	add	r3, pc, #376	@ (adr r3, 800afc8 <__ieee754_pow+0xa48>)
 800ae4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae52:	f7f5 fa19 	bl	8000288 <__aeabi_dsub>
 800ae56:	4622      	mov	r2, r4
 800ae58:	462b      	mov	r3, r5
 800ae5a:	f7f5 fbcd 	bl	80005f8 <__aeabi_dmul>
 800ae5e:	a35c      	add	r3, pc, #368	@ (adr r3, 800afd0 <__ieee754_pow+0xa50>)
 800ae60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae64:	f7f5 fa12 	bl	800028c <__adddf3>
 800ae68:	4622      	mov	r2, r4
 800ae6a:	462b      	mov	r3, r5
 800ae6c:	f7f5 fbc4 	bl	80005f8 <__aeabi_dmul>
 800ae70:	a359      	add	r3, pc, #356	@ (adr r3, 800afd8 <__ieee754_pow+0xa58>)
 800ae72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae76:	f7f5 fa07 	bl	8000288 <__aeabi_dsub>
 800ae7a:	4622      	mov	r2, r4
 800ae7c:	462b      	mov	r3, r5
 800ae7e:	f7f5 fbbb 	bl	80005f8 <__aeabi_dmul>
 800ae82:	a357      	add	r3, pc, #348	@ (adr r3, 800afe0 <__ieee754_pow+0xa60>)
 800ae84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae88:	f7f5 fa00 	bl	800028c <__adddf3>
 800ae8c:	4622      	mov	r2, r4
 800ae8e:	462b      	mov	r3, r5
 800ae90:	f7f5 fbb2 	bl	80005f8 <__aeabi_dmul>
 800ae94:	4602      	mov	r2, r0
 800ae96:	460b      	mov	r3, r1
 800ae98:	4640      	mov	r0, r8
 800ae9a:	4649      	mov	r1, r9
 800ae9c:	f7f5 f9f4 	bl	8000288 <__aeabi_dsub>
 800aea0:	4604      	mov	r4, r0
 800aea2:	460d      	mov	r5, r1
 800aea4:	4602      	mov	r2, r0
 800aea6:	460b      	mov	r3, r1
 800aea8:	4640      	mov	r0, r8
 800aeaa:	4649      	mov	r1, r9
 800aeac:	f7f5 fba4 	bl	80005f8 <__aeabi_dmul>
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	e9cd 0100 	strd	r0, r1, [sp]
 800aeb6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800aeba:	4620      	mov	r0, r4
 800aebc:	4629      	mov	r1, r5
 800aebe:	f7f5 f9e3 	bl	8000288 <__aeabi_dsub>
 800aec2:	4602      	mov	r2, r0
 800aec4:	460b      	mov	r3, r1
 800aec6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aeca:	f7f5 fcbf 	bl	800084c <__aeabi_ddiv>
 800aece:	4632      	mov	r2, r6
 800aed0:	4604      	mov	r4, r0
 800aed2:	460d      	mov	r5, r1
 800aed4:	463b      	mov	r3, r7
 800aed6:	4640      	mov	r0, r8
 800aed8:	4649      	mov	r1, r9
 800aeda:	f7f5 fb8d 	bl	80005f8 <__aeabi_dmul>
 800aede:	4632      	mov	r2, r6
 800aee0:	463b      	mov	r3, r7
 800aee2:	f7f5 f9d3 	bl	800028c <__adddf3>
 800aee6:	4602      	mov	r2, r0
 800aee8:	460b      	mov	r3, r1
 800aeea:	4620      	mov	r0, r4
 800aeec:	4629      	mov	r1, r5
 800aeee:	f7f5 f9cb 	bl	8000288 <__aeabi_dsub>
 800aef2:	4642      	mov	r2, r8
 800aef4:	464b      	mov	r3, r9
 800aef6:	f7f5 f9c7 	bl	8000288 <__aeabi_dsub>
 800aefa:	460b      	mov	r3, r1
 800aefc:	4602      	mov	r2, r0
 800aefe:	493b      	ldr	r1, [pc, #236]	@ (800afec <__ieee754_pow+0xa6c>)
 800af00:	2000      	movs	r0, #0
 800af02:	f7f5 f9c1 	bl	8000288 <__aeabi_dsub>
 800af06:	ec41 0b10 	vmov	d0, r0, r1
 800af0a:	ee10 3a90 	vmov	r3, s1
 800af0e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800af12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800af16:	da30      	bge.n	800af7a <__ieee754_pow+0x9fa>
 800af18:	4650      	mov	r0, sl
 800af1a:	f000 fa79 	bl	800b410 <scalbn>
 800af1e:	ec51 0b10 	vmov	r0, r1, d0
 800af22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800af26:	f7ff bbd2 	b.w	800a6ce <__ieee754_pow+0x14e>
 800af2a:	4c31      	ldr	r4, [pc, #196]	@ (800aff0 <__ieee754_pow+0xa70>)
 800af2c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800af30:	42a3      	cmp	r3, r4
 800af32:	d91a      	bls.n	800af6a <__ieee754_pow+0x9ea>
 800af34:	4b2f      	ldr	r3, [pc, #188]	@ (800aff4 <__ieee754_pow+0xa74>)
 800af36:	440b      	add	r3, r1
 800af38:	4303      	orrs	r3, r0
 800af3a:	d009      	beq.n	800af50 <__ieee754_pow+0x9d0>
 800af3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af40:	2200      	movs	r2, #0
 800af42:	2300      	movs	r3, #0
 800af44:	f7f5 fdca 	bl	8000adc <__aeabi_dcmplt>
 800af48:	3800      	subs	r0, #0
 800af4a:	bf18      	it	ne
 800af4c:	2001      	movne	r0, #1
 800af4e:	e42b      	b.n	800a7a8 <__ieee754_pow+0x228>
 800af50:	4642      	mov	r2, r8
 800af52:	464b      	mov	r3, r9
 800af54:	f7f5 f998 	bl	8000288 <__aeabi_dsub>
 800af58:	4632      	mov	r2, r6
 800af5a:	463b      	mov	r3, r7
 800af5c:	f7f5 fdd2 	bl	8000b04 <__aeabi_dcmpge>
 800af60:	2800      	cmp	r0, #0
 800af62:	d1eb      	bne.n	800af3c <__ieee754_pow+0x9bc>
 800af64:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800b004 <__ieee754_pow+0xa84>
 800af68:	e6f7      	b.n	800ad5a <__ieee754_pow+0x7da>
 800af6a:	469a      	mov	sl, r3
 800af6c:	4b22      	ldr	r3, [pc, #136]	@ (800aff8 <__ieee754_pow+0xa78>)
 800af6e:	459a      	cmp	sl, r3
 800af70:	f63f aef3 	bhi.w	800ad5a <__ieee754_pow+0x7da>
 800af74:	f8dd a010 	ldr.w	sl, [sp, #16]
 800af78:	e715      	b.n	800ada6 <__ieee754_pow+0x826>
 800af7a:	ec51 0b10 	vmov	r0, r1, d0
 800af7e:	4619      	mov	r1, r3
 800af80:	e7cf      	b.n	800af22 <__ieee754_pow+0x9a2>
 800af82:	491a      	ldr	r1, [pc, #104]	@ (800afec <__ieee754_pow+0xa6c>)
 800af84:	2000      	movs	r0, #0
 800af86:	f7ff bb18 	b.w	800a5ba <__ieee754_pow+0x3a>
 800af8a:	2000      	movs	r0, #0
 800af8c:	2100      	movs	r1, #0
 800af8e:	f7ff bb14 	b.w	800a5ba <__ieee754_pow+0x3a>
 800af92:	4630      	mov	r0, r6
 800af94:	4639      	mov	r1, r7
 800af96:	f7ff bb10 	b.w	800a5ba <__ieee754_pow+0x3a>
 800af9a:	460c      	mov	r4, r1
 800af9c:	f7ff bb5e 	b.w	800a65c <__ieee754_pow+0xdc>
 800afa0:	2400      	movs	r4, #0
 800afa2:	f7ff bb49 	b.w	800a638 <__ieee754_pow+0xb8>
 800afa6:	bf00      	nop
 800afa8:	00000000 	.word	0x00000000
 800afac:	3fe62e43 	.word	0x3fe62e43
 800afb0:	fefa39ef 	.word	0xfefa39ef
 800afb4:	3fe62e42 	.word	0x3fe62e42
 800afb8:	0ca86c39 	.word	0x0ca86c39
 800afbc:	be205c61 	.word	0xbe205c61
 800afc0:	72bea4d0 	.word	0x72bea4d0
 800afc4:	3e663769 	.word	0x3e663769
 800afc8:	c5d26bf1 	.word	0xc5d26bf1
 800afcc:	3ebbbd41 	.word	0x3ebbbd41
 800afd0:	af25de2c 	.word	0xaf25de2c
 800afd4:	3f11566a 	.word	0x3f11566a
 800afd8:	16bebd93 	.word	0x16bebd93
 800afdc:	3f66c16c 	.word	0x3f66c16c
 800afe0:	5555553e 	.word	0x5555553e
 800afe4:	3fc55555 	.word	0x3fc55555
 800afe8:	fff00000 	.word	0xfff00000
 800afec:	3ff00000 	.word	0x3ff00000
 800aff0:	4090cbff 	.word	0x4090cbff
 800aff4:	3f6f3400 	.word	0x3f6f3400
 800aff8:	3fe00000 	.word	0x3fe00000
 800affc:	652b82fe 	.word	0x652b82fe
 800b000:	3c971547 	.word	0x3c971547
 800b004:	4090cc00 	.word	0x4090cc00

0800b008 <__ieee754_rem_pio2>:
 800b008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b00c:	ec57 6b10 	vmov	r6, r7, d0
 800b010:	4bc5      	ldr	r3, [pc, #788]	@ (800b328 <__ieee754_rem_pio2+0x320>)
 800b012:	b08d      	sub	sp, #52	@ 0x34
 800b014:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800b018:	4598      	cmp	r8, r3
 800b01a:	4604      	mov	r4, r0
 800b01c:	9704      	str	r7, [sp, #16]
 800b01e:	d807      	bhi.n	800b030 <__ieee754_rem_pio2+0x28>
 800b020:	2200      	movs	r2, #0
 800b022:	2300      	movs	r3, #0
 800b024:	ed80 0b00 	vstr	d0, [r0]
 800b028:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b02c:	2500      	movs	r5, #0
 800b02e:	e028      	b.n	800b082 <__ieee754_rem_pio2+0x7a>
 800b030:	4bbe      	ldr	r3, [pc, #760]	@ (800b32c <__ieee754_rem_pio2+0x324>)
 800b032:	4598      	cmp	r8, r3
 800b034:	d878      	bhi.n	800b128 <__ieee754_rem_pio2+0x120>
 800b036:	9b04      	ldr	r3, [sp, #16]
 800b038:	4dbd      	ldr	r5, [pc, #756]	@ (800b330 <__ieee754_rem_pio2+0x328>)
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	4630      	mov	r0, r6
 800b03e:	a3ac      	add	r3, pc, #688	@ (adr r3, 800b2f0 <__ieee754_rem_pio2+0x2e8>)
 800b040:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b044:	4639      	mov	r1, r7
 800b046:	dd38      	ble.n	800b0ba <__ieee754_rem_pio2+0xb2>
 800b048:	f7f5 f91e 	bl	8000288 <__aeabi_dsub>
 800b04c:	45a8      	cmp	r8, r5
 800b04e:	4606      	mov	r6, r0
 800b050:	460f      	mov	r7, r1
 800b052:	d01a      	beq.n	800b08a <__ieee754_rem_pio2+0x82>
 800b054:	a3a8      	add	r3, pc, #672	@ (adr r3, 800b2f8 <__ieee754_rem_pio2+0x2f0>)
 800b056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b05a:	f7f5 f915 	bl	8000288 <__aeabi_dsub>
 800b05e:	4602      	mov	r2, r0
 800b060:	460b      	mov	r3, r1
 800b062:	4680      	mov	r8, r0
 800b064:	4689      	mov	r9, r1
 800b066:	4630      	mov	r0, r6
 800b068:	4639      	mov	r1, r7
 800b06a:	f7f5 f90d 	bl	8000288 <__aeabi_dsub>
 800b06e:	a3a2      	add	r3, pc, #648	@ (adr r3, 800b2f8 <__ieee754_rem_pio2+0x2f0>)
 800b070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b074:	f7f5 f908 	bl	8000288 <__aeabi_dsub>
 800b078:	e9c4 8900 	strd	r8, r9, [r4]
 800b07c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b080:	2501      	movs	r5, #1
 800b082:	4628      	mov	r0, r5
 800b084:	b00d      	add	sp, #52	@ 0x34
 800b086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b08a:	a39d      	add	r3, pc, #628	@ (adr r3, 800b300 <__ieee754_rem_pio2+0x2f8>)
 800b08c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b090:	f7f5 f8fa 	bl	8000288 <__aeabi_dsub>
 800b094:	a39c      	add	r3, pc, #624	@ (adr r3, 800b308 <__ieee754_rem_pio2+0x300>)
 800b096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b09a:	4606      	mov	r6, r0
 800b09c:	460f      	mov	r7, r1
 800b09e:	f7f5 f8f3 	bl	8000288 <__aeabi_dsub>
 800b0a2:	4602      	mov	r2, r0
 800b0a4:	460b      	mov	r3, r1
 800b0a6:	4680      	mov	r8, r0
 800b0a8:	4689      	mov	r9, r1
 800b0aa:	4630      	mov	r0, r6
 800b0ac:	4639      	mov	r1, r7
 800b0ae:	f7f5 f8eb 	bl	8000288 <__aeabi_dsub>
 800b0b2:	a395      	add	r3, pc, #596	@ (adr r3, 800b308 <__ieee754_rem_pio2+0x300>)
 800b0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0b8:	e7dc      	b.n	800b074 <__ieee754_rem_pio2+0x6c>
 800b0ba:	f7f5 f8e7 	bl	800028c <__adddf3>
 800b0be:	45a8      	cmp	r8, r5
 800b0c0:	4606      	mov	r6, r0
 800b0c2:	460f      	mov	r7, r1
 800b0c4:	d018      	beq.n	800b0f8 <__ieee754_rem_pio2+0xf0>
 800b0c6:	a38c      	add	r3, pc, #560	@ (adr r3, 800b2f8 <__ieee754_rem_pio2+0x2f0>)
 800b0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0cc:	f7f5 f8de 	bl	800028c <__adddf3>
 800b0d0:	4602      	mov	r2, r0
 800b0d2:	460b      	mov	r3, r1
 800b0d4:	4680      	mov	r8, r0
 800b0d6:	4689      	mov	r9, r1
 800b0d8:	4630      	mov	r0, r6
 800b0da:	4639      	mov	r1, r7
 800b0dc:	f7f5 f8d4 	bl	8000288 <__aeabi_dsub>
 800b0e0:	a385      	add	r3, pc, #532	@ (adr r3, 800b2f8 <__ieee754_rem_pio2+0x2f0>)
 800b0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0e6:	f7f5 f8d1 	bl	800028c <__adddf3>
 800b0ea:	f04f 35ff 	mov.w	r5, #4294967295
 800b0ee:	e9c4 8900 	strd	r8, r9, [r4]
 800b0f2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b0f6:	e7c4      	b.n	800b082 <__ieee754_rem_pio2+0x7a>
 800b0f8:	a381      	add	r3, pc, #516	@ (adr r3, 800b300 <__ieee754_rem_pio2+0x2f8>)
 800b0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0fe:	f7f5 f8c5 	bl	800028c <__adddf3>
 800b102:	a381      	add	r3, pc, #516	@ (adr r3, 800b308 <__ieee754_rem_pio2+0x300>)
 800b104:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b108:	4606      	mov	r6, r0
 800b10a:	460f      	mov	r7, r1
 800b10c:	f7f5 f8be 	bl	800028c <__adddf3>
 800b110:	4602      	mov	r2, r0
 800b112:	460b      	mov	r3, r1
 800b114:	4680      	mov	r8, r0
 800b116:	4689      	mov	r9, r1
 800b118:	4630      	mov	r0, r6
 800b11a:	4639      	mov	r1, r7
 800b11c:	f7f5 f8b4 	bl	8000288 <__aeabi_dsub>
 800b120:	a379      	add	r3, pc, #484	@ (adr r3, 800b308 <__ieee754_rem_pio2+0x300>)
 800b122:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b126:	e7de      	b.n	800b0e6 <__ieee754_rem_pio2+0xde>
 800b128:	4b82      	ldr	r3, [pc, #520]	@ (800b334 <__ieee754_rem_pio2+0x32c>)
 800b12a:	4598      	cmp	r8, r3
 800b12c:	f200 80d1 	bhi.w	800b2d2 <__ieee754_rem_pio2+0x2ca>
 800b130:	f000 f966 	bl	800b400 <fabs>
 800b134:	ec57 6b10 	vmov	r6, r7, d0
 800b138:	a375      	add	r3, pc, #468	@ (adr r3, 800b310 <__ieee754_rem_pio2+0x308>)
 800b13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b13e:	4630      	mov	r0, r6
 800b140:	4639      	mov	r1, r7
 800b142:	f7f5 fa59 	bl	80005f8 <__aeabi_dmul>
 800b146:	4b7c      	ldr	r3, [pc, #496]	@ (800b338 <__ieee754_rem_pio2+0x330>)
 800b148:	2200      	movs	r2, #0
 800b14a:	f7f5 f89f 	bl	800028c <__adddf3>
 800b14e:	f7f5 fd03 	bl	8000b58 <__aeabi_d2iz>
 800b152:	4605      	mov	r5, r0
 800b154:	f7f5 f9e6 	bl	8000524 <__aeabi_i2d>
 800b158:	4602      	mov	r2, r0
 800b15a:	460b      	mov	r3, r1
 800b15c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b160:	a363      	add	r3, pc, #396	@ (adr r3, 800b2f0 <__ieee754_rem_pio2+0x2e8>)
 800b162:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b166:	f7f5 fa47 	bl	80005f8 <__aeabi_dmul>
 800b16a:	4602      	mov	r2, r0
 800b16c:	460b      	mov	r3, r1
 800b16e:	4630      	mov	r0, r6
 800b170:	4639      	mov	r1, r7
 800b172:	f7f5 f889 	bl	8000288 <__aeabi_dsub>
 800b176:	a360      	add	r3, pc, #384	@ (adr r3, 800b2f8 <__ieee754_rem_pio2+0x2f0>)
 800b178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b17c:	4682      	mov	sl, r0
 800b17e:	468b      	mov	fp, r1
 800b180:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b184:	f7f5 fa38 	bl	80005f8 <__aeabi_dmul>
 800b188:	2d1f      	cmp	r5, #31
 800b18a:	4606      	mov	r6, r0
 800b18c:	460f      	mov	r7, r1
 800b18e:	dc0c      	bgt.n	800b1aa <__ieee754_rem_pio2+0x1a2>
 800b190:	4b6a      	ldr	r3, [pc, #424]	@ (800b33c <__ieee754_rem_pio2+0x334>)
 800b192:	1e6a      	subs	r2, r5, #1
 800b194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b198:	4543      	cmp	r3, r8
 800b19a:	d006      	beq.n	800b1aa <__ieee754_rem_pio2+0x1a2>
 800b19c:	4632      	mov	r2, r6
 800b19e:	463b      	mov	r3, r7
 800b1a0:	4650      	mov	r0, sl
 800b1a2:	4659      	mov	r1, fp
 800b1a4:	f7f5 f870 	bl	8000288 <__aeabi_dsub>
 800b1a8:	e00e      	b.n	800b1c8 <__ieee754_rem_pio2+0x1c0>
 800b1aa:	463b      	mov	r3, r7
 800b1ac:	4632      	mov	r2, r6
 800b1ae:	4650      	mov	r0, sl
 800b1b0:	4659      	mov	r1, fp
 800b1b2:	f7f5 f869 	bl	8000288 <__aeabi_dsub>
 800b1b6:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b1ba:	9305      	str	r3, [sp, #20]
 800b1bc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b1c0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800b1c4:	2b10      	cmp	r3, #16
 800b1c6:	dc02      	bgt.n	800b1ce <__ieee754_rem_pio2+0x1c6>
 800b1c8:	e9c4 0100 	strd	r0, r1, [r4]
 800b1cc:	e039      	b.n	800b242 <__ieee754_rem_pio2+0x23a>
 800b1ce:	a34c      	add	r3, pc, #304	@ (adr r3, 800b300 <__ieee754_rem_pio2+0x2f8>)
 800b1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b1d8:	f7f5 fa0e 	bl	80005f8 <__aeabi_dmul>
 800b1dc:	4606      	mov	r6, r0
 800b1de:	460f      	mov	r7, r1
 800b1e0:	4602      	mov	r2, r0
 800b1e2:	460b      	mov	r3, r1
 800b1e4:	4650      	mov	r0, sl
 800b1e6:	4659      	mov	r1, fp
 800b1e8:	f7f5 f84e 	bl	8000288 <__aeabi_dsub>
 800b1ec:	4602      	mov	r2, r0
 800b1ee:	460b      	mov	r3, r1
 800b1f0:	4680      	mov	r8, r0
 800b1f2:	4689      	mov	r9, r1
 800b1f4:	4650      	mov	r0, sl
 800b1f6:	4659      	mov	r1, fp
 800b1f8:	f7f5 f846 	bl	8000288 <__aeabi_dsub>
 800b1fc:	4632      	mov	r2, r6
 800b1fe:	463b      	mov	r3, r7
 800b200:	f7f5 f842 	bl	8000288 <__aeabi_dsub>
 800b204:	a340      	add	r3, pc, #256	@ (adr r3, 800b308 <__ieee754_rem_pio2+0x300>)
 800b206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b20a:	4606      	mov	r6, r0
 800b20c:	460f      	mov	r7, r1
 800b20e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b212:	f7f5 f9f1 	bl	80005f8 <__aeabi_dmul>
 800b216:	4632      	mov	r2, r6
 800b218:	463b      	mov	r3, r7
 800b21a:	f7f5 f835 	bl	8000288 <__aeabi_dsub>
 800b21e:	4602      	mov	r2, r0
 800b220:	460b      	mov	r3, r1
 800b222:	4606      	mov	r6, r0
 800b224:	460f      	mov	r7, r1
 800b226:	4640      	mov	r0, r8
 800b228:	4649      	mov	r1, r9
 800b22a:	f7f5 f82d 	bl	8000288 <__aeabi_dsub>
 800b22e:	9a05      	ldr	r2, [sp, #20]
 800b230:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b234:	1ad3      	subs	r3, r2, r3
 800b236:	2b31      	cmp	r3, #49	@ 0x31
 800b238:	dc20      	bgt.n	800b27c <__ieee754_rem_pio2+0x274>
 800b23a:	e9c4 0100 	strd	r0, r1, [r4]
 800b23e:	46c2      	mov	sl, r8
 800b240:	46cb      	mov	fp, r9
 800b242:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b246:	4650      	mov	r0, sl
 800b248:	4642      	mov	r2, r8
 800b24a:	464b      	mov	r3, r9
 800b24c:	4659      	mov	r1, fp
 800b24e:	f7f5 f81b 	bl	8000288 <__aeabi_dsub>
 800b252:	463b      	mov	r3, r7
 800b254:	4632      	mov	r2, r6
 800b256:	f7f5 f817 	bl	8000288 <__aeabi_dsub>
 800b25a:	9b04      	ldr	r3, [sp, #16]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b262:	f6bf af0e 	bge.w	800b082 <__ieee754_rem_pio2+0x7a>
 800b266:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800b26a:	6063      	str	r3, [r4, #4]
 800b26c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b270:	f8c4 8000 	str.w	r8, [r4]
 800b274:	60a0      	str	r0, [r4, #8]
 800b276:	60e3      	str	r3, [r4, #12]
 800b278:	426d      	negs	r5, r5
 800b27a:	e702      	b.n	800b082 <__ieee754_rem_pio2+0x7a>
 800b27c:	a326      	add	r3, pc, #152	@ (adr r3, 800b318 <__ieee754_rem_pio2+0x310>)
 800b27e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b282:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b286:	f7f5 f9b7 	bl	80005f8 <__aeabi_dmul>
 800b28a:	4606      	mov	r6, r0
 800b28c:	460f      	mov	r7, r1
 800b28e:	4602      	mov	r2, r0
 800b290:	460b      	mov	r3, r1
 800b292:	4640      	mov	r0, r8
 800b294:	4649      	mov	r1, r9
 800b296:	f7f4 fff7 	bl	8000288 <__aeabi_dsub>
 800b29a:	4602      	mov	r2, r0
 800b29c:	460b      	mov	r3, r1
 800b29e:	4682      	mov	sl, r0
 800b2a0:	468b      	mov	fp, r1
 800b2a2:	4640      	mov	r0, r8
 800b2a4:	4649      	mov	r1, r9
 800b2a6:	f7f4 ffef 	bl	8000288 <__aeabi_dsub>
 800b2aa:	4632      	mov	r2, r6
 800b2ac:	463b      	mov	r3, r7
 800b2ae:	f7f4 ffeb 	bl	8000288 <__aeabi_dsub>
 800b2b2:	a31b      	add	r3, pc, #108	@ (adr r3, 800b320 <__ieee754_rem_pio2+0x318>)
 800b2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2b8:	4606      	mov	r6, r0
 800b2ba:	460f      	mov	r7, r1
 800b2bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2c0:	f7f5 f99a 	bl	80005f8 <__aeabi_dmul>
 800b2c4:	4632      	mov	r2, r6
 800b2c6:	463b      	mov	r3, r7
 800b2c8:	f7f4 ffde 	bl	8000288 <__aeabi_dsub>
 800b2cc:	4606      	mov	r6, r0
 800b2ce:	460f      	mov	r7, r1
 800b2d0:	e764      	b.n	800b19c <__ieee754_rem_pio2+0x194>
 800b2d2:	4b1b      	ldr	r3, [pc, #108]	@ (800b340 <__ieee754_rem_pio2+0x338>)
 800b2d4:	4598      	cmp	r8, r3
 800b2d6:	d935      	bls.n	800b344 <__ieee754_rem_pio2+0x33c>
 800b2d8:	4632      	mov	r2, r6
 800b2da:	463b      	mov	r3, r7
 800b2dc:	4630      	mov	r0, r6
 800b2de:	4639      	mov	r1, r7
 800b2e0:	f7f4 ffd2 	bl	8000288 <__aeabi_dsub>
 800b2e4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b2e8:	e9c4 0100 	strd	r0, r1, [r4]
 800b2ec:	e69e      	b.n	800b02c <__ieee754_rem_pio2+0x24>
 800b2ee:	bf00      	nop
 800b2f0:	54400000 	.word	0x54400000
 800b2f4:	3ff921fb 	.word	0x3ff921fb
 800b2f8:	1a626331 	.word	0x1a626331
 800b2fc:	3dd0b461 	.word	0x3dd0b461
 800b300:	1a600000 	.word	0x1a600000
 800b304:	3dd0b461 	.word	0x3dd0b461
 800b308:	2e037073 	.word	0x2e037073
 800b30c:	3ba3198a 	.word	0x3ba3198a
 800b310:	6dc9c883 	.word	0x6dc9c883
 800b314:	3fe45f30 	.word	0x3fe45f30
 800b318:	2e000000 	.word	0x2e000000
 800b31c:	3ba3198a 	.word	0x3ba3198a
 800b320:	252049c1 	.word	0x252049c1
 800b324:	397b839a 	.word	0x397b839a
 800b328:	3fe921fb 	.word	0x3fe921fb
 800b32c:	4002d97b 	.word	0x4002d97b
 800b330:	3ff921fb 	.word	0x3ff921fb
 800b334:	413921fb 	.word	0x413921fb
 800b338:	3fe00000 	.word	0x3fe00000
 800b33c:	0800c2a0 	.word	0x0800c2a0
 800b340:	7fefffff 	.word	0x7fefffff
 800b344:	ea4f 5528 	mov.w	r5, r8, asr #20
 800b348:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800b34c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800b350:	4630      	mov	r0, r6
 800b352:	460f      	mov	r7, r1
 800b354:	f7f5 fc00 	bl	8000b58 <__aeabi_d2iz>
 800b358:	f7f5 f8e4 	bl	8000524 <__aeabi_i2d>
 800b35c:	4602      	mov	r2, r0
 800b35e:	460b      	mov	r3, r1
 800b360:	4630      	mov	r0, r6
 800b362:	4639      	mov	r1, r7
 800b364:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b368:	f7f4 ff8e 	bl	8000288 <__aeabi_dsub>
 800b36c:	4b22      	ldr	r3, [pc, #136]	@ (800b3f8 <__ieee754_rem_pio2+0x3f0>)
 800b36e:	2200      	movs	r2, #0
 800b370:	f7f5 f942 	bl	80005f8 <__aeabi_dmul>
 800b374:	460f      	mov	r7, r1
 800b376:	4606      	mov	r6, r0
 800b378:	f7f5 fbee 	bl	8000b58 <__aeabi_d2iz>
 800b37c:	f7f5 f8d2 	bl	8000524 <__aeabi_i2d>
 800b380:	4602      	mov	r2, r0
 800b382:	460b      	mov	r3, r1
 800b384:	4630      	mov	r0, r6
 800b386:	4639      	mov	r1, r7
 800b388:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b38c:	f7f4 ff7c 	bl	8000288 <__aeabi_dsub>
 800b390:	4b19      	ldr	r3, [pc, #100]	@ (800b3f8 <__ieee754_rem_pio2+0x3f0>)
 800b392:	2200      	movs	r2, #0
 800b394:	f7f5 f930 	bl	80005f8 <__aeabi_dmul>
 800b398:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800b39c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800b3a0:	f04f 0803 	mov.w	r8, #3
 800b3a4:	2600      	movs	r6, #0
 800b3a6:	2700      	movs	r7, #0
 800b3a8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800b3ac:	4632      	mov	r2, r6
 800b3ae:	463b      	mov	r3, r7
 800b3b0:	46c2      	mov	sl, r8
 800b3b2:	f108 38ff 	add.w	r8, r8, #4294967295
 800b3b6:	f7f5 fb87 	bl	8000ac8 <__aeabi_dcmpeq>
 800b3ba:	2800      	cmp	r0, #0
 800b3bc:	d1f4      	bne.n	800b3a8 <__ieee754_rem_pio2+0x3a0>
 800b3be:	4b0f      	ldr	r3, [pc, #60]	@ (800b3fc <__ieee754_rem_pio2+0x3f4>)
 800b3c0:	9301      	str	r3, [sp, #4]
 800b3c2:	2302      	movs	r3, #2
 800b3c4:	9300      	str	r3, [sp, #0]
 800b3c6:	462a      	mov	r2, r5
 800b3c8:	4653      	mov	r3, sl
 800b3ca:	4621      	mov	r1, r4
 800b3cc:	a806      	add	r0, sp, #24
 800b3ce:	f000 f8db 	bl	800b588 <__kernel_rem_pio2>
 800b3d2:	9b04      	ldr	r3, [sp, #16]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	4605      	mov	r5, r0
 800b3d8:	f6bf ae53 	bge.w	800b082 <__ieee754_rem_pio2+0x7a>
 800b3dc:	e9d4 2100 	ldrd	r2, r1, [r4]
 800b3e0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b3e4:	e9c4 2300 	strd	r2, r3, [r4]
 800b3e8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800b3ec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b3f0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800b3f4:	e740      	b.n	800b278 <__ieee754_rem_pio2+0x270>
 800b3f6:	bf00      	nop
 800b3f8:	41700000 	.word	0x41700000
 800b3fc:	0800c320 	.word	0x0800c320

0800b400 <fabs>:
 800b400:	ec51 0b10 	vmov	r0, r1, d0
 800b404:	4602      	mov	r2, r0
 800b406:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b40a:	ec43 2b10 	vmov	d0, r2, r3
 800b40e:	4770      	bx	lr

0800b410 <scalbn>:
 800b410:	b570      	push	{r4, r5, r6, lr}
 800b412:	ec55 4b10 	vmov	r4, r5, d0
 800b416:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800b41a:	4606      	mov	r6, r0
 800b41c:	462b      	mov	r3, r5
 800b41e:	b991      	cbnz	r1, 800b446 <scalbn+0x36>
 800b420:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800b424:	4323      	orrs	r3, r4
 800b426:	d03d      	beq.n	800b4a4 <scalbn+0x94>
 800b428:	4b35      	ldr	r3, [pc, #212]	@ (800b500 <scalbn+0xf0>)
 800b42a:	4620      	mov	r0, r4
 800b42c:	4629      	mov	r1, r5
 800b42e:	2200      	movs	r2, #0
 800b430:	f7f5 f8e2 	bl	80005f8 <__aeabi_dmul>
 800b434:	4b33      	ldr	r3, [pc, #204]	@ (800b504 <scalbn+0xf4>)
 800b436:	429e      	cmp	r6, r3
 800b438:	4604      	mov	r4, r0
 800b43a:	460d      	mov	r5, r1
 800b43c:	da0f      	bge.n	800b45e <scalbn+0x4e>
 800b43e:	a328      	add	r3, pc, #160	@ (adr r3, 800b4e0 <scalbn+0xd0>)
 800b440:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b444:	e01e      	b.n	800b484 <scalbn+0x74>
 800b446:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800b44a:	4291      	cmp	r1, r2
 800b44c:	d10b      	bne.n	800b466 <scalbn+0x56>
 800b44e:	4622      	mov	r2, r4
 800b450:	4620      	mov	r0, r4
 800b452:	4629      	mov	r1, r5
 800b454:	f7f4 ff1a 	bl	800028c <__adddf3>
 800b458:	4604      	mov	r4, r0
 800b45a:	460d      	mov	r5, r1
 800b45c:	e022      	b.n	800b4a4 <scalbn+0x94>
 800b45e:	460b      	mov	r3, r1
 800b460:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800b464:	3936      	subs	r1, #54	@ 0x36
 800b466:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800b46a:	4296      	cmp	r6, r2
 800b46c:	dd0d      	ble.n	800b48a <scalbn+0x7a>
 800b46e:	2d00      	cmp	r5, #0
 800b470:	a11d      	add	r1, pc, #116	@ (adr r1, 800b4e8 <scalbn+0xd8>)
 800b472:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b476:	da02      	bge.n	800b47e <scalbn+0x6e>
 800b478:	a11d      	add	r1, pc, #116	@ (adr r1, 800b4f0 <scalbn+0xe0>)
 800b47a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b47e:	a31a      	add	r3, pc, #104	@ (adr r3, 800b4e8 <scalbn+0xd8>)
 800b480:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b484:	f7f5 f8b8 	bl	80005f8 <__aeabi_dmul>
 800b488:	e7e6      	b.n	800b458 <scalbn+0x48>
 800b48a:	1872      	adds	r2, r6, r1
 800b48c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800b490:	428a      	cmp	r2, r1
 800b492:	dcec      	bgt.n	800b46e <scalbn+0x5e>
 800b494:	2a00      	cmp	r2, #0
 800b496:	dd08      	ble.n	800b4aa <scalbn+0x9a>
 800b498:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b49c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800b4a0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b4a4:	ec45 4b10 	vmov	d0, r4, r5
 800b4a8:	bd70      	pop	{r4, r5, r6, pc}
 800b4aa:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800b4ae:	da08      	bge.n	800b4c2 <scalbn+0xb2>
 800b4b0:	2d00      	cmp	r5, #0
 800b4b2:	a10b      	add	r1, pc, #44	@ (adr r1, 800b4e0 <scalbn+0xd0>)
 800b4b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b4b8:	dac1      	bge.n	800b43e <scalbn+0x2e>
 800b4ba:	a10f      	add	r1, pc, #60	@ (adr r1, 800b4f8 <scalbn+0xe8>)
 800b4bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b4c0:	e7bd      	b.n	800b43e <scalbn+0x2e>
 800b4c2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b4c6:	3236      	adds	r2, #54	@ 0x36
 800b4c8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800b4cc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b4d0:	4620      	mov	r0, r4
 800b4d2:	4b0d      	ldr	r3, [pc, #52]	@ (800b508 <scalbn+0xf8>)
 800b4d4:	4629      	mov	r1, r5
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	e7d4      	b.n	800b484 <scalbn+0x74>
 800b4da:	bf00      	nop
 800b4dc:	f3af 8000 	nop.w
 800b4e0:	c2f8f359 	.word	0xc2f8f359
 800b4e4:	01a56e1f 	.word	0x01a56e1f
 800b4e8:	8800759c 	.word	0x8800759c
 800b4ec:	7e37e43c 	.word	0x7e37e43c
 800b4f0:	8800759c 	.word	0x8800759c
 800b4f4:	fe37e43c 	.word	0xfe37e43c
 800b4f8:	c2f8f359 	.word	0xc2f8f359
 800b4fc:	81a56e1f 	.word	0x81a56e1f
 800b500:	43500000 	.word	0x43500000
 800b504:	ffff3cb0 	.word	0xffff3cb0
 800b508:	3c900000 	.word	0x3c900000

0800b50c <with_errno>:
 800b50c:	b510      	push	{r4, lr}
 800b50e:	ed2d 8b02 	vpush	{d8}
 800b512:	eeb0 8a40 	vmov.f32	s16, s0
 800b516:	eef0 8a60 	vmov.f32	s17, s1
 800b51a:	4604      	mov	r4, r0
 800b51c:	f7fb ff52 	bl	80073c4 <__errno>
 800b520:	eeb0 0a48 	vmov.f32	s0, s16
 800b524:	eef0 0a68 	vmov.f32	s1, s17
 800b528:	ecbd 8b02 	vpop	{d8}
 800b52c:	6004      	str	r4, [r0, #0]
 800b52e:	bd10      	pop	{r4, pc}

0800b530 <xflow>:
 800b530:	4603      	mov	r3, r0
 800b532:	b507      	push	{r0, r1, r2, lr}
 800b534:	ec51 0b10 	vmov	r0, r1, d0
 800b538:	b183      	cbz	r3, 800b55c <xflow+0x2c>
 800b53a:	4602      	mov	r2, r0
 800b53c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b540:	e9cd 2300 	strd	r2, r3, [sp]
 800b544:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b548:	f7f5 f856 	bl	80005f8 <__aeabi_dmul>
 800b54c:	ec41 0b10 	vmov	d0, r0, r1
 800b550:	2022      	movs	r0, #34	@ 0x22
 800b552:	b003      	add	sp, #12
 800b554:	f85d eb04 	ldr.w	lr, [sp], #4
 800b558:	f7ff bfd8 	b.w	800b50c <with_errno>
 800b55c:	4602      	mov	r2, r0
 800b55e:	460b      	mov	r3, r1
 800b560:	e7ee      	b.n	800b540 <xflow+0x10>
 800b562:	0000      	movs	r0, r0
 800b564:	0000      	movs	r0, r0
	...

0800b568 <__math_uflow>:
 800b568:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b570 <__math_uflow+0x8>
 800b56c:	f7ff bfe0 	b.w	800b530 <xflow>
 800b570:	00000000 	.word	0x00000000
 800b574:	10000000 	.word	0x10000000

0800b578 <__math_oflow>:
 800b578:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b580 <__math_oflow+0x8>
 800b57c:	f7ff bfd8 	b.w	800b530 <xflow>
 800b580:	00000000 	.word	0x00000000
 800b584:	70000000 	.word	0x70000000

0800b588 <__kernel_rem_pio2>:
 800b588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b58c:	ed2d 8b02 	vpush	{d8}
 800b590:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800b594:	f112 0f14 	cmn.w	r2, #20
 800b598:	9306      	str	r3, [sp, #24]
 800b59a:	9104      	str	r1, [sp, #16]
 800b59c:	4bbe      	ldr	r3, [pc, #760]	@ (800b898 <__kernel_rem_pio2+0x310>)
 800b59e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800b5a0:	9008      	str	r0, [sp, #32]
 800b5a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b5a6:	9300      	str	r3, [sp, #0]
 800b5a8:	9b06      	ldr	r3, [sp, #24]
 800b5aa:	f103 33ff 	add.w	r3, r3, #4294967295
 800b5ae:	bfa8      	it	ge
 800b5b0:	1ed4      	subge	r4, r2, #3
 800b5b2:	9305      	str	r3, [sp, #20]
 800b5b4:	bfb2      	itee	lt
 800b5b6:	2400      	movlt	r4, #0
 800b5b8:	2318      	movge	r3, #24
 800b5ba:	fb94 f4f3 	sdivge	r4, r4, r3
 800b5be:	f06f 0317 	mvn.w	r3, #23
 800b5c2:	fb04 3303 	mla	r3, r4, r3, r3
 800b5c6:	eb03 0b02 	add.w	fp, r3, r2
 800b5ca:	9b00      	ldr	r3, [sp, #0]
 800b5cc:	9a05      	ldr	r2, [sp, #20]
 800b5ce:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800b888 <__kernel_rem_pio2+0x300>
 800b5d2:	eb03 0802 	add.w	r8, r3, r2
 800b5d6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800b5d8:	1aa7      	subs	r7, r4, r2
 800b5da:	ae20      	add	r6, sp, #128	@ 0x80
 800b5dc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b5e0:	2500      	movs	r5, #0
 800b5e2:	4545      	cmp	r5, r8
 800b5e4:	dd13      	ble.n	800b60e <__kernel_rem_pio2+0x86>
 800b5e6:	9b06      	ldr	r3, [sp, #24]
 800b5e8:	aa20      	add	r2, sp, #128	@ 0x80
 800b5ea:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800b5ee:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800b5f2:	f04f 0800 	mov.w	r8, #0
 800b5f6:	9b00      	ldr	r3, [sp, #0]
 800b5f8:	4598      	cmp	r8, r3
 800b5fa:	dc31      	bgt.n	800b660 <__kernel_rem_pio2+0xd8>
 800b5fc:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800b888 <__kernel_rem_pio2+0x300>
 800b600:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b604:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b608:	462f      	mov	r7, r5
 800b60a:	2600      	movs	r6, #0
 800b60c:	e01b      	b.n	800b646 <__kernel_rem_pio2+0xbe>
 800b60e:	42ef      	cmn	r7, r5
 800b610:	d407      	bmi.n	800b622 <__kernel_rem_pio2+0x9a>
 800b612:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b616:	f7f4 ff85 	bl	8000524 <__aeabi_i2d>
 800b61a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b61e:	3501      	adds	r5, #1
 800b620:	e7df      	b.n	800b5e2 <__kernel_rem_pio2+0x5a>
 800b622:	ec51 0b18 	vmov	r0, r1, d8
 800b626:	e7f8      	b.n	800b61a <__kernel_rem_pio2+0x92>
 800b628:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b62c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800b630:	f7f4 ffe2 	bl	80005f8 <__aeabi_dmul>
 800b634:	4602      	mov	r2, r0
 800b636:	460b      	mov	r3, r1
 800b638:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b63c:	f7f4 fe26 	bl	800028c <__adddf3>
 800b640:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b644:	3601      	adds	r6, #1
 800b646:	9b05      	ldr	r3, [sp, #20]
 800b648:	429e      	cmp	r6, r3
 800b64a:	f1a7 0708 	sub.w	r7, r7, #8
 800b64e:	ddeb      	ble.n	800b628 <__kernel_rem_pio2+0xa0>
 800b650:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b654:	f108 0801 	add.w	r8, r8, #1
 800b658:	ecaa 7b02 	vstmia	sl!, {d7}
 800b65c:	3508      	adds	r5, #8
 800b65e:	e7ca      	b.n	800b5f6 <__kernel_rem_pio2+0x6e>
 800b660:	9b00      	ldr	r3, [sp, #0]
 800b662:	f8dd 8000 	ldr.w	r8, [sp]
 800b666:	aa0c      	add	r2, sp, #48	@ 0x30
 800b668:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b66c:	930a      	str	r3, [sp, #40]	@ 0x28
 800b66e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800b670:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b674:	9309      	str	r3, [sp, #36]	@ 0x24
 800b676:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800b67a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b67c:	ab98      	add	r3, sp, #608	@ 0x260
 800b67e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b682:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800b686:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b68a:	ac0c      	add	r4, sp, #48	@ 0x30
 800b68c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800b68e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800b692:	46a1      	mov	r9, r4
 800b694:	46c2      	mov	sl, r8
 800b696:	f1ba 0f00 	cmp.w	sl, #0
 800b69a:	f1a5 0508 	sub.w	r5, r5, #8
 800b69e:	dc77      	bgt.n	800b790 <__kernel_rem_pio2+0x208>
 800b6a0:	4658      	mov	r0, fp
 800b6a2:	ed9d 0b02 	vldr	d0, [sp, #8]
 800b6a6:	f7ff feb3 	bl	800b410 <scalbn>
 800b6aa:	ec57 6b10 	vmov	r6, r7, d0
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800b6b4:	4630      	mov	r0, r6
 800b6b6:	4639      	mov	r1, r7
 800b6b8:	f7f4 ff9e 	bl	80005f8 <__aeabi_dmul>
 800b6bc:	ec41 0b10 	vmov	d0, r0, r1
 800b6c0:	f000 faba 	bl	800bc38 <floor>
 800b6c4:	4b75      	ldr	r3, [pc, #468]	@ (800b89c <__kernel_rem_pio2+0x314>)
 800b6c6:	ec51 0b10 	vmov	r0, r1, d0
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	f7f4 ff94 	bl	80005f8 <__aeabi_dmul>
 800b6d0:	4602      	mov	r2, r0
 800b6d2:	460b      	mov	r3, r1
 800b6d4:	4630      	mov	r0, r6
 800b6d6:	4639      	mov	r1, r7
 800b6d8:	f7f4 fdd6 	bl	8000288 <__aeabi_dsub>
 800b6dc:	460f      	mov	r7, r1
 800b6de:	4606      	mov	r6, r0
 800b6e0:	f7f5 fa3a 	bl	8000b58 <__aeabi_d2iz>
 800b6e4:	9002      	str	r0, [sp, #8]
 800b6e6:	f7f4 ff1d 	bl	8000524 <__aeabi_i2d>
 800b6ea:	4602      	mov	r2, r0
 800b6ec:	460b      	mov	r3, r1
 800b6ee:	4630      	mov	r0, r6
 800b6f0:	4639      	mov	r1, r7
 800b6f2:	f7f4 fdc9 	bl	8000288 <__aeabi_dsub>
 800b6f6:	f1bb 0f00 	cmp.w	fp, #0
 800b6fa:	4606      	mov	r6, r0
 800b6fc:	460f      	mov	r7, r1
 800b6fe:	dd6c      	ble.n	800b7da <__kernel_rem_pio2+0x252>
 800b700:	f108 31ff 	add.w	r1, r8, #4294967295
 800b704:	ab0c      	add	r3, sp, #48	@ 0x30
 800b706:	9d02      	ldr	r5, [sp, #8]
 800b708:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b70c:	f1cb 0018 	rsb	r0, fp, #24
 800b710:	fa43 f200 	asr.w	r2, r3, r0
 800b714:	4415      	add	r5, r2
 800b716:	4082      	lsls	r2, r0
 800b718:	1a9b      	subs	r3, r3, r2
 800b71a:	aa0c      	add	r2, sp, #48	@ 0x30
 800b71c:	9502      	str	r5, [sp, #8]
 800b71e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800b722:	f1cb 0217 	rsb	r2, fp, #23
 800b726:	fa43 f902 	asr.w	r9, r3, r2
 800b72a:	f1b9 0f00 	cmp.w	r9, #0
 800b72e:	dd64      	ble.n	800b7fa <__kernel_rem_pio2+0x272>
 800b730:	9b02      	ldr	r3, [sp, #8]
 800b732:	2200      	movs	r2, #0
 800b734:	3301      	adds	r3, #1
 800b736:	9302      	str	r3, [sp, #8]
 800b738:	4615      	mov	r5, r2
 800b73a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800b73e:	4590      	cmp	r8, r2
 800b740:	f300 80b8 	bgt.w	800b8b4 <__kernel_rem_pio2+0x32c>
 800b744:	f1bb 0f00 	cmp.w	fp, #0
 800b748:	dd07      	ble.n	800b75a <__kernel_rem_pio2+0x1d2>
 800b74a:	f1bb 0f01 	cmp.w	fp, #1
 800b74e:	f000 80bf 	beq.w	800b8d0 <__kernel_rem_pio2+0x348>
 800b752:	f1bb 0f02 	cmp.w	fp, #2
 800b756:	f000 80c6 	beq.w	800b8e6 <__kernel_rem_pio2+0x35e>
 800b75a:	f1b9 0f02 	cmp.w	r9, #2
 800b75e:	d14c      	bne.n	800b7fa <__kernel_rem_pio2+0x272>
 800b760:	4632      	mov	r2, r6
 800b762:	463b      	mov	r3, r7
 800b764:	494e      	ldr	r1, [pc, #312]	@ (800b8a0 <__kernel_rem_pio2+0x318>)
 800b766:	2000      	movs	r0, #0
 800b768:	f7f4 fd8e 	bl	8000288 <__aeabi_dsub>
 800b76c:	4606      	mov	r6, r0
 800b76e:	460f      	mov	r7, r1
 800b770:	2d00      	cmp	r5, #0
 800b772:	d042      	beq.n	800b7fa <__kernel_rem_pio2+0x272>
 800b774:	4658      	mov	r0, fp
 800b776:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800b890 <__kernel_rem_pio2+0x308>
 800b77a:	f7ff fe49 	bl	800b410 <scalbn>
 800b77e:	4630      	mov	r0, r6
 800b780:	4639      	mov	r1, r7
 800b782:	ec53 2b10 	vmov	r2, r3, d0
 800b786:	f7f4 fd7f 	bl	8000288 <__aeabi_dsub>
 800b78a:	4606      	mov	r6, r0
 800b78c:	460f      	mov	r7, r1
 800b78e:	e034      	b.n	800b7fa <__kernel_rem_pio2+0x272>
 800b790:	4b44      	ldr	r3, [pc, #272]	@ (800b8a4 <__kernel_rem_pio2+0x31c>)
 800b792:	2200      	movs	r2, #0
 800b794:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b798:	f7f4 ff2e 	bl	80005f8 <__aeabi_dmul>
 800b79c:	f7f5 f9dc 	bl	8000b58 <__aeabi_d2iz>
 800b7a0:	f7f4 fec0 	bl	8000524 <__aeabi_i2d>
 800b7a4:	4b40      	ldr	r3, [pc, #256]	@ (800b8a8 <__kernel_rem_pio2+0x320>)
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	4606      	mov	r6, r0
 800b7aa:	460f      	mov	r7, r1
 800b7ac:	f7f4 ff24 	bl	80005f8 <__aeabi_dmul>
 800b7b0:	4602      	mov	r2, r0
 800b7b2:	460b      	mov	r3, r1
 800b7b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7b8:	f7f4 fd66 	bl	8000288 <__aeabi_dsub>
 800b7bc:	f7f5 f9cc 	bl	8000b58 <__aeabi_d2iz>
 800b7c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b7c4:	f849 0b04 	str.w	r0, [r9], #4
 800b7c8:	4639      	mov	r1, r7
 800b7ca:	4630      	mov	r0, r6
 800b7cc:	f7f4 fd5e 	bl	800028c <__adddf3>
 800b7d0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b7d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b7d8:	e75d      	b.n	800b696 <__kernel_rem_pio2+0x10e>
 800b7da:	d107      	bne.n	800b7ec <__kernel_rem_pio2+0x264>
 800b7dc:	f108 33ff 	add.w	r3, r8, #4294967295
 800b7e0:	aa0c      	add	r2, sp, #48	@ 0x30
 800b7e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b7e6:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800b7ea:	e79e      	b.n	800b72a <__kernel_rem_pio2+0x1a2>
 800b7ec:	4b2f      	ldr	r3, [pc, #188]	@ (800b8ac <__kernel_rem_pio2+0x324>)
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	f7f5 f988 	bl	8000b04 <__aeabi_dcmpge>
 800b7f4:	2800      	cmp	r0, #0
 800b7f6:	d143      	bne.n	800b880 <__kernel_rem_pio2+0x2f8>
 800b7f8:	4681      	mov	r9, r0
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	4630      	mov	r0, r6
 800b800:	4639      	mov	r1, r7
 800b802:	f7f5 f961 	bl	8000ac8 <__aeabi_dcmpeq>
 800b806:	2800      	cmp	r0, #0
 800b808:	f000 80bf 	beq.w	800b98a <__kernel_rem_pio2+0x402>
 800b80c:	f108 33ff 	add.w	r3, r8, #4294967295
 800b810:	2200      	movs	r2, #0
 800b812:	9900      	ldr	r1, [sp, #0]
 800b814:	428b      	cmp	r3, r1
 800b816:	da6e      	bge.n	800b8f6 <__kernel_rem_pio2+0x36e>
 800b818:	2a00      	cmp	r2, #0
 800b81a:	f000 8089 	beq.w	800b930 <__kernel_rem_pio2+0x3a8>
 800b81e:	f108 38ff 	add.w	r8, r8, #4294967295
 800b822:	ab0c      	add	r3, sp, #48	@ 0x30
 800b824:	f1ab 0b18 	sub.w	fp, fp, #24
 800b828:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d0f6      	beq.n	800b81e <__kernel_rem_pio2+0x296>
 800b830:	4658      	mov	r0, fp
 800b832:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800b890 <__kernel_rem_pio2+0x308>
 800b836:	f7ff fdeb 	bl	800b410 <scalbn>
 800b83a:	f108 0301 	add.w	r3, r8, #1
 800b83e:	00da      	lsls	r2, r3, #3
 800b840:	9205      	str	r2, [sp, #20]
 800b842:	ec55 4b10 	vmov	r4, r5, d0
 800b846:	aa70      	add	r2, sp, #448	@ 0x1c0
 800b848:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800b8a4 <__kernel_rem_pio2+0x31c>
 800b84c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800b850:	4646      	mov	r6, r8
 800b852:	f04f 0a00 	mov.w	sl, #0
 800b856:	2e00      	cmp	r6, #0
 800b858:	f280 80cf 	bge.w	800b9fa <__kernel_rem_pio2+0x472>
 800b85c:	4644      	mov	r4, r8
 800b85e:	2c00      	cmp	r4, #0
 800b860:	f2c0 80fd 	blt.w	800ba5e <__kernel_rem_pio2+0x4d6>
 800b864:	4b12      	ldr	r3, [pc, #72]	@ (800b8b0 <__kernel_rem_pio2+0x328>)
 800b866:	461f      	mov	r7, r3
 800b868:	ab70      	add	r3, sp, #448	@ 0x1c0
 800b86a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b86e:	9306      	str	r3, [sp, #24]
 800b870:	f04f 0a00 	mov.w	sl, #0
 800b874:	f04f 0b00 	mov.w	fp, #0
 800b878:	2600      	movs	r6, #0
 800b87a:	eba8 0504 	sub.w	r5, r8, r4
 800b87e:	e0e2      	b.n	800ba46 <__kernel_rem_pio2+0x4be>
 800b880:	f04f 0902 	mov.w	r9, #2
 800b884:	e754      	b.n	800b730 <__kernel_rem_pio2+0x1a8>
 800b886:	bf00      	nop
	...
 800b894:	3ff00000 	.word	0x3ff00000
 800b898:	0800c468 	.word	0x0800c468
 800b89c:	40200000 	.word	0x40200000
 800b8a0:	3ff00000 	.word	0x3ff00000
 800b8a4:	3e700000 	.word	0x3e700000
 800b8a8:	41700000 	.word	0x41700000
 800b8ac:	3fe00000 	.word	0x3fe00000
 800b8b0:	0800c428 	.word	0x0800c428
 800b8b4:	f854 3b04 	ldr.w	r3, [r4], #4
 800b8b8:	b945      	cbnz	r5, 800b8cc <__kernel_rem_pio2+0x344>
 800b8ba:	b123      	cbz	r3, 800b8c6 <__kernel_rem_pio2+0x33e>
 800b8bc:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800b8c0:	f844 3c04 	str.w	r3, [r4, #-4]
 800b8c4:	2301      	movs	r3, #1
 800b8c6:	3201      	adds	r2, #1
 800b8c8:	461d      	mov	r5, r3
 800b8ca:	e738      	b.n	800b73e <__kernel_rem_pio2+0x1b6>
 800b8cc:	1acb      	subs	r3, r1, r3
 800b8ce:	e7f7      	b.n	800b8c0 <__kernel_rem_pio2+0x338>
 800b8d0:	f108 32ff 	add.w	r2, r8, #4294967295
 800b8d4:	ab0c      	add	r3, sp, #48	@ 0x30
 800b8d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8da:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b8de:	a90c      	add	r1, sp, #48	@ 0x30
 800b8e0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b8e4:	e739      	b.n	800b75a <__kernel_rem_pio2+0x1d2>
 800b8e6:	f108 32ff 	add.w	r2, r8, #4294967295
 800b8ea:	ab0c      	add	r3, sp, #48	@ 0x30
 800b8ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8f0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b8f4:	e7f3      	b.n	800b8de <__kernel_rem_pio2+0x356>
 800b8f6:	a90c      	add	r1, sp, #48	@ 0x30
 800b8f8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b8fc:	3b01      	subs	r3, #1
 800b8fe:	430a      	orrs	r2, r1
 800b900:	e787      	b.n	800b812 <__kernel_rem_pio2+0x28a>
 800b902:	3401      	adds	r4, #1
 800b904:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b908:	2a00      	cmp	r2, #0
 800b90a:	d0fa      	beq.n	800b902 <__kernel_rem_pio2+0x37a>
 800b90c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b90e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b912:	eb0d 0503 	add.w	r5, sp, r3
 800b916:	9b06      	ldr	r3, [sp, #24]
 800b918:	aa20      	add	r2, sp, #128	@ 0x80
 800b91a:	4443      	add	r3, r8
 800b91c:	f108 0701 	add.w	r7, r8, #1
 800b920:	3d98      	subs	r5, #152	@ 0x98
 800b922:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800b926:	4444      	add	r4, r8
 800b928:	42bc      	cmp	r4, r7
 800b92a:	da04      	bge.n	800b936 <__kernel_rem_pio2+0x3ae>
 800b92c:	46a0      	mov	r8, r4
 800b92e:	e6a2      	b.n	800b676 <__kernel_rem_pio2+0xee>
 800b930:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b932:	2401      	movs	r4, #1
 800b934:	e7e6      	b.n	800b904 <__kernel_rem_pio2+0x37c>
 800b936:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b938:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800b93c:	f7f4 fdf2 	bl	8000524 <__aeabi_i2d>
 800b940:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800bc08 <__kernel_rem_pio2+0x680>
 800b944:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b948:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b94c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b950:	46b2      	mov	sl, r6
 800b952:	f04f 0800 	mov.w	r8, #0
 800b956:	9b05      	ldr	r3, [sp, #20]
 800b958:	4598      	cmp	r8, r3
 800b95a:	dd05      	ble.n	800b968 <__kernel_rem_pio2+0x3e0>
 800b95c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b960:	3701      	adds	r7, #1
 800b962:	eca5 7b02 	vstmia	r5!, {d7}
 800b966:	e7df      	b.n	800b928 <__kernel_rem_pio2+0x3a0>
 800b968:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800b96c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800b970:	f7f4 fe42 	bl	80005f8 <__aeabi_dmul>
 800b974:	4602      	mov	r2, r0
 800b976:	460b      	mov	r3, r1
 800b978:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b97c:	f7f4 fc86 	bl	800028c <__adddf3>
 800b980:	f108 0801 	add.w	r8, r8, #1
 800b984:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b988:	e7e5      	b.n	800b956 <__kernel_rem_pio2+0x3ce>
 800b98a:	f1cb 0000 	rsb	r0, fp, #0
 800b98e:	ec47 6b10 	vmov	d0, r6, r7
 800b992:	f7ff fd3d 	bl	800b410 <scalbn>
 800b996:	ec55 4b10 	vmov	r4, r5, d0
 800b99a:	4b9d      	ldr	r3, [pc, #628]	@ (800bc10 <__kernel_rem_pio2+0x688>)
 800b99c:	2200      	movs	r2, #0
 800b99e:	4620      	mov	r0, r4
 800b9a0:	4629      	mov	r1, r5
 800b9a2:	f7f5 f8af 	bl	8000b04 <__aeabi_dcmpge>
 800b9a6:	b300      	cbz	r0, 800b9ea <__kernel_rem_pio2+0x462>
 800b9a8:	4b9a      	ldr	r3, [pc, #616]	@ (800bc14 <__kernel_rem_pio2+0x68c>)
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	4620      	mov	r0, r4
 800b9ae:	4629      	mov	r1, r5
 800b9b0:	f7f4 fe22 	bl	80005f8 <__aeabi_dmul>
 800b9b4:	f7f5 f8d0 	bl	8000b58 <__aeabi_d2iz>
 800b9b8:	4606      	mov	r6, r0
 800b9ba:	f7f4 fdb3 	bl	8000524 <__aeabi_i2d>
 800b9be:	4b94      	ldr	r3, [pc, #592]	@ (800bc10 <__kernel_rem_pio2+0x688>)
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	f7f4 fe19 	bl	80005f8 <__aeabi_dmul>
 800b9c6:	460b      	mov	r3, r1
 800b9c8:	4602      	mov	r2, r0
 800b9ca:	4629      	mov	r1, r5
 800b9cc:	4620      	mov	r0, r4
 800b9ce:	f7f4 fc5b 	bl	8000288 <__aeabi_dsub>
 800b9d2:	f7f5 f8c1 	bl	8000b58 <__aeabi_d2iz>
 800b9d6:	ab0c      	add	r3, sp, #48	@ 0x30
 800b9d8:	f10b 0b18 	add.w	fp, fp, #24
 800b9dc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800b9e0:	f108 0801 	add.w	r8, r8, #1
 800b9e4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800b9e8:	e722      	b.n	800b830 <__kernel_rem_pio2+0x2a8>
 800b9ea:	4620      	mov	r0, r4
 800b9ec:	4629      	mov	r1, r5
 800b9ee:	f7f5 f8b3 	bl	8000b58 <__aeabi_d2iz>
 800b9f2:	ab0c      	add	r3, sp, #48	@ 0x30
 800b9f4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800b9f8:	e71a      	b.n	800b830 <__kernel_rem_pio2+0x2a8>
 800b9fa:	ab0c      	add	r3, sp, #48	@ 0x30
 800b9fc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800ba00:	f7f4 fd90 	bl	8000524 <__aeabi_i2d>
 800ba04:	4622      	mov	r2, r4
 800ba06:	462b      	mov	r3, r5
 800ba08:	f7f4 fdf6 	bl	80005f8 <__aeabi_dmul>
 800ba0c:	4652      	mov	r2, sl
 800ba0e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800ba12:	465b      	mov	r3, fp
 800ba14:	4620      	mov	r0, r4
 800ba16:	4629      	mov	r1, r5
 800ba18:	f7f4 fdee 	bl	80005f8 <__aeabi_dmul>
 800ba1c:	3e01      	subs	r6, #1
 800ba1e:	4604      	mov	r4, r0
 800ba20:	460d      	mov	r5, r1
 800ba22:	e718      	b.n	800b856 <__kernel_rem_pio2+0x2ce>
 800ba24:	9906      	ldr	r1, [sp, #24]
 800ba26:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800ba2a:	9106      	str	r1, [sp, #24]
 800ba2c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800ba30:	f7f4 fde2 	bl	80005f8 <__aeabi_dmul>
 800ba34:	4602      	mov	r2, r0
 800ba36:	460b      	mov	r3, r1
 800ba38:	4650      	mov	r0, sl
 800ba3a:	4659      	mov	r1, fp
 800ba3c:	f7f4 fc26 	bl	800028c <__adddf3>
 800ba40:	3601      	adds	r6, #1
 800ba42:	4682      	mov	sl, r0
 800ba44:	468b      	mov	fp, r1
 800ba46:	9b00      	ldr	r3, [sp, #0]
 800ba48:	429e      	cmp	r6, r3
 800ba4a:	dc01      	bgt.n	800ba50 <__kernel_rem_pio2+0x4c8>
 800ba4c:	42b5      	cmp	r5, r6
 800ba4e:	dae9      	bge.n	800ba24 <__kernel_rem_pio2+0x49c>
 800ba50:	ab48      	add	r3, sp, #288	@ 0x120
 800ba52:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800ba56:	e9c5 ab00 	strd	sl, fp, [r5]
 800ba5a:	3c01      	subs	r4, #1
 800ba5c:	e6ff      	b.n	800b85e <__kernel_rem_pio2+0x2d6>
 800ba5e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800ba60:	2b02      	cmp	r3, #2
 800ba62:	dc0b      	bgt.n	800ba7c <__kernel_rem_pio2+0x4f4>
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	dc39      	bgt.n	800badc <__kernel_rem_pio2+0x554>
 800ba68:	d05d      	beq.n	800bb26 <__kernel_rem_pio2+0x59e>
 800ba6a:	9b02      	ldr	r3, [sp, #8]
 800ba6c:	f003 0007 	and.w	r0, r3, #7
 800ba70:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800ba74:	ecbd 8b02 	vpop	{d8}
 800ba78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba7c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800ba7e:	2b03      	cmp	r3, #3
 800ba80:	d1f3      	bne.n	800ba6a <__kernel_rem_pio2+0x4e2>
 800ba82:	9b05      	ldr	r3, [sp, #20]
 800ba84:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800ba88:	eb0d 0403 	add.w	r4, sp, r3
 800ba8c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800ba90:	4625      	mov	r5, r4
 800ba92:	46c2      	mov	sl, r8
 800ba94:	f1ba 0f00 	cmp.w	sl, #0
 800ba98:	f1a5 0508 	sub.w	r5, r5, #8
 800ba9c:	dc6b      	bgt.n	800bb76 <__kernel_rem_pio2+0x5ee>
 800ba9e:	4645      	mov	r5, r8
 800baa0:	2d01      	cmp	r5, #1
 800baa2:	f1a4 0408 	sub.w	r4, r4, #8
 800baa6:	f300 8087 	bgt.w	800bbb8 <__kernel_rem_pio2+0x630>
 800baaa:	9c05      	ldr	r4, [sp, #20]
 800baac:	ab48      	add	r3, sp, #288	@ 0x120
 800baae:	441c      	add	r4, r3
 800bab0:	2000      	movs	r0, #0
 800bab2:	2100      	movs	r1, #0
 800bab4:	f1b8 0f01 	cmp.w	r8, #1
 800bab8:	f300 809c 	bgt.w	800bbf4 <__kernel_rem_pio2+0x66c>
 800babc:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800bac0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800bac4:	f1b9 0f00 	cmp.w	r9, #0
 800bac8:	f040 80a6 	bne.w	800bc18 <__kernel_rem_pio2+0x690>
 800bacc:	9b04      	ldr	r3, [sp, #16]
 800bace:	e9c3 7800 	strd	r7, r8, [r3]
 800bad2:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800bad6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800bada:	e7c6      	b.n	800ba6a <__kernel_rem_pio2+0x4e2>
 800badc:	9d05      	ldr	r5, [sp, #20]
 800bade:	ab48      	add	r3, sp, #288	@ 0x120
 800bae0:	441d      	add	r5, r3
 800bae2:	4644      	mov	r4, r8
 800bae4:	2000      	movs	r0, #0
 800bae6:	2100      	movs	r1, #0
 800bae8:	2c00      	cmp	r4, #0
 800baea:	da35      	bge.n	800bb58 <__kernel_rem_pio2+0x5d0>
 800baec:	f1b9 0f00 	cmp.w	r9, #0
 800baf0:	d038      	beq.n	800bb64 <__kernel_rem_pio2+0x5dc>
 800baf2:	4602      	mov	r2, r0
 800baf4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800baf8:	9c04      	ldr	r4, [sp, #16]
 800bafa:	e9c4 2300 	strd	r2, r3, [r4]
 800bafe:	4602      	mov	r2, r0
 800bb00:	460b      	mov	r3, r1
 800bb02:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800bb06:	f7f4 fbbf 	bl	8000288 <__aeabi_dsub>
 800bb0a:	ad4a      	add	r5, sp, #296	@ 0x128
 800bb0c:	2401      	movs	r4, #1
 800bb0e:	45a0      	cmp	r8, r4
 800bb10:	da2b      	bge.n	800bb6a <__kernel_rem_pio2+0x5e2>
 800bb12:	f1b9 0f00 	cmp.w	r9, #0
 800bb16:	d002      	beq.n	800bb1e <__kernel_rem_pio2+0x596>
 800bb18:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bb1c:	4619      	mov	r1, r3
 800bb1e:	9b04      	ldr	r3, [sp, #16]
 800bb20:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800bb24:	e7a1      	b.n	800ba6a <__kernel_rem_pio2+0x4e2>
 800bb26:	9c05      	ldr	r4, [sp, #20]
 800bb28:	ab48      	add	r3, sp, #288	@ 0x120
 800bb2a:	441c      	add	r4, r3
 800bb2c:	2000      	movs	r0, #0
 800bb2e:	2100      	movs	r1, #0
 800bb30:	f1b8 0f00 	cmp.w	r8, #0
 800bb34:	da09      	bge.n	800bb4a <__kernel_rem_pio2+0x5c2>
 800bb36:	f1b9 0f00 	cmp.w	r9, #0
 800bb3a:	d002      	beq.n	800bb42 <__kernel_rem_pio2+0x5ba>
 800bb3c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bb40:	4619      	mov	r1, r3
 800bb42:	9b04      	ldr	r3, [sp, #16]
 800bb44:	e9c3 0100 	strd	r0, r1, [r3]
 800bb48:	e78f      	b.n	800ba6a <__kernel_rem_pio2+0x4e2>
 800bb4a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800bb4e:	f7f4 fb9d 	bl	800028c <__adddf3>
 800bb52:	f108 38ff 	add.w	r8, r8, #4294967295
 800bb56:	e7eb      	b.n	800bb30 <__kernel_rem_pio2+0x5a8>
 800bb58:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800bb5c:	f7f4 fb96 	bl	800028c <__adddf3>
 800bb60:	3c01      	subs	r4, #1
 800bb62:	e7c1      	b.n	800bae8 <__kernel_rem_pio2+0x560>
 800bb64:	4602      	mov	r2, r0
 800bb66:	460b      	mov	r3, r1
 800bb68:	e7c6      	b.n	800baf8 <__kernel_rem_pio2+0x570>
 800bb6a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800bb6e:	f7f4 fb8d 	bl	800028c <__adddf3>
 800bb72:	3401      	adds	r4, #1
 800bb74:	e7cb      	b.n	800bb0e <__kernel_rem_pio2+0x586>
 800bb76:	ed95 7b00 	vldr	d7, [r5]
 800bb7a:	ed8d 7b00 	vstr	d7, [sp]
 800bb7e:	ed95 7b02 	vldr	d7, [r5, #8]
 800bb82:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bb86:	ec53 2b17 	vmov	r2, r3, d7
 800bb8a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bb8e:	f7f4 fb7d 	bl	800028c <__adddf3>
 800bb92:	4602      	mov	r2, r0
 800bb94:	460b      	mov	r3, r1
 800bb96:	4606      	mov	r6, r0
 800bb98:	460f      	mov	r7, r1
 800bb9a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bb9e:	f7f4 fb73 	bl	8000288 <__aeabi_dsub>
 800bba2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bba6:	f7f4 fb71 	bl	800028c <__adddf3>
 800bbaa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bbae:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800bbb2:	e9c5 6700 	strd	r6, r7, [r5]
 800bbb6:	e76d      	b.n	800ba94 <__kernel_rem_pio2+0x50c>
 800bbb8:	ed94 7b00 	vldr	d7, [r4]
 800bbbc:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800bbc0:	ec51 0b17 	vmov	r0, r1, d7
 800bbc4:	4652      	mov	r2, sl
 800bbc6:	465b      	mov	r3, fp
 800bbc8:	ed8d 7b00 	vstr	d7, [sp]
 800bbcc:	f7f4 fb5e 	bl	800028c <__adddf3>
 800bbd0:	4602      	mov	r2, r0
 800bbd2:	460b      	mov	r3, r1
 800bbd4:	4606      	mov	r6, r0
 800bbd6:	460f      	mov	r7, r1
 800bbd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bbdc:	f7f4 fb54 	bl	8000288 <__aeabi_dsub>
 800bbe0:	4652      	mov	r2, sl
 800bbe2:	465b      	mov	r3, fp
 800bbe4:	f7f4 fb52 	bl	800028c <__adddf3>
 800bbe8:	3d01      	subs	r5, #1
 800bbea:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bbee:	e9c4 6700 	strd	r6, r7, [r4]
 800bbf2:	e755      	b.n	800baa0 <__kernel_rem_pio2+0x518>
 800bbf4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800bbf8:	f7f4 fb48 	bl	800028c <__adddf3>
 800bbfc:	f108 38ff 	add.w	r8, r8, #4294967295
 800bc00:	e758      	b.n	800bab4 <__kernel_rem_pio2+0x52c>
 800bc02:	bf00      	nop
 800bc04:	f3af 8000 	nop.w
	...
 800bc10:	41700000 	.word	0x41700000
 800bc14:	3e700000 	.word	0x3e700000
 800bc18:	9b04      	ldr	r3, [sp, #16]
 800bc1a:	9a04      	ldr	r2, [sp, #16]
 800bc1c:	601f      	str	r7, [r3, #0]
 800bc1e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800bc22:	605c      	str	r4, [r3, #4]
 800bc24:	609d      	str	r5, [r3, #8]
 800bc26:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bc2a:	60d3      	str	r3, [r2, #12]
 800bc2c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bc30:	6110      	str	r0, [r2, #16]
 800bc32:	6153      	str	r3, [r2, #20]
 800bc34:	e719      	b.n	800ba6a <__kernel_rem_pio2+0x4e2>
 800bc36:	bf00      	nop

0800bc38 <floor>:
 800bc38:	ec51 0b10 	vmov	r0, r1, d0
 800bc3c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bc40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc44:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800bc48:	2e13      	cmp	r6, #19
 800bc4a:	460c      	mov	r4, r1
 800bc4c:	4605      	mov	r5, r0
 800bc4e:	4680      	mov	r8, r0
 800bc50:	dc34      	bgt.n	800bcbc <floor+0x84>
 800bc52:	2e00      	cmp	r6, #0
 800bc54:	da17      	bge.n	800bc86 <floor+0x4e>
 800bc56:	a332      	add	r3, pc, #200	@ (adr r3, 800bd20 <floor+0xe8>)
 800bc58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc5c:	f7f4 fb16 	bl	800028c <__adddf3>
 800bc60:	2200      	movs	r2, #0
 800bc62:	2300      	movs	r3, #0
 800bc64:	f7f4 ff58 	bl	8000b18 <__aeabi_dcmpgt>
 800bc68:	b150      	cbz	r0, 800bc80 <floor+0x48>
 800bc6a:	2c00      	cmp	r4, #0
 800bc6c:	da55      	bge.n	800bd1a <floor+0xe2>
 800bc6e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800bc72:	432c      	orrs	r4, r5
 800bc74:	2500      	movs	r5, #0
 800bc76:	42ac      	cmp	r4, r5
 800bc78:	4c2b      	ldr	r4, [pc, #172]	@ (800bd28 <floor+0xf0>)
 800bc7a:	bf08      	it	eq
 800bc7c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800bc80:	4621      	mov	r1, r4
 800bc82:	4628      	mov	r0, r5
 800bc84:	e023      	b.n	800bcce <floor+0x96>
 800bc86:	4f29      	ldr	r7, [pc, #164]	@ (800bd2c <floor+0xf4>)
 800bc88:	4137      	asrs	r7, r6
 800bc8a:	ea01 0307 	and.w	r3, r1, r7
 800bc8e:	4303      	orrs	r3, r0
 800bc90:	d01d      	beq.n	800bcce <floor+0x96>
 800bc92:	a323      	add	r3, pc, #140	@ (adr r3, 800bd20 <floor+0xe8>)
 800bc94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc98:	f7f4 faf8 	bl	800028c <__adddf3>
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	2300      	movs	r3, #0
 800bca0:	f7f4 ff3a 	bl	8000b18 <__aeabi_dcmpgt>
 800bca4:	2800      	cmp	r0, #0
 800bca6:	d0eb      	beq.n	800bc80 <floor+0x48>
 800bca8:	2c00      	cmp	r4, #0
 800bcaa:	bfbe      	ittt	lt
 800bcac:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800bcb0:	4133      	asrlt	r3, r6
 800bcb2:	18e4      	addlt	r4, r4, r3
 800bcb4:	ea24 0407 	bic.w	r4, r4, r7
 800bcb8:	2500      	movs	r5, #0
 800bcba:	e7e1      	b.n	800bc80 <floor+0x48>
 800bcbc:	2e33      	cmp	r6, #51	@ 0x33
 800bcbe:	dd0a      	ble.n	800bcd6 <floor+0x9e>
 800bcc0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800bcc4:	d103      	bne.n	800bcce <floor+0x96>
 800bcc6:	4602      	mov	r2, r0
 800bcc8:	460b      	mov	r3, r1
 800bcca:	f7f4 fadf 	bl	800028c <__adddf3>
 800bcce:	ec41 0b10 	vmov	d0, r0, r1
 800bcd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcd6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800bcda:	f04f 37ff 	mov.w	r7, #4294967295
 800bcde:	40df      	lsrs	r7, r3
 800bce0:	4207      	tst	r7, r0
 800bce2:	d0f4      	beq.n	800bcce <floor+0x96>
 800bce4:	a30e      	add	r3, pc, #56	@ (adr r3, 800bd20 <floor+0xe8>)
 800bce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcea:	f7f4 facf 	bl	800028c <__adddf3>
 800bcee:	2200      	movs	r2, #0
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	f7f4 ff11 	bl	8000b18 <__aeabi_dcmpgt>
 800bcf6:	2800      	cmp	r0, #0
 800bcf8:	d0c2      	beq.n	800bc80 <floor+0x48>
 800bcfa:	2c00      	cmp	r4, #0
 800bcfc:	da0a      	bge.n	800bd14 <floor+0xdc>
 800bcfe:	2e14      	cmp	r6, #20
 800bd00:	d101      	bne.n	800bd06 <floor+0xce>
 800bd02:	3401      	adds	r4, #1
 800bd04:	e006      	b.n	800bd14 <floor+0xdc>
 800bd06:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800bd0a:	2301      	movs	r3, #1
 800bd0c:	40b3      	lsls	r3, r6
 800bd0e:	441d      	add	r5, r3
 800bd10:	4545      	cmp	r5, r8
 800bd12:	d3f6      	bcc.n	800bd02 <floor+0xca>
 800bd14:	ea25 0507 	bic.w	r5, r5, r7
 800bd18:	e7b2      	b.n	800bc80 <floor+0x48>
 800bd1a:	2500      	movs	r5, #0
 800bd1c:	462c      	mov	r4, r5
 800bd1e:	e7af      	b.n	800bc80 <floor+0x48>
 800bd20:	8800759c 	.word	0x8800759c
 800bd24:	7e37e43c 	.word	0x7e37e43c
 800bd28:	bff00000 	.word	0xbff00000
 800bd2c:	000fffff 	.word	0x000fffff

0800bd30 <_init>:
 800bd30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd32:	bf00      	nop
 800bd34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd36:	bc08      	pop	{r3}
 800bd38:	469e      	mov	lr, r3
 800bd3a:	4770      	bx	lr

0800bd3c <_fini>:
 800bd3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd3e:	bf00      	nop
 800bd40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd42:	bc08      	pop	{r3}
 800bd44:	469e      	mov	lr, r3
 800bd46:	4770      	bx	lr
