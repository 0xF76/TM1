
projekt_tm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a400  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006d8  0800a590  0800a590  0000b590  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac68  0800ac68  0000c1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ac68  0800ac68  0000bc68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac70  0800ac70  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac70  0800ac70  0000bc70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ac74  0800ac74  0000bc74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800ac78  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e4  200001d8  0800ae4c  0000c1d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200006bc  0800ae4c  0000c6bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e6a6  00000000  00000000  0000c204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002381  00000000  00000000  0001a8aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c88  00000000  00000000  0001cc30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000997  00000000  00000000  0001d8b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027400  00000000  00000000  0001e24f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fd57  00000000  00000000  0004564f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec324  00000000  00000000  000553a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001416ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004978  00000000  00000000  00141710  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  00146088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a578 	.word	0x0800a578

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800a578 	.word	0x0800a578

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b9a0 	b.w	8000f40 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f83c 	bl	8000c84 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2lz>:
 8000c18:	b538      	push	{r3, r4, r5, lr}
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	4604      	mov	r4, r0
 8000c20:	460d      	mov	r5, r1
 8000c22:	f7ff ff5b 	bl	8000adc <__aeabi_dcmplt>
 8000c26:	b928      	cbnz	r0, 8000c34 <__aeabi_d2lz+0x1c>
 8000c28:	4620      	mov	r0, r4
 8000c2a:	4629      	mov	r1, r5
 8000c2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c30:	f000 b80a 	b.w	8000c48 <__aeabi_d2ulz>
 8000c34:	4620      	mov	r0, r4
 8000c36:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c3a:	f000 f805 	bl	8000c48 <__aeabi_d2ulz>
 8000c3e:	4240      	negs	r0, r0
 8000c40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c44:	bd38      	pop	{r3, r4, r5, pc}
 8000c46:	bf00      	nop

08000c48 <__aeabi_d2ulz>:
 8000c48:	b5d0      	push	{r4, r6, r7, lr}
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c7c <__aeabi_d2ulz+0x34>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	4606      	mov	r6, r0
 8000c50:	460f      	mov	r7, r1
 8000c52:	f7ff fcd1 	bl	80005f8 <__aeabi_dmul>
 8000c56:	f7ff ffa7 	bl	8000ba8 <__aeabi_d2uiz>
 8000c5a:	4604      	mov	r4, r0
 8000c5c:	f7ff fc52 	bl	8000504 <__aeabi_ui2d>
 8000c60:	4b07      	ldr	r3, [pc, #28]	@ (8000c80 <__aeabi_d2ulz+0x38>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	f7ff fcc8 	bl	80005f8 <__aeabi_dmul>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	460b      	mov	r3, r1
 8000c6c:	4630      	mov	r0, r6
 8000c6e:	4639      	mov	r1, r7
 8000c70:	f7ff fb0a 	bl	8000288 <__aeabi_dsub>
 8000c74:	f7ff ff98 	bl	8000ba8 <__aeabi_d2uiz>
 8000c78:	4621      	mov	r1, r4
 8000c7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c7c:	3df00000 	.word	0x3df00000
 8000c80:	41f00000 	.word	0x41f00000

08000c84 <__udivmoddi4>:
 8000c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c88:	9d08      	ldr	r5, [sp, #32]
 8000c8a:	460c      	mov	r4, r1
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d14e      	bne.n	8000d2e <__udivmoddi4+0xaa>
 8000c90:	4694      	mov	ip, r2
 8000c92:	458c      	cmp	ip, r1
 8000c94:	4686      	mov	lr, r0
 8000c96:	fab2 f282 	clz	r2, r2
 8000c9a:	d962      	bls.n	8000d62 <__udivmoddi4+0xde>
 8000c9c:	b14a      	cbz	r2, 8000cb2 <__udivmoddi4+0x2e>
 8000c9e:	f1c2 0320 	rsb	r3, r2, #32
 8000ca2:	4091      	lsls	r1, r2
 8000ca4:	fa20 f303 	lsr.w	r3, r0, r3
 8000ca8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cac:	4319      	orrs	r1, r3
 8000cae:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb6:	fa1f f68c 	uxth.w	r6, ip
 8000cba:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc2:	fb07 1114 	mls	r1, r7, r4, r1
 8000cc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cca:	fb04 f106 	mul.w	r1, r4, r6
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	d90a      	bls.n	8000ce8 <__udivmoddi4+0x64>
 8000cd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cda:	f080 8112 	bcs.w	8000f02 <__udivmoddi4+0x27e>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 810f 	bls.w	8000f02 <__udivmoddi4+0x27e>
 8000ce4:	3c02      	subs	r4, #2
 8000ce6:	4463      	add	r3, ip
 8000ce8:	1a59      	subs	r1, r3, r1
 8000cea:	fa1f f38e 	uxth.w	r3, lr
 8000cee:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf2:	fb07 1110 	mls	r1, r7, r0, r1
 8000cf6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfa:	fb00 f606 	mul.w	r6, r0, r6
 8000cfe:	429e      	cmp	r6, r3
 8000d00:	d90a      	bls.n	8000d18 <__udivmoddi4+0x94>
 8000d02:	eb1c 0303 	adds.w	r3, ip, r3
 8000d06:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0a:	f080 80fc 	bcs.w	8000f06 <__udivmoddi4+0x282>
 8000d0e:	429e      	cmp	r6, r3
 8000d10:	f240 80f9 	bls.w	8000f06 <__udivmoddi4+0x282>
 8000d14:	4463      	add	r3, ip
 8000d16:	3802      	subs	r0, #2
 8000d18:	1b9b      	subs	r3, r3, r6
 8000d1a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11d      	cbz	r5, 8000d2a <__udivmoddi4+0xa6>
 8000d22:	40d3      	lsrs	r3, r2
 8000d24:	2200      	movs	r2, #0
 8000d26:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d905      	bls.n	8000d3e <__udivmoddi4+0xba>
 8000d32:	b10d      	cbz	r5, 8000d38 <__udivmoddi4+0xb4>
 8000d34:	e9c5 0100 	strd	r0, r1, [r5]
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4608      	mov	r0, r1
 8000d3c:	e7f5      	b.n	8000d2a <__udivmoddi4+0xa6>
 8000d3e:	fab3 f183 	clz	r1, r3
 8000d42:	2900      	cmp	r1, #0
 8000d44:	d146      	bne.n	8000dd4 <__udivmoddi4+0x150>
 8000d46:	42a3      	cmp	r3, r4
 8000d48:	d302      	bcc.n	8000d50 <__udivmoddi4+0xcc>
 8000d4a:	4290      	cmp	r0, r2
 8000d4c:	f0c0 80f0 	bcc.w	8000f30 <__udivmoddi4+0x2ac>
 8000d50:	1a86      	subs	r6, r0, r2
 8000d52:	eb64 0303 	sbc.w	r3, r4, r3
 8000d56:	2001      	movs	r0, #1
 8000d58:	2d00      	cmp	r5, #0
 8000d5a:	d0e6      	beq.n	8000d2a <__udivmoddi4+0xa6>
 8000d5c:	e9c5 6300 	strd	r6, r3, [r5]
 8000d60:	e7e3      	b.n	8000d2a <__udivmoddi4+0xa6>
 8000d62:	2a00      	cmp	r2, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x204>
 8000d68:	eba1 040c 	sub.w	r4, r1, ip
 8000d6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d70:	fa1f f78c 	uxth.w	r7, ip
 8000d74:	2101      	movs	r1, #1
 8000d76:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d7e:	fb08 4416 	mls	r4, r8, r6, r4
 8000d82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d86:	fb07 f006 	mul.w	r0, r7, r6
 8000d8a:	4298      	cmp	r0, r3
 8000d8c:	d908      	bls.n	8000da0 <__udivmoddi4+0x11c>
 8000d8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d92:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d96:	d202      	bcs.n	8000d9e <__udivmoddi4+0x11a>
 8000d98:	4298      	cmp	r0, r3
 8000d9a:	f200 80cd 	bhi.w	8000f38 <__udivmoddi4+0x2b4>
 8000d9e:	4626      	mov	r6, r4
 8000da0:	1a1c      	subs	r4, r3, r0
 8000da2:	fa1f f38e 	uxth.w	r3, lr
 8000da6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000daa:	fb08 4410 	mls	r4, r8, r0, r4
 8000dae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db2:	fb00 f707 	mul.w	r7, r0, r7
 8000db6:	429f      	cmp	r7, r3
 8000db8:	d908      	bls.n	8000dcc <__udivmoddi4+0x148>
 8000dba:	eb1c 0303 	adds.w	r3, ip, r3
 8000dbe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x146>
 8000dc4:	429f      	cmp	r7, r3
 8000dc6:	f200 80b0 	bhi.w	8000f2a <__udivmoddi4+0x2a6>
 8000dca:	4620      	mov	r0, r4
 8000dcc:	1bdb      	subs	r3, r3, r7
 8000dce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd2:	e7a5      	b.n	8000d20 <__udivmoddi4+0x9c>
 8000dd4:	f1c1 0620 	rsb	r6, r1, #32
 8000dd8:	408b      	lsls	r3, r1
 8000dda:	fa22 f706 	lsr.w	r7, r2, r6
 8000dde:	431f      	orrs	r7, r3
 8000de0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de4:	fa04 f301 	lsl.w	r3, r4, r1
 8000de8:	ea43 030c 	orr.w	r3, r3, ip
 8000dec:	40f4      	lsrs	r4, r6
 8000dee:	fa00 f801 	lsl.w	r8, r0, r1
 8000df2:	0c38      	lsrs	r0, r7, #16
 8000df4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000df8:	fbb4 fef0 	udiv	lr, r4, r0
 8000dfc:	fa1f fc87 	uxth.w	ip, r7
 8000e00:	fb00 441e 	mls	r4, r0, lr, r4
 8000e04:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e08:	fb0e f90c 	mul.w	r9, lr, ip
 8000e0c:	45a1      	cmp	r9, r4
 8000e0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e12:	d90a      	bls.n	8000e2a <__udivmoddi4+0x1a6>
 8000e14:	193c      	adds	r4, r7, r4
 8000e16:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1a:	f080 8084 	bcs.w	8000f26 <__udivmoddi4+0x2a2>
 8000e1e:	45a1      	cmp	r9, r4
 8000e20:	f240 8081 	bls.w	8000f26 <__udivmoddi4+0x2a2>
 8000e24:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e28:	443c      	add	r4, r7
 8000e2a:	eba4 0409 	sub.w	r4, r4, r9
 8000e2e:	fa1f f983 	uxth.w	r9, r3
 8000e32:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e36:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x1d2>
 8000e46:	193c      	adds	r4, r7, r4
 8000e48:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e4c:	d267      	bcs.n	8000f1e <__udivmoddi4+0x29a>
 8000e4e:	45a4      	cmp	ip, r4
 8000e50:	d965      	bls.n	8000f1e <__udivmoddi4+0x29a>
 8000e52:	3b02      	subs	r3, #2
 8000e54:	443c      	add	r4, r7
 8000e56:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5a:	fba0 9302 	umull	r9, r3, r0, r2
 8000e5e:	eba4 040c 	sub.w	r4, r4, ip
 8000e62:	429c      	cmp	r4, r3
 8000e64:	46ce      	mov	lr, r9
 8000e66:	469c      	mov	ip, r3
 8000e68:	d351      	bcc.n	8000f0e <__udivmoddi4+0x28a>
 8000e6a:	d04e      	beq.n	8000f0a <__udivmoddi4+0x286>
 8000e6c:	b155      	cbz	r5, 8000e84 <__udivmoddi4+0x200>
 8000e6e:	ebb8 030e 	subs.w	r3, r8, lr
 8000e72:	eb64 040c 	sbc.w	r4, r4, ip
 8000e76:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7a:	40cb      	lsrs	r3, r1
 8000e7c:	431e      	orrs	r6, r3
 8000e7e:	40cc      	lsrs	r4, r1
 8000e80:	e9c5 6400 	strd	r6, r4, [r5]
 8000e84:	2100      	movs	r1, #0
 8000e86:	e750      	b.n	8000d2a <__udivmoddi4+0xa6>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f103 	lsr.w	r1, r0, r3
 8000e90:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e94:	fa24 f303 	lsr.w	r3, r4, r3
 8000e98:	4094      	lsls	r4, r2
 8000e9a:	430c      	orrs	r4, r1
 8000e9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea4:	fa1f f78c 	uxth.w	r7, ip
 8000ea8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eac:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb0:	0c23      	lsrs	r3, r4, #16
 8000eb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb6:	fb00 f107 	mul.w	r1, r0, r7
 8000eba:	4299      	cmp	r1, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x24c>
 8000ebe:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000ec6:	d22c      	bcs.n	8000f22 <__udivmoddi4+0x29e>
 8000ec8:	4299      	cmp	r1, r3
 8000eca:	d92a      	bls.n	8000f22 <__udivmoddi4+0x29e>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	1a5b      	subs	r3, r3, r1
 8000ed2:	b2a4      	uxth	r4, r4
 8000ed4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ed8:	fb08 3311 	mls	r3, r8, r1, r3
 8000edc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee0:	fb01 f307 	mul.w	r3, r1, r7
 8000ee4:	42a3      	cmp	r3, r4
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x276>
 8000ee8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eec:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef0:	d213      	bcs.n	8000f1a <__udivmoddi4+0x296>
 8000ef2:	42a3      	cmp	r3, r4
 8000ef4:	d911      	bls.n	8000f1a <__udivmoddi4+0x296>
 8000ef6:	3902      	subs	r1, #2
 8000ef8:	4464      	add	r4, ip
 8000efa:	1ae4      	subs	r4, r4, r3
 8000efc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f00:	e739      	b.n	8000d76 <__udivmoddi4+0xf2>
 8000f02:	4604      	mov	r4, r0
 8000f04:	e6f0      	b.n	8000ce8 <__udivmoddi4+0x64>
 8000f06:	4608      	mov	r0, r1
 8000f08:	e706      	b.n	8000d18 <__udivmoddi4+0x94>
 8000f0a:	45c8      	cmp	r8, r9
 8000f0c:	d2ae      	bcs.n	8000e6c <__udivmoddi4+0x1e8>
 8000f0e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f12:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f16:	3801      	subs	r0, #1
 8000f18:	e7a8      	b.n	8000e6c <__udivmoddi4+0x1e8>
 8000f1a:	4631      	mov	r1, r6
 8000f1c:	e7ed      	b.n	8000efa <__udivmoddi4+0x276>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	e799      	b.n	8000e56 <__udivmoddi4+0x1d2>
 8000f22:	4630      	mov	r0, r6
 8000f24:	e7d4      	b.n	8000ed0 <__udivmoddi4+0x24c>
 8000f26:	46d6      	mov	lr, sl
 8000f28:	e77f      	b.n	8000e2a <__udivmoddi4+0x1a6>
 8000f2a:	4463      	add	r3, ip
 8000f2c:	3802      	subs	r0, #2
 8000f2e:	e74d      	b.n	8000dcc <__udivmoddi4+0x148>
 8000f30:	4606      	mov	r6, r0
 8000f32:	4623      	mov	r3, r4
 8000f34:	4608      	mov	r0, r1
 8000f36:	e70f      	b.n	8000d58 <__udivmoddi4+0xd4>
 8000f38:	3e02      	subs	r6, #2
 8000f3a:	4463      	add	r3, ip
 8000f3c:	e730      	b.n	8000da0 <__udivmoddi4+0x11c>
 8000f3e:	bf00      	nop

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	0000      	movs	r0, r0
	...

08000f48 <DFT>:
* @date 02.05.2024
*/

#include "dft.h"

void DFT(Complex *input, Complex *output, int N) {
 8000f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f4c:	b090      	sub	sp, #64	@ 0x40
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	60f8      	str	r0, [r7, #12]
 8000f52:	60b9      	str	r1, [r7, #8]
 8000f54:	607a      	str	r2, [r7, #4]
 8000f56:	466b      	mov	r3, sp
 8000f58:	469a      	mov	sl, r3
	Complex W[N];
 8000f5a:	6879      	ldr	r1, [r7, #4]
 8000f5c:	1e4b      	subs	r3, r1, #1
 8000f5e:	633b      	str	r3, [r7, #48]	@ 0x30
 8000f60:	460a      	mov	r2, r1
 8000f62:	2300      	movs	r3, #0
 8000f64:	4690      	mov	r8, r2
 8000f66:	4699      	mov	r9, r3
 8000f68:	f04f 0200 	mov.w	r2, #0
 8000f6c:	f04f 0300 	mov.w	r3, #0
 8000f70:	ea4f 13c9 	mov.w	r3, r9, lsl #7
 8000f74:	ea43 6358 	orr.w	r3, r3, r8, lsr #25
 8000f78:	ea4f 12c8 	mov.w	r2, r8, lsl #7
 8000f7c:	460a      	mov	r2, r1
 8000f7e:	2300      	movs	r3, #0
 8000f80:	4614      	mov	r4, r2
 8000f82:	461d      	mov	r5, r3
 8000f84:	f04f 0200 	mov.w	r2, #0
 8000f88:	f04f 0300 	mov.w	r3, #0
 8000f8c:	01eb      	lsls	r3, r5, #7
 8000f8e:	ea43 6354 	orr.w	r3, r3, r4, lsr #25
 8000f92:	01e2      	lsls	r2, r4, #7
 8000f94:	460b      	mov	r3, r1
 8000f96:	011b      	lsls	r3, r3, #4
 8000f98:	3307      	adds	r3, #7
 8000f9a:	08db      	lsrs	r3, r3, #3
 8000f9c:	00db      	lsls	r3, r3, #3
 8000f9e:	ebad 0d03 	sub.w	sp, sp, r3
 8000fa2:	466b      	mov	r3, sp
 8000fa4:	3307      	adds	r3, #7
 8000fa6:	08db      	lsrs	r3, r3, #3
 8000fa8:	00db      	lsls	r3, r3, #3
 8000faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	Complex sum;

	for(int i = 0; i < N; i++) {
 8000fac:	2300      	movs	r3, #0
 8000fae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000fb0:	e038      	b.n	8001024 <DFT+0xdc>
		double angle = -2 * M_PI * i / N;
 8000fb2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8000fb4:	f7ff fab6 	bl	8000524 <__aeabi_i2d>
 8000fb8:	a377      	add	r3, pc, #476	@ (adr r3, 8001198 <DFT+0x250>)
 8000fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fbe:	f7ff fb1b 	bl	80005f8 <__aeabi_dmul>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	4614      	mov	r4, r2
 8000fc8:	461d      	mov	r5, r3
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff faaa 	bl	8000524 <__aeabi_i2d>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	4620      	mov	r0, r4
 8000fd6:	4629      	mov	r1, r5
 8000fd8:	f7ff fc38 	bl	800084c <__aeabi_ddiv>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	460b      	mov	r3, r1
 8000fe0:	e9c7 2308 	strd	r2, r3, [r7, #32]
		W[i].real = cos(angle);
 8000fe4:	ed97 0b08 	vldr	d0, [r7, #32]
 8000fe8:	f008 fa42 	bl	8009470 <cos>
 8000fec:	eeb0 7a40 	vmov.f32	s14, s0
 8000ff0:	eef0 7a60 	vmov.f32	s15, s1
 8000ff4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000ff6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ff8:	011b      	lsls	r3, r3, #4
 8000ffa:	4413      	add	r3, r2
 8000ffc:	ed83 7b00 	vstr	d7, [r3]
		W[i].imag = sin(angle);
 8001000:	ed97 0b08 	vldr	d0, [r7, #32]
 8001004:	f008 fa88 	bl	8009518 <sin>
 8001008:	eeb0 7a40 	vmov.f32	s14, s0
 800100c:	eef0 7a60 	vmov.f32	s15, s1
 8001010:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001012:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001014:	011b      	lsls	r3, r3, #4
 8001016:	4413      	add	r3, r2
 8001018:	3308      	adds	r3, #8
 800101a:	ed83 7b00 	vstr	d7, [r3]
	for(int i = 0; i < N; i++) {
 800101e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001020:	3301      	adds	r3, #1
 8001022:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001024:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	429a      	cmp	r2, r3
 800102a:	dbc2      	blt.n	8000fb2 <DFT+0x6a>
	}

	for(int k = 0; k < N; k++) {
 800102c:	2300      	movs	r3, #0
 800102e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001030:	e0a5      	b.n	800117e <DFT+0x236>
		sum.real = 0;
 8001032:	f04f 0200 	mov.w	r2, #0
 8001036:	f04f 0300 	mov.w	r3, #0
 800103a:	e9c7 2304 	strd	r2, r3, [r7, #16]
		sum.imag = 0;
 800103e:	f04f 0200 	mov.w	r2, #0
 8001042:	f04f 0300 	mov.w	r3, #0
 8001046:	e9c7 2306 	strd	r2, r3, [r7, #24]

		for(int n = 0; n < N; n++) {
 800104a:	2300      	movs	r3, #0
 800104c:	637b      	str	r3, [r7, #52]	@ 0x34
 800104e:	e04b      	b.n	80010e8 <DFT+0x1a0>
			sum.real += input[n].real * W[(n * k) % N].real;
 8001050:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001054:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001056:	011b      	lsls	r3, r3, #4
 8001058:	68fa      	ldr	r2, [r7, #12]
 800105a:	4413      	add	r3, r2
 800105c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001060:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001062:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001064:	fb02 f303 	mul.w	r3, r2, r3
 8001068:	687a      	ldr	r2, [r7, #4]
 800106a:	fb93 f2f2 	sdiv	r2, r3, r2
 800106e:	687e      	ldr	r6, [r7, #4]
 8001070:	fb06 f202 	mul.w	r2, r6, r2
 8001074:	1a9b      	subs	r3, r3, r2
 8001076:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001078:	011b      	lsls	r3, r3, #4
 800107a:	4413      	add	r3, r2
 800107c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001080:	f7ff faba 	bl	80005f8 <__aeabi_dmul>
 8001084:	4602      	mov	r2, r0
 8001086:	460b      	mov	r3, r1
 8001088:	4620      	mov	r0, r4
 800108a:	4629      	mov	r1, r5
 800108c:	f7ff f8fe 	bl	800028c <__adddf3>
 8001090:	4602      	mov	r2, r0
 8001092:	460b      	mov	r3, r1
 8001094:	e9c7 2304 	strd	r2, r3, [r7, #16]
			sum.imag += input[n].real * W[(n * k) % N].imag;
 8001098:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800109c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800109e:	011b      	lsls	r3, r3, #4
 80010a0:	68fa      	ldr	r2, [r7, #12]
 80010a2:	4413      	add	r3, r2
 80010a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010aa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80010ac:	fb02 f303 	mul.w	r3, r2, r3
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	fb93 f2f2 	sdiv	r2, r3, r2
 80010b6:	687e      	ldr	r6, [r7, #4]
 80010b8:	fb06 f202 	mul.w	r2, r6, r2
 80010bc:	1a9b      	subs	r3, r3, r2
 80010be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80010c0:	011b      	lsls	r3, r3, #4
 80010c2:	4413      	add	r3, r2
 80010c4:	3308      	adds	r3, #8
 80010c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ca:	f7ff fa95 	bl	80005f8 <__aeabi_dmul>
 80010ce:	4602      	mov	r2, r0
 80010d0:	460b      	mov	r3, r1
 80010d2:	4620      	mov	r0, r4
 80010d4:	4629      	mov	r1, r5
 80010d6:	f7ff f8d9 	bl	800028c <__adddf3>
 80010da:	4602      	mov	r2, r0
 80010dc:	460b      	mov	r3, r1
 80010de:	e9c7 2306 	strd	r2, r3, [r7, #24]
		for(int n = 0; n < N; n++) {
 80010e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010e4:	3301      	adds	r3, #1
 80010e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80010e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	dbaf      	blt.n	8001050 <DFT+0x108>
		}

		if(sum.real < 0.001 && sum.real > -0.001) {
 80010f0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80010f4:	a32a      	add	r3, pc, #168	@ (adr r3, 80011a0 <DFT+0x258>)
 80010f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fa:	f7ff fcef 	bl	8000adc <__aeabi_dcmplt>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d00f      	beq.n	8001124 <DFT+0x1dc>
 8001104:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001108:	a327      	add	r3, pc, #156	@ (adr r3, 80011a8 <DFT+0x260>)
 800110a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110e:	f7ff fd03 	bl	8000b18 <__aeabi_dcmpgt>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d005      	beq.n	8001124 <DFT+0x1dc>
			sum.real = 0;
 8001118:	f04f 0200 	mov.w	r2, #0
 800111c:	f04f 0300 	mov.w	r3, #0
 8001120:	e9c7 2304 	strd	r2, r3, [r7, #16]
		}

		if(sum.imag < 0.001 && sum.imag > -0.001) {
 8001124:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001128:	a31d      	add	r3, pc, #116	@ (adr r3, 80011a0 <DFT+0x258>)
 800112a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112e:	f7ff fcd5 	bl	8000adc <__aeabi_dcmplt>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d00f      	beq.n	8001158 <DFT+0x210>
 8001138:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800113c:	a31a      	add	r3, pc, #104	@ (adr r3, 80011a8 <DFT+0x260>)
 800113e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001142:	f7ff fce9 	bl	8000b18 <__aeabi_dcmpgt>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d005      	beq.n	8001158 <DFT+0x210>
			sum.imag = 0;
 800114c:	f04f 0200 	mov.w	r2, #0
 8001150:	f04f 0300 	mov.w	r3, #0
 8001154:	e9c7 2306 	strd	r2, r3, [r7, #24]
		}


		output[k].real = sum.real;
 8001158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800115a:	011b      	lsls	r3, r3, #4
 800115c:	68ba      	ldr	r2, [r7, #8]
 800115e:	18d1      	adds	r1, r2, r3
 8001160:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001164:	e9c1 2300 	strd	r2, r3, [r1]
		output[k].imag = sum.imag;
 8001168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800116a:	011b      	lsls	r3, r3, #4
 800116c:	68ba      	ldr	r2, [r7, #8]
 800116e:	18d1      	adds	r1, r2, r3
 8001170:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001174:	e9c1 2302 	strd	r2, r3, [r1, #8]
	for(int k = 0; k < N; k++) {
 8001178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800117a:	3301      	adds	r3, #1
 800117c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800117e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	429a      	cmp	r2, r3
 8001184:	f6ff af55 	blt.w	8001032 <DFT+0xea>
 8001188:	46d5      	mov	sp, sl
	}
}
 800118a:	bf00      	nop
 800118c:	3740      	adds	r7, #64	@ 0x40
 800118e:	46bd      	mov	sp, r7
 8001190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001194:	f3af 8000 	nop.w
 8001198:	54442d18 	.word	0x54442d18
 800119c:	c01921fb 	.word	0xc01921fb
 80011a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80011a4:	3f50624d 	.word	0x3f50624d
 80011a8:	d2f1a9fc 	.word	0xd2f1a9fc
 80011ac:	bf50624d 	.word	0xbf50624d

080011b0 <HAL_UART_RxCpltCallback>:
uint8_t DataReadyFlag = 0;

Complex input[4];
Complex output[4];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
	if(receivedByte == '\n' || receivedByte == '\r'){
 80011b8:	4b13      	ldr	r3, [pc, #76]	@ (8001208 <HAL_UART_RxCpltCallback+0x58>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	2b0a      	cmp	r3, #10
 80011be:	d003      	beq.n	80011c8 <HAL_UART_RxCpltCallback+0x18>
 80011c0:	4b11      	ldr	r3, [pc, #68]	@ (8001208 <HAL_UART_RxCpltCallback+0x58>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2b0d      	cmp	r3, #13
 80011c6:	d10b      	bne.n	80011e0 <HAL_UART_RxCpltCallback+0x30>
		DataReceived = 1;
 80011c8:	4b10      	ldr	r3, [pc, #64]	@ (800120c <HAL_UART_RxCpltCallback+0x5c>)
 80011ca:	2201      	movs	r2, #1
 80011cc:	701a      	strb	r2, [r3, #0]
		Rx_i = 0;
 80011ce:	4b10      	ldr	r3, [pc, #64]	@ (8001210 <HAL_UART_RxCpltCallback+0x60>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(huart, &receivedByte, 1);
 80011d4:	2201      	movs	r2, #1
 80011d6:	490c      	ldr	r1, [pc, #48]	@ (8001208 <HAL_UART_RxCpltCallback+0x58>)
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f002 fc6b 	bl	8003ab4 <HAL_UART_Receive_IT>
		return;
 80011de:	e00f      	b.n	8001200 <HAL_UART_RxCpltCallback+0x50>
	}
	RxData[Rx_i++] = receivedByte;
 80011e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001210 <HAL_UART_RxCpltCallback+0x60>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	1c5a      	adds	r2, r3, #1
 80011e6:	b2d1      	uxtb	r1, r2
 80011e8:	4a09      	ldr	r2, [pc, #36]	@ (8001210 <HAL_UART_RxCpltCallback+0x60>)
 80011ea:	7011      	strb	r1, [r2, #0]
 80011ec:	461a      	mov	r2, r3
 80011ee:	4b06      	ldr	r3, [pc, #24]	@ (8001208 <HAL_UART_RxCpltCallback+0x58>)
 80011f0:	7819      	ldrb	r1, [r3, #0]
 80011f2:	4b08      	ldr	r3, [pc, #32]	@ (8001214 <HAL_UART_RxCpltCallback+0x64>)
 80011f4:	5499      	strb	r1, [r3, r2]

	HAL_UART_Receive_IT(huart, &receivedByte, 1);
 80011f6:	2201      	movs	r2, #1
 80011f8:	4903      	ldr	r1, [pc, #12]	@ (8001208 <HAL_UART_RxCpltCallback+0x58>)
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f002 fc5a 	bl	8003ab4 <HAL_UART_Receive_IT>

}
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	200002e0 	.word	0x200002e0
 800120c:	200003e4 	.word	0x200003e4
 8001210:	200003e3 	.word	0x200003e3
 8001214:	200002e4 	.word	0x200002e4

08001218 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]

}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800122c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001230:	b092      	sub	sp, #72	@ 0x48
 8001232:	af0e      	add	r7, sp, #56	@ 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001234:	f000 fc00 	bl	8001a38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001238:	f000 f898 	bl	800136c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800123c:	f000 f956 	bl	80014ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001240:	f000 f924 	bl	800148c <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8001244:	f000 f8e4 	bl	8001410 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, (uint8_t*)&receivedByte, 1);
 8001248:	2201      	movs	r2, #1
 800124a:	493e      	ldr	r1, [pc, #248]	@ (8001344 <main+0x118>)
 800124c:	483e      	ldr	r0, [pc, #248]	@ (8001348 <main+0x11c>)
 800124e:	f002 fc31 	bl	8003ab4 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	if(DataReceived) {
 8001252:	4b3e      	ldr	r3, [pc, #248]	@ (800134c <main+0x120>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d0fb      	beq.n	8001252 <main+0x26>
		DataReceived = 0;
 800125a:	4b3c      	ldr	r3, [pc, #240]	@ (800134c <main+0x120>)
 800125c:	2200      	movs	r2, #0
 800125e:	701a      	strb	r2, [r3, #0]

		char* token;
		token = strtok(RxData,",");
 8001260:	493b      	ldr	r1, [pc, #236]	@ (8001350 <main+0x124>)
 8001262:	483c      	ldr	r0, [pc, #240]	@ (8001354 <main+0x128>)
 8001264:	f005 fb74 	bl	8006950 <strtok>
 8001268:	60f8      	str	r0, [r7, #12]

		for(int i = 0; i < 4; i++) {
 800126a:	2300      	movs	r3, #0
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	e027      	b.n	80012c0 <main+0x94>
			input[i].real = atof(token);
 8001270:	68f8      	ldr	r0, [r7, #12]
 8001272:	f003 ffc1 	bl	80051f8 <atof>
 8001276:	eeb0 7a40 	vmov.f32	s14, s0
 800127a:	eef0 7a60 	vmov.f32	s15, s1
 800127e:	4a36      	ldr	r2, [pc, #216]	@ (8001358 <main+0x12c>)
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	011b      	lsls	r3, r3, #4
 8001284:	4413      	add	r3, r2
 8001286:	ed83 7b00 	vstr	d7, [r3]
			token = strtok(NULL,",");
 800128a:	4931      	ldr	r1, [pc, #196]	@ (8001350 <main+0x124>)
 800128c:	2000      	movs	r0, #0
 800128e:	f005 fb5f 	bl	8006950 <strtok>
 8001292:	60f8      	str	r0, [r7, #12]
			input[i].imag = atof(token);
 8001294:	68f8      	ldr	r0, [r7, #12]
 8001296:	f003 ffaf 	bl	80051f8 <atof>
 800129a:	eeb0 7a40 	vmov.f32	s14, s0
 800129e:	eef0 7a60 	vmov.f32	s15, s1
 80012a2:	4a2d      	ldr	r2, [pc, #180]	@ (8001358 <main+0x12c>)
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	011b      	lsls	r3, r3, #4
 80012a8:	4413      	add	r3, r2
 80012aa:	3308      	adds	r3, #8
 80012ac:	ed83 7b00 	vstr	d7, [r3]
			token = strtok(NULL,",");
 80012b0:	4927      	ldr	r1, [pc, #156]	@ (8001350 <main+0x124>)
 80012b2:	2000      	movs	r0, #0
 80012b4:	f005 fb4c 	bl	8006950 <strtok>
 80012b8:	60f8      	str	r0, [r7, #12]
		for(int i = 0; i < 4; i++) {
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	3301      	adds	r3, #1
 80012be:	60bb      	str	r3, [r7, #8]
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	2b03      	cmp	r3, #3
 80012c4:	ddd4      	ble.n	8001270 <main+0x44>
		}

		DFT(input, output, 4);
 80012c6:	2204      	movs	r2, #4
 80012c8:	4924      	ldr	r1, [pc, #144]	@ (800135c <main+0x130>)
 80012ca:	4823      	ldr	r0, [pc, #140]	@ (8001358 <main+0x12c>)
 80012cc:	f7ff fe3c 	bl	8000f48 <DFT>

		size = sprintf(TxData,"%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f\n", output[0].real, output[0].imag, output[1].real, output[1].imag, output[2].real, output[2].imag, output[3].real, output[3].imag);
 80012d0:	4b22      	ldr	r3, [pc, #136]	@ (800135c <main+0x130>)
 80012d2:	ed93 7b00 	vldr	d7, [r3]
 80012d6:	ed87 7b00 	vstr	d7, [r7]
 80012da:	4b20      	ldr	r3, [pc, #128]	@ (800135c <main+0x130>)
 80012dc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80012e0:	4b1e      	ldr	r3, [pc, #120]	@ (800135c <main+0x130>)
 80012e2:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80012e6:	4b1d      	ldr	r3, [pc, #116]	@ (800135c <main+0x130>)
 80012e8:	e9d3 8906 	ldrd	r8, r9, [r3, #24]
 80012ec:	4b1b      	ldr	r3, [pc, #108]	@ (800135c <main+0x130>)
 80012ee:	e9d3 ab08 	ldrd	sl, fp, [r3, #32]
 80012f2:	4b1a      	ldr	r3, [pc, #104]	@ (800135c <main+0x130>)
 80012f4:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 80012f8:	4b18      	ldr	r3, [pc, #96]	@ (800135c <main+0x130>)
 80012fa:	ed93 6b0c 	vldr	d6, [r3, #48]	@ 0x30
 80012fe:	4b17      	ldr	r3, [pc, #92]	@ (800135c <main+0x130>)
 8001300:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001304:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8001308:	ed8d 6b0a 	vstr	d6, [sp, #40]	@ 0x28
 800130c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001310:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8001314:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8001318:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800131c:	e9cd 0100 	strd	r0, r1, [sp]
 8001320:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001324:	490e      	ldr	r1, [pc, #56]	@ (8001360 <main+0x134>)
 8001326:	480f      	ldr	r0, [pc, #60]	@ (8001364 <main+0x138>)
 8001328:	f005 fa94 	bl	8006854 <siprintf>
 800132c:	4603      	mov	r3, r0
 800132e:	b2da      	uxtb	r2, r3
 8001330:	4b0d      	ldr	r3, [pc, #52]	@ (8001368 <main+0x13c>)
 8001332:	701a      	strb	r2, [r3, #0]

		HAL_UART_Transmit_IT(&huart2, TxData, size);
 8001334:	4b0c      	ldr	r3, [pc, #48]	@ (8001368 <main+0x13c>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	461a      	mov	r2, r3
 800133a:	490a      	ldr	r1, [pc, #40]	@ (8001364 <main+0x138>)
 800133c:	4802      	ldr	r0, [pc, #8]	@ (8001348 <main+0x11c>)
 800133e:	f002 fb5b 	bl	80039f8 <HAL_UART_Transmit_IT>
	if(DataReceived) {
 8001342:	e786      	b.n	8001252 <main+0x26>
 8001344:	200002e0 	.word	0x200002e0
 8001348:	20000258 	.word	0x20000258
 800134c:	200003e4 	.word	0x200003e4
 8001350:	0800a590 	.word	0x0800a590
 8001354:	200002e4 	.word	0x200002e4
 8001358:	200004e8 	.word	0x200004e8
 800135c:	20000528 	.word	0x20000528
 8001360:	0800a594 	.word	0x0800a594
 8001364:	200003e8 	.word	0x200003e8
 8001368:	200004e7 	.word	0x200004e7

0800136c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b096      	sub	sp, #88	@ 0x58
 8001370:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001372:	f107 0314 	add.w	r3, r7, #20
 8001376:	2244      	movs	r2, #68	@ 0x44
 8001378:	2100      	movs	r1, #0
 800137a:	4618      	mov	r0, r3
 800137c:	f005 facd 	bl	800691a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001380:	463b      	mov	r3, r7
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	605a      	str	r2, [r3, #4]
 8001388:	609a      	str	r2, [r3, #8]
 800138a:	60da      	str	r2, [r3, #12]
 800138c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800138e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001392:	f000 ff2d 	bl	80021f0 <HAL_PWREx_ControlVoltageScaling>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800139c:	f000 f920 	bl	80015e0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013a0:	2302      	movs	r3, #2
 80013a2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013a8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013aa:	2310      	movs	r3, #16
 80013ac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ae:	2302      	movs	r3, #2
 80013b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013b2:	2302      	movs	r3, #2
 80013b4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013b6:	2301      	movs	r3, #1
 80013b8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80013ba:	230a      	movs	r3, #10
 80013bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80013be:	2307      	movs	r3, #7
 80013c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013c2:	2302      	movs	r3, #2
 80013c4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013c6:	2302      	movs	r3, #2
 80013c8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013ca:	f107 0314 	add.w	r3, r7, #20
 80013ce:	4618      	mov	r0, r3
 80013d0:	f000 ff64 	bl	800229c <HAL_RCC_OscConfig>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <SystemClock_Config+0x72>
  {
    Error_Handler();
 80013da:	f000 f901 	bl	80015e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013de:	230f      	movs	r3, #15
 80013e0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013e2:	2303      	movs	r3, #3
 80013e4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013e6:	2300      	movs	r3, #0
 80013e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013ea:	2300      	movs	r3, #0
 80013ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013ee:	2300      	movs	r3, #0
 80013f0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013f2:	463b      	mov	r3, r7
 80013f4:	2104      	movs	r1, #4
 80013f6:	4618      	mov	r0, r3
 80013f8:	f001 fb2c 	bl	8002a54 <HAL_RCC_ClockConfig>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001402:	f000 f8ed 	bl	80015e0 <Error_Handler>
  }
}
 8001406:	bf00      	nop
 8001408:	3758      	adds	r7, #88	@ 0x58
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
	...

08001410 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001414:	4b1b      	ldr	r3, [pc, #108]	@ (8001484 <MX_SPI2_Init+0x74>)
 8001416:	4a1c      	ldr	r2, [pc, #112]	@ (8001488 <MX_SPI2_Init+0x78>)
 8001418:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800141a:	4b1a      	ldr	r3, [pc, #104]	@ (8001484 <MX_SPI2_Init+0x74>)
 800141c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001420:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001422:	4b18      	ldr	r3, [pc, #96]	@ (8001484 <MX_SPI2_Init+0x74>)
 8001424:	2200      	movs	r2, #0
 8001426:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001428:	4b16      	ldr	r3, [pc, #88]	@ (8001484 <MX_SPI2_Init+0x74>)
 800142a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800142e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001430:	4b14      	ldr	r3, [pc, #80]	@ (8001484 <MX_SPI2_Init+0x74>)
 8001432:	2200      	movs	r2, #0
 8001434:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001436:	4b13      	ldr	r3, [pc, #76]	@ (8001484 <MX_SPI2_Init+0x74>)
 8001438:	2200      	movs	r2, #0
 800143a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800143c:	4b11      	ldr	r3, [pc, #68]	@ (8001484 <MX_SPI2_Init+0x74>)
 800143e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001442:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001444:	4b0f      	ldr	r3, [pc, #60]	@ (8001484 <MX_SPI2_Init+0x74>)
 8001446:	2238      	movs	r2, #56	@ 0x38
 8001448:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800144a:	4b0e      	ldr	r3, [pc, #56]	@ (8001484 <MX_SPI2_Init+0x74>)
 800144c:	2200      	movs	r2, #0
 800144e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001450:	4b0c      	ldr	r3, [pc, #48]	@ (8001484 <MX_SPI2_Init+0x74>)
 8001452:	2200      	movs	r2, #0
 8001454:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001456:	4b0b      	ldr	r3, [pc, #44]	@ (8001484 <MX_SPI2_Init+0x74>)
 8001458:	2200      	movs	r2, #0
 800145a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 800145c:	4b09      	ldr	r3, [pc, #36]	@ (8001484 <MX_SPI2_Init+0x74>)
 800145e:	2207      	movs	r2, #7
 8001460:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001462:	4b08      	ldr	r3, [pc, #32]	@ (8001484 <MX_SPI2_Init+0x74>)
 8001464:	2200      	movs	r2, #0
 8001466:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001468:	4b06      	ldr	r3, [pc, #24]	@ (8001484 <MX_SPI2_Init+0x74>)
 800146a:	2208      	movs	r2, #8
 800146c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800146e:	4805      	ldr	r0, [pc, #20]	@ (8001484 <MX_SPI2_Init+0x74>)
 8001470:	f002 f9d0 	bl	8003814 <HAL_SPI_Init>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800147a:	f000 f8b1 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	200001f4 	.word	0x200001f4
 8001488:	40003800 	.word	0x40003800

0800148c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001490:	4b14      	ldr	r3, [pc, #80]	@ (80014e4 <MX_USART2_UART_Init+0x58>)
 8001492:	4a15      	ldr	r2, [pc, #84]	@ (80014e8 <MX_USART2_UART_Init+0x5c>)
 8001494:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001496:	4b13      	ldr	r3, [pc, #76]	@ (80014e4 <MX_USART2_UART_Init+0x58>)
 8001498:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800149c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800149e:	4b11      	ldr	r3, [pc, #68]	@ (80014e4 <MX_USART2_UART_Init+0x58>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014a4:	4b0f      	ldr	r3, [pc, #60]	@ (80014e4 <MX_USART2_UART_Init+0x58>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014aa:	4b0e      	ldr	r3, [pc, #56]	@ (80014e4 <MX_USART2_UART_Init+0x58>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014b0:	4b0c      	ldr	r3, [pc, #48]	@ (80014e4 <MX_USART2_UART_Init+0x58>)
 80014b2:	220c      	movs	r2, #12
 80014b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014b6:	4b0b      	ldr	r3, [pc, #44]	@ (80014e4 <MX_USART2_UART_Init+0x58>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014bc:	4b09      	ldr	r3, [pc, #36]	@ (80014e4 <MX_USART2_UART_Init+0x58>)
 80014be:	2200      	movs	r2, #0
 80014c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014c2:	4b08      	ldr	r3, [pc, #32]	@ (80014e4 <MX_USART2_UART_Init+0x58>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014c8:	4b06      	ldr	r3, [pc, #24]	@ (80014e4 <MX_USART2_UART_Init+0x58>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014ce:	4805      	ldr	r0, [pc, #20]	@ (80014e4 <MX_USART2_UART_Init+0x58>)
 80014d0:	f002 fa43 	bl	800395a <HAL_UART_Init>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80014da:	f000 f881 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20000258 	.word	0x20000258
 80014e8:	40004400 	.word	0x40004400

080014ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08a      	sub	sp, #40	@ 0x28
 80014f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f2:	f107 0314 	add.w	r3, r7, #20
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
 80014fc:	609a      	str	r2, [r3, #8]
 80014fe:	60da      	str	r2, [r3, #12]
 8001500:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001502:	4b35      	ldr	r3, [pc, #212]	@ (80015d8 <MX_GPIO_Init+0xec>)
 8001504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001506:	4a34      	ldr	r2, [pc, #208]	@ (80015d8 <MX_GPIO_Init+0xec>)
 8001508:	f043 0304 	orr.w	r3, r3, #4
 800150c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800150e:	4b32      	ldr	r3, [pc, #200]	@ (80015d8 <MX_GPIO_Init+0xec>)
 8001510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001512:	f003 0304 	and.w	r3, r3, #4
 8001516:	613b      	str	r3, [r7, #16]
 8001518:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800151a:	4b2f      	ldr	r3, [pc, #188]	@ (80015d8 <MX_GPIO_Init+0xec>)
 800151c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800151e:	4a2e      	ldr	r2, [pc, #184]	@ (80015d8 <MX_GPIO_Init+0xec>)
 8001520:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001524:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001526:	4b2c      	ldr	r3, [pc, #176]	@ (80015d8 <MX_GPIO_Init+0xec>)
 8001528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800152a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001532:	4b29      	ldr	r3, [pc, #164]	@ (80015d8 <MX_GPIO_Init+0xec>)
 8001534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001536:	4a28      	ldr	r2, [pc, #160]	@ (80015d8 <MX_GPIO_Init+0xec>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800153e:	4b26      	ldr	r3, [pc, #152]	@ (80015d8 <MX_GPIO_Init+0xec>)
 8001540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800154a:	4b23      	ldr	r3, [pc, #140]	@ (80015d8 <MX_GPIO_Init+0xec>)
 800154c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800154e:	4a22      	ldr	r2, [pc, #136]	@ (80015d8 <MX_GPIO_Init+0xec>)
 8001550:	f043 0302 	orr.w	r3, r3, #2
 8001554:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001556:	4b20      	ldr	r3, [pc, #128]	@ (80015d8 <MX_GPIO_Init+0xec>)
 8001558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	607b      	str	r3, [r7, #4]
 8001560:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8001562:	2201      	movs	r2, #1
 8001564:	2102      	movs	r1, #2
 8001566:	481d      	ldr	r0, [pc, #116]	@ (80015dc <MX_GPIO_Init+0xf0>)
 8001568:	f000 fe1c 	bl	80021a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800156c:	2200      	movs	r2, #0
 800156e:	2120      	movs	r1, #32
 8001570:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001574:	f000 fe16 	bl	80021a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001578:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800157c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800157e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001582:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	4619      	mov	r1, r3
 800158e:	4813      	ldr	r0, [pc, #76]	@ (80015dc <MX_GPIO_Init+0xf0>)
 8001590:	f000 fc5e 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8001594:	2302      	movs	r3, #2
 8001596:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001598:	2301      	movs	r3, #1
 800159a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a0:	2300      	movs	r3, #0
 80015a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 80015a4:	f107 0314 	add.w	r3, r7, #20
 80015a8:	4619      	mov	r1, r3
 80015aa:	480c      	ldr	r0, [pc, #48]	@ (80015dc <MX_GPIO_Init+0xf0>)
 80015ac:	f000 fc50 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80015b0:	2320      	movs	r3, #32
 80015b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b4:	2301      	movs	r3, #1
 80015b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015bc:	2300      	movs	r3, #0
 80015be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	4619      	mov	r1, r3
 80015c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015ca:	f000 fc41 	bl	8001e50 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015ce:	bf00      	nop
 80015d0:	3728      	adds	r7, #40	@ 0x28
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40021000 	.word	0x40021000
 80015dc:	48000800 	.word	0x48000800

080015e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015e4:	b672      	cpsid	i
}
 80015e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015e8:	bf00      	nop
 80015ea:	e7fd      	b.n	80015e8 <Error_Handler+0x8>

080015ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001630 <HAL_MspInit+0x44>)
 80015f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015f6:	4a0e      	ldr	r2, [pc, #56]	@ (8001630 <HAL_MspInit+0x44>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80015fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001630 <HAL_MspInit+0x44>)
 8001600:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	607b      	str	r3, [r7, #4]
 8001608:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800160a:	4b09      	ldr	r3, [pc, #36]	@ (8001630 <HAL_MspInit+0x44>)
 800160c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800160e:	4a08      	ldr	r2, [pc, #32]	@ (8001630 <HAL_MspInit+0x44>)
 8001610:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001614:	6593      	str	r3, [r2, #88]	@ 0x58
 8001616:	4b06      	ldr	r3, [pc, #24]	@ (8001630 <HAL_MspInit+0x44>)
 8001618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800161a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800161e:	603b      	str	r3, [r7, #0]
 8001620:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001622:	bf00      	nop
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	40021000 	.word	0x40021000

08001634 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b08a      	sub	sp, #40	@ 0x28
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163c:	f107 0314 	add.w	r3, r7, #20
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a25      	ldr	r2, [pc, #148]	@ (80016e8 <HAL_SPI_MspInit+0xb4>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d144      	bne.n	80016e0 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001656:	4b25      	ldr	r3, [pc, #148]	@ (80016ec <HAL_SPI_MspInit+0xb8>)
 8001658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800165a:	4a24      	ldr	r2, [pc, #144]	@ (80016ec <HAL_SPI_MspInit+0xb8>)
 800165c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001660:	6593      	str	r3, [r2, #88]	@ 0x58
 8001662:	4b22      	ldr	r3, [pc, #136]	@ (80016ec <HAL_SPI_MspInit+0xb8>)
 8001664:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001666:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800166a:	613b      	str	r3, [r7, #16]
 800166c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800166e:	4b1f      	ldr	r3, [pc, #124]	@ (80016ec <HAL_SPI_MspInit+0xb8>)
 8001670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001672:	4a1e      	ldr	r2, [pc, #120]	@ (80016ec <HAL_SPI_MspInit+0xb8>)
 8001674:	f043 0304 	orr.w	r3, r3, #4
 8001678:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800167a:	4b1c      	ldr	r3, [pc, #112]	@ (80016ec <HAL_SPI_MspInit+0xb8>)
 800167c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800167e:	f003 0304 	and.w	r3, r3, #4
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001686:	4b19      	ldr	r3, [pc, #100]	@ (80016ec <HAL_SPI_MspInit+0xb8>)
 8001688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800168a:	4a18      	ldr	r2, [pc, #96]	@ (80016ec <HAL_SPI_MspInit+0xb8>)
 800168c:	f043 0302 	orr.w	r3, r3, #2
 8001690:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001692:	4b16      	ldr	r3, [pc, #88]	@ (80016ec <HAL_SPI_MspInit+0xb8>)
 8001694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	60bb      	str	r3, [r7, #8]
 800169c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800169e:	230c      	movs	r3, #12
 80016a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a2:	2302      	movs	r3, #2
 80016a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016aa:	2303      	movs	r3, #3
 80016ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016ae:	2305      	movs	r3, #5
 80016b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016b2:	f107 0314 	add.w	r3, r7, #20
 80016b6:	4619      	mov	r1, r3
 80016b8:	480d      	ldr	r0, [pc, #52]	@ (80016f0 <HAL_SPI_MspInit+0xbc>)
 80016ba:	f000 fbc9 	bl	8001e50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c4:	2302      	movs	r3, #2
 80016c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016cc:	2303      	movs	r3, #3
 80016ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016d0:	2305      	movs	r3, #5
 80016d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d4:	f107 0314 	add.w	r3, r7, #20
 80016d8:	4619      	mov	r1, r3
 80016da:	4806      	ldr	r0, [pc, #24]	@ (80016f4 <HAL_SPI_MspInit+0xc0>)
 80016dc:	f000 fbb8 	bl	8001e50 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80016e0:	bf00      	nop
 80016e2:	3728      	adds	r7, #40	@ 0x28
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40003800 	.word	0x40003800
 80016ec:	40021000 	.word	0x40021000
 80016f0:	48000800 	.word	0x48000800
 80016f4:	48000400 	.word	0x48000400

080016f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b0ac      	sub	sp, #176	@ 0xb0
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001700:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]
 800170e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001710:	f107 0314 	add.w	r3, r7, #20
 8001714:	2288      	movs	r2, #136	@ 0x88
 8001716:	2100      	movs	r1, #0
 8001718:	4618      	mov	r0, r3
 800171a:	f005 f8fe 	bl	800691a <memset>
  if(huart->Instance==USART2)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a25      	ldr	r2, [pc, #148]	@ (80017b8 <HAL_UART_MspInit+0xc0>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d143      	bne.n	80017b0 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001728:	2302      	movs	r3, #2
 800172a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800172c:	2300      	movs	r3, #0
 800172e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001730:	f107 0314 	add.w	r3, r7, #20
 8001734:	4618      	mov	r0, r3
 8001736:	f001 fbb1 	bl	8002e9c <HAL_RCCEx_PeriphCLKConfig>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001740:	f7ff ff4e 	bl	80015e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001744:	4b1d      	ldr	r3, [pc, #116]	@ (80017bc <HAL_UART_MspInit+0xc4>)
 8001746:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001748:	4a1c      	ldr	r2, [pc, #112]	@ (80017bc <HAL_UART_MspInit+0xc4>)
 800174a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800174e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001750:	4b1a      	ldr	r3, [pc, #104]	@ (80017bc <HAL_UART_MspInit+0xc4>)
 8001752:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001754:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001758:	613b      	str	r3, [r7, #16]
 800175a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800175c:	4b17      	ldr	r3, [pc, #92]	@ (80017bc <HAL_UART_MspInit+0xc4>)
 800175e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001760:	4a16      	ldr	r2, [pc, #88]	@ (80017bc <HAL_UART_MspInit+0xc4>)
 8001762:	f043 0301 	orr.w	r3, r3, #1
 8001766:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001768:	4b14      	ldr	r3, [pc, #80]	@ (80017bc <HAL_UART_MspInit+0xc4>)
 800176a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800176c:	f003 0301 	and.w	r3, r3, #1
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001774:	230c      	movs	r3, #12
 8001776:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177a:	2302      	movs	r3, #2
 800177c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001786:	2303      	movs	r3, #3
 8001788:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800178c:	2307      	movs	r3, #7
 800178e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001792:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001796:	4619      	mov	r1, r3
 8001798:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800179c:	f000 fb58 	bl	8001e50 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80017a0:	2200      	movs	r2, #0
 80017a2:	2100      	movs	r1, #0
 80017a4:	2026      	movs	r0, #38	@ 0x26
 80017a6:	f000 fa9e 	bl	8001ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017aa:	2026      	movs	r0, #38	@ 0x26
 80017ac:	f000 fab7 	bl	8001d1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017b0:	bf00      	nop
 80017b2:	37b0      	adds	r7, #176	@ 0xb0
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40004400 	.word	0x40004400
 80017bc:	40021000 	.word	0x40021000

080017c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017c4:	bf00      	nop
 80017c6:	e7fd      	b.n	80017c4 <NMI_Handler+0x4>

080017c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017cc:	bf00      	nop
 80017ce:	e7fd      	b.n	80017cc <HardFault_Handler+0x4>

080017d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017d4:	bf00      	nop
 80017d6:	e7fd      	b.n	80017d4 <MemManage_Handler+0x4>

080017d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017dc:	bf00      	nop
 80017de:	e7fd      	b.n	80017dc <BusFault_Handler+0x4>

080017e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017e4:	bf00      	nop
 80017e6:	e7fd      	b.n	80017e4 <UsageFault_Handler+0x4>

080017e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001816:	f000 f96b 	bl	8001af0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
	...

08001820 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001824:	4802      	ldr	r0, [pc, #8]	@ (8001830 <USART2_IRQHandler+0x10>)
 8001826:	f002 f991 	bl	8003b4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	20000258 	.word	0x20000258

08001834 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  return 1;
 8001838:	2301      	movs	r3, #1
}
 800183a:	4618      	mov	r0, r3
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <_kill>:

int _kill(int pid, int sig)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800184e:	f005 f925 	bl	8006a9c <__errno>
 8001852:	4603      	mov	r3, r0
 8001854:	2216      	movs	r2, #22
 8001856:	601a      	str	r2, [r3, #0]
  return -1;
 8001858:	f04f 33ff 	mov.w	r3, #4294967295
}
 800185c:	4618      	mov	r0, r3
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <_exit>:

void _exit (int status)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800186c:	f04f 31ff 	mov.w	r1, #4294967295
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f7ff ffe7 	bl	8001844 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001876:	bf00      	nop
 8001878:	e7fd      	b.n	8001876 <_exit+0x12>

0800187a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b086      	sub	sp, #24
 800187e:	af00      	add	r7, sp, #0
 8001880:	60f8      	str	r0, [r7, #12]
 8001882:	60b9      	str	r1, [r7, #8]
 8001884:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001886:	2300      	movs	r3, #0
 8001888:	617b      	str	r3, [r7, #20]
 800188a:	e00a      	b.n	80018a2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800188c:	f3af 8000 	nop.w
 8001890:	4601      	mov	r1, r0
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	1c5a      	adds	r2, r3, #1
 8001896:	60ba      	str	r2, [r7, #8]
 8001898:	b2ca      	uxtb	r2, r1
 800189a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	3301      	adds	r3, #1
 80018a0:	617b      	str	r3, [r7, #20]
 80018a2:	697a      	ldr	r2, [r7, #20]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	dbf0      	blt.n	800188c <_read+0x12>
  }

  return len;
 80018aa:	687b      	ldr	r3, [r7, #4]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3718      	adds	r7, #24
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c0:	2300      	movs	r3, #0
 80018c2:	617b      	str	r3, [r7, #20]
 80018c4:	e009      	b.n	80018da <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	1c5a      	adds	r2, r3, #1
 80018ca:	60ba      	str	r2, [r7, #8]
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	3301      	adds	r3, #1
 80018d8:	617b      	str	r3, [r7, #20]
 80018da:	697a      	ldr	r2, [r7, #20]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	429a      	cmp	r2, r3
 80018e0:	dbf1      	blt.n	80018c6 <_write+0x12>
  }
  return len;
 80018e2:	687b      	ldr	r3, [r7, #4]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3718      	adds	r7, #24
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <_close>:

int _close(int file)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001914:	605a      	str	r2, [r3, #4]
  return 0;
 8001916:	2300      	movs	r3, #0
}
 8001918:	4618      	mov	r0, r3
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <_isatty>:

int _isatty(int file)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800192c:	2301      	movs	r3, #1
}
 800192e:	4618      	mov	r0, r3
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr

0800193a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800193a:	b480      	push	{r7}
 800193c:	b085      	sub	sp, #20
 800193e:	af00      	add	r7, sp, #0
 8001940:	60f8      	str	r0, [r7, #12]
 8001942:	60b9      	str	r1, [r7, #8]
 8001944:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001946:	2300      	movs	r3, #0
}
 8001948:	4618      	mov	r0, r3
 800194a:	3714      	adds	r7, #20
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800195c:	4a14      	ldr	r2, [pc, #80]	@ (80019b0 <_sbrk+0x5c>)
 800195e:	4b15      	ldr	r3, [pc, #84]	@ (80019b4 <_sbrk+0x60>)
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001968:	4b13      	ldr	r3, [pc, #76]	@ (80019b8 <_sbrk+0x64>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d102      	bne.n	8001976 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001970:	4b11      	ldr	r3, [pc, #68]	@ (80019b8 <_sbrk+0x64>)
 8001972:	4a12      	ldr	r2, [pc, #72]	@ (80019bc <_sbrk+0x68>)
 8001974:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001976:	4b10      	ldr	r3, [pc, #64]	@ (80019b8 <_sbrk+0x64>)
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4413      	add	r3, r2
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	429a      	cmp	r2, r3
 8001982:	d207      	bcs.n	8001994 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001984:	f005 f88a 	bl	8006a9c <__errno>
 8001988:	4603      	mov	r3, r0
 800198a:	220c      	movs	r2, #12
 800198c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800198e:	f04f 33ff 	mov.w	r3, #4294967295
 8001992:	e009      	b.n	80019a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001994:	4b08      	ldr	r3, [pc, #32]	@ (80019b8 <_sbrk+0x64>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800199a:	4b07      	ldr	r3, [pc, #28]	@ (80019b8 <_sbrk+0x64>)
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4413      	add	r3, r2
 80019a2:	4a05      	ldr	r2, [pc, #20]	@ (80019b8 <_sbrk+0x64>)
 80019a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019a6:	68fb      	ldr	r3, [r7, #12]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3718      	adds	r7, #24
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20018000 	.word	0x20018000
 80019b4:	00000400 	.word	0x00000400
 80019b8:	20000568 	.word	0x20000568
 80019bc:	200006c0 	.word	0x200006c0

080019c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80019c4:	4b06      	ldr	r3, [pc, #24]	@ (80019e0 <SystemInit+0x20>)
 80019c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019ca:	4a05      	ldr	r2, [pc, #20]	@ (80019e0 <SystemInit+0x20>)
 80019cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80019d4:	bf00      	nop
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	e000ed00 	.word	0xe000ed00

080019e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80019e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a1c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019e8:	f7ff ffea 	bl	80019c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019ec:	480c      	ldr	r0, [pc, #48]	@ (8001a20 <LoopForever+0x6>)
  ldr r1, =_edata
 80019ee:	490d      	ldr	r1, [pc, #52]	@ (8001a24 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001a28 <LoopForever+0xe>)
  movs r3, #0
 80019f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019f4:	e002      	b.n	80019fc <LoopCopyDataInit>

080019f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019fa:	3304      	adds	r3, #4

080019fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a00:	d3f9      	bcc.n	80019f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a02:	4a0a      	ldr	r2, [pc, #40]	@ (8001a2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a04:	4c0a      	ldr	r4, [pc, #40]	@ (8001a30 <LoopForever+0x16>)
  movs r3, #0
 8001a06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a08:	e001      	b.n	8001a0e <LoopFillZerobss>

08001a0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a0c:	3204      	adds	r2, #4

08001a0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a10:	d3fb      	bcc.n	8001a0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a12:	f005 f849 	bl	8006aa8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a16:	f7ff fc09 	bl	800122c <main>

08001a1a <LoopForever>:

LoopForever:
    b LoopForever
 8001a1a:	e7fe      	b.n	8001a1a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a1c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a24:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001a28:	0800ac78 	.word	0x0800ac78
  ldr r2, =_sbss
 8001a2c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001a30:	200006bc 	.word	0x200006bc

08001a34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a34:	e7fe      	b.n	8001a34 <ADC1_2_IRQHandler>
	...

08001a38 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a42:	4b0c      	ldr	r3, [pc, #48]	@ (8001a74 <HAL_Init+0x3c>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a0b      	ldr	r2, [pc, #44]	@ (8001a74 <HAL_Init+0x3c>)
 8001a48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a4c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a4e:	2003      	movs	r0, #3
 8001a50:	f000 f93e 	bl	8001cd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a54:	2000      	movs	r0, #0
 8001a56:	f000 f80f 	bl	8001a78 <HAL_InitTick>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d002      	beq.n	8001a66 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	71fb      	strb	r3, [r7, #7]
 8001a64:	e001      	b.n	8001a6a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a66:	f7ff fdc1 	bl	80015ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a6a:	79fb      	ldrb	r3, [r7, #7]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40022000 	.word	0x40022000

08001a78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a80:	2300      	movs	r3, #0
 8001a82:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001a84:	4b17      	ldr	r3, [pc, #92]	@ (8001ae4 <HAL_InitTick+0x6c>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d023      	beq.n	8001ad4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a8c:	4b16      	ldr	r3, [pc, #88]	@ (8001ae8 <HAL_InitTick+0x70>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	4b14      	ldr	r3, [pc, #80]	@ (8001ae4 <HAL_InitTick+0x6c>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	4619      	mov	r1, r3
 8001a96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f000 f949 	bl	8001d3a <HAL_SYSTICK_Config>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d10f      	bne.n	8001ace <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2b0f      	cmp	r3, #15
 8001ab2:	d809      	bhi.n	8001ac8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	6879      	ldr	r1, [r7, #4]
 8001ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8001abc:	f000 f913 	bl	8001ce6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ac0:	4a0a      	ldr	r2, [pc, #40]	@ (8001aec <HAL_InitTick+0x74>)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6013      	str	r3, [r2, #0]
 8001ac6:	e007      	b.n	8001ad8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	73fb      	strb	r3, [r7, #15]
 8001acc:	e004      	b.n	8001ad8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	73fb      	strb	r3, [r7, #15]
 8001ad2:	e001      	b.n	8001ad8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20000008 	.word	0x20000008
 8001ae8:	20000000 	.word	0x20000000
 8001aec:	20000004 	.word	0x20000004

08001af0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001af4:	4b06      	ldr	r3, [pc, #24]	@ (8001b10 <HAL_IncTick+0x20>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	461a      	mov	r2, r3
 8001afa:	4b06      	ldr	r3, [pc, #24]	@ (8001b14 <HAL_IncTick+0x24>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4413      	add	r3, r2
 8001b00:	4a04      	ldr	r2, [pc, #16]	@ (8001b14 <HAL_IncTick+0x24>)
 8001b02:	6013      	str	r3, [r2, #0]
}
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	20000008 	.word	0x20000008
 8001b14:	2000056c 	.word	0x2000056c

08001b18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b1c:	4b03      	ldr	r3, [pc, #12]	@ (8001b2c <HAL_GetTick+0x14>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	2000056c 	.word	0x2000056c

08001b30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b40:	4b0c      	ldr	r3, [pc, #48]	@ (8001b74 <__NVIC_SetPriorityGrouping+0x44>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b46:	68ba      	ldr	r2, [r7, #8]
 8001b48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b62:	4a04      	ldr	r2, [pc, #16]	@ (8001b74 <__NVIC_SetPriorityGrouping+0x44>)
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	60d3      	str	r3, [r2, #12]
}
 8001b68:	bf00      	nop
 8001b6a:	3714      	adds	r7, #20
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	e000ed00 	.word	0xe000ed00

08001b78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b7c:	4b04      	ldr	r3, [pc, #16]	@ (8001b90 <__NVIC_GetPriorityGrouping+0x18>)
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	0a1b      	lsrs	r3, r3, #8
 8001b82:	f003 0307 	and.w	r3, r3, #7
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	db0b      	blt.n	8001bbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ba6:	79fb      	ldrb	r3, [r7, #7]
 8001ba8:	f003 021f 	and.w	r2, r3, #31
 8001bac:	4907      	ldr	r1, [pc, #28]	@ (8001bcc <__NVIC_EnableIRQ+0x38>)
 8001bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb2:	095b      	lsrs	r3, r3, #5
 8001bb4:	2001      	movs	r0, #1
 8001bb6:	fa00 f202 	lsl.w	r2, r0, r2
 8001bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	e000e100 	.word	0xe000e100

08001bd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	6039      	str	r1, [r7, #0]
 8001bda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	db0a      	blt.n	8001bfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	490c      	ldr	r1, [pc, #48]	@ (8001c1c <__NVIC_SetPriority+0x4c>)
 8001bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bee:	0112      	lsls	r2, r2, #4
 8001bf0:	b2d2      	uxtb	r2, r2
 8001bf2:	440b      	add	r3, r1
 8001bf4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bf8:	e00a      	b.n	8001c10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	b2da      	uxtb	r2, r3
 8001bfe:	4908      	ldr	r1, [pc, #32]	@ (8001c20 <__NVIC_SetPriority+0x50>)
 8001c00:	79fb      	ldrb	r3, [r7, #7]
 8001c02:	f003 030f 	and.w	r3, r3, #15
 8001c06:	3b04      	subs	r3, #4
 8001c08:	0112      	lsls	r2, r2, #4
 8001c0a:	b2d2      	uxtb	r2, r2
 8001c0c:	440b      	add	r3, r1
 8001c0e:	761a      	strb	r2, [r3, #24]
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	e000e100 	.word	0xe000e100
 8001c20:	e000ed00 	.word	0xe000ed00

08001c24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b089      	sub	sp, #36	@ 0x24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	f1c3 0307 	rsb	r3, r3, #7
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	bf28      	it	cs
 8001c42:	2304      	movcs	r3, #4
 8001c44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	3304      	adds	r3, #4
 8001c4a:	2b06      	cmp	r3, #6
 8001c4c:	d902      	bls.n	8001c54 <NVIC_EncodePriority+0x30>
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	3b03      	subs	r3, #3
 8001c52:	e000      	b.n	8001c56 <NVIC_EncodePriority+0x32>
 8001c54:	2300      	movs	r3, #0
 8001c56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c58:	f04f 32ff 	mov.w	r2, #4294967295
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43da      	mvns	r2, r3
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	401a      	ands	r2, r3
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	fa01 f303 	lsl.w	r3, r1, r3
 8001c76:	43d9      	mvns	r1, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c7c:	4313      	orrs	r3, r2
         );
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3724      	adds	r7, #36	@ 0x24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
	...

08001c8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3b01      	subs	r3, #1
 8001c98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c9c:	d301      	bcc.n	8001ca2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e00f      	b.n	8001cc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ca2:	4a0a      	ldr	r2, [pc, #40]	@ (8001ccc <SysTick_Config+0x40>)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001caa:	210f      	movs	r1, #15
 8001cac:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb0:	f7ff ff8e 	bl	8001bd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cb4:	4b05      	ldr	r3, [pc, #20]	@ (8001ccc <SysTick_Config+0x40>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cba:	4b04      	ldr	r3, [pc, #16]	@ (8001ccc <SysTick_Config+0x40>)
 8001cbc:	2207      	movs	r2, #7
 8001cbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	e000e010 	.word	0xe000e010

08001cd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f7ff ff29 	bl	8001b30 <__NVIC_SetPriorityGrouping>
}
 8001cde:	bf00      	nop
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b086      	sub	sp, #24
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	4603      	mov	r3, r0
 8001cee:	60b9      	str	r1, [r7, #8]
 8001cf0:	607a      	str	r2, [r7, #4]
 8001cf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cf8:	f7ff ff3e 	bl	8001b78 <__NVIC_GetPriorityGrouping>
 8001cfc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	68b9      	ldr	r1, [r7, #8]
 8001d02:	6978      	ldr	r0, [r7, #20]
 8001d04:	f7ff ff8e 	bl	8001c24 <NVIC_EncodePriority>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d0e:	4611      	mov	r1, r2
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff ff5d 	bl	8001bd0 <__NVIC_SetPriority>
}
 8001d16:	bf00      	nop
 8001d18:	3718      	adds	r7, #24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b082      	sub	sp, #8
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	4603      	mov	r3, r0
 8001d26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff ff31 	bl	8001b94 <__NVIC_EnableIRQ>
}
 8001d32:	bf00      	nop
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b082      	sub	sp, #8
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f7ff ffa2 	bl	8001c8c <SysTick_Config>
 8001d48:	4603      	mov	r3, r0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d52:	b480      	push	{r7}
 8001d54:	b085      	sub	sp, #20
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d008      	beq.n	8001d7c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2204      	movs	r2, #4
 8001d6e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e022      	b.n	8001dc2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f022 020e 	bic.w	r2, r2, #14
 8001d8a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f022 0201 	bic.w	r2, r2, #1
 8001d9a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001da0:	f003 021c 	and.w	r2, r3, #28
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da8:	2101      	movs	r1, #1
 8001daa:	fa01 f202 	lsl.w	r2, r1, r2
 8001dae:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001dc0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3714      	adds	r7, #20
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr

08001dce <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b084      	sub	sp, #16
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d005      	beq.n	8001df2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2204      	movs	r2, #4
 8001dea:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	73fb      	strb	r3, [r7, #15]
 8001df0:	e029      	b.n	8001e46 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f022 020e 	bic.w	r2, r2, #14
 8001e00:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f022 0201 	bic.w	r2, r2, #1
 8001e10:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e16:	f003 021c 	and.w	r2, r3, #28
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1e:	2101      	movs	r1, #1
 8001e20:	fa01 f202 	lsl.w	r2, r1, r2
 8001e24:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	4798      	blx	r3
    }
  }
  return status;
 8001e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3710      	adds	r7, #16
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b087      	sub	sp, #28
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e5e:	e17f      	b.n	8002160 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	2101      	movs	r1, #1
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f000 8171 	beq.w	800215a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f003 0303 	and.w	r3, r3, #3
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d005      	beq.n	8001e90 <HAL_GPIO_Init+0x40>
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f003 0303 	and.w	r3, r3, #3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d130      	bne.n	8001ef2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	2203      	movs	r2, #3
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	68da      	ldr	r2, [r3, #12]
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	091b      	lsrs	r3, r3, #4
 8001edc:	f003 0201 	and.w	r2, r3, #1
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f003 0303 	and.w	r3, r3, #3
 8001efa:	2b03      	cmp	r3, #3
 8001efc:	d118      	bne.n	8001f30 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001f04:	2201      	movs	r2, #1
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	4013      	ands	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	08db      	lsrs	r3, r3, #3
 8001f1a:	f003 0201 	and.w	r2, r3, #1
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f003 0303 	and.w	r3, r3, #3
 8001f38:	2b03      	cmp	r3, #3
 8001f3a:	d017      	beq.n	8001f6c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	2203      	movs	r2, #3
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	4013      	ands	r3, r2
 8001f52:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	689a      	ldr	r2, [r3, #8]
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f003 0303 	and.w	r3, r3, #3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d123      	bne.n	8001fc0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	08da      	lsrs	r2, r3, #3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	3208      	adds	r2, #8
 8001f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f84:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	220f      	movs	r2, #15
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	43db      	mvns	r3, r3
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	691a      	ldr	r2, [r3, #16]
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	08da      	lsrs	r2, r3, #3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	3208      	adds	r2, #8
 8001fba:	6939      	ldr	r1, [r7, #16]
 8001fbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	2203      	movs	r2, #3
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f003 0203 	and.w	r2, r3, #3
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f000 80ac 	beq.w	800215a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002002:	4b5f      	ldr	r3, [pc, #380]	@ (8002180 <HAL_GPIO_Init+0x330>)
 8002004:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002006:	4a5e      	ldr	r2, [pc, #376]	@ (8002180 <HAL_GPIO_Init+0x330>)
 8002008:	f043 0301 	orr.w	r3, r3, #1
 800200c:	6613      	str	r3, [r2, #96]	@ 0x60
 800200e:	4b5c      	ldr	r3, [pc, #368]	@ (8002180 <HAL_GPIO_Init+0x330>)
 8002010:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	60bb      	str	r3, [r7, #8]
 8002018:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800201a:	4a5a      	ldr	r2, [pc, #360]	@ (8002184 <HAL_GPIO_Init+0x334>)
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	089b      	lsrs	r3, r3, #2
 8002020:	3302      	adds	r3, #2
 8002022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002026:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	f003 0303 	and.w	r3, r3, #3
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	220f      	movs	r2, #15
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	43db      	mvns	r3, r3
 8002038:	693a      	ldr	r2, [r7, #16]
 800203a:	4013      	ands	r3, r2
 800203c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002044:	d025      	beq.n	8002092 <HAL_GPIO_Init+0x242>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a4f      	ldr	r2, [pc, #316]	@ (8002188 <HAL_GPIO_Init+0x338>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d01f      	beq.n	800208e <HAL_GPIO_Init+0x23e>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a4e      	ldr	r2, [pc, #312]	@ (800218c <HAL_GPIO_Init+0x33c>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d019      	beq.n	800208a <HAL_GPIO_Init+0x23a>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a4d      	ldr	r2, [pc, #308]	@ (8002190 <HAL_GPIO_Init+0x340>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d013      	beq.n	8002086 <HAL_GPIO_Init+0x236>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a4c      	ldr	r2, [pc, #304]	@ (8002194 <HAL_GPIO_Init+0x344>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d00d      	beq.n	8002082 <HAL_GPIO_Init+0x232>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a4b      	ldr	r2, [pc, #300]	@ (8002198 <HAL_GPIO_Init+0x348>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d007      	beq.n	800207e <HAL_GPIO_Init+0x22e>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a4a      	ldr	r2, [pc, #296]	@ (800219c <HAL_GPIO_Init+0x34c>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d101      	bne.n	800207a <HAL_GPIO_Init+0x22a>
 8002076:	2306      	movs	r3, #6
 8002078:	e00c      	b.n	8002094 <HAL_GPIO_Init+0x244>
 800207a:	2307      	movs	r3, #7
 800207c:	e00a      	b.n	8002094 <HAL_GPIO_Init+0x244>
 800207e:	2305      	movs	r3, #5
 8002080:	e008      	b.n	8002094 <HAL_GPIO_Init+0x244>
 8002082:	2304      	movs	r3, #4
 8002084:	e006      	b.n	8002094 <HAL_GPIO_Init+0x244>
 8002086:	2303      	movs	r3, #3
 8002088:	e004      	b.n	8002094 <HAL_GPIO_Init+0x244>
 800208a:	2302      	movs	r3, #2
 800208c:	e002      	b.n	8002094 <HAL_GPIO_Init+0x244>
 800208e:	2301      	movs	r3, #1
 8002090:	e000      	b.n	8002094 <HAL_GPIO_Init+0x244>
 8002092:	2300      	movs	r3, #0
 8002094:	697a      	ldr	r2, [r7, #20]
 8002096:	f002 0203 	and.w	r2, r2, #3
 800209a:	0092      	lsls	r2, r2, #2
 800209c:	4093      	lsls	r3, r2
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020a4:	4937      	ldr	r1, [pc, #220]	@ (8002184 <HAL_GPIO_Init+0x334>)
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	089b      	lsrs	r3, r3, #2
 80020aa:	3302      	adds	r3, #2
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020b2:	4b3b      	ldr	r3, [pc, #236]	@ (80021a0 <HAL_GPIO_Init+0x350>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	43db      	mvns	r3, r3
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	4013      	ands	r3, r2
 80020c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d003      	beq.n	80020d6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020d6:	4a32      	ldr	r2, [pc, #200]	@ (80021a0 <HAL_GPIO_Init+0x350>)
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80020dc:	4b30      	ldr	r3, [pc, #192]	@ (80021a0 <HAL_GPIO_Init+0x350>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	43db      	mvns	r3, r3
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	4013      	ands	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d003      	beq.n	8002100 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002100:	4a27      	ldr	r2, [pc, #156]	@ (80021a0 <HAL_GPIO_Init+0x350>)
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002106:	4b26      	ldr	r3, [pc, #152]	@ (80021a0 <HAL_GPIO_Init+0x350>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	43db      	mvns	r3, r3
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	4013      	ands	r3, r2
 8002114:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	4313      	orrs	r3, r2
 8002128:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800212a:	4a1d      	ldr	r2, [pc, #116]	@ (80021a0 <HAL_GPIO_Init+0x350>)
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002130:	4b1b      	ldr	r3, [pc, #108]	@ (80021a0 <HAL_GPIO_Init+0x350>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	43db      	mvns	r3, r3
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	4013      	ands	r3, r2
 800213e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d003      	beq.n	8002154 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800214c:	693a      	ldr	r2, [r7, #16]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	4313      	orrs	r3, r2
 8002152:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002154:	4a12      	ldr	r2, [pc, #72]	@ (80021a0 <HAL_GPIO_Init+0x350>)
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	3301      	adds	r3, #1
 800215e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	fa22 f303 	lsr.w	r3, r2, r3
 800216a:	2b00      	cmp	r3, #0
 800216c:	f47f ae78 	bne.w	8001e60 <HAL_GPIO_Init+0x10>
  }
}
 8002170:	bf00      	nop
 8002172:	bf00      	nop
 8002174:	371c      	adds	r7, #28
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	40021000 	.word	0x40021000
 8002184:	40010000 	.word	0x40010000
 8002188:	48000400 	.word	0x48000400
 800218c:	48000800 	.word	0x48000800
 8002190:	48000c00 	.word	0x48000c00
 8002194:	48001000 	.word	0x48001000
 8002198:	48001400 	.word	0x48001400
 800219c:	48001800 	.word	0x48001800
 80021a0:	40010400 	.word	0x40010400

080021a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	460b      	mov	r3, r1
 80021ae:	807b      	strh	r3, [r7, #2]
 80021b0:	4613      	mov	r3, r2
 80021b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021b4:	787b      	ldrb	r3, [r7, #1]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d003      	beq.n	80021c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021ba:	887a      	ldrh	r2, [r7, #2]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021c0:	e002      	b.n	80021c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021c2:	887a      	ldrh	r2, [r7, #2]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80021d8:	4b04      	ldr	r3, [pc, #16]	@ (80021ec <HAL_PWREx_GetVoltageRange+0x18>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	40007000 	.word	0x40007000

080021f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021fe:	d130      	bne.n	8002262 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002200:	4b23      	ldr	r3, [pc, #140]	@ (8002290 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002208:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800220c:	d038      	beq.n	8002280 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800220e:	4b20      	ldr	r3, [pc, #128]	@ (8002290 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002216:	4a1e      	ldr	r2, [pc, #120]	@ (8002290 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002218:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800221c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800221e:	4b1d      	ldr	r3, [pc, #116]	@ (8002294 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2232      	movs	r2, #50	@ 0x32
 8002224:	fb02 f303 	mul.w	r3, r2, r3
 8002228:	4a1b      	ldr	r2, [pc, #108]	@ (8002298 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800222a:	fba2 2303 	umull	r2, r3, r2, r3
 800222e:	0c9b      	lsrs	r3, r3, #18
 8002230:	3301      	adds	r3, #1
 8002232:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002234:	e002      	b.n	800223c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	3b01      	subs	r3, #1
 800223a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800223c:	4b14      	ldr	r3, [pc, #80]	@ (8002290 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800223e:	695b      	ldr	r3, [r3, #20]
 8002240:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002244:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002248:	d102      	bne.n	8002250 <HAL_PWREx_ControlVoltageScaling+0x60>
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d1f2      	bne.n	8002236 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002250:	4b0f      	ldr	r3, [pc, #60]	@ (8002290 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002252:	695b      	ldr	r3, [r3, #20]
 8002254:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002258:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800225c:	d110      	bne.n	8002280 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e00f      	b.n	8002282 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002262:	4b0b      	ldr	r3, [pc, #44]	@ (8002290 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800226a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800226e:	d007      	beq.n	8002280 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002270:	4b07      	ldr	r3, [pc, #28]	@ (8002290 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002278:	4a05      	ldr	r2, [pc, #20]	@ (8002290 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800227a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800227e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3714      	adds	r7, #20
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	40007000 	.word	0x40007000
 8002294:	20000000 	.word	0x20000000
 8002298:	431bde83 	.word	0x431bde83

0800229c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b088      	sub	sp, #32
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e3ca      	b.n	8002a44 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022ae:	4b97      	ldr	r3, [pc, #604]	@ (800250c <HAL_RCC_OscConfig+0x270>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f003 030c 	and.w	r3, r3, #12
 80022b6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022b8:	4b94      	ldr	r3, [pc, #592]	@ (800250c <HAL_RCC_OscConfig+0x270>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	f003 0303 	and.w	r3, r3, #3
 80022c0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0310 	and.w	r3, r3, #16
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	f000 80e4 	beq.w	8002498 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d007      	beq.n	80022e6 <HAL_RCC_OscConfig+0x4a>
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	2b0c      	cmp	r3, #12
 80022da:	f040 808b 	bne.w	80023f4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	f040 8087 	bne.w	80023f4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022e6:	4b89      	ldr	r3, [pc, #548]	@ (800250c <HAL_RCC_OscConfig+0x270>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d005      	beq.n	80022fe <HAL_RCC_OscConfig+0x62>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d101      	bne.n	80022fe <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e3a2      	b.n	8002a44 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a1a      	ldr	r2, [r3, #32]
 8002302:	4b82      	ldr	r3, [pc, #520]	@ (800250c <HAL_RCC_OscConfig+0x270>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0308 	and.w	r3, r3, #8
 800230a:	2b00      	cmp	r3, #0
 800230c:	d004      	beq.n	8002318 <HAL_RCC_OscConfig+0x7c>
 800230e:	4b7f      	ldr	r3, [pc, #508]	@ (800250c <HAL_RCC_OscConfig+0x270>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002316:	e005      	b.n	8002324 <HAL_RCC_OscConfig+0x88>
 8002318:	4b7c      	ldr	r3, [pc, #496]	@ (800250c <HAL_RCC_OscConfig+0x270>)
 800231a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800231e:	091b      	lsrs	r3, r3, #4
 8002320:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002324:	4293      	cmp	r3, r2
 8002326:	d223      	bcs.n	8002370 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a1b      	ldr	r3, [r3, #32]
 800232c:	4618      	mov	r0, r3
 800232e:	f000 fd55 	bl	8002ddc <RCC_SetFlashLatencyFromMSIRange>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e383      	b.n	8002a44 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800233c:	4b73      	ldr	r3, [pc, #460]	@ (800250c <HAL_RCC_OscConfig+0x270>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a72      	ldr	r2, [pc, #456]	@ (800250c <HAL_RCC_OscConfig+0x270>)
 8002342:	f043 0308 	orr.w	r3, r3, #8
 8002346:	6013      	str	r3, [r2, #0]
 8002348:	4b70      	ldr	r3, [pc, #448]	@ (800250c <HAL_RCC_OscConfig+0x270>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a1b      	ldr	r3, [r3, #32]
 8002354:	496d      	ldr	r1, [pc, #436]	@ (800250c <HAL_RCC_OscConfig+0x270>)
 8002356:	4313      	orrs	r3, r2
 8002358:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800235a:	4b6c      	ldr	r3, [pc, #432]	@ (800250c <HAL_RCC_OscConfig+0x270>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	021b      	lsls	r3, r3, #8
 8002368:	4968      	ldr	r1, [pc, #416]	@ (800250c <HAL_RCC_OscConfig+0x270>)
 800236a:	4313      	orrs	r3, r2
 800236c:	604b      	str	r3, [r1, #4]
 800236e:	e025      	b.n	80023bc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002370:	4b66      	ldr	r3, [pc, #408]	@ (800250c <HAL_RCC_OscConfig+0x270>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a65      	ldr	r2, [pc, #404]	@ (800250c <HAL_RCC_OscConfig+0x270>)
 8002376:	f043 0308 	orr.w	r3, r3, #8
 800237a:	6013      	str	r3, [r2, #0]
 800237c:	4b63      	ldr	r3, [pc, #396]	@ (800250c <HAL_RCC_OscConfig+0x270>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a1b      	ldr	r3, [r3, #32]
 8002388:	4960      	ldr	r1, [pc, #384]	@ (800250c <HAL_RCC_OscConfig+0x270>)
 800238a:	4313      	orrs	r3, r2
 800238c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800238e:	4b5f      	ldr	r3, [pc, #380]	@ (800250c <HAL_RCC_OscConfig+0x270>)
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	69db      	ldr	r3, [r3, #28]
 800239a:	021b      	lsls	r3, r3, #8
 800239c:	495b      	ldr	r1, [pc, #364]	@ (800250c <HAL_RCC_OscConfig+0x270>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d109      	bne.n	80023bc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a1b      	ldr	r3, [r3, #32]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f000 fd15 	bl	8002ddc <RCC_SetFlashLatencyFromMSIRange>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e343      	b.n	8002a44 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023bc:	f000 fc4a 	bl	8002c54 <HAL_RCC_GetSysClockFreq>
 80023c0:	4602      	mov	r2, r0
 80023c2:	4b52      	ldr	r3, [pc, #328]	@ (800250c <HAL_RCC_OscConfig+0x270>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	091b      	lsrs	r3, r3, #4
 80023c8:	f003 030f 	and.w	r3, r3, #15
 80023cc:	4950      	ldr	r1, [pc, #320]	@ (8002510 <HAL_RCC_OscConfig+0x274>)
 80023ce:	5ccb      	ldrb	r3, [r1, r3]
 80023d0:	f003 031f 	and.w	r3, r3, #31
 80023d4:	fa22 f303 	lsr.w	r3, r2, r3
 80023d8:	4a4e      	ldr	r2, [pc, #312]	@ (8002514 <HAL_RCC_OscConfig+0x278>)
 80023da:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80023dc:	4b4e      	ldr	r3, [pc, #312]	@ (8002518 <HAL_RCC_OscConfig+0x27c>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff fb49 	bl	8001a78 <HAL_InitTick>
 80023e6:	4603      	mov	r3, r0
 80023e8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80023ea:	7bfb      	ldrb	r3, [r7, #15]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d052      	beq.n	8002496 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80023f0:	7bfb      	ldrb	r3, [r7, #15]
 80023f2:	e327      	b.n	8002a44 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d032      	beq.n	8002462 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80023fc:	4b43      	ldr	r3, [pc, #268]	@ (800250c <HAL_RCC_OscConfig+0x270>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a42      	ldr	r2, [pc, #264]	@ (800250c <HAL_RCC_OscConfig+0x270>)
 8002402:	f043 0301 	orr.w	r3, r3, #1
 8002406:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002408:	f7ff fb86 	bl	8001b18 <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002410:	f7ff fb82 	bl	8001b18 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e310      	b.n	8002a44 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002422:	4b3a      	ldr	r3, [pc, #232]	@ (800250c <HAL_RCC_OscConfig+0x270>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d0f0      	beq.n	8002410 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800242e:	4b37      	ldr	r3, [pc, #220]	@ (800250c <HAL_RCC_OscConfig+0x270>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a36      	ldr	r2, [pc, #216]	@ (800250c <HAL_RCC_OscConfig+0x270>)
 8002434:	f043 0308 	orr.w	r3, r3, #8
 8002438:	6013      	str	r3, [r2, #0]
 800243a:	4b34      	ldr	r3, [pc, #208]	@ (800250c <HAL_RCC_OscConfig+0x270>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a1b      	ldr	r3, [r3, #32]
 8002446:	4931      	ldr	r1, [pc, #196]	@ (800250c <HAL_RCC_OscConfig+0x270>)
 8002448:	4313      	orrs	r3, r2
 800244a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800244c:	4b2f      	ldr	r3, [pc, #188]	@ (800250c <HAL_RCC_OscConfig+0x270>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	69db      	ldr	r3, [r3, #28]
 8002458:	021b      	lsls	r3, r3, #8
 800245a:	492c      	ldr	r1, [pc, #176]	@ (800250c <HAL_RCC_OscConfig+0x270>)
 800245c:	4313      	orrs	r3, r2
 800245e:	604b      	str	r3, [r1, #4]
 8002460:	e01a      	b.n	8002498 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002462:	4b2a      	ldr	r3, [pc, #168]	@ (800250c <HAL_RCC_OscConfig+0x270>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a29      	ldr	r2, [pc, #164]	@ (800250c <HAL_RCC_OscConfig+0x270>)
 8002468:	f023 0301 	bic.w	r3, r3, #1
 800246c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800246e:	f7ff fb53 	bl	8001b18 <HAL_GetTick>
 8002472:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002474:	e008      	b.n	8002488 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002476:	f7ff fb4f 	bl	8001b18 <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	2b02      	cmp	r3, #2
 8002482:	d901      	bls.n	8002488 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e2dd      	b.n	8002a44 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002488:	4b20      	ldr	r3, [pc, #128]	@ (800250c <HAL_RCC_OscConfig+0x270>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d1f0      	bne.n	8002476 <HAL_RCC_OscConfig+0x1da>
 8002494:	e000      	b.n	8002498 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002496:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d074      	beq.n	800258e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	2b08      	cmp	r3, #8
 80024a8:	d005      	beq.n	80024b6 <HAL_RCC_OscConfig+0x21a>
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	2b0c      	cmp	r3, #12
 80024ae:	d10e      	bne.n	80024ce <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	2b03      	cmp	r3, #3
 80024b4:	d10b      	bne.n	80024ce <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024b6:	4b15      	ldr	r3, [pc, #84]	@ (800250c <HAL_RCC_OscConfig+0x270>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d064      	beq.n	800258c <HAL_RCC_OscConfig+0x2f0>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d160      	bne.n	800258c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e2ba      	b.n	8002a44 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024d6:	d106      	bne.n	80024e6 <HAL_RCC_OscConfig+0x24a>
 80024d8:	4b0c      	ldr	r3, [pc, #48]	@ (800250c <HAL_RCC_OscConfig+0x270>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a0b      	ldr	r2, [pc, #44]	@ (800250c <HAL_RCC_OscConfig+0x270>)
 80024de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024e2:	6013      	str	r3, [r2, #0]
 80024e4:	e026      	b.n	8002534 <HAL_RCC_OscConfig+0x298>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024ee:	d115      	bne.n	800251c <HAL_RCC_OscConfig+0x280>
 80024f0:	4b06      	ldr	r3, [pc, #24]	@ (800250c <HAL_RCC_OscConfig+0x270>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a05      	ldr	r2, [pc, #20]	@ (800250c <HAL_RCC_OscConfig+0x270>)
 80024f6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024fa:	6013      	str	r3, [r2, #0]
 80024fc:	4b03      	ldr	r3, [pc, #12]	@ (800250c <HAL_RCC_OscConfig+0x270>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a02      	ldr	r2, [pc, #8]	@ (800250c <HAL_RCC_OscConfig+0x270>)
 8002502:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002506:	6013      	str	r3, [r2, #0]
 8002508:	e014      	b.n	8002534 <HAL_RCC_OscConfig+0x298>
 800250a:	bf00      	nop
 800250c:	40021000 	.word	0x40021000
 8002510:	0800a5c0 	.word	0x0800a5c0
 8002514:	20000000 	.word	0x20000000
 8002518:	20000004 	.word	0x20000004
 800251c:	4ba0      	ldr	r3, [pc, #640]	@ (80027a0 <HAL_RCC_OscConfig+0x504>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a9f      	ldr	r2, [pc, #636]	@ (80027a0 <HAL_RCC_OscConfig+0x504>)
 8002522:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002526:	6013      	str	r3, [r2, #0]
 8002528:	4b9d      	ldr	r3, [pc, #628]	@ (80027a0 <HAL_RCC_OscConfig+0x504>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a9c      	ldr	r2, [pc, #624]	@ (80027a0 <HAL_RCC_OscConfig+0x504>)
 800252e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002532:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d013      	beq.n	8002564 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800253c:	f7ff faec 	bl	8001b18 <HAL_GetTick>
 8002540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002544:	f7ff fae8 	bl	8001b18 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b64      	cmp	r3, #100	@ 0x64
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e276      	b.n	8002a44 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002556:	4b92      	ldr	r3, [pc, #584]	@ (80027a0 <HAL_RCC_OscConfig+0x504>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d0f0      	beq.n	8002544 <HAL_RCC_OscConfig+0x2a8>
 8002562:	e014      	b.n	800258e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002564:	f7ff fad8 	bl	8001b18 <HAL_GetTick>
 8002568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800256c:	f7ff fad4 	bl	8001b18 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b64      	cmp	r3, #100	@ 0x64
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e262      	b.n	8002a44 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800257e:	4b88      	ldr	r3, [pc, #544]	@ (80027a0 <HAL_RCC_OscConfig+0x504>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1f0      	bne.n	800256c <HAL_RCC_OscConfig+0x2d0>
 800258a:	e000      	b.n	800258e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800258c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d060      	beq.n	800265c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	2b04      	cmp	r3, #4
 800259e:	d005      	beq.n	80025ac <HAL_RCC_OscConfig+0x310>
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	2b0c      	cmp	r3, #12
 80025a4:	d119      	bne.n	80025da <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d116      	bne.n	80025da <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025ac:	4b7c      	ldr	r3, [pc, #496]	@ (80027a0 <HAL_RCC_OscConfig+0x504>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d005      	beq.n	80025c4 <HAL_RCC_OscConfig+0x328>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d101      	bne.n	80025c4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e23f      	b.n	8002a44 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c4:	4b76      	ldr	r3, [pc, #472]	@ (80027a0 <HAL_RCC_OscConfig+0x504>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	691b      	ldr	r3, [r3, #16]
 80025d0:	061b      	lsls	r3, r3, #24
 80025d2:	4973      	ldr	r1, [pc, #460]	@ (80027a0 <HAL_RCC_OscConfig+0x504>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025d8:	e040      	b.n	800265c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d023      	beq.n	800262a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025e2:	4b6f      	ldr	r3, [pc, #444]	@ (80027a0 <HAL_RCC_OscConfig+0x504>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a6e      	ldr	r2, [pc, #440]	@ (80027a0 <HAL_RCC_OscConfig+0x504>)
 80025e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ee:	f7ff fa93 	bl	8001b18 <HAL_GetTick>
 80025f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025f4:	e008      	b.n	8002608 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025f6:	f7ff fa8f 	bl	8001b18 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d901      	bls.n	8002608 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e21d      	b.n	8002a44 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002608:	4b65      	ldr	r3, [pc, #404]	@ (80027a0 <HAL_RCC_OscConfig+0x504>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002610:	2b00      	cmp	r3, #0
 8002612:	d0f0      	beq.n	80025f6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002614:	4b62      	ldr	r3, [pc, #392]	@ (80027a0 <HAL_RCC_OscConfig+0x504>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	691b      	ldr	r3, [r3, #16]
 8002620:	061b      	lsls	r3, r3, #24
 8002622:	495f      	ldr	r1, [pc, #380]	@ (80027a0 <HAL_RCC_OscConfig+0x504>)
 8002624:	4313      	orrs	r3, r2
 8002626:	604b      	str	r3, [r1, #4]
 8002628:	e018      	b.n	800265c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800262a:	4b5d      	ldr	r3, [pc, #372]	@ (80027a0 <HAL_RCC_OscConfig+0x504>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a5c      	ldr	r2, [pc, #368]	@ (80027a0 <HAL_RCC_OscConfig+0x504>)
 8002630:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002634:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002636:	f7ff fa6f 	bl	8001b18 <HAL_GetTick>
 800263a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800263c:	e008      	b.n	8002650 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800263e:	f7ff fa6b 	bl	8001b18 <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d901      	bls.n	8002650 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e1f9      	b.n	8002a44 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002650:	4b53      	ldr	r3, [pc, #332]	@ (80027a0 <HAL_RCC_OscConfig+0x504>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002658:	2b00      	cmp	r3, #0
 800265a:	d1f0      	bne.n	800263e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0308 	and.w	r3, r3, #8
 8002664:	2b00      	cmp	r3, #0
 8002666:	d03c      	beq.n	80026e2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	695b      	ldr	r3, [r3, #20]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d01c      	beq.n	80026aa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002670:	4b4b      	ldr	r3, [pc, #300]	@ (80027a0 <HAL_RCC_OscConfig+0x504>)
 8002672:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002676:	4a4a      	ldr	r2, [pc, #296]	@ (80027a0 <HAL_RCC_OscConfig+0x504>)
 8002678:	f043 0301 	orr.w	r3, r3, #1
 800267c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002680:	f7ff fa4a 	bl	8001b18 <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002688:	f7ff fa46 	bl	8001b18 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e1d4      	b.n	8002a44 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800269a:	4b41      	ldr	r3, [pc, #260]	@ (80027a0 <HAL_RCC_OscConfig+0x504>)
 800269c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d0ef      	beq.n	8002688 <HAL_RCC_OscConfig+0x3ec>
 80026a8:	e01b      	b.n	80026e2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026aa:	4b3d      	ldr	r3, [pc, #244]	@ (80027a0 <HAL_RCC_OscConfig+0x504>)
 80026ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026b0:	4a3b      	ldr	r2, [pc, #236]	@ (80027a0 <HAL_RCC_OscConfig+0x504>)
 80026b2:	f023 0301 	bic.w	r3, r3, #1
 80026b6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ba:	f7ff fa2d 	bl	8001b18 <HAL_GetTick>
 80026be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026c0:	e008      	b.n	80026d4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026c2:	f7ff fa29 	bl	8001b18 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e1b7      	b.n	8002a44 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026d4:	4b32      	ldr	r3, [pc, #200]	@ (80027a0 <HAL_RCC_OscConfig+0x504>)
 80026d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1ef      	bne.n	80026c2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0304 	and.w	r3, r3, #4
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	f000 80a6 	beq.w	800283c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026f0:	2300      	movs	r3, #0
 80026f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80026f4:	4b2a      	ldr	r3, [pc, #168]	@ (80027a0 <HAL_RCC_OscConfig+0x504>)
 80026f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d10d      	bne.n	800271c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002700:	4b27      	ldr	r3, [pc, #156]	@ (80027a0 <HAL_RCC_OscConfig+0x504>)
 8002702:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002704:	4a26      	ldr	r2, [pc, #152]	@ (80027a0 <HAL_RCC_OscConfig+0x504>)
 8002706:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800270a:	6593      	str	r3, [r2, #88]	@ 0x58
 800270c:	4b24      	ldr	r3, [pc, #144]	@ (80027a0 <HAL_RCC_OscConfig+0x504>)
 800270e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002710:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002714:	60bb      	str	r3, [r7, #8]
 8002716:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002718:	2301      	movs	r3, #1
 800271a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800271c:	4b21      	ldr	r3, [pc, #132]	@ (80027a4 <HAL_RCC_OscConfig+0x508>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002724:	2b00      	cmp	r3, #0
 8002726:	d118      	bne.n	800275a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002728:	4b1e      	ldr	r3, [pc, #120]	@ (80027a4 <HAL_RCC_OscConfig+0x508>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a1d      	ldr	r2, [pc, #116]	@ (80027a4 <HAL_RCC_OscConfig+0x508>)
 800272e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002732:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002734:	f7ff f9f0 	bl	8001b18 <HAL_GetTick>
 8002738:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800273c:	f7ff f9ec 	bl	8001b18 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e17a      	b.n	8002a44 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800274e:	4b15      	ldr	r3, [pc, #84]	@ (80027a4 <HAL_RCC_OscConfig+0x508>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002756:	2b00      	cmp	r3, #0
 8002758:	d0f0      	beq.n	800273c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d108      	bne.n	8002774 <HAL_RCC_OscConfig+0x4d8>
 8002762:	4b0f      	ldr	r3, [pc, #60]	@ (80027a0 <HAL_RCC_OscConfig+0x504>)
 8002764:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002768:	4a0d      	ldr	r2, [pc, #52]	@ (80027a0 <HAL_RCC_OscConfig+0x504>)
 800276a:	f043 0301 	orr.w	r3, r3, #1
 800276e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002772:	e029      	b.n	80027c8 <HAL_RCC_OscConfig+0x52c>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	2b05      	cmp	r3, #5
 800277a:	d115      	bne.n	80027a8 <HAL_RCC_OscConfig+0x50c>
 800277c:	4b08      	ldr	r3, [pc, #32]	@ (80027a0 <HAL_RCC_OscConfig+0x504>)
 800277e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002782:	4a07      	ldr	r2, [pc, #28]	@ (80027a0 <HAL_RCC_OscConfig+0x504>)
 8002784:	f043 0304 	orr.w	r3, r3, #4
 8002788:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800278c:	4b04      	ldr	r3, [pc, #16]	@ (80027a0 <HAL_RCC_OscConfig+0x504>)
 800278e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002792:	4a03      	ldr	r2, [pc, #12]	@ (80027a0 <HAL_RCC_OscConfig+0x504>)
 8002794:	f043 0301 	orr.w	r3, r3, #1
 8002798:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800279c:	e014      	b.n	80027c8 <HAL_RCC_OscConfig+0x52c>
 800279e:	bf00      	nop
 80027a0:	40021000 	.word	0x40021000
 80027a4:	40007000 	.word	0x40007000
 80027a8:	4b9c      	ldr	r3, [pc, #624]	@ (8002a1c <HAL_RCC_OscConfig+0x780>)
 80027aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ae:	4a9b      	ldr	r2, [pc, #620]	@ (8002a1c <HAL_RCC_OscConfig+0x780>)
 80027b0:	f023 0301 	bic.w	r3, r3, #1
 80027b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027b8:	4b98      	ldr	r3, [pc, #608]	@ (8002a1c <HAL_RCC_OscConfig+0x780>)
 80027ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027be:	4a97      	ldr	r2, [pc, #604]	@ (8002a1c <HAL_RCC_OscConfig+0x780>)
 80027c0:	f023 0304 	bic.w	r3, r3, #4
 80027c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d016      	beq.n	80027fe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d0:	f7ff f9a2 	bl	8001b18 <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027d6:	e00a      	b.n	80027ee <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027d8:	f7ff f99e 	bl	8001b18 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e12a      	b.n	8002a44 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027ee:	4b8b      	ldr	r3, [pc, #556]	@ (8002a1c <HAL_RCC_OscConfig+0x780>)
 80027f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d0ed      	beq.n	80027d8 <HAL_RCC_OscConfig+0x53c>
 80027fc:	e015      	b.n	800282a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027fe:	f7ff f98b 	bl	8001b18 <HAL_GetTick>
 8002802:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002804:	e00a      	b.n	800281c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002806:	f7ff f987 	bl	8001b18 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002814:	4293      	cmp	r3, r2
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e113      	b.n	8002a44 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800281c:	4b7f      	ldr	r3, [pc, #508]	@ (8002a1c <HAL_RCC_OscConfig+0x780>)
 800281e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1ed      	bne.n	8002806 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800282a:	7ffb      	ldrb	r3, [r7, #31]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d105      	bne.n	800283c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002830:	4b7a      	ldr	r3, [pc, #488]	@ (8002a1c <HAL_RCC_OscConfig+0x780>)
 8002832:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002834:	4a79      	ldr	r2, [pc, #484]	@ (8002a1c <HAL_RCC_OscConfig+0x780>)
 8002836:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800283a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002840:	2b00      	cmp	r3, #0
 8002842:	f000 80fe 	beq.w	8002a42 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800284a:	2b02      	cmp	r3, #2
 800284c:	f040 80d0 	bne.w	80029f0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002850:	4b72      	ldr	r3, [pc, #456]	@ (8002a1c <HAL_RCC_OscConfig+0x780>)
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	f003 0203 	and.w	r2, r3, #3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002860:	429a      	cmp	r2, r3
 8002862:	d130      	bne.n	80028c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800286e:	3b01      	subs	r3, #1
 8002870:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002872:	429a      	cmp	r2, r3
 8002874:	d127      	bne.n	80028c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002880:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002882:	429a      	cmp	r2, r3
 8002884:	d11f      	bne.n	80028c6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002890:	2a07      	cmp	r2, #7
 8002892:	bf14      	ite	ne
 8002894:	2201      	movne	r2, #1
 8002896:	2200      	moveq	r2, #0
 8002898:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800289a:	4293      	cmp	r3, r2
 800289c:	d113      	bne.n	80028c6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028a8:	085b      	lsrs	r3, r3, #1
 80028aa:	3b01      	subs	r3, #1
 80028ac:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d109      	bne.n	80028c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028bc:	085b      	lsrs	r3, r3, #1
 80028be:	3b01      	subs	r3, #1
 80028c0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d06e      	beq.n	80029a4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	2b0c      	cmp	r3, #12
 80028ca:	d069      	beq.n	80029a0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80028cc:	4b53      	ldr	r3, [pc, #332]	@ (8002a1c <HAL_RCC_OscConfig+0x780>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d105      	bne.n	80028e4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80028d8:	4b50      	ldr	r3, [pc, #320]	@ (8002a1c <HAL_RCC_OscConfig+0x780>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e0ad      	b.n	8002a44 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80028e8:	4b4c      	ldr	r3, [pc, #304]	@ (8002a1c <HAL_RCC_OscConfig+0x780>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a4b      	ldr	r2, [pc, #300]	@ (8002a1c <HAL_RCC_OscConfig+0x780>)
 80028ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028f2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028f4:	f7ff f910 	bl	8001b18 <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028fc:	f7ff f90c 	bl	8001b18 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b02      	cmp	r3, #2
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e09a      	b.n	8002a44 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800290e:	4b43      	ldr	r3, [pc, #268]	@ (8002a1c <HAL_RCC_OscConfig+0x780>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1f0      	bne.n	80028fc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800291a:	4b40      	ldr	r3, [pc, #256]	@ (8002a1c <HAL_RCC_OscConfig+0x780>)
 800291c:	68da      	ldr	r2, [r3, #12]
 800291e:	4b40      	ldr	r3, [pc, #256]	@ (8002a20 <HAL_RCC_OscConfig+0x784>)
 8002920:	4013      	ands	r3, r2
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800292a:	3a01      	subs	r2, #1
 800292c:	0112      	lsls	r2, r2, #4
 800292e:	4311      	orrs	r1, r2
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002934:	0212      	lsls	r2, r2, #8
 8002936:	4311      	orrs	r1, r2
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800293c:	0852      	lsrs	r2, r2, #1
 800293e:	3a01      	subs	r2, #1
 8002940:	0552      	lsls	r2, r2, #21
 8002942:	4311      	orrs	r1, r2
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002948:	0852      	lsrs	r2, r2, #1
 800294a:	3a01      	subs	r2, #1
 800294c:	0652      	lsls	r2, r2, #25
 800294e:	4311      	orrs	r1, r2
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002954:	0912      	lsrs	r2, r2, #4
 8002956:	0452      	lsls	r2, r2, #17
 8002958:	430a      	orrs	r2, r1
 800295a:	4930      	ldr	r1, [pc, #192]	@ (8002a1c <HAL_RCC_OscConfig+0x780>)
 800295c:	4313      	orrs	r3, r2
 800295e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002960:	4b2e      	ldr	r3, [pc, #184]	@ (8002a1c <HAL_RCC_OscConfig+0x780>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a2d      	ldr	r2, [pc, #180]	@ (8002a1c <HAL_RCC_OscConfig+0x780>)
 8002966:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800296a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800296c:	4b2b      	ldr	r3, [pc, #172]	@ (8002a1c <HAL_RCC_OscConfig+0x780>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	4a2a      	ldr	r2, [pc, #168]	@ (8002a1c <HAL_RCC_OscConfig+0x780>)
 8002972:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002976:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002978:	f7ff f8ce 	bl	8001b18 <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002980:	f7ff f8ca 	bl	8001b18 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b02      	cmp	r3, #2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e058      	b.n	8002a44 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002992:	4b22      	ldr	r3, [pc, #136]	@ (8002a1c <HAL_RCC_OscConfig+0x780>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d0f0      	beq.n	8002980 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800299e:	e050      	b.n	8002a42 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e04f      	b.n	8002a44 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029a4:	4b1d      	ldr	r3, [pc, #116]	@ (8002a1c <HAL_RCC_OscConfig+0x780>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d148      	bne.n	8002a42 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80029b0:	4b1a      	ldr	r3, [pc, #104]	@ (8002a1c <HAL_RCC_OscConfig+0x780>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a19      	ldr	r2, [pc, #100]	@ (8002a1c <HAL_RCC_OscConfig+0x780>)
 80029b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029ba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029bc:	4b17      	ldr	r3, [pc, #92]	@ (8002a1c <HAL_RCC_OscConfig+0x780>)
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	4a16      	ldr	r2, [pc, #88]	@ (8002a1c <HAL_RCC_OscConfig+0x780>)
 80029c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029c6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80029c8:	f7ff f8a6 	bl	8001b18 <HAL_GetTick>
 80029cc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029ce:	e008      	b.n	80029e2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029d0:	f7ff f8a2 	bl	8001b18 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e030      	b.n	8002a44 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029e2:	4b0e      	ldr	r3, [pc, #56]	@ (8002a1c <HAL_RCC_OscConfig+0x780>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d0f0      	beq.n	80029d0 <HAL_RCC_OscConfig+0x734>
 80029ee:	e028      	b.n	8002a42 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	2b0c      	cmp	r3, #12
 80029f4:	d023      	beq.n	8002a3e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029f6:	4b09      	ldr	r3, [pc, #36]	@ (8002a1c <HAL_RCC_OscConfig+0x780>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a08      	ldr	r2, [pc, #32]	@ (8002a1c <HAL_RCC_OscConfig+0x780>)
 80029fc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a02:	f7ff f889 	bl	8001b18 <HAL_GetTick>
 8002a06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a08:	e00c      	b.n	8002a24 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a0a:	f7ff f885 	bl	8001b18 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d905      	bls.n	8002a24 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e013      	b.n	8002a44 <HAL_RCC_OscConfig+0x7a8>
 8002a1c:	40021000 	.word	0x40021000
 8002a20:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a24:	4b09      	ldr	r3, [pc, #36]	@ (8002a4c <HAL_RCC_OscConfig+0x7b0>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d1ec      	bne.n	8002a0a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002a30:	4b06      	ldr	r3, [pc, #24]	@ (8002a4c <HAL_RCC_OscConfig+0x7b0>)
 8002a32:	68da      	ldr	r2, [r3, #12]
 8002a34:	4905      	ldr	r1, [pc, #20]	@ (8002a4c <HAL_RCC_OscConfig+0x7b0>)
 8002a36:	4b06      	ldr	r3, [pc, #24]	@ (8002a50 <HAL_RCC_OscConfig+0x7b4>)
 8002a38:	4013      	ands	r3, r2
 8002a3a:	60cb      	str	r3, [r1, #12]
 8002a3c:	e001      	b.n	8002a42 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e000      	b.n	8002a44 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3720      	adds	r7, #32
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	feeefffc 	.word	0xfeeefffc

08002a54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d101      	bne.n	8002a68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e0e7      	b.n	8002c38 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a68:	4b75      	ldr	r3, [pc, #468]	@ (8002c40 <HAL_RCC_ClockConfig+0x1ec>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0307 	and.w	r3, r3, #7
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d910      	bls.n	8002a98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a76:	4b72      	ldr	r3, [pc, #456]	@ (8002c40 <HAL_RCC_ClockConfig+0x1ec>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f023 0207 	bic.w	r2, r3, #7
 8002a7e:	4970      	ldr	r1, [pc, #448]	@ (8002c40 <HAL_RCC_ClockConfig+0x1ec>)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a86:	4b6e      	ldr	r3, [pc, #440]	@ (8002c40 <HAL_RCC_ClockConfig+0x1ec>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0307 	and.w	r3, r3, #7
 8002a8e:	683a      	ldr	r2, [r7, #0]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d001      	beq.n	8002a98 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e0cf      	b.n	8002c38 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0302 	and.w	r3, r3, #2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d010      	beq.n	8002ac6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	4b66      	ldr	r3, [pc, #408]	@ (8002c44 <HAL_RCC_ClockConfig+0x1f0>)
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d908      	bls.n	8002ac6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ab4:	4b63      	ldr	r3, [pc, #396]	@ (8002c44 <HAL_RCC_ClockConfig+0x1f0>)
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	4960      	ldr	r1, [pc, #384]	@ (8002c44 <HAL_RCC_ClockConfig+0x1f0>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d04c      	beq.n	8002b6c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	2b03      	cmp	r3, #3
 8002ad8:	d107      	bne.n	8002aea <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ada:	4b5a      	ldr	r3, [pc, #360]	@ (8002c44 <HAL_RCC_ClockConfig+0x1f0>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d121      	bne.n	8002b2a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e0a6      	b.n	8002c38 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d107      	bne.n	8002b02 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002af2:	4b54      	ldr	r3, [pc, #336]	@ (8002c44 <HAL_RCC_ClockConfig+0x1f0>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d115      	bne.n	8002b2a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e09a      	b.n	8002c38 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d107      	bne.n	8002b1a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b0a:	4b4e      	ldr	r3, [pc, #312]	@ (8002c44 <HAL_RCC_ClockConfig+0x1f0>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d109      	bne.n	8002b2a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e08e      	b.n	8002c38 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b1a:	4b4a      	ldr	r3, [pc, #296]	@ (8002c44 <HAL_RCC_ClockConfig+0x1f0>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e086      	b.n	8002c38 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b2a:	4b46      	ldr	r3, [pc, #280]	@ (8002c44 <HAL_RCC_ClockConfig+0x1f0>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f023 0203 	bic.w	r2, r3, #3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	4943      	ldr	r1, [pc, #268]	@ (8002c44 <HAL_RCC_ClockConfig+0x1f0>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b3c:	f7fe ffec 	bl	8001b18 <HAL_GetTick>
 8002b40:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b42:	e00a      	b.n	8002b5a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b44:	f7fe ffe8 	bl	8001b18 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e06e      	b.n	8002c38 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b5a:	4b3a      	ldr	r3, [pc, #232]	@ (8002c44 <HAL_RCC_ClockConfig+0x1f0>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f003 020c 	and.w	r2, r3, #12
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d1eb      	bne.n	8002b44 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d010      	beq.n	8002b9a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	689a      	ldr	r2, [r3, #8]
 8002b7c:	4b31      	ldr	r3, [pc, #196]	@ (8002c44 <HAL_RCC_ClockConfig+0x1f0>)
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d208      	bcs.n	8002b9a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b88:	4b2e      	ldr	r3, [pc, #184]	@ (8002c44 <HAL_RCC_ClockConfig+0x1f0>)
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	492b      	ldr	r1, [pc, #172]	@ (8002c44 <HAL_RCC_ClockConfig+0x1f0>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b9a:	4b29      	ldr	r3, [pc, #164]	@ (8002c40 <HAL_RCC_ClockConfig+0x1ec>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0307 	and.w	r3, r3, #7
 8002ba2:	683a      	ldr	r2, [r7, #0]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d210      	bcs.n	8002bca <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ba8:	4b25      	ldr	r3, [pc, #148]	@ (8002c40 <HAL_RCC_ClockConfig+0x1ec>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f023 0207 	bic.w	r2, r3, #7
 8002bb0:	4923      	ldr	r1, [pc, #140]	@ (8002c40 <HAL_RCC_ClockConfig+0x1ec>)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bb8:	4b21      	ldr	r3, [pc, #132]	@ (8002c40 <HAL_RCC_ClockConfig+0x1ec>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0307 	and.w	r3, r3, #7
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d001      	beq.n	8002bca <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e036      	b.n	8002c38 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0304 	and.w	r3, r3, #4
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d008      	beq.n	8002be8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bd6:	4b1b      	ldr	r3, [pc, #108]	@ (8002c44 <HAL_RCC_ClockConfig+0x1f0>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	4918      	ldr	r1, [pc, #96]	@ (8002c44 <HAL_RCC_ClockConfig+0x1f0>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0308 	and.w	r3, r3, #8
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d009      	beq.n	8002c08 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bf4:	4b13      	ldr	r3, [pc, #76]	@ (8002c44 <HAL_RCC_ClockConfig+0x1f0>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	00db      	lsls	r3, r3, #3
 8002c02:	4910      	ldr	r1, [pc, #64]	@ (8002c44 <HAL_RCC_ClockConfig+0x1f0>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c08:	f000 f824 	bl	8002c54 <HAL_RCC_GetSysClockFreq>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8002c44 <HAL_RCC_ClockConfig+0x1f0>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	091b      	lsrs	r3, r3, #4
 8002c14:	f003 030f 	and.w	r3, r3, #15
 8002c18:	490b      	ldr	r1, [pc, #44]	@ (8002c48 <HAL_RCC_ClockConfig+0x1f4>)
 8002c1a:	5ccb      	ldrb	r3, [r1, r3]
 8002c1c:	f003 031f 	and.w	r3, r3, #31
 8002c20:	fa22 f303 	lsr.w	r3, r2, r3
 8002c24:	4a09      	ldr	r2, [pc, #36]	@ (8002c4c <HAL_RCC_ClockConfig+0x1f8>)
 8002c26:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c28:	4b09      	ldr	r3, [pc, #36]	@ (8002c50 <HAL_RCC_ClockConfig+0x1fc>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7fe ff23 	bl	8001a78 <HAL_InitTick>
 8002c32:	4603      	mov	r3, r0
 8002c34:	72fb      	strb	r3, [r7, #11]

  return status;
 8002c36:	7afb      	ldrb	r3, [r7, #11]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3710      	adds	r7, #16
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	40022000 	.word	0x40022000
 8002c44:	40021000 	.word	0x40021000
 8002c48:	0800a5c0 	.word	0x0800a5c0
 8002c4c:	20000000 	.word	0x20000000
 8002c50:	20000004 	.word	0x20000004

08002c54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b089      	sub	sp, #36	@ 0x24
 8002c58:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	61fb      	str	r3, [r7, #28]
 8002c5e:	2300      	movs	r3, #0
 8002c60:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c62:	4b3e      	ldr	r3, [pc, #248]	@ (8002d5c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f003 030c 	and.w	r3, r3, #12
 8002c6a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c6c:	4b3b      	ldr	r3, [pc, #236]	@ (8002d5c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	f003 0303 	and.w	r3, r3, #3
 8002c74:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d005      	beq.n	8002c88 <HAL_RCC_GetSysClockFreq+0x34>
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	2b0c      	cmp	r3, #12
 8002c80:	d121      	bne.n	8002cc6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d11e      	bne.n	8002cc6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c88:	4b34      	ldr	r3, [pc, #208]	@ (8002d5c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0308 	and.w	r3, r3, #8
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d107      	bne.n	8002ca4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c94:	4b31      	ldr	r3, [pc, #196]	@ (8002d5c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c9a:	0a1b      	lsrs	r3, r3, #8
 8002c9c:	f003 030f 	and.w	r3, r3, #15
 8002ca0:	61fb      	str	r3, [r7, #28]
 8002ca2:	e005      	b.n	8002cb0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ca4:	4b2d      	ldr	r3, [pc, #180]	@ (8002d5c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	091b      	lsrs	r3, r3, #4
 8002caa:	f003 030f 	and.w	r3, r3, #15
 8002cae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002cb0:	4a2b      	ldr	r2, [pc, #172]	@ (8002d60 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cb8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d10d      	bne.n	8002cdc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cc4:	e00a      	b.n	8002cdc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	2b04      	cmp	r3, #4
 8002cca:	d102      	bne.n	8002cd2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ccc:	4b25      	ldr	r3, [pc, #148]	@ (8002d64 <HAL_RCC_GetSysClockFreq+0x110>)
 8002cce:	61bb      	str	r3, [r7, #24]
 8002cd0:	e004      	b.n	8002cdc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	2b08      	cmp	r3, #8
 8002cd6:	d101      	bne.n	8002cdc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002cd8:	4b23      	ldr	r3, [pc, #140]	@ (8002d68 <HAL_RCC_GetSysClockFreq+0x114>)
 8002cda:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	2b0c      	cmp	r3, #12
 8002ce0:	d134      	bne.n	8002d4c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ce2:	4b1e      	ldr	r3, [pc, #120]	@ (8002d5c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	f003 0303 	and.w	r3, r3, #3
 8002cea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d003      	beq.n	8002cfa <HAL_RCC_GetSysClockFreq+0xa6>
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	2b03      	cmp	r3, #3
 8002cf6:	d003      	beq.n	8002d00 <HAL_RCC_GetSysClockFreq+0xac>
 8002cf8:	e005      	b.n	8002d06 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002cfa:	4b1a      	ldr	r3, [pc, #104]	@ (8002d64 <HAL_RCC_GetSysClockFreq+0x110>)
 8002cfc:	617b      	str	r3, [r7, #20]
      break;
 8002cfe:	e005      	b.n	8002d0c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002d00:	4b19      	ldr	r3, [pc, #100]	@ (8002d68 <HAL_RCC_GetSysClockFreq+0x114>)
 8002d02:	617b      	str	r3, [r7, #20]
      break;
 8002d04:	e002      	b.n	8002d0c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	617b      	str	r3, [r7, #20]
      break;
 8002d0a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d0c:	4b13      	ldr	r3, [pc, #76]	@ (8002d5c <HAL_RCC_GetSysClockFreq+0x108>)
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	091b      	lsrs	r3, r3, #4
 8002d12:	f003 0307 	and.w	r3, r3, #7
 8002d16:	3301      	adds	r3, #1
 8002d18:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d1a:	4b10      	ldr	r3, [pc, #64]	@ (8002d5c <HAL_RCC_GetSysClockFreq+0x108>)
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	0a1b      	lsrs	r3, r3, #8
 8002d20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d24:	697a      	ldr	r2, [r7, #20]
 8002d26:	fb03 f202 	mul.w	r2, r3, r2
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d30:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d32:	4b0a      	ldr	r3, [pc, #40]	@ (8002d5c <HAL_RCC_GetSysClockFreq+0x108>)
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	0e5b      	lsrs	r3, r3, #25
 8002d38:	f003 0303 	and.w	r3, r3, #3
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d4a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d4c:	69bb      	ldr	r3, [r7, #24]
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3724      	adds	r7, #36	@ 0x24
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	40021000 	.word	0x40021000
 8002d60:	0800a5d8 	.word	0x0800a5d8
 8002d64:	00f42400 	.word	0x00f42400
 8002d68:	007a1200 	.word	0x007a1200

08002d6c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d70:	4b03      	ldr	r3, [pc, #12]	@ (8002d80 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d72:	681b      	ldr	r3, [r3, #0]
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	20000000 	.word	0x20000000

08002d84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d88:	f7ff fff0 	bl	8002d6c <HAL_RCC_GetHCLKFreq>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	4b06      	ldr	r3, [pc, #24]	@ (8002da8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	0a1b      	lsrs	r3, r3, #8
 8002d94:	f003 0307 	and.w	r3, r3, #7
 8002d98:	4904      	ldr	r1, [pc, #16]	@ (8002dac <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d9a:	5ccb      	ldrb	r3, [r1, r3]
 8002d9c:	f003 031f 	and.w	r3, r3, #31
 8002da0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	40021000 	.word	0x40021000
 8002dac:	0800a5d0 	.word	0x0800a5d0

08002db0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002db4:	f7ff ffda 	bl	8002d6c <HAL_RCC_GetHCLKFreq>
 8002db8:	4602      	mov	r2, r0
 8002dba:	4b06      	ldr	r3, [pc, #24]	@ (8002dd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	0adb      	lsrs	r3, r3, #11
 8002dc0:	f003 0307 	and.w	r3, r3, #7
 8002dc4:	4904      	ldr	r1, [pc, #16]	@ (8002dd8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002dc6:	5ccb      	ldrb	r3, [r1, r3]
 8002dc8:	f003 031f 	and.w	r3, r3, #31
 8002dcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	40021000 	.word	0x40021000
 8002dd8:	0800a5d0 	.word	0x0800a5d0

08002ddc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b086      	sub	sp, #24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002de4:	2300      	movs	r3, #0
 8002de6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002de8:	4b2a      	ldr	r3, [pc, #168]	@ (8002e94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d003      	beq.n	8002dfc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002df4:	f7ff f9ee 	bl	80021d4 <HAL_PWREx_GetVoltageRange>
 8002df8:	6178      	str	r0, [r7, #20]
 8002dfa:	e014      	b.n	8002e26 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002dfc:	4b25      	ldr	r3, [pc, #148]	@ (8002e94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e00:	4a24      	ldr	r2, [pc, #144]	@ (8002e94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e06:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e08:	4b22      	ldr	r3, [pc, #136]	@ (8002e94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e10:	60fb      	str	r3, [r7, #12]
 8002e12:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002e14:	f7ff f9de 	bl	80021d4 <HAL_PWREx_GetVoltageRange>
 8002e18:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002e1a:	4b1e      	ldr	r3, [pc, #120]	@ (8002e94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e1e:	4a1d      	ldr	r2, [pc, #116]	@ (8002e94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e20:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e24:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e2c:	d10b      	bne.n	8002e46 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2b80      	cmp	r3, #128	@ 0x80
 8002e32:	d919      	bls.n	8002e68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2ba0      	cmp	r3, #160	@ 0xa0
 8002e38:	d902      	bls.n	8002e40 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	613b      	str	r3, [r7, #16]
 8002e3e:	e013      	b.n	8002e68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e40:	2301      	movs	r3, #1
 8002e42:	613b      	str	r3, [r7, #16]
 8002e44:	e010      	b.n	8002e68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2b80      	cmp	r3, #128	@ 0x80
 8002e4a:	d902      	bls.n	8002e52 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	613b      	str	r3, [r7, #16]
 8002e50:	e00a      	b.n	8002e68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2b80      	cmp	r3, #128	@ 0x80
 8002e56:	d102      	bne.n	8002e5e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e58:	2302      	movs	r3, #2
 8002e5a:	613b      	str	r3, [r7, #16]
 8002e5c:	e004      	b.n	8002e68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2b70      	cmp	r3, #112	@ 0x70
 8002e62:	d101      	bne.n	8002e68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e64:	2301      	movs	r3, #1
 8002e66:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e68:	4b0b      	ldr	r3, [pc, #44]	@ (8002e98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f023 0207 	bic.w	r2, r3, #7
 8002e70:	4909      	ldr	r1, [pc, #36]	@ (8002e98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e78:	4b07      	ldr	r3, [pc, #28]	@ (8002e98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0307 	and.w	r3, r3, #7
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d001      	beq.n	8002e8a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e000      	b.n	8002e8c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3718      	adds	r7, #24
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	40021000 	.word	0x40021000
 8002e98:	40022000 	.word	0x40022000

08002e9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b086      	sub	sp, #24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d041      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ebc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002ec0:	d02a      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002ec2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002ec6:	d824      	bhi.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ec8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002ecc:	d008      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002ece:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002ed2:	d81e      	bhi.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00a      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002ed8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002edc:	d010      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002ede:	e018      	b.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ee0:	4b86      	ldr	r3, [pc, #536]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	4a85      	ldr	r2, [pc, #532]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ee6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002eea:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002eec:	e015      	b.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	3304      	adds	r3, #4
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f000 fabb 	bl	8003470 <RCCEx_PLLSAI1_Config>
 8002efa:	4603      	mov	r3, r0
 8002efc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002efe:	e00c      	b.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	3320      	adds	r3, #32
 8002f04:	2100      	movs	r1, #0
 8002f06:	4618      	mov	r0, r3
 8002f08:	f000 fba6 	bl	8003658 <RCCEx_PLLSAI2_Config>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f10:	e003      	b.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	74fb      	strb	r3, [r7, #19]
      break;
 8002f16:	e000      	b.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002f18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f1a:	7cfb      	ldrb	r3, [r7, #19]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d10b      	bne.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f20:	4b76      	ldr	r3, [pc, #472]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f26:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f2e:	4973      	ldr	r1, [pc, #460]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002f36:	e001      	b.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f38:	7cfb      	ldrb	r3, [r7, #19]
 8002f3a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d041      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f4c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002f50:	d02a      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002f52:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002f56:	d824      	bhi.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002f58:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002f5c:	d008      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002f5e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002f62:	d81e      	bhi.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d00a      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002f68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f6c:	d010      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002f6e:	e018      	b.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f70:	4b62      	ldr	r3, [pc, #392]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	4a61      	ldr	r2, [pc, #388]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f7a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f7c:	e015      	b.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	3304      	adds	r3, #4
 8002f82:	2100      	movs	r1, #0
 8002f84:	4618      	mov	r0, r3
 8002f86:	f000 fa73 	bl	8003470 <RCCEx_PLLSAI1_Config>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f8e:	e00c      	b.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	3320      	adds	r3, #32
 8002f94:	2100      	movs	r1, #0
 8002f96:	4618      	mov	r0, r3
 8002f98:	f000 fb5e 	bl	8003658 <RCCEx_PLLSAI2_Config>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002fa0:	e003      	b.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	74fb      	strb	r3, [r7, #19]
      break;
 8002fa6:	e000      	b.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002fa8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002faa:	7cfb      	ldrb	r3, [r7, #19]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d10b      	bne.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002fb0:	4b52      	ldr	r3, [pc, #328]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fb6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002fbe:	494f      	ldr	r1, [pc, #316]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002fc6:	e001      	b.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fc8:	7cfb      	ldrb	r3, [r7, #19]
 8002fca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f000 80a0 	beq.w	800311a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002fde:	4b47      	ldr	r3, [pc, #284]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fe2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002fea:	2301      	movs	r3, #1
 8002fec:	e000      	b.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002fee:	2300      	movs	r3, #0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00d      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ff4:	4b41      	ldr	r3, [pc, #260]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ff6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ff8:	4a40      	ldr	r2, [pc, #256]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ffa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ffe:	6593      	str	r3, [r2, #88]	@ 0x58
 8003000:	4b3e      	ldr	r3, [pc, #248]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003002:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003004:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003008:	60bb      	str	r3, [r7, #8]
 800300a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800300c:	2301      	movs	r3, #1
 800300e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003010:	4b3b      	ldr	r3, [pc, #236]	@ (8003100 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a3a      	ldr	r2, [pc, #232]	@ (8003100 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003016:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800301a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800301c:	f7fe fd7c 	bl	8001b18 <HAL_GetTick>
 8003020:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003022:	e009      	b.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003024:	f7fe fd78 	bl	8001b18 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d902      	bls.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	74fb      	strb	r3, [r7, #19]
        break;
 8003036:	e005      	b.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003038:	4b31      	ldr	r3, [pc, #196]	@ (8003100 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003040:	2b00      	cmp	r3, #0
 8003042:	d0ef      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003044:	7cfb      	ldrb	r3, [r7, #19]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d15c      	bne.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800304a:	4b2c      	ldr	r3, [pc, #176]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800304c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003050:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003054:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d01f      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003062:	697a      	ldr	r2, [r7, #20]
 8003064:	429a      	cmp	r2, r3
 8003066:	d019      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003068:	4b24      	ldr	r3, [pc, #144]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800306a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800306e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003072:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003074:	4b21      	ldr	r3, [pc, #132]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003076:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800307a:	4a20      	ldr	r2, [pc, #128]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800307c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003080:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003084:	4b1d      	ldr	r3, [pc, #116]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003086:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800308a:	4a1c      	ldr	r2, [pc, #112]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800308c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003090:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003094:	4a19      	ldr	r2, [pc, #100]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d016      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a6:	f7fe fd37 	bl	8001b18 <HAL_GetTick>
 80030aa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030ac:	e00b      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030ae:	f7fe fd33 	bl	8001b18 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030bc:	4293      	cmp	r3, r2
 80030be:	d902      	bls.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	74fb      	strb	r3, [r7, #19]
            break;
 80030c4:	e006      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030c6:	4b0d      	ldr	r3, [pc, #52]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d0ec      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80030d4:	7cfb      	ldrb	r3, [r7, #19]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d10c      	bne.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030da:	4b08      	ldr	r3, [pc, #32]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030ea:	4904      	ldr	r1, [pc, #16]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80030f2:	e009      	b.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030f4:	7cfb      	ldrb	r3, [r7, #19]
 80030f6:	74bb      	strb	r3, [r7, #18]
 80030f8:	e006      	b.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80030fa:	bf00      	nop
 80030fc:	40021000 	.word	0x40021000
 8003100:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003104:	7cfb      	ldrb	r3, [r7, #19]
 8003106:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003108:	7c7b      	ldrb	r3, [r7, #17]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d105      	bne.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800310e:	4b9e      	ldr	r3, [pc, #632]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003112:	4a9d      	ldr	r2, [pc, #628]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003114:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003118:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00a      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003126:	4b98      	ldr	r3, [pc, #608]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003128:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800312c:	f023 0203 	bic.w	r2, r3, #3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003134:	4994      	ldr	r1, [pc, #592]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003136:	4313      	orrs	r3, r2
 8003138:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0302 	and.w	r3, r3, #2
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00a      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003148:	4b8f      	ldr	r3, [pc, #572]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800314a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800314e:	f023 020c 	bic.w	r2, r3, #12
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003156:	498c      	ldr	r1, [pc, #560]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003158:	4313      	orrs	r3, r2
 800315a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0304 	and.w	r3, r3, #4
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00a      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800316a:	4b87      	ldr	r3, [pc, #540]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800316c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003170:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003178:	4983      	ldr	r1, [pc, #524]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800317a:	4313      	orrs	r3, r2
 800317c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0308 	and.w	r3, r3, #8
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00a      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800318c:	4b7e      	ldr	r3, [pc, #504]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800318e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003192:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800319a:	497b      	ldr	r1, [pc, #492]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800319c:	4313      	orrs	r3, r2
 800319e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0310 	and.w	r3, r3, #16
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00a      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80031ae:	4b76      	ldr	r3, [pc, #472]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031bc:	4972      	ldr	r1, [pc, #456]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0320 	and.w	r3, r3, #32
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d00a      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031d0:	4b6d      	ldr	r3, [pc, #436]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031d6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031de:	496a      	ldr	r1, [pc, #424]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00a      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031f2:	4b65      	ldr	r3, [pc, #404]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031f8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003200:	4961      	ldr	r1, [pc, #388]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003202:	4313      	orrs	r3, r2
 8003204:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003210:	2b00      	cmp	r3, #0
 8003212:	d00a      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003214:	4b5c      	ldr	r3, [pc, #368]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003216:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800321a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003222:	4959      	ldr	r1, [pc, #356]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003224:	4313      	orrs	r3, r2
 8003226:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00a      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003236:	4b54      	ldr	r3, [pc, #336]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003238:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800323c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003244:	4950      	ldr	r1, [pc, #320]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003246:	4313      	orrs	r3, r2
 8003248:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00a      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003258:	4b4b      	ldr	r3, [pc, #300]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800325a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800325e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003266:	4948      	ldr	r1, [pc, #288]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003268:	4313      	orrs	r3, r2
 800326a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00a      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800327a:	4b43      	ldr	r3, [pc, #268]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800327c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003280:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003288:	493f      	ldr	r1, [pc, #252]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800328a:	4313      	orrs	r3, r2
 800328c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d028      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800329c:	4b3a      	ldr	r3, [pc, #232]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800329e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032a2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032aa:	4937      	ldr	r1, [pc, #220]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80032ba:	d106      	bne.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032bc:	4b32      	ldr	r3, [pc, #200]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	4a31      	ldr	r2, [pc, #196]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80032c6:	60d3      	str	r3, [r2, #12]
 80032c8:	e011      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032ce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80032d2:	d10c      	bne.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	3304      	adds	r3, #4
 80032d8:	2101      	movs	r1, #1
 80032da:	4618      	mov	r0, r3
 80032dc:	f000 f8c8 	bl	8003470 <RCCEx_PLLSAI1_Config>
 80032e0:	4603      	mov	r3, r0
 80032e2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80032e4:	7cfb      	ldrb	r3, [r7, #19]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80032ea:	7cfb      	ldrb	r3, [r7, #19]
 80032ec:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d028      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80032fa:	4b23      	ldr	r3, [pc, #140]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003300:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003308:	491f      	ldr	r1, [pc, #124]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800330a:	4313      	orrs	r3, r2
 800330c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003314:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003318:	d106      	bne.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800331a:	4b1b      	ldr	r3, [pc, #108]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	4a1a      	ldr	r2, [pc, #104]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003320:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003324:	60d3      	str	r3, [r2, #12]
 8003326:	e011      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800332c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003330:	d10c      	bne.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	3304      	adds	r3, #4
 8003336:	2101      	movs	r1, #1
 8003338:	4618      	mov	r0, r3
 800333a:	f000 f899 	bl	8003470 <RCCEx_PLLSAI1_Config>
 800333e:	4603      	mov	r3, r0
 8003340:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003342:	7cfb      	ldrb	r3, [r7, #19]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d001      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003348:	7cfb      	ldrb	r3, [r7, #19]
 800334a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d02b      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003358:	4b0b      	ldr	r3, [pc, #44]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800335a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800335e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003366:	4908      	ldr	r1, [pc, #32]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003368:	4313      	orrs	r3, r2
 800336a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003372:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003376:	d109      	bne.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003378:	4b03      	ldr	r3, [pc, #12]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	4a02      	ldr	r2, [pc, #8]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800337e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003382:	60d3      	str	r3, [r2, #12]
 8003384:	e014      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003386:	bf00      	nop
 8003388:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003390:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003394:	d10c      	bne.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	3304      	adds	r3, #4
 800339a:	2101      	movs	r1, #1
 800339c:	4618      	mov	r0, r3
 800339e:	f000 f867 	bl	8003470 <RCCEx_PLLSAI1_Config>
 80033a2:	4603      	mov	r3, r0
 80033a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033a6:	7cfb      	ldrb	r3, [r7, #19]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d001      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80033ac:	7cfb      	ldrb	r3, [r7, #19]
 80033ae:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d02f      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033bc:	4b2b      	ldr	r3, [pc, #172]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033c2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033ca:	4928      	ldr	r1, [pc, #160]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80033da:	d10d      	bne.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	3304      	adds	r3, #4
 80033e0:	2102      	movs	r1, #2
 80033e2:	4618      	mov	r0, r3
 80033e4:	f000 f844 	bl	8003470 <RCCEx_PLLSAI1_Config>
 80033e8:	4603      	mov	r3, r0
 80033ea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033ec:	7cfb      	ldrb	r3, [r7, #19]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d014      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80033f2:	7cfb      	ldrb	r3, [r7, #19]
 80033f4:	74bb      	strb	r3, [r7, #18]
 80033f6:	e011      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003400:	d10c      	bne.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	3320      	adds	r3, #32
 8003406:	2102      	movs	r1, #2
 8003408:	4618      	mov	r0, r3
 800340a:	f000 f925 	bl	8003658 <RCCEx_PLLSAI2_Config>
 800340e:	4603      	mov	r3, r0
 8003410:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003412:	7cfb      	ldrb	r3, [r7, #19]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d001      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003418:	7cfb      	ldrb	r3, [r7, #19]
 800341a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00a      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003428:	4b10      	ldr	r3, [pc, #64]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800342a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800342e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003436:	490d      	ldr	r1, [pc, #52]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003438:	4313      	orrs	r3, r2
 800343a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00b      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800344a:	4b08      	ldr	r3, [pc, #32]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800344c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003450:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800345a:	4904      	ldr	r1, [pc, #16]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800345c:	4313      	orrs	r3, r2
 800345e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003462:	7cbb      	ldrb	r3, [r7, #18]
}
 8003464:	4618      	mov	r0, r3
 8003466:	3718      	adds	r7, #24
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	40021000 	.word	0x40021000

08003470 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800347a:	2300      	movs	r3, #0
 800347c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800347e:	4b75      	ldr	r3, [pc, #468]	@ (8003654 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	f003 0303 	and.w	r3, r3, #3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d018      	beq.n	80034bc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800348a:	4b72      	ldr	r3, [pc, #456]	@ (8003654 <RCCEx_PLLSAI1_Config+0x1e4>)
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	f003 0203 	and.w	r2, r3, #3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	429a      	cmp	r2, r3
 8003498:	d10d      	bne.n	80034b6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
       ||
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d009      	beq.n	80034b6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80034a2:	4b6c      	ldr	r3, [pc, #432]	@ (8003654 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	091b      	lsrs	r3, r3, #4
 80034a8:	f003 0307 	and.w	r3, r3, #7
 80034ac:	1c5a      	adds	r2, r3, #1
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
       ||
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d047      	beq.n	8003546 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	73fb      	strb	r3, [r7, #15]
 80034ba:	e044      	b.n	8003546 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2b03      	cmp	r3, #3
 80034c2:	d018      	beq.n	80034f6 <RCCEx_PLLSAI1_Config+0x86>
 80034c4:	2b03      	cmp	r3, #3
 80034c6:	d825      	bhi.n	8003514 <RCCEx_PLLSAI1_Config+0xa4>
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d002      	beq.n	80034d2 <RCCEx_PLLSAI1_Config+0x62>
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d009      	beq.n	80034e4 <RCCEx_PLLSAI1_Config+0x74>
 80034d0:	e020      	b.n	8003514 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80034d2:	4b60      	ldr	r3, [pc, #384]	@ (8003654 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d11d      	bne.n	800351a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034e2:	e01a      	b.n	800351a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80034e4:	4b5b      	ldr	r3, [pc, #364]	@ (8003654 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d116      	bne.n	800351e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034f4:	e013      	b.n	800351e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80034f6:	4b57      	ldr	r3, [pc, #348]	@ (8003654 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10f      	bne.n	8003522 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003502:	4b54      	ldr	r3, [pc, #336]	@ (8003654 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d109      	bne.n	8003522 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003512:	e006      	b.n	8003522 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	73fb      	strb	r3, [r7, #15]
      break;
 8003518:	e004      	b.n	8003524 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800351a:	bf00      	nop
 800351c:	e002      	b.n	8003524 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800351e:	bf00      	nop
 8003520:	e000      	b.n	8003524 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003522:	bf00      	nop
    }

    if(status == HAL_OK)
 8003524:	7bfb      	ldrb	r3, [r7, #15]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d10d      	bne.n	8003546 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800352a:	4b4a      	ldr	r3, [pc, #296]	@ (8003654 <RCCEx_PLLSAI1_Config+0x1e4>)
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6819      	ldr	r1, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	3b01      	subs	r3, #1
 800353c:	011b      	lsls	r3, r3, #4
 800353e:	430b      	orrs	r3, r1
 8003540:	4944      	ldr	r1, [pc, #272]	@ (8003654 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003542:	4313      	orrs	r3, r2
 8003544:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003546:	7bfb      	ldrb	r3, [r7, #15]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d17d      	bne.n	8003648 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800354c:	4b41      	ldr	r3, [pc, #260]	@ (8003654 <RCCEx_PLLSAI1_Config+0x1e4>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a40      	ldr	r2, [pc, #256]	@ (8003654 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003552:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003556:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003558:	f7fe fade 	bl	8001b18 <HAL_GetTick>
 800355c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800355e:	e009      	b.n	8003574 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003560:	f7fe fada 	bl	8001b18 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b02      	cmp	r3, #2
 800356c:	d902      	bls.n	8003574 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	73fb      	strb	r3, [r7, #15]
        break;
 8003572:	e005      	b.n	8003580 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003574:	4b37      	ldr	r3, [pc, #220]	@ (8003654 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d1ef      	bne.n	8003560 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003580:	7bfb      	ldrb	r3, [r7, #15]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d160      	bne.n	8003648 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d111      	bne.n	80035b0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800358c:	4b31      	ldr	r3, [pc, #196]	@ (8003654 <RCCEx_PLLSAI1_Config+0x1e4>)
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003594:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	6892      	ldr	r2, [r2, #8]
 800359c:	0211      	lsls	r1, r2, #8
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	68d2      	ldr	r2, [r2, #12]
 80035a2:	0912      	lsrs	r2, r2, #4
 80035a4:	0452      	lsls	r2, r2, #17
 80035a6:	430a      	orrs	r2, r1
 80035a8:	492a      	ldr	r1, [pc, #168]	@ (8003654 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	610b      	str	r3, [r1, #16]
 80035ae:	e027      	b.n	8003600 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d112      	bne.n	80035dc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035b6:	4b27      	ldr	r3, [pc, #156]	@ (8003654 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80035be:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	6892      	ldr	r2, [r2, #8]
 80035c6:	0211      	lsls	r1, r2, #8
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	6912      	ldr	r2, [r2, #16]
 80035cc:	0852      	lsrs	r2, r2, #1
 80035ce:	3a01      	subs	r2, #1
 80035d0:	0552      	lsls	r2, r2, #21
 80035d2:	430a      	orrs	r2, r1
 80035d4:	491f      	ldr	r1, [pc, #124]	@ (8003654 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	610b      	str	r3, [r1, #16]
 80035da:	e011      	b.n	8003600 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035dc:	4b1d      	ldr	r3, [pc, #116]	@ (8003654 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80035e4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	6892      	ldr	r2, [r2, #8]
 80035ec:	0211      	lsls	r1, r2, #8
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	6952      	ldr	r2, [r2, #20]
 80035f2:	0852      	lsrs	r2, r2, #1
 80035f4:	3a01      	subs	r2, #1
 80035f6:	0652      	lsls	r2, r2, #25
 80035f8:	430a      	orrs	r2, r1
 80035fa:	4916      	ldr	r1, [pc, #88]	@ (8003654 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003600:	4b14      	ldr	r3, [pc, #80]	@ (8003654 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a13      	ldr	r2, [pc, #76]	@ (8003654 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003606:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800360a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800360c:	f7fe fa84 	bl	8001b18 <HAL_GetTick>
 8003610:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003612:	e009      	b.n	8003628 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003614:	f7fe fa80 	bl	8001b18 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b02      	cmp	r3, #2
 8003620:	d902      	bls.n	8003628 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	73fb      	strb	r3, [r7, #15]
          break;
 8003626:	e005      	b.n	8003634 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003628:	4b0a      	ldr	r3, [pc, #40]	@ (8003654 <RCCEx_PLLSAI1_Config+0x1e4>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d0ef      	beq.n	8003614 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003634:	7bfb      	ldrb	r3, [r7, #15]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d106      	bne.n	8003648 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800363a:	4b06      	ldr	r3, [pc, #24]	@ (8003654 <RCCEx_PLLSAI1_Config+0x1e4>)
 800363c:	691a      	ldr	r2, [r3, #16]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	4904      	ldr	r1, [pc, #16]	@ (8003654 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003644:	4313      	orrs	r3, r2
 8003646:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003648:	7bfb      	ldrb	r3, [r7, #15]
}
 800364a:	4618      	mov	r0, r3
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	40021000 	.word	0x40021000

08003658 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003662:	2300      	movs	r3, #0
 8003664:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003666:	4b6a      	ldr	r3, [pc, #424]	@ (8003810 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	f003 0303 	and.w	r3, r3, #3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d018      	beq.n	80036a4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003672:	4b67      	ldr	r3, [pc, #412]	@ (8003810 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	f003 0203 	and.w	r2, r3, #3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	429a      	cmp	r2, r3
 8003680:	d10d      	bne.n	800369e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
       ||
 8003686:	2b00      	cmp	r3, #0
 8003688:	d009      	beq.n	800369e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800368a:	4b61      	ldr	r3, [pc, #388]	@ (8003810 <RCCEx_PLLSAI2_Config+0x1b8>)
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	091b      	lsrs	r3, r3, #4
 8003690:	f003 0307 	and.w	r3, r3, #7
 8003694:	1c5a      	adds	r2, r3, #1
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
       ||
 800369a:	429a      	cmp	r2, r3
 800369c:	d047      	beq.n	800372e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	73fb      	strb	r3, [r7, #15]
 80036a2:	e044      	b.n	800372e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2b03      	cmp	r3, #3
 80036aa:	d018      	beq.n	80036de <RCCEx_PLLSAI2_Config+0x86>
 80036ac:	2b03      	cmp	r3, #3
 80036ae:	d825      	bhi.n	80036fc <RCCEx_PLLSAI2_Config+0xa4>
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d002      	beq.n	80036ba <RCCEx_PLLSAI2_Config+0x62>
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d009      	beq.n	80036cc <RCCEx_PLLSAI2_Config+0x74>
 80036b8:	e020      	b.n	80036fc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036ba:	4b55      	ldr	r3, [pc, #340]	@ (8003810 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d11d      	bne.n	8003702 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036ca:	e01a      	b.n	8003702 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80036cc:	4b50      	ldr	r3, [pc, #320]	@ (8003810 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d116      	bne.n	8003706 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036dc:	e013      	b.n	8003706 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80036de:	4b4c      	ldr	r3, [pc, #304]	@ (8003810 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d10f      	bne.n	800370a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80036ea:	4b49      	ldr	r3, [pc, #292]	@ (8003810 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d109      	bne.n	800370a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80036fa:	e006      	b.n	800370a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	73fb      	strb	r3, [r7, #15]
      break;
 8003700:	e004      	b.n	800370c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003702:	bf00      	nop
 8003704:	e002      	b.n	800370c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003706:	bf00      	nop
 8003708:	e000      	b.n	800370c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800370a:	bf00      	nop
    }

    if(status == HAL_OK)
 800370c:	7bfb      	ldrb	r3, [r7, #15]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d10d      	bne.n	800372e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003712:	4b3f      	ldr	r3, [pc, #252]	@ (8003810 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6819      	ldr	r1, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	3b01      	subs	r3, #1
 8003724:	011b      	lsls	r3, r3, #4
 8003726:	430b      	orrs	r3, r1
 8003728:	4939      	ldr	r1, [pc, #228]	@ (8003810 <RCCEx_PLLSAI2_Config+0x1b8>)
 800372a:	4313      	orrs	r3, r2
 800372c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800372e:	7bfb      	ldrb	r3, [r7, #15]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d167      	bne.n	8003804 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003734:	4b36      	ldr	r3, [pc, #216]	@ (8003810 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a35      	ldr	r2, [pc, #212]	@ (8003810 <RCCEx_PLLSAI2_Config+0x1b8>)
 800373a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800373e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003740:	f7fe f9ea 	bl	8001b18 <HAL_GetTick>
 8003744:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003746:	e009      	b.n	800375c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003748:	f7fe f9e6 	bl	8001b18 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b02      	cmp	r3, #2
 8003754:	d902      	bls.n	800375c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	73fb      	strb	r3, [r7, #15]
        break;
 800375a:	e005      	b.n	8003768 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800375c:	4b2c      	ldr	r3, [pc, #176]	@ (8003810 <RCCEx_PLLSAI2_Config+0x1b8>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1ef      	bne.n	8003748 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003768:	7bfb      	ldrb	r3, [r7, #15]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d14a      	bne.n	8003804 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d111      	bne.n	8003798 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003774:	4b26      	ldr	r3, [pc, #152]	@ (8003810 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003776:	695b      	ldr	r3, [r3, #20]
 8003778:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800377c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	6892      	ldr	r2, [r2, #8]
 8003784:	0211      	lsls	r1, r2, #8
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	68d2      	ldr	r2, [r2, #12]
 800378a:	0912      	lsrs	r2, r2, #4
 800378c:	0452      	lsls	r2, r2, #17
 800378e:	430a      	orrs	r2, r1
 8003790:	491f      	ldr	r1, [pc, #124]	@ (8003810 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003792:	4313      	orrs	r3, r2
 8003794:	614b      	str	r3, [r1, #20]
 8003796:	e011      	b.n	80037bc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003798:	4b1d      	ldr	r3, [pc, #116]	@ (8003810 <RCCEx_PLLSAI2_Config+0x1b8>)
 800379a:	695b      	ldr	r3, [r3, #20]
 800379c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80037a0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	6892      	ldr	r2, [r2, #8]
 80037a8:	0211      	lsls	r1, r2, #8
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	6912      	ldr	r2, [r2, #16]
 80037ae:	0852      	lsrs	r2, r2, #1
 80037b0:	3a01      	subs	r2, #1
 80037b2:	0652      	lsls	r2, r2, #25
 80037b4:	430a      	orrs	r2, r1
 80037b6:	4916      	ldr	r1, [pc, #88]	@ (8003810 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80037bc:	4b14      	ldr	r3, [pc, #80]	@ (8003810 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a13      	ldr	r2, [pc, #76]	@ (8003810 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037c6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c8:	f7fe f9a6 	bl	8001b18 <HAL_GetTick>
 80037cc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80037ce:	e009      	b.n	80037e4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80037d0:	f7fe f9a2 	bl	8001b18 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d902      	bls.n	80037e4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	73fb      	strb	r3, [r7, #15]
          break;
 80037e2:	e005      	b.n	80037f0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80037e4:	4b0a      	ldr	r3, [pc, #40]	@ (8003810 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d0ef      	beq.n	80037d0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80037f0:	7bfb      	ldrb	r3, [r7, #15]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d106      	bne.n	8003804 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80037f6:	4b06      	ldr	r3, [pc, #24]	@ (8003810 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037f8:	695a      	ldr	r2, [r3, #20]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	4904      	ldr	r1, [pc, #16]	@ (8003810 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003800:	4313      	orrs	r3, r2
 8003802:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003804:	7bfb      	ldrb	r3, [r7, #15]
}
 8003806:	4618      	mov	r0, r3
 8003808:	3710      	adds	r7, #16
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	40021000 	.word	0x40021000

08003814 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e095      	b.n	8003952 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800382a:	2b00      	cmp	r3, #0
 800382c:	d108      	bne.n	8003840 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003836:	d009      	beq.n	800384c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	61da      	str	r2, [r3, #28]
 800383e:	e005      	b.n	800384c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b00      	cmp	r3, #0
 800385c:	d106      	bne.n	800386c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f7fd fee4 	bl	8001634 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2202      	movs	r2, #2
 8003870:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003882:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800388c:	d902      	bls.n	8003894 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800388e:	2300      	movs	r3, #0
 8003890:	60fb      	str	r3, [r7, #12]
 8003892:	e002      	b.n	800389a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003894:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003898:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80038a2:	d007      	beq.n	80038b4 <HAL_SPI_Init+0xa0>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80038ac:	d002      	beq.n	80038b4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80038c4:	431a      	orrs	r2, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	431a      	orrs	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	431a      	orrs	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038e2:	431a      	orrs	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	69db      	ldr	r3, [r3, #28]
 80038e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80038ec:	431a      	orrs	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038f6:	ea42 0103 	orr.w	r1, r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038fe:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	430a      	orrs	r2, r1
 8003908:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	0c1b      	lsrs	r3, r3, #16
 8003910:	f003 0204 	and.w	r2, r3, #4
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003918:	f003 0310 	and.w	r3, r3, #16
 800391c:	431a      	orrs	r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003922:	f003 0308 	and.w	r3, r3, #8
 8003926:	431a      	orrs	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003930:	ea42 0103 	orr.w	r1, r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	430a      	orrs	r2, r1
 8003940:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3710      	adds	r7, #16
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800395a:	b580      	push	{r7, lr}
 800395c:	b082      	sub	sp, #8
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d101      	bne.n	800396c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e040      	b.n	80039ee <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003970:	2b00      	cmp	r3, #0
 8003972:	d106      	bne.n	8003982 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f7fd febb 	bl	80016f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2224      	movs	r2, #36	@ 0x24
 8003986:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f022 0201 	bic.w	r2, r2, #1
 8003996:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800399c:	2b00      	cmp	r3, #0
 800399e:	d002      	beq.n	80039a6 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f000 fe8b 	bl	80046bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 fbd0 	bl	800414c <UART_SetConfig>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d101      	bne.n	80039b6 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e01b      	b.n	80039ee <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	685a      	ldr	r2, [r3, #4]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80039c4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	689a      	ldr	r2, [r3, #8]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80039d4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f042 0201 	orr.w	r2, r2, #1
 80039e4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 ff0a 	bl	8004800 <UART_CheckIdleState>
 80039ec:	4603      	mov	r3, r0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3708      	adds	r7, #8
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
	...

080039f8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b08b      	sub	sp, #44	@ 0x2c
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	4613      	mov	r3, r2
 8003a04:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a0a:	2b20      	cmp	r3, #32
 8003a0c:	d147      	bne.n	8003a9e <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d002      	beq.n	8003a1a <HAL_UART_Transmit_IT+0x22>
 8003a14:	88fb      	ldrh	r3, [r7, #6]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e040      	b.n	8003aa0 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	68ba      	ldr	r2, [r7, #8]
 8003a22:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	88fa      	ldrh	r2, [r7, #6]
 8003a28:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	88fa      	ldrh	r2, [r7, #6]
 8003a30:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2221      	movs	r2, #33	@ 0x21
 8003a46:	67da      	str	r2, [r3, #124]	@ 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a50:	d107      	bne.n	8003a62 <HAL_UART_Transmit_IT+0x6a>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d103      	bne.n	8003a62 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	4a13      	ldr	r2, [pc, #76]	@ (8003aac <HAL_UART_Transmit_IT+0xb4>)
 8003a5e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8003a60:	e002      	b.n	8003a68 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	4a12      	ldr	r2, [pc, #72]	@ (8003ab0 <HAL_UART_Transmit_IT+0xb8>)
 8003a66:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	e853 3f00 	ldrex	r3, [r3]
 8003a74:	613b      	str	r3, [r7, #16]
   return(result);
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	461a      	mov	r2, r3
 8003a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a86:	623b      	str	r3, [r7, #32]
 8003a88:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a8a:	69f9      	ldr	r1, [r7, #28]
 8003a8c:	6a3a      	ldr	r2, [r7, #32]
 8003a8e:	e841 2300 	strex	r3, r2, [r1]
 8003a92:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1e6      	bne.n	8003a68 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	e000      	b.n	8003aa0 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8003a9e:	2302      	movs	r3, #2
  }
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	372c      	adds	r7, #44	@ 0x2c
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr
 8003aac:	08004d57 	.word	0x08004d57
 8003ab0:	08004ca1 	.word	0x08004ca1

08003ab4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b08a      	sub	sp, #40	@ 0x28
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ac8:	2b20      	cmp	r3, #32
 8003aca:	d137      	bne.n	8003b3c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d002      	beq.n	8003ad8 <HAL_UART_Receive_IT+0x24>
 8003ad2:	88fb      	ldrh	r3, [r7, #6]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d101      	bne.n	8003adc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e030      	b.n	8003b3e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a18      	ldr	r2, [pc, #96]	@ (8003b48 <HAL_UART_Receive_IT+0x94>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d01f      	beq.n	8003b2c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d018      	beq.n	8003b2c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	e853 3f00 	ldrex	r3, [r3]
 8003b06:	613b      	str	r3, [r7, #16]
   return(result);
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003b0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	461a      	mov	r2, r3
 8003b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b18:	623b      	str	r3, [r7, #32]
 8003b1a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b1c:	69f9      	ldr	r1, [r7, #28]
 8003b1e:	6a3a      	ldr	r2, [r7, #32]
 8003b20:	e841 2300 	strex	r3, r2, [r1]
 8003b24:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d1e6      	bne.n	8003afa <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003b2c:	88fb      	ldrh	r3, [r7, #6]
 8003b2e:	461a      	mov	r2, r3
 8003b30:	68b9      	ldr	r1, [r7, #8]
 8003b32:	68f8      	ldr	r0, [r7, #12]
 8003b34:	f000 ff74 	bl	8004a20 <UART_Start_Receive_IT>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	e000      	b.n	8003b3e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003b3c:	2302      	movs	r3, #2
  }
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3728      	adds	r7, #40	@ 0x28
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	40008000 	.word	0x40008000

08003b4c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b0ba      	sub	sp, #232	@ 0xe8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	69db      	ldr	r3, [r3, #28]
 8003b5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003b72:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003b76:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003b80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d115      	bne.n	8003bb4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003b88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b8c:	f003 0320 	and.w	r3, r3, #32
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d00f      	beq.n	8003bb4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003b94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b98:	f003 0320 	and.w	r3, r3, #32
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d009      	beq.n	8003bb4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f000 82ae 	beq.w	8004106 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	4798      	blx	r3
      }
      return;
 8003bb2:	e2a8      	b.n	8004106 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003bb4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	f000 8117 	beq.w	8003dec <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003bbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d106      	bne.n	8003bd8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003bca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003bce:	4b85      	ldr	r3, [pc, #532]	@ (8003de4 <HAL_UART_IRQHandler+0x298>)
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f000 810a 	beq.w	8003dec <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003bd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bdc:	f003 0301 	and.w	r3, r3, #1
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d011      	beq.n	8003c08 <HAL_UART_IRQHandler+0xbc>
 8003be4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003be8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d00b      	beq.n	8003c08 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bfe:	f043 0201 	orr.w	r2, r3, #1
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c0c:	f003 0302 	and.w	r3, r3, #2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d011      	beq.n	8003c38 <HAL_UART_IRQHandler+0xec>
 8003c14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c18:	f003 0301 	and.w	r3, r3, #1
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d00b      	beq.n	8003c38 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2202      	movs	r2, #2
 8003c26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c2e:	f043 0204 	orr.w	r2, r3, #4
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c3c:	f003 0304 	and.w	r3, r3, #4
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d011      	beq.n	8003c68 <HAL_UART_IRQHandler+0x11c>
 8003c44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c48:	f003 0301 	and.w	r3, r3, #1
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d00b      	beq.n	8003c68 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2204      	movs	r2, #4
 8003c56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c5e:	f043 0202 	orr.w	r2, r3, #2
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003c68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c6c:	f003 0308 	and.w	r3, r3, #8
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d017      	beq.n	8003ca4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003c74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c78:	f003 0320 	and.w	r3, r3, #32
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d105      	bne.n	8003c8c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003c80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c84:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00b      	beq.n	8003ca4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2208      	movs	r2, #8
 8003c92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c9a:	f043 0208 	orr.w	r2, r3, #8
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003ca4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ca8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d012      	beq.n	8003cd6 <HAL_UART_IRQHandler+0x18a>
 8003cb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cb4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00c      	beq.n	8003cd6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003cc4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ccc:	f043 0220 	orr.w	r2, r3, #32
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	f000 8214 	beq.w	800410a <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ce6:	f003 0320 	and.w	r3, r3, #32
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00d      	beq.n	8003d0a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003cee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cf2:	f003 0320 	and.w	r3, r3, #32
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d007      	beq.n	8003d0a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d003      	beq.n	8003d0a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d10:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d1e:	2b40      	cmp	r3, #64	@ 0x40
 8003d20:	d005      	beq.n	8003d2e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003d22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d26:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d04f      	beq.n	8003dce <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 ff3c 	bl	8004bac <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d3e:	2b40      	cmp	r3, #64	@ 0x40
 8003d40:	d141      	bne.n	8003dc6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	3308      	adds	r3, #8
 8003d48:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003d50:	e853 3f00 	ldrex	r3, [r3]
 8003d54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003d58:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	3308      	adds	r3, #8
 8003d6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003d6e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003d72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003d7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003d7e:	e841 2300 	strex	r3, r2, [r1]
 8003d82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003d86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1d9      	bne.n	8003d42 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d013      	beq.n	8003dbe <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d9a:	4a13      	ldr	r2, [pc, #76]	@ (8003de8 <HAL_UART_IRQHandler+0x29c>)
 8003d9c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7fe f813 	bl	8001dce <HAL_DMA_Abort_IT>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d017      	beq.n	8003dde <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003db8:	4610      	mov	r0, r2
 8003dba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dbc:	e00f      	b.n	8003dde <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 f9ae 	bl	8004120 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dc4:	e00b      	b.n	8003dde <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 f9aa 	bl	8004120 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dcc:	e007      	b.n	8003dde <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 f9a6 	bl	8004120 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003ddc:	e195      	b.n	800410a <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dde:	bf00      	nop
    return;
 8003de0:	e193      	b.n	800410a <HAL_UART_IRQHandler+0x5be>
 8003de2:	bf00      	nop
 8003de4:	04000120 	.word	0x04000120
 8003de8:	08004c75 	.word	0x08004c75

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	f040 814e 	bne.w	8004092 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dfa:	f003 0310 	and.w	r3, r3, #16
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	f000 8147 	beq.w	8004092 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003e04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e08:	f003 0310 	and.w	r3, r3, #16
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f000 8140 	beq.w	8004092 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	2210      	movs	r2, #16
 8003e18:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e24:	2b40      	cmp	r3, #64	@ 0x40
 8003e26:	f040 80b8 	bne.w	8003f9a <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e36:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	f000 8167 	beq.w	800410e <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003e46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	f080 815f 	bcs.w	800410e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e56:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0320 	and.w	r3, r3, #32
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	f040 8086 	bne.w	8003f78 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e74:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003e78:	e853 3f00 	ldrex	r3, [r3]
 8003e7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003e80:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003e84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e88:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	461a      	mov	r2, r3
 8003e92:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003e96:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003e9a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003ea2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003ea6:	e841 2300 	strex	r3, r2, [r1]
 8003eaa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003eae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d1da      	bne.n	8003e6c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	3308      	adds	r3, #8
 8003ebc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ebe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ec0:	e853 3f00 	ldrex	r3, [r3]
 8003ec4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003ec6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003ec8:	f023 0301 	bic.w	r3, r3, #1
 8003ecc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	3308      	adds	r3, #8
 8003ed6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003eda:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003ede:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003ee2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003ee6:	e841 2300 	strex	r3, r2, [r1]
 8003eea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003eec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1e1      	bne.n	8003eb6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	3308      	adds	r3, #8
 8003ef8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003efc:	e853 3f00 	ldrex	r3, [r3]
 8003f00:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003f02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	3308      	adds	r3, #8
 8003f12:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003f16:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003f18:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003f1c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003f1e:	e841 2300 	strex	r3, r2, [r1]
 8003f22:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003f24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1e3      	bne.n	8003ef2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2220      	movs	r2, #32
 8003f2e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f40:	e853 3f00 	ldrex	r3, [r3]
 8003f44:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003f46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f48:	f023 0310 	bic.w	r3, r3, #16
 8003f4c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	461a      	mov	r2, r3
 8003f56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003f5a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003f5c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003f60:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003f62:	e841 2300 	strex	r3, r2, [r1]
 8003f66:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003f68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1e4      	bne.n	8003f38 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7fd feed 	bl	8001d52 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2202      	movs	r2, #2
 8003f7c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	4619      	mov	r1, r3
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 f8ce 	bl	8004134 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003f98:	e0b9      	b.n	800410e <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	f000 80ab 	beq.w	8004112 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8003fbc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f000 80a6 	beq.w	8004112 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fce:	e853 3f00 	ldrex	r3, [r3]
 8003fd2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003fd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fd6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003fda:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003fe8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fea:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003fee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ff0:	e841 2300 	strex	r3, r2, [r1]
 8003ff4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ff6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1e4      	bne.n	8003fc6 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	3308      	adds	r3, #8
 8004002:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004006:	e853 3f00 	ldrex	r3, [r3]
 800400a:	623b      	str	r3, [r7, #32]
   return(result);
 800400c:	6a3b      	ldr	r3, [r7, #32]
 800400e:	f023 0301 	bic.w	r3, r3, #1
 8004012:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	3308      	adds	r3, #8
 800401c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004020:	633a      	str	r2, [r7, #48]	@ 0x30
 8004022:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004024:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004026:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004028:	e841 2300 	strex	r3, r2, [r1]
 800402c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800402e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1e3      	bne.n	8003ffc <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2220      	movs	r2, #32
 8004038:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	e853 3f00 	ldrex	r3, [r3]
 8004054:	60fb      	str	r3, [r7, #12]
   return(result);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f023 0310 	bic.w	r3, r3, #16
 800405c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	461a      	mov	r2, r3
 8004066:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800406a:	61fb      	str	r3, [r7, #28]
 800406c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406e:	69b9      	ldr	r1, [r7, #24]
 8004070:	69fa      	ldr	r2, [r7, #28]
 8004072:	e841 2300 	strex	r3, r2, [r1]
 8004076:	617b      	str	r3, [r7, #20]
   return(result);
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1e4      	bne.n	8004048 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2202      	movs	r2, #2
 8004082:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004084:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004088:	4619      	mov	r1, r3
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 f852 	bl	8004134 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004090:	e03f      	b.n	8004112 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004096:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00e      	beq.n	80040bc <HAL_UART_IRQHandler+0x570>
 800409e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d008      	beq.n	80040bc <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80040b2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f001 f895 	bl	80051e4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80040ba:	e02d      	b.n	8004118 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80040bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d00e      	beq.n	80040e6 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80040c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d008      	beq.n	80040e6 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d01c      	beq.n	8004116 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	4798      	blx	r3
    }
    return;
 80040e4:	e017      	b.n	8004116 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80040e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d012      	beq.n	8004118 <HAL_UART_IRQHandler+0x5cc>
 80040f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00c      	beq.n	8004118 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 fe89 	bl	8004e16 <UART_EndTransmit_IT>
    return;
 8004104:	e008      	b.n	8004118 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004106:	bf00      	nop
 8004108:	e006      	b.n	8004118 <HAL_UART_IRQHandler+0x5cc>
    return;
 800410a:	bf00      	nop
 800410c:	e004      	b.n	8004118 <HAL_UART_IRQHandler+0x5cc>
      return;
 800410e:	bf00      	nop
 8004110:	e002      	b.n	8004118 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004112:	bf00      	nop
 8004114:	e000      	b.n	8004118 <HAL_UART_IRQHandler+0x5cc>
    return;
 8004116:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004118:	37e8      	adds	r7, #232	@ 0xe8
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop

08004120 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	460b      	mov	r3, r1
 800413e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800414c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004150:	b08a      	sub	sp, #40	@ 0x28
 8004152:	af00      	add	r7, sp, #0
 8004154:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004156:	2300      	movs	r3, #0
 8004158:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	689a      	ldr	r2, [r3, #8]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	691b      	ldr	r3, [r3, #16]
 8004164:	431a      	orrs	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	431a      	orrs	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	69db      	ldr	r3, [r3, #28]
 8004170:	4313      	orrs	r3, r2
 8004172:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	4ba4      	ldr	r3, [pc, #656]	@ (800440c <UART_SetConfig+0x2c0>)
 800417c:	4013      	ands	r3, r2
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	6812      	ldr	r2, [r2, #0]
 8004182:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004184:	430b      	orrs	r3, r1
 8004186:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	68da      	ldr	r2, [r3, #12]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	430a      	orrs	r2, r1
 800419c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a99      	ldr	r2, [pc, #612]	@ (8004410 <UART_SetConfig+0x2c4>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d004      	beq.n	80041b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6a1b      	ldr	r3, [r3, #32]
 80041b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041b4:	4313      	orrs	r3, r2
 80041b6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041c8:	430a      	orrs	r2, r1
 80041ca:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a90      	ldr	r2, [pc, #576]	@ (8004414 <UART_SetConfig+0x2c8>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d126      	bne.n	8004224 <UART_SetConfig+0xd8>
 80041d6:	4b90      	ldr	r3, [pc, #576]	@ (8004418 <UART_SetConfig+0x2cc>)
 80041d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041dc:	f003 0303 	and.w	r3, r3, #3
 80041e0:	2b03      	cmp	r3, #3
 80041e2:	d81b      	bhi.n	800421c <UART_SetConfig+0xd0>
 80041e4:	a201      	add	r2, pc, #4	@ (adr r2, 80041ec <UART_SetConfig+0xa0>)
 80041e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ea:	bf00      	nop
 80041ec:	080041fd 	.word	0x080041fd
 80041f0:	0800420d 	.word	0x0800420d
 80041f4:	08004205 	.word	0x08004205
 80041f8:	08004215 	.word	0x08004215
 80041fc:	2301      	movs	r3, #1
 80041fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004202:	e116      	b.n	8004432 <UART_SetConfig+0x2e6>
 8004204:	2302      	movs	r3, #2
 8004206:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800420a:	e112      	b.n	8004432 <UART_SetConfig+0x2e6>
 800420c:	2304      	movs	r3, #4
 800420e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004212:	e10e      	b.n	8004432 <UART_SetConfig+0x2e6>
 8004214:	2308      	movs	r3, #8
 8004216:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800421a:	e10a      	b.n	8004432 <UART_SetConfig+0x2e6>
 800421c:	2310      	movs	r3, #16
 800421e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004222:	e106      	b.n	8004432 <UART_SetConfig+0x2e6>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a7c      	ldr	r2, [pc, #496]	@ (800441c <UART_SetConfig+0x2d0>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d138      	bne.n	80042a0 <UART_SetConfig+0x154>
 800422e:	4b7a      	ldr	r3, [pc, #488]	@ (8004418 <UART_SetConfig+0x2cc>)
 8004230:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004234:	f003 030c 	and.w	r3, r3, #12
 8004238:	2b0c      	cmp	r3, #12
 800423a:	d82d      	bhi.n	8004298 <UART_SetConfig+0x14c>
 800423c:	a201      	add	r2, pc, #4	@ (adr r2, 8004244 <UART_SetConfig+0xf8>)
 800423e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004242:	bf00      	nop
 8004244:	08004279 	.word	0x08004279
 8004248:	08004299 	.word	0x08004299
 800424c:	08004299 	.word	0x08004299
 8004250:	08004299 	.word	0x08004299
 8004254:	08004289 	.word	0x08004289
 8004258:	08004299 	.word	0x08004299
 800425c:	08004299 	.word	0x08004299
 8004260:	08004299 	.word	0x08004299
 8004264:	08004281 	.word	0x08004281
 8004268:	08004299 	.word	0x08004299
 800426c:	08004299 	.word	0x08004299
 8004270:	08004299 	.word	0x08004299
 8004274:	08004291 	.word	0x08004291
 8004278:	2300      	movs	r3, #0
 800427a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800427e:	e0d8      	b.n	8004432 <UART_SetConfig+0x2e6>
 8004280:	2302      	movs	r3, #2
 8004282:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004286:	e0d4      	b.n	8004432 <UART_SetConfig+0x2e6>
 8004288:	2304      	movs	r3, #4
 800428a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800428e:	e0d0      	b.n	8004432 <UART_SetConfig+0x2e6>
 8004290:	2308      	movs	r3, #8
 8004292:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004296:	e0cc      	b.n	8004432 <UART_SetConfig+0x2e6>
 8004298:	2310      	movs	r3, #16
 800429a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800429e:	e0c8      	b.n	8004432 <UART_SetConfig+0x2e6>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a5e      	ldr	r2, [pc, #376]	@ (8004420 <UART_SetConfig+0x2d4>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d125      	bne.n	80042f6 <UART_SetConfig+0x1aa>
 80042aa:	4b5b      	ldr	r3, [pc, #364]	@ (8004418 <UART_SetConfig+0x2cc>)
 80042ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042b0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80042b4:	2b30      	cmp	r3, #48	@ 0x30
 80042b6:	d016      	beq.n	80042e6 <UART_SetConfig+0x19a>
 80042b8:	2b30      	cmp	r3, #48	@ 0x30
 80042ba:	d818      	bhi.n	80042ee <UART_SetConfig+0x1a2>
 80042bc:	2b20      	cmp	r3, #32
 80042be:	d00a      	beq.n	80042d6 <UART_SetConfig+0x18a>
 80042c0:	2b20      	cmp	r3, #32
 80042c2:	d814      	bhi.n	80042ee <UART_SetConfig+0x1a2>
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d002      	beq.n	80042ce <UART_SetConfig+0x182>
 80042c8:	2b10      	cmp	r3, #16
 80042ca:	d008      	beq.n	80042de <UART_SetConfig+0x192>
 80042cc:	e00f      	b.n	80042ee <UART_SetConfig+0x1a2>
 80042ce:	2300      	movs	r3, #0
 80042d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042d4:	e0ad      	b.n	8004432 <UART_SetConfig+0x2e6>
 80042d6:	2302      	movs	r3, #2
 80042d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042dc:	e0a9      	b.n	8004432 <UART_SetConfig+0x2e6>
 80042de:	2304      	movs	r3, #4
 80042e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042e4:	e0a5      	b.n	8004432 <UART_SetConfig+0x2e6>
 80042e6:	2308      	movs	r3, #8
 80042e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042ec:	e0a1      	b.n	8004432 <UART_SetConfig+0x2e6>
 80042ee:	2310      	movs	r3, #16
 80042f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042f4:	e09d      	b.n	8004432 <UART_SetConfig+0x2e6>
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a4a      	ldr	r2, [pc, #296]	@ (8004424 <UART_SetConfig+0x2d8>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d125      	bne.n	800434c <UART_SetConfig+0x200>
 8004300:	4b45      	ldr	r3, [pc, #276]	@ (8004418 <UART_SetConfig+0x2cc>)
 8004302:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004306:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800430a:	2bc0      	cmp	r3, #192	@ 0xc0
 800430c:	d016      	beq.n	800433c <UART_SetConfig+0x1f0>
 800430e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004310:	d818      	bhi.n	8004344 <UART_SetConfig+0x1f8>
 8004312:	2b80      	cmp	r3, #128	@ 0x80
 8004314:	d00a      	beq.n	800432c <UART_SetConfig+0x1e0>
 8004316:	2b80      	cmp	r3, #128	@ 0x80
 8004318:	d814      	bhi.n	8004344 <UART_SetConfig+0x1f8>
 800431a:	2b00      	cmp	r3, #0
 800431c:	d002      	beq.n	8004324 <UART_SetConfig+0x1d8>
 800431e:	2b40      	cmp	r3, #64	@ 0x40
 8004320:	d008      	beq.n	8004334 <UART_SetConfig+0x1e8>
 8004322:	e00f      	b.n	8004344 <UART_SetConfig+0x1f8>
 8004324:	2300      	movs	r3, #0
 8004326:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800432a:	e082      	b.n	8004432 <UART_SetConfig+0x2e6>
 800432c:	2302      	movs	r3, #2
 800432e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004332:	e07e      	b.n	8004432 <UART_SetConfig+0x2e6>
 8004334:	2304      	movs	r3, #4
 8004336:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800433a:	e07a      	b.n	8004432 <UART_SetConfig+0x2e6>
 800433c:	2308      	movs	r3, #8
 800433e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004342:	e076      	b.n	8004432 <UART_SetConfig+0x2e6>
 8004344:	2310      	movs	r3, #16
 8004346:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800434a:	e072      	b.n	8004432 <UART_SetConfig+0x2e6>
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a35      	ldr	r2, [pc, #212]	@ (8004428 <UART_SetConfig+0x2dc>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d12a      	bne.n	80043ac <UART_SetConfig+0x260>
 8004356:	4b30      	ldr	r3, [pc, #192]	@ (8004418 <UART_SetConfig+0x2cc>)
 8004358:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800435c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004360:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004364:	d01a      	beq.n	800439c <UART_SetConfig+0x250>
 8004366:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800436a:	d81b      	bhi.n	80043a4 <UART_SetConfig+0x258>
 800436c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004370:	d00c      	beq.n	800438c <UART_SetConfig+0x240>
 8004372:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004376:	d815      	bhi.n	80043a4 <UART_SetConfig+0x258>
 8004378:	2b00      	cmp	r3, #0
 800437a:	d003      	beq.n	8004384 <UART_SetConfig+0x238>
 800437c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004380:	d008      	beq.n	8004394 <UART_SetConfig+0x248>
 8004382:	e00f      	b.n	80043a4 <UART_SetConfig+0x258>
 8004384:	2300      	movs	r3, #0
 8004386:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800438a:	e052      	b.n	8004432 <UART_SetConfig+0x2e6>
 800438c:	2302      	movs	r3, #2
 800438e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004392:	e04e      	b.n	8004432 <UART_SetConfig+0x2e6>
 8004394:	2304      	movs	r3, #4
 8004396:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800439a:	e04a      	b.n	8004432 <UART_SetConfig+0x2e6>
 800439c:	2308      	movs	r3, #8
 800439e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043a2:	e046      	b.n	8004432 <UART_SetConfig+0x2e6>
 80043a4:	2310      	movs	r3, #16
 80043a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043aa:	e042      	b.n	8004432 <UART_SetConfig+0x2e6>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a17      	ldr	r2, [pc, #92]	@ (8004410 <UART_SetConfig+0x2c4>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d13a      	bne.n	800442c <UART_SetConfig+0x2e0>
 80043b6:	4b18      	ldr	r3, [pc, #96]	@ (8004418 <UART_SetConfig+0x2cc>)
 80043b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043bc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80043c0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80043c4:	d01a      	beq.n	80043fc <UART_SetConfig+0x2b0>
 80043c6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80043ca:	d81b      	bhi.n	8004404 <UART_SetConfig+0x2b8>
 80043cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043d0:	d00c      	beq.n	80043ec <UART_SetConfig+0x2a0>
 80043d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043d6:	d815      	bhi.n	8004404 <UART_SetConfig+0x2b8>
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d003      	beq.n	80043e4 <UART_SetConfig+0x298>
 80043dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043e0:	d008      	beq.n	80043f4 <UART_SetConfig+0x2a8>
 80043e2:	e00f      	b.n	8004404 <UART_SetConfig+0x2b8>
 80043e4:	2300      	movs	r3, #0
 80043e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043ea:	e022      	b.n	8004432 <UART_SetConfig+0x2e6>
 80043ec:	2302      	movs	r3, #2
 80043ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043f2:	e01e      	b.n	8004432 <UART_SetConfig+0x2e6>
 80043f4:	2304      	movs	r3, #4
 80043f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043fa:	e01a      	b.n	8004432 <UART_SetConfig+0x2e6>
 80043fc:	2308      	movs	r3, #8
 80043fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004402:	e016      	b.n	8004432 <UART_SetConfig+0x2e6>
 8004404:	2310      	movs	r3, #16
 8004406:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800440a:	e012      	b.n	8004432 <UART_SetConfig+0x2e6>
 800440c:	efff69f3 	.word	0xefff69f3
 8004410:	40008000 	.word	0x40008000
 8004414:	40013800 	.word	0x40013800
 8004418:	40021000 	.word	0x40021000
 800441c:	40004400 	.word	0x40004400
 8004420:	40004800 	.word	0x40004800
 8004424:	40004c00 	.word	0x40004c00
 8004428:	40005000 	.word	0x40005000
 800442c:	2310      	movs	r3, #16
 800442e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a9f      	ldr	r2, [pc, #636]	@ (80046b4 <UART_SetConfig+0x568>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d17a      	bne.n	8004532 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800443c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004440:	2b08      	cmp	r3, #8
 8004442:	d824      	bhi.n	800448e <UART_SetConfig+0x342>
 8004444:	a201      	add	r2, pc, #4	@ (adr r2, 800444c <UART_SetConfig+0x300>)
 8004446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800444a:	bf00      	nop
 800444c:	08004471 	.word	0x08004471
 8004450:	0800448f 	.word	0x0800448f
 8004454:	08004479 	.word	0x08004479
 8004458:	0800448f 	.word	0x0800448f
 800445c:	0800447f 	.word	0x0800447f
 8004460:	0800448f 	.word	0x0800448f
 8004464:	0800448f 	.word	0x0800448f
 8004468:	0800448f 	.word	0x0800448f
 800446c:	08004487 	.word	0x08004487
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004470:	f7fe fc88 	bl	8002d84 <HAL_RCC_GetPCLK1Freq>
 8004474:	61f8      	str	r0, [r7, #28]
        break;
 8004476:	e010      	b.n	800449a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004478:	4b8f      	ldr	r3, [pc, #572]	@ (80046b8 <UART_SetConfig+0x56c>)
 800447a:	61fb      	str	r3, [r7, #28]
        break;
 800447c:	e00d      	b.n	800449a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800447e:	f7fe fbe9 	bl	8002c54 <HAL_RCC_GetSysClockFreq>
 8004482:	61f8      	str	r0, [r7, #28]
        break;
 8004484:	e009      	b.n	800449a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004486:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800448a:	61fb      	str	r3, [r7, #28]
        break;
 800448c:	e005      	b.n	800449a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800448e:	2300      	movs	r3, #0
 8004490:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004498:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	2b00      	cmp	r3, #0
 800449e:	f000 80fb 	beq.w	8004698 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	685a      	ldr	r2, [r3, #4]
 80044a6:	4613      	mov	r3, r2
 80044a8:	005b      	lsls	r3, r3, #1
 80044aa:	4413      	add	r3, r2
 80044ac:	69fa      	ldr	r2, [r7, #28]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d305      	bcc.n	80044be <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80044b8:	69fa      	ldr	r2, [r7, #28]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d903      	bls.n	80044c6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80044c4:	e0e8      	b.n	8004698 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	2200      	movs	r2, #0
 80044ca:	461c      	mov	r4, r3
 80044cc:	4615      	mov	r5, r2
 80044ce:	f04f 0200 	mov.w	r2, #0
 80044d2:	f04f 0300 	mov.w	r3, #0
 80044d6:	022b      	lsls	r3, r5, #8
 80044d8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80044dc:	0222      	lsls	r2, r4, #8
 80044de:	68f9      	ldr	r1, [r7, #12]
 80044e0:	6849      	ldr	r1, [r1, #4]
 80044e2:	0849      	lsrs	r1, r1, #1
 80044e4:	2000      	movs	r0, #0
 80044e6:	4688      	mov	r8, r1
 80044e8:	4681      	mov	r9, r0
 80044ea:	eb12 0a08 	adds.w	sl, r2, r8
 80044ee:	eb43 0b09 	adc.w	fp, r3, r9
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	603b      	str	r3, [r7, #0]
 80044fa:	607a      	str	r2, [r7, #4]
 80044fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004500:	4650      	mov	r0, sl
 8004502:	4659      	mov	r1, fp
 8004504:	f7fc fb70 	bl	8000be8 <__aeabi_uldivmod>
 8004508:	4602      	mov	r2, r0
 800450a:	460b      	mov	r3, r1
 800450c:	4613      	mov	r3, r2
 800450e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004516:	d308      	bcc.n	800452a <UART_SetConfig+0x3de>
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800451e:	d204      	bcs.n	800452a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	60da      	str	r2, [r3, #12]
 8004528:	e0b6      	b.n	8004698 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004530:	e0b2      	b.n	8004698 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	69db      	ldr	r3, [r3, #28]
 8004536:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800453a:	d15e      	bne.n	80045fa <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800453c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004540:	2b08      	cmp	r3, #8
 8004542:	d828      	bhi.n	8004596 <UART_SetConfig+0x44a>
 8004544:	a201      	add	r2, pc, #4	@ (adr r2, 800454c <UART_SetConfig+0x400>)
 8004546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800454a:	bf00      	nop
 800454c:	08004571 	.word	0x08004571
 8004550:	08004579 	.word	0x08004579
 8004554:	08004581 	.word	0x08004581
 8004558:	08004597 	.word	0x08004597
 800455c:	08004587 	.word	0x08004587
 8004560:	08004597 	.word	0x08004597
 8004564:	08004597 	.word	0x08004597
 8004568:	08004597 	.word	0x08004597
 800456c:	0800458f 	.word	0x0800458f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004570:	f7fe fc08 	bl	8002d84 <HAL_RCC_GetPCLK1Freq>
 8004574:	61f8      	str	r0, [r7, #28]
        break;
 8004576:	e014      	b.n	80045a2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004578:	f7fe fc1a 	bl	8002db0 <HAL_RCC_GetPCLK2Freq>
 800457c:	61f8      	str	r0, [r7, #28]
        break;
 800457e:	e010      	b.n	80045a2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004580:	4b4d      	ldr	r3, [pc, #308]	@ (80046b8 <UART_SetConfig+0x56c>)
 8004582:	61fb      	str	r3, [r7, #28]
        break;
 8004584:	e00d      	b.n	80045a2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004586:	f7fe fb65 	bl	8002c54 <HAL_RCC_GetSysClockFreq>
 800458a:	61f8      	str	r0, [r7, #28]
        break;
 800458c:	e009      	b.n	80045a2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800458e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004592:	61fb      	str	r3, [r7, #28]
        break;
 8004594:	e005      	b.n	80045a2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004596:	2300      	movs	r3, #0
 8004598:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80045a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d077      	beq.n	8004698 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	005a      	lsls	r2, r3, #1
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	085b      	lsrs	r3, r3, #1
 80045b2:	441a      	add	r2, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045bc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	2b0f      	cmp	r3, #15
 80045c2:	d916      	bls.n	80045f2 <UART_SetConfig+0x4a6>
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045ca:	d212      	bcs.n	80045f2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	f023 030f 	bic.w	r3, r3, #15
 80045d4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	085b      	lsrs	r3, r3, #1
 80045da:	b29b      	uxth	r3, r3
 80045dc:	f003 0307 	and.w	r3, r3, #7
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	8afb      	ldrh	r3, [r7, #22]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	8afa      	ldrh	r2, [r7, #22]
 80045ee:	60da      	str	r2, [r3, #12]
 80045f0:	e052      	b.n	8004698 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80045f8:	e04e      	b.n	8004698 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80045fa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80045fe:	2b08      	cmp	r3, #8
 8004600:	d827      	bhi.n	8004652 <UART_SetConfig+0x506>
 8004602:	a201      	add	r2, pc, #4	@ (adr r2, 8004608 <UART_SetConfig+0x4bc>)
 8004604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004608:	0800462d 	.word	0x0800462d
 800460c:	08004635 	.word	0x08004635
 8004610:	0800463d 	.word	0x0800463d
 8004614:	08004653 	.word	0x08004653
 8004618:	08004643 	.word	0x08004643
 800461c:	08004653 	.word	0x08004653
 8004620:	08004653 	.word	0x08004653
 8004624:	08004653 	.word	0x08004653
 8004628:	0800464b 	.word	0x0800464b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800462c:	f7fe fbaa 	bl	8002d84 <HAL_RCC_GetPCLK1Freq>
 8004630:	61f8      	str	r0, [r7, #28]
        break;
 8004632:	e014      	b.n	800465e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004634:	f7fe fbbc 	bl	8002db0 <HAL_RCC_GetPCLK2Freq>
 8004638:	61f8      	str	r0, [r7, #28]
        break;
 800463a:	e010      	b.n	800465e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800463c:	4b1e      	ldr	r3, [pc, #120]	@ (80046b8 <UART_SetConfig+0x56c>)
 800463e:	61fb      	str	r3, [r7, #28]
        break;
 8004640:	e00d      	b.n	800465e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004642:	f7fe fb07 	bl	8002c54 <HAL_RCC_GetSysClockFreq>
 8004646:	61f8      	str	r0, [r7, #28]
        break;
 8004648:	e009      	b.n	800465e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800464a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800464e:	61fb      	str	r3, [r7, #28]
        break;
 8004650:	e005      	b.n	800465e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004652:	2300      	movs	r3, #0
 8004654:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800465c:	bf00      	nop
    }

    if (pclk != 0U)
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d019      	beq.n	8004698 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	085a      	lsrs	r2, r3, #1
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	441a      	add	r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	fbb2 f3f3 	udiv	r3, r2, r3
 8004676:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	2b0f      	cmp	r3, #15
 800467c:	d909      	bls.n	8004692 <UART_SetConfig+0x546>
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004684:	d205      	bcs.n	8004692 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	b29a      	uxth	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	60da      	str	r2, [r3, #12]
 8004690:	e002      	b.n	8004698 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2200      	movs	r2, #0
 800469c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2200      	movs	r2, #0
 80046a2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80046a4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3728      	adds	r7, #40	@ 0x28
 80046ac:	46bd      	mov	sp, r7
 80046ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046b2:	bf00      	nop
 80046b4:	40008000 	.word	0x40008000
 80046b8:	00f42400 	.word	0x00f42400

080046bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c8:	f003 0308 	and.w	r3, r3, #8
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00a      	beq.n	80046e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	430a      	orrs	r2, r1
 80046e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00a      	beq.n	8004708 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	430a      	orrs	r2, r1
 8004706:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800470c:	f003 0302 	and.w	r3, r3, #2
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00a      	beq.n	800472a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	430a      	orrs	r2, r1
 8004728:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800472e:	f003 0304 	and.w	r3, r3, #4
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00a      	beq.n	800474c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	430a      	orrs	r2, r1
 800474a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004750:	f003 0310 	and.w	r3, r3, #16
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00a      	beq.n	800476e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	430a      	orrs	r2, r1
 800476c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004772:	f003 0320 	and.w	r3, r3, #32
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00a      	beq.n	8004790 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	430a      	orrs	r2, r1
 800478e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004798:	2b00      	cmp	r3, #0
 800479a:	d01a      	beq.n	80047d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	430a      	orrs	r2, r1
 80047b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047ba:	d10a      	bne.n	80047d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	430a      	orrs	r2, r1
 80047d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00a      	beq.n	80047f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	430a      	orrs	r2, r1
 80047f2:	605a      	str	r2, [r3, #4]
  }
}
 80047f4:	bf00      	nop
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b098      	sub	sp, #96	@ 0x60
 8004804:	af02      	add	r7, sp, #8
 8004806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004810:	f7fd f982 	bl	8001b18 <HAL_GetTick>
 8004814:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0308 	and.w	r3, r3, #8
 8004820:	2b08      	cmp	r3, #8
 8004822:	d12e      	bne.n	8004882 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004824:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004828:	9300      	str	r3, [sp, #0]
 800482a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800482c:	2200      	movs	r2, #0
 800482e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 f88c 	bl	8004950 <UART_WaitOnFlagUntilTimeout>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d021      	beq.n	8004882 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004846:	e853 3f00 	ldrex	r3, [r3]
 800484a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800484c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800484e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004852:	653b      	str	r3, [r7, #80]	@ 0x50
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	461a      	mov	r2, r3
 800485a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800485c:	647b      	str	r3, [r7, #68]	@ 0x44
 800485e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004860:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004862:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004864:	e841 2300 	strex	r3, r2, [r1]
 8004868:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800486a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800486c:	2b00      	cmp	r3, #0
 800486e:	d1e6      	bne.n	800483e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2220      	movs	r2, #32
 8004874:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e062      	b.n	8004948 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0304 	and.w	r3, r3, #4
 800488c:	2b04      	cmp	r3, #4
 800488e:	d149      	bne.n	8004924 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004890:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004894:	9300      	str	r3, [sp, #0]
 8004896:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004898:	2200      	movs	r2, #0
 800489a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 f856 	bl	8004950 <UART_WaitOnFlagUntilTimeout>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d03c      	beq.n	8004924 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b2:	e853 3f00 	ldrex	r3, [r3]
 80048b6:	623b      	str	r3, [r7, #32]
   return(result);
 80048b8:	6a3b      	ldr	r3, [r7, #32]
 80048ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80048be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	461a      	mov	r2, r3
 80048c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80048ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80048ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048d0:	e841 2300 	strex	r3, r2, [r1]
 80048d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80048d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d1e6      	bne.n	80048aa <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	3308      	adds	r3, #8
 80048e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	e853 3f00 	ldrex	r3, [r3]
 80048ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f023 0301 	bic.w	r3, r3, #1
 80048f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	3308      	adds	r3, #8
 80048fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80048fc:	61fa      	str	r2, [r7, #28]
 80048fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004900:	69b9      	ldr	r1, [r7, #24]
 8004902:	69fa      	ldr	r2, [r7, #28]
 8004904:	e841 2300 	strex	r3, r2, [r1]
 8004908:	617b      	str	r3, [r7, #20]
   return(result);
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d1e5      	bne.n	80048dc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2220      	movs	r2, #32
 8004914:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e011      	b.n	8004948 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2220      	movs	r2, #32
 8004928:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2220      	movs	r2, #32
 800492e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004946:	2300      	movs	r3, #0
}
 8004948:	4618      	mov	r0, r3
 800494a:	3758      	adds	r7, #88	@ 0x58
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}

08004950 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	603b      	str	r3, [r7, #0]
 800495c:	4613      	mov	r3, r2
 800495e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004960:	e049      	b.n	80049f6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004968:	d045      	beq.n	80049f6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800496a:	f7fd f8d5 	bl	8001b18 <HAL_GetTick>
 800496e:	4602      	mov	r2, r0
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	69ba      	ldr	r2, [r7, #24]
 8004976:	429a      	cmp	r2, r3
 8004978:	d302      	bcc.n	8004980 <UART_WaitOnFlagUntilTimeout+0x30>
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d101      	bne.n	8004984 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004980:	2303      	movs	r3, #3
 8004982:	e048      	b.n	8004a16 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0304 	and.w	r3, r3, #4
 800498e:	2b00      	cmp	r3, #0
 8004990:	d031      	beq.n	80049f6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	69db      	ldr	r3, [r3, #28]
 8004998:	f003 0308 	and.w	r3, r3, #8
 800499c:	2b08      	cmp	r3, #8
 800499e:	d110      	bne.n	80049c2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2208      	movs	r2, #8
 80049a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049a8:	68f8      	ldr	r0, [r7, #12]
 80049aa:	f000 f8ff 	bl	8004bac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2208      	movs	r2, #8
 80049b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e029      	b.n	8004a16 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	69db      	ldr	r3, [r3, #28]
 80049c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049d0:	d111      	bne.n	80049f6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80049da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049dc:	68f8      	ldr	r0, [r7, #12]
 80049de:	f000 f8e5 	bl	8004bac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2220      	movs	r2, #32
 80049e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e00f      	b.n	8004a16 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	69da      	ldr	r2, [r3, #28]
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	4013      	ands	r3, r2
 8004a00:	68ba      	ldr	r2, [r7, #8]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	bf0c      	ite	eq
 8004a06:	2301      	moveq	r3, #1
 8004a08:	2300      	movne	r3, #0
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	79fb      	ldrb	r3, [r7, #7]
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d0a6      	beq.n	8004962 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3710      	adds	r7, #16
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
	...

08004a20 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b097      	sub	sp, #92	@ 0x5c
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	68ba      	ldr	r2, [r7, #8]
 8004a32:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	88fa      	ldrh	r2, [r7, #6]
 8004a38:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	88fa      	ldrh	r2, [r7, #6]
 8004a40:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a52:	d10e      	bne.n	8004a72 <UART_Start_Receive_IT+0x52>
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d105      	bne.n	8004a68 <UART_Start_Receive_IT+0x48>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004a62:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004a66:	e02d      	b.n	8004ac4 <UART_Start_Receive_IT+0xa4>
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	22ff      	movs	r2, #255	@ 0xff
 8004a6c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004a70:	e028      	b.n	8004ac4 <UART_Start_Receive_IT+0xa4>
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d10d      	bne.n	8004a96 <UART_Start_Receive_IT+0x76>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d104      	bne.n	8004a8c <UART_Start_Receive_IT+0x6c>
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	22ff      	movs	r2, #255	@ 0xff
 8004a86:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004a8a:	e01b      	b.n	8004ac4 <UART_Start_Receive_IT+0xa4>
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	227f      	movs	r2, #127	@ 0x7f
 8004a90:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004a94:	e016      	b.n	8004ac4 <UART_Start_Receive_IT+0xa4>
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a9e:	d10d      	bne.n	8004abc <UART_Start_Receive_IT+0x9c>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	691b      	ldr	r3, [r3, #16]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d104      	bne.n	8004ab2 <UART_Start_Receive_IT+0x92>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	227f      	movs	r2, #127	@ 0x7f
 8004aac:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004ab0:	e008      	b.n	8004ac4 <UART_Start_Receive_IT+0xa4>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	223f      	movs	r2, #63	@ 0x3f
 8004ab6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004aba:	e003      	b.n	8004ac4 <UART_Start_Receive_IT+0xa4>
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2222      	movs	r2, #34	@ 0x22
 8004ad0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	3308      	adds	r3, #8
 8004ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004adc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ade:	e853 3f00 	ldrex	r3, [r3]
 8004ae2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ae6:	f043 0301 	orr.w	r3, r3, #1
 8004aea:	657b      	str	r3, [r7, #84]	@ 0x54
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	3308      	adds	r3, #8
 8004af2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004af4:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004af6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004afa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004afc:	e841 2300 	strex	r3, r2, [r1]
 8004b00:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004b02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d1e5      	bne.n	8004ad4 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b10:	d107      	bne.n	8004b22 <UART_Start_Receive_IT+0x102>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d103      	bne.n	8004b22 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	4a21      	ldr	r2, [pc, #132]	@ (8004ba4 <UART_Start_Receive_IT+0x184>)
 8004b1e:	669a      	str	r2, [r3, #104]	@ 0x68
 8004b20:	e002      	b.n	8004b28 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	4a20      	ldr	r2, [pc, #128]	@ (8004ba8 <UART_Start_Receive_IT+0x188>)
 8004b26:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d019      	beq.n	8004b64 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b38:	e853 3f00 	ldrex	r3, [r3]
 8004b3c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b40:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004b44:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b50:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b52:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004b54:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004b56:	e841 2300 	strex	r3, r2, [r1]
 8004b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004b5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d1e6      	bne.n	8004b30 <UART_Start_Receive_IT+0x110>
 8004b62:	e018      	b.n	8004b96 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	e853 3f00 	ldrex	r3, [r3]
 8004b70:	613b      	str	r3, [r7, #16]
   return(result);
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	f043 0320 	orr.w	r3, r3, #32
 8004b78:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	461a      	mov	r2, r3
 8004b80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b82:	623b      	str	r3, [r7, #32]
 8004b84:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b86:	69f9      	ldr	r1, [r7, #28]
 8004b88:	6a3a      	ldr	r2, [r7, #32]
 8004b8a:	e841 2300 	strex	r3, r2, [r1]
 8004b8e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d1e6      	bne.n	8004b64 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	375c      	adds	r7, #92	@ 0x5c
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr
 8004ba4:	08005029 	.word	0x08005029
 8004ba8:	08004e6d 	.word	0x08004e6d

08004bac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b095      	sub	sp, #84	@ 0x54
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bbc:	e853 3f00 	ldrex	r3, [r3]
 8004bc0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bc4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004bc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	461a      	mov	r2, r3
 8004bd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bd2:	643b      	str	r3, [r7, #64]	@ 0x40
 8004bd4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004bd8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004bda:	e841 2300 	strex	r3, r2, [r1]
 8004bde:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1e6      	bne.n	8004bb4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	3308      	adds	r3, #8
 8004bec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bee:	6a3b      	ldr	r3, [r7, #32]
 8004bf0:	e853 3f00 	ldrex	r3, [r3]
 8004bf4:	61fb      	str	r3, [r7, #28]
   return(result);
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	f023 0301 	bic.w	r3, r3, #1
 8004bfc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	3308      	adds	r3, #8
 8004c04:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c06:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c08:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c0a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c0e:	e841 2300 	strex	r3, r2, [r1]
 8004c12:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d1e5      	bne.n	8004be6 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d118      	bne.n	8004c54 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	e853 3f00 	ldrex	r3, [r3]
 8004c2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	f023 0310 	bic.w	r3, r3, #16
 8004c36:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c40:	61bb      	str	r3, [r7, #24]
 8004c42:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c44:	6979      	ldr	r1, [r7, #20]
 8004c46:	69ba      	ldr	r2, [r7, #24]
 8004c48:	e841 2300 	strex	r3, r2, [r1]
 8004c4c:	613b      	str	r3, [r7, #16]
   return(result);
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d1e6      	bne.n	8004c22 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2220      	movs	r2, #32
 8004c58:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004c68:	bf00      	nop
 8004c6a:	3754      	adds	r7, #84	@ 0x54
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c80:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2200      	movs	r2, #0
 8004c86:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c92:	68f8      	ldr	r0, [r7, #12]
 8004c94:	f7ff fa44 	bl	8004120 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c98:	bf00      	nop
 8004c9a:	3710      	adds	r7, #16
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b08f      	sub	sp, #60	@ 0x3c
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004cac:	2b21      	cmp	r3, #33	@ 0x21
 8004cae:	d14c      	bne.n	8004d4a <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d132      	bne.n	8004d22 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc2:	6a3b      	ldr	r3, [r7, #32]
 8004cc4:	e853 3f00 	ldrex	r3, [r3]
 8004cc8:	61fb      	str	r3, [r7, #28]
   return(result);
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004cd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cda:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004cdc:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cde:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ce0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ce2:	e841 2300 	strex	r3, r2, [r1]
 8004ce6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1e6      	bne.n	8004cbc <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	e853 3f00 	ldrex	r3, [r3]
 8004cfa:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d02:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	461a      	mov	r2, r3
 8004d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d0c:	61bb      	str	r3, [r7, #24]
 8004d0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d10:	6979      	ldr	r1, [r7, #20]
 8004d12:	69ba      	ldr	r2, [r7, #24]
 8004d14:	e841 2300 	strex	r3, r2, [r1]
 8004d18:	613b      	str	r3, [r7, #16]
   return(result);
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d1e6      	bne.n	8004cee <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004d20:	e013      	b.n	8004d4a <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d26:	781a      	ldrb	r2, [r3, #0]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d32:	1c5a      	adds	r2, r3, #1
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	3b01      	subs	r3, #1
 8004d42:	b29a      	uxth	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8004d4a:	bf00      	nop
 8004d4c:	373c      	adds	r7, #60	@ 0x3c
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr

08004d56 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004d56:	b480      	push	{r7}
 8004d58:	b091      	sub	sp, #68	@ 0x44
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d62:	2b21      	cmp	r3, #33	@ 0x21
 8004d64:	d151      	bne.n	8004e0a <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d132      	bne.n	8004dd8 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d7a:	e853 3f00 	ldrex	r3, [r3]
 8004d7e:	623b      	str	r3, [r7, #32]
   return(result);
 8004d80:	6a3b      	ldr	r3, [r7, #32]
 8004d82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d86:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d90:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d92:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d94:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d98:	e841 2300 	strex	r3, r2, [r1]
 8004d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d1e6      	bne.n	8004d72 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	e853 3f00 	ldrex	r3, [r3]
 8004db0:	60fb      	str	r3, [r7, #12]
   return(result);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004db8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dc2:	61fb      	str	r3, [r7, #28]
 8004dc4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc6:	69b9      	ldr	r1, [r7, #24]
 8004dc8:	69fa      	ldr	r2, [r7, #28]
 8004dca:	e841 2300 	strex	r3, r2, [r1]
 8004dce:	617b      	str	r3, [r7, #20]
   return(result);
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d1e6      	bne.n	8004da4 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004dd6:	e018      	b.n	8004e0a <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004dde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004de0:	881a      	ldrh	r2, [r3, #0]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004dea:	b292      	uxth	r2, r2
 8004dec:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004df2:	1c9a      	adds	r2, r3, #2
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	3b01      	subs	r3, #1
 8004e02:	b29a      	uxth	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8004e0a:	bf00      	nop
 8004e0c:	3744      	adds	r7, #68	@ 0x44
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr

08004e16 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e16:	b580      	push	{r7, lr}
 8004e18:	b088      	sub	sp, #32
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	e853 3f00 	ldrex	r3, [r3]
 8004e2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e32:	61fb      	str	r3, [r7, #28]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	461a      	mov	r2, r3
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	61bb      	str	r3, [r7, #24]
 8004e3e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e40:	6979      	ldr	r1, [r7, #20]
 8004e42:	69ba      	ldr	r2, [r7, #24]
 8004e44:	e841 2300 	strex	r3, r2, [r1]
 8004e48:	613b      	str	r3, [r7, #16]
   return(result);
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d1e6      	bne.n	8004e1e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2220      	movs	r2, #32
 8004e54:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f7fc f9db 	bl	8001218 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e62:	bf00      	nop
 8004e64:	3720      	adds	r7, #32
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
	...

08004e6c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b09c      	sub	sp, #112	@ 0x70
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004e7a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e84:	2b22      	cmp	r3, #34	@ 0x22
 8004e86:	f040 80be 	bne.w	8005006 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004e90:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004e94:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004e98:	b2d9      	uxtb	r1, r3
 8004e9a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004e9e:	b2da      	uxtb	r2, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ea4:	400a      	ands	r2, r1
 8004ea6:	b2d2      	uxtb	r2, r2
 8004ea8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004eae:	1c5a      	adds	r2, r3, #1
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	3b01      	subs	r3, #1
 8004ebe:	b29a      	uxth	r2, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	f040 80a3 	bne.w	800501a <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004edc:	e853 3f00 	ldrex	r3, [r3]
 8004ee0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004ee2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ee4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ee8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	461a      	mov	r2, r3
 8004ef0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004ef2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004ef4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004ef8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004efa:	e841 2300 	strex	r3, r2, [r1]
 8004efe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004f00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1e6      	bne.n	8004ed4 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	3308      	adds	r3, #8
 8004f0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f10:	e853 3f00 	ldrex	r3, [r3]
 8004f14:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004f16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f18:	f023 0301 	bic.w	r3, r3, #1
 8004f1c:	667b      	str	r3, [r7, #100]	@ 0x64
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	3308      	adds	r3, #8
 8004f24:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004f26:	647a      	str	r2, [r7, #68]	@ 0x44
 8004f28:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004f2c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f2e:	e841 2300 	strex	r3, r2, [r1]
 8004f32:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004f34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d1e5      	bne.n	8004f06 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2220      	movs	r2, #32
 8004f3e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a34      	ldr	r2, [pc, #208]	@ (8005024 <UART_RxISR_8BIT+0x1b8>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d01f      	beq.n	8004f98 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d018      	beq.n	8004f98 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f6e:	e853 3f00 	ldrex	r3, [r3]
 8004f72:	623b      	str	r3, [r7, #32]
   return(result);
 8004f74:	6a3b      	ldr	r3, [r7, #32]
 8004f76:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004f7a:	663b      	str	r3, [r7, #96]	@ 0x60
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	461a      	mov	r2, r3
 8004f82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f84:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f86:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f88:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f8c:	e841 2300 	strex	r3, r2, [r1]
 8004f90:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d1e6      	bne.n	8004f66 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d12e      	bne.n	8004ffe <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	e853 3f00 	ldrex	r3, [r3]
 8004fb2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f023 0310 	bic.w	r3, r3, #16
 8004fba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004fc4:	61fb      	str	r3, [r7, #28]
 8004fc6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc8:	69b9      	ldr	r1, [r7, #24]
 8004fca:	69fa      	ldr	r2, [r7, #28]
 8004fcc:	e841 2300 	strex	r3, r2, [r1]
 8004fd0:	617b      	str	r3, [r7, #20]
   return(result);
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d1e6      	bne.n	8004fa6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	69db      	ldr	r3, [r3, #28]
 8004fde:	f003 0310 	and.w	r3, r3, #16
 8004fe2:	2b10      	cmp	r3, #16
 8004fe4:	d103      	bne.n	8004fee <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2210      	movs	r2, #16
 8004fec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f7ff f89c 	bl	8004134 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004ffc:	e00d      	b.n	800501a <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f7fc f8d6 	bl	80011b0 <HAL_UART_RxCpltCallback>
}
 8005004:	e009      	b.n	800501a <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	8b1b      	ldrh	r3, [r3, #24]
 800500c:	b29a      	uxth	r2, r3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f042 0208 	orr.w	r2, r2, #8
 8005016:	b292      	uxth	r2, r2
 8005018:	831a      	strh	r2, [r3, #24]
}
 800501a:	bf00      	nop
 800501c:	3770      	adds	r7, #112	@ 0x70
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	40008000 	.word	0x40008000

08005028 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b09c      	sub	sp, #112	@ 0x70
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005036:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005040:	2b22      	cmp	r3, #34	@ 0x22
 8005042:	f040 80be 	bne.w	80051c2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800504c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005054:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005056:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800505a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800505e:	4013      	ands	r3, r2
 8005060:	b29a      	uxth	r2, r3
 8005062:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005064:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800506a:	1c9a      	adds	r2, r3, #2
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005076:	b29b      	uxth	r3, r3
 8005078:	3b01      	subs	r3, #1
 800507a:	b29a      	uxth	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005088:	b29b      	uxth	r3, r3
 800508a:	2b00      	cmp	r3, #0
 800508c:	f040 80a3 	bne.w	80051d6 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005096:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005098:	e853 3f00 	ldrex	r3, [r3]
 800509c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800509e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050a4:	667b      	str	r3, [r7, #100]	@ 0x64
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	461a      	mov	r2, r3
 80050ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80050ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80050b0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80050b4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80050b6:	e841 2300 	strex	r3, r2, [r1]
 80050ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80050bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d1e6      	bne.n	8005090 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	3308      	adds	r3, #8
 80050c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050cc:	e853 3f00 	ldrex	r3, [r3]
 80050d0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80050d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d4:	f023 0301 	bic.w	r3, r3, #1
 80050d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	3308      	adds	r3, #8
 80050e0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80050e2:	643a      	str	r2, [r7, #64]	@ 0x40
 80050e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80050e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80050ea:	e841 2300 	strex	r3, r2, [r1]
 80050ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80050f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1e5      	bne.n	80050c2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2220      	movs	r2, #32
 80050fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a34      	ldr	r2, [pc, #208]	@ (80051e0 <UART_RxISR_16BIT+0x1b8>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d01f      	beq.n	8005154 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d018      	beq.n	8005154 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005128:	6a3b      	ldr	r3, [r7, #32]
 800512a:	e853 3f00 	ldrex	r3, [r3]
 800512e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005136:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	461a      	mov	r2, r3
 800513e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005140:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005142:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005144:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005146:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005148:	e841 2300 	strex	r3, r2, [r1]
 800514c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800514e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005150:	2b00      	cmp	r3, #0
 8005152:	d1e6      	bne.n	8005122 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005158:	2b01      	cmp	r3, #1
 800515a:	d12e      	bne.n	80051ba <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	e853 3f00 	ldrex	r3, [r3]
 800516e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	f023 0310 	bic.w	r3, r3, #16
 8005176:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	461a      	mov	r2, r3
 800517e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005180:	61bb      	str	r3, [r7, #24]
 8005182:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005184:	6979      	ldr	r1, [r7, #20]
 8005186:	69ba      	ldr	r2, [r7, #24]
 8005188:	e841 2300 	strex	r3, r2, [r1]
 800518c:	613b      	str	r3, [r7, #16]
   return(result);
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d1e6      	bne.n	8005162 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	69db      	ldr	r3, [r3, #28]
 800519a:	f003 0310 	and.w	r3, r3, #16
 800519e:	2b10      	cmp	r3, #16
 80051a0:	d103      	bne.n	80051aa <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	2210      	movs	r2, #16
 80051a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80051b0:	4619      	mov	r1, r3
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f7fe ffbe 	bl	8004134 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80051b8:	e00d      	b.n	80051d6 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f7fb fff8 	bl	80011b0 <HAL_UART_RxCpltCallback>
}
 80051c0:	e009      	b.n	80051d6 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	8b1b      	ldrh	r3, [r3, #24]
 80051c8:	b29a      	uxth	r2, r3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f042 0208 	orr.w	r2, r2, #8
 80051d2:	b292      	uxth	r2, r2
 80051d4:	831a      	strh	r2, [r3, #24]
}
 80051d6:	bf00      	nop
 80051d8:	3770      	adds	r7, #112	@ 0x70
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	40008000 	.word	0x40008000

080051e4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80051ec:	bf00      	nop
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <atof>:
 80051f8:	2100      	movs	r1, #0
 80051fa:	f000 be05 	b.w	8005e08 <strtod>

080051fe <sulp>:
 80051fe:	b570      	push	{r4, r5, r6, lr}
 8005200:	4604      	mov	r4, r0
 8005202:	460d      	mov	r5, r1
 8005204:	ec45 4b10 	vmov	d0, r4, r5
 8005208:	4616      	mov	r6, r2
 800520a:	f003 fab9 	bl	8008780 <__ulp>
 800520e:	ec51 0b10 	vmov	r0, r1, d0
 8005212:	b17e      	cbz	r6, 8005234 <sulp+0x36>
 8005214:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005218:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800521c:	2b00      	cmp	r3, #0
 800521e:	dd09      	ble.n	8005234 <sulp+0x36>
 8005220:	051b      	lsls	r3, r3, #20
 8005222:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8005226:	2400      	movs	r4, #0
 8005228:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800522c:	4622      	mov	r2, r4
 800522e:	462b      	mov	r3, r5
 8005230:	f7fb f9e2 	bl	80005f8 <__aeabi_dmul>
 8005234:	ec41 0b10 	vmov	d0, r0, r1
 8005238:	bd70      	pop	{r4, r5, r6, pc}
 800523a:	0000      	movs	r0, r0
 800523c:	0000      	movs	r0, r0
	...

08005240 <_strtod_l>:
 8005240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005244:	b09f      	sub	sp, #124	@ 0x7c
 8005246:	460c      	mov	r4, r1
 8005248:	9217      	str	r2, [sp, #92]	@ 0x5c
 800524a:	2200      	movs	r2, #0
 800524c:	921a      	str	r2, [sp, #104]	@ 0x68
 800524e:	9005      	str	r0, [sp, #20]
 8005250:	f04f 0a00 	mov.w	sl, #0
 8005254:	f04f 0b00 	mov.w	fp, #0
 8005258:	460a      	mov	r2, r1
 800525a:	9219      	str	r2, [sp, #100]	@ 0x64
 800525c:	7811      	ldrb	r1, [r2, #0]
 800525e:	292b      	cmp	r1, #43	@ 0x2b
 8005260:	d04a      	beq.n	80052f8 <_strtod_l+0xb8>
 8005262:	d838      	bhi.n	80052d6 <_strtod_l+0x96>
 8005264:	290d      	cmp	r1, #13
 8005266:	d832      	bhi.n	80052ce <_strtod_l+0x8e>
 8005268:	2908      	cmp	r1, #8
 800526a:	d832      	bhi.n	80052d2 <_strtod_l+0x92>
 800526c:	2900      	cmp	r1, #0
 800526e:	d03b      	beq.n	80052e8 <_strtod_l+0xa8>
 8005270:	2200      	movs	r2, #0
 8005272:	920b      	str	r2, [sp, #44]	@ 0x2c
 8005274:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8005276:	782a      	ldrb	r2, [r5, #0]
 8005278:	2a30      	cmp	r2, #48	@ 0x30
 800527a:	f040 80b3 	bne.w	80053e4 <_strtod_l+0x1a4>
 800527e:	786a      	ldrb	r2, [r5, #1]
 8005280:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005284:	2a58      	cmp	r2, #88	@ 0x58
 8005286:	d16e      	bne.n	8005366 <_strtod_l+0x126>
 8005288:	9302      	str	r3, [sp, #8]
 800528a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800528c:	9301      	str	r3, [sp, #4]
 800528e:	ab1a      	add	r3, sp, #104	@ 0x68
 8005290:	9300      	str	r3, [sp, #0]
 8005292:	4a8e      	ldr	r2, [pc, #568]	@ (80054cc <_strtod_l+0x28c>)
 8005294:	9805      	ldr	r0, [sp, #20]
 8005296:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005298:	a919      	add	r1, sp, #100	@ 0x64
 800529a:	f002 fb63 	bl	8007964 <__gethex>
 800529e:	f010 060f 	ands.w	r6, r0, #15
 80052a2:	4604      	mov	r4, r0
 80052a4:	d005      	beq.n	80052b2 <_strtod_l+0x72>
 80052a6:	2e06      	cmp	r6, #6
 80052a8:	d128      	bne.n	80052fc <_strtod_l+0xbc>
 80052aa:	3501      	adds	r5, #1
 80052ac:	2300      	movs	r3, #0
 80052ae:	9519      	str	r5, [sp, #100]	@ 0x64
 80052b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80052b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	f040 858e 	bne.w	8005dd6 <_strtod_l+0xb96>
 80052ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80052bc:	b1cb      	cbz	r3, 80052f2 <_strtod_l+0xb2>
 80052be:	4652      	mov	r2, sl
 80052c0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80052c4:	ec43 2b10 	vmov	d0, r2, r3
 80052c8:	b01f      	add	sp, #124	@ 0x7c
 80052ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052ce:	2920      	cmp	r1, #32
 80052d0:	d1ce      	bne.n	8005270 <_strtod_l+0x30>
 80052d2:	3201      	adds	r2, #1
 80052d4:	e7c1      	b.n	800525a <_strtod_l+0x1a>
 80052d6:	292d      	cmp	r1, #45	@ 0x2d
 80052d8:	d1ca      	bne.n	8005270 <_strtod_l+0x30>
 80052da:	2101      	movs	r1, #1
 80052dc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80052de:	1c51      	adds	r1, r2, #1
 80052e0:	9119      	str	r1, [sp, #100]	@ 0x64
 80052e2:	7852      	ldrb	r2, [r2, #1]
 80052e4:	2a00      	cmp	r2, #0
 80052e6:	d1c5      	bne.n	8005274 <_strtod_l+0x34>
 80052e8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80052ea:	9419      	str	r4, [sp, #100]	@ 0x64
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	f040 8570 	bne.w	8005dd2 <_strtod_l+0xb92>
 80052f2:	4652      	mov	r2, sl
 80052f4:	465b      	mov	r3, fp
 80052f6:	e7e5      	b.n	80052c4 <_strtod_l+0x84>
 80052f8:	2100      	movs	r1, #0
 80052fa:	e7ef      	b.n	80052dc <_strtod_l+0x9c>
 80052fc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80052fe:	b13a      	cbz	r2, 8005310 <_strtod_l+0xd0>
 8005300:	2135      	movs	r1, #53	@ 0x35
 8005302:	a81c      	add	r0, sp, #112	@ 0x70
 8005304:	f003 fb36 	bl	8008974 <__copybits>
 8005308:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800530a:	9805      	ldr	r0, [sp, #20]
 800530c:	f002 ff04 	bl	8008118 <_Bfree>
 8005310:	3e01      	subs	r6, #1
 8005312:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8005314:	2e04      	cmp	r6, #4
 8005316:	d806      	bhi.n	8005326 <_strtod_l+0xe6>
 8005318:	e8df f006 	tbb	[pc, r6]
 800531c:	201d0314 	.word	0x201d0314
 8005320:	14          	.byte	0x14
 8005321:	00          	.byte	0x00
 8005322:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8005326:	05e1      	lsls	r1, r4, #23
 8005328:	bf48      	it	mi
 800532a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800532e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005332:	0d1b      	lsrs	r3, r3, #20
 8005334:	051b      	lsls	r3, r3, #20
 8005336:	2b00      	cmp	r3, #0
 8005338:	d1bb      	bne.n	80052b2 <_strtod_l+0x72>
 800533a:	f001 fbaf 	bl	8006a9c <__errno>
 800533e:	2322      	movs	r3, #34	@ 0x22
 8005340:	6003      	str	r3, [r0, #0]
 8005342:	e7b6      	b.n	80052b2 <_strtod_l+0x72>
 8005344:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8005348:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800534c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005350:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005354:	e7e7      	b.n	8005326 <_strtod_l+0xe6>
 8005356:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80054d4 <_strtod_l+0x294>
 800535a:	e7e4      	b.n	8005326 <_strtod_l+0xe6>
 800535c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8005360:	f04f 3aff 	mov.w	sl, #4294967295
 8005364:	e7df      	b.n	8005326 <_strtod_l+0xe6>
 8005366:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005368:	1c5a      	adds	r2, r3, #1
 800536a:	9219      	str	r2, [sp, #100]	@ 0x64
 800536c:	785b      	ldrb	r3, [r3, #1]
 800536e:	2b30      	cmp	r3, #48	@ 0x30
 8005370:	d0f9      	beq.n	8005366 <_strtod_l+0x126>
 8005372:	2b00      	cmp	r3, #0
 8005374:	d09d      	beq.n	80052b2 <_strtod_l+0x72>
 8005376:	2301      	movs	r3, #1
 8005378:	9309      	str	r3, [sp, #36]	@ 0x24
 800537a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800537c:	930c      	str	r3, [sp, #48]	@ 0x30
 800537e:	2300      	movs	r3, #0
 8005380:	9308      	str	r3, [sp, #32]
 8005382:	930a      	str	r3, [sp, #40]	@ 0x28
 8005384:	461f      	mov	r7, r3
 8005386:	220a      	movs	r2, #10
 8005388:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800538a:	7805      	ldrb	r5, [r0, #0]
 800538c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8005390:	b2d9      	uxtb	r1, r3
 8005392:	2909      	cmp	r1, #9
 8005394:	d928      	bls.n	80053e8 <_strtod_l+0x1a8>
 8005396:	494e      	ldr	r1, [pc, #312]	@ (80054d0 <_strtod_l+0x290>)
 8005398:	2201      	movs	r2, #1
 800539a:	f001 fac6 	bl	800692a <strncmp>
 800539e:	2800      	cmp	r0, #0
 80053a0:	d032      	beq.n	8005408 <_strtod_l+0x1c8>
 80053a2:	2000      	movs	r0, #0
 80053a4:	462a      	mov	r2, r5
 80053a6:	4681      	mov	r9, r0
 80053a8:	463d      	mov	r5, r7
 80053aa:	4603      	mov	r3, r0
 80053ac:	2a65      	cmp	r2, #101	@ 0x65
 80053ae:	d001      	beq.n	80053b4 <_strtod_l+0x174>
 80053b0:	2a45      	cmp	r2, #69	@ 0x45
 80053b2:	d114      	bne.n	80053de <_strtod_l+0x19e>
 80053b4:	b91d      	cbnz	r5, 80053be <_strtod_l+0x17e>
 80053b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80053b8:	4302      	orrs	r2, r0
 80053ba:	d095      	beq.n	80052e8 <_strtod_l+0xa8>
 80053bc:	2500      	movs	r5, #0
 80053be:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80053c0:	1c62      	adds	r2, r4, #1
 80053c2:	9219      	str	r2, [sp, #100]	@ 0x64
 80053c4:	7862      	ldrb	r2, [r4, #1]
 80053c6:	2a2b      	cmp	r2, #43	@ 0x2b
 80053c8:	d077      	beq.n	80054ba <_strtod_l+0x27a>
 80053ca:	2a2d      	cmp	r2, #45	@ 0x2d
 80053cc:	d07b      	beq.n	80054c6 <_strtod_l+0x286>
 80053ce:	f04f 0c00 	mov.w	ip, #0
 80053d2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80053d6:	2909      	cmp	r1, #9
 80053d8:	f240 8082 	bls.w	80054e0 <_strtod_l+0x2a0>
 80053dc:	9419      	str	r4, [sp, #100]	@ 0x64
 80053de:	f04f 0800 	mov.w	r8, #0
 80053e2:	e0a2      	b.n	800552a <_strtod_l+0x2ea>
 80053e4:	2300      	movs	r3, #0
 80053e6:	e7c7      	b.n	8005378 <_strtod_l+0x138>
 80053e8:	2f08      	cmp	r7, #8
 80053ea:	bfd5      	itete	le
 80053ec:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80053ee:	9908      	ldrgt	r1, [sp, #32]
 80053f0:	fb02 3301 	mlale	r3, r2, r1, r3
 80053f4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80053f8:	f100 0001 	add.w	r0, r0, #1
 80053fc:	bfd4      	ite	le
 80053fe:	930a      	strle	r3, [sp, #40]	@ 0x28
 8005400:	9308      	strgt	r3, [sp, #32]
 8005402:	3701      	adds	r7, #1
 8005404:	9019      	str	r0, [sp, #100]	@ 0x64
 8005406:	e7bf      	b.n	8005388 <_strtod_l+0x148>
 8005408:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800540a:	1c5a      	adds	r2, r3, #1
 800540c:	9219      	str	r2, [sp, #100]	@ 0x64
 800540e:	785a      	ldrb	r2, [r3, #1]
 8005410:	b37f      	cbz	r7, 8005472 <_strtod_l+0x232>
 8005412:	4681      	mov	r9, r0
 8005414:	463d      	mov	r5, r7
 8005416:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800541a:	2b09      	cmp	r3, #9
 800541c:	d912      	bls.n	8005444 <_strtod_l+0x204>
 800541e:	2301      	movs	r3, #1
 8005420:	e7c4      	b.n	80053ac <_strtod_l+0x16c>
 8005422:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005424:	1c5a      	adds	r2, r3, #1
 8005426:	9219      	str	r2, [sp, #100]	@ 0x64
 8005428:	785a      	ldrb	r2, [r3, #1]
 800542a:	3001      	adds	r0, #1
 800542c:	2a30      	cmp	r2, #48	@ 0x30
 800542e:	d0f8      	beq.n	8005422 <_strtod_l+0x1e2>
 8005430:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8005434:	2b08      	cmp	r3, #8
 8005436:	f200 84d3 	bhi.w	8005de0 <_strtod_l+0xba0>
 800543a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800543c:	930c      	str	r3, [sp, #48]	@ 0x30
 800543e:	4681      	mov	r9, r0
 8005440:	2000      	movs	r0, #0
 8005442:	4605      	mov	r5, r0
 8005444:	3a30      	subs	r2, #48	@ 0x30
 8005446:	f100 0301 	add.w	r3, r0, #1
 800544a:	d02a      	beq.n	80054a2 <_strtod_l+0x262>
 800544c:	4499      	add	r9, r3
 800544e:	eb00 0c05 	add.w	ip, r0, r5
 8005452:	462b      	mov	r3, r5
 8005454:	210a      	movs	r1, #10
 8005456:	4563      	cmp	r3, ip
 8005458:	d10d      	bne.n	8005476 <_strtod_l+0x236>
 800545a:	1c69      	adds	r1, r5, #1
 800545c:	4401      	add	r1, r0
 800545e:	4428      	add	r0, r5
 8005460:	2808      	cmp	r0, #8
 8005462:	dc16      	bgt.n	8005492 <_strtod_l+0x252>
 8005464:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005466:	230a      	movs	r3, #10
 8005468:	fb03 2300 	mla	r3, r3, r0, r2
 800546c:	930a      	str	r3, [sp, #40]	@ 0x28
 800546e:	2300      	movs	r3, #0
 8005470:	e018      	b.n	80054a4 <_strtod_l+0x264>
 8005472:	4638      	mov	r0, r7
 8005474:	e7da      	b.n	800542c <_strtod_l+0x1ec>
 8005476:	2b08      	cmp	r3, #8
 8005478:	f103 0301 	add.w	r3, r3, #1
 800547c:	dc03      	bgt.n	8005486 <_strtod_l+0x246>
 800547e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8005480:	434e      	muls	r6, r1
 8005482:	960a      	str	r6, [sp, #40]	@ 0x28
 8005484:	e7e7      	b.n	8005456 <_strtod_l+0x216>
 8005486:	2b10      	cmp	r3, #16
 8005488:	bfde      	ittt	le
 800548a:	9e08      	ldrle	r6, [sp, #32]
 800548c:	434e      	mulle	r6, r1
 800548e:	9608      	strle	r6, [sp, #32]
 8005490:	e7e1      	b.n	8005456 <_strtod_l+0x216>
 8005492:	280f      	cmp	r0, #15
 8005494:	dceb      	bgt.n	800546e <_strtod_l+0x22e>
 8005496:	9808      	ldr	r0, [sp, #32]
 8005498:	230a      	movs	r3, #10
 800549a:	fb03 2300 	mla	r3, r3, r0, r2
 800549e:	9308      	str	r3, [sp, #32]
 80054a0:	e7e5      	b.n	800546e <_strtod_l+0x22e>
 80054a2:	4629      	mov	r1, r5
 80054a4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80054a6:	1c50      	adds	r0, r2, #1
 80054a8:	9019      	str	r0, [sp, #100]	@ 0x64
 80054aa:	7852      	ldrb	r2, [r2, #1]
 80054ac:	4618      	mov	r0, r3
 80054ae:	460d      	mov	r5, r1
 80054b0:	e7b1      	b.n	8005416 <_strtod_l+0x1d6>
 80054b2:	f04f 0900 	mov.w	r9, #0
 80054b6:	2301      	movs	r3, #1
 80054b8:	e77d      	b.n	80053b6 <_strtod_l+0x176>
 80054ba:	f04f 0c00 	mov.w	ip, #0
 80054be:	1ca2      	adds	r2, r4, #2
 80054c0:	9219      	str	r2, [sp, #100]	@ 0x64
 80054c2:	78a2      	ldrb	r2, [r4, #2]
 80054c4:	e785      	b.n	80053d2 <_strtod_l+0x192>
 80054c6:	f04f 0c01 	mov.w	ip, #1
 80054ca:	e7f8      	b.n	80054be <_strtod_l+0x27e>
 80054cc:	0800a620 	.word	0x0800a620
 80054d0:	0800a608 	.word	0x0800a608
 80054d4:	7ff00000 	.word	0x7ff00000
 80054d8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80054da:	1c51      	adds	r1, r2, #1
 80054dc:	9119      	str	r1, [sp, #100]	@ 0x64
 80054de:	7852      	ldrb	r2, [r2, #1]
 80054e0:	2a30      	cmp	r2, #48	@ 0x30
 80054e2:	d0f9      	beq.n	80054d8 <_strtod_l+0x298>
 80054e4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80054e8:	2908      	cmp	r1, #8
 80054ea:	f63f af78 	bhi.w	80053de <_strtod_l+0x19e>
 80054ee:	3a30      	subs	r2, #48	@ 0x30
 80054f0:	920e      	str	r2, [sp, #56]	@ 0x38
 80054f2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80054f4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80054f6:	f04f 080a 	mov.w	r8, #10
 80054fa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80054fc:	1c56      	adds	r6, r2, #1
 80054fe:	9619      	str	r6, [sp, #100]	@ 0x64
 8005500:	7852      	ldrb	r2, [r2, #1]
 8005502:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8005506:	f1be 0f09 	cmp.w	lr, #9
 800550a:	d939      	bls.n	8005580 <_strtod_l+0x340>
 800550c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800550e:	1a76      	subs	r6, r6, r1
 8005510:	2e08      	cmp	r6, #8
 8005512:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8005516:	dc03      	bgt.n	8005520 <_strtod_l+0x2e0>
 8005518:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800551a:	4588      	cmp	r8, r1
 800551c:	bfa8      	it	ge
 800551e:	4688      	movge	r8, r1
 8005520:	f1bc 0f00 	cmp.w	ip, #0
 8005524:	d001      	beq.n	800552a <_strtod_l+0x2ea>
 8005526:	f1c8 0800 	rsb	r8, r8, #0
 800552a:	2d00      	cmp	r5, #0
 800552c:	d14e      	bne.n	80055cc <_strtod_l+0x38c>
 800552e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005530:	4308      	orrs	r0, r1
 8005532:	f47f aebe 	bne.w	80052b2 <_strtod_l+0x72>
 8005536:	2b00      	cmp	r3, #0
 8005538:	f47f aed6 	bne.w	80052e8 <_strtod_l+0xa8>
 800553c:	2a69      	cmp	r2, #105	@ 0x69
 800553e:	d028      	beq.n	8005592 <_strtod_l+0x352>
 8005540:	dc25      	bgt.n	800558e <_strtod_l+0x34e>
 8005542:	2a49      	cmp	r2, #73	@ 0x49
 8005544:	d025      	beq.n	8005592 <_strtod_l+0x352>
 8005546:	2a4e      	cmp	r2, #78	@ 0x4e
 8005548:	f47f aece 	bne.w	80052e8 <_strtod_l+0xa8>
 800554c:	499b      	ldr	r1, [pc, #620]	@ (80057bc <_strtod_l+0x57c>)
 800554e:	a819      	add	r0, sp, #100	@ 0x64
 8005550:	f002 fc2a 	bl	8007da8 <__match>
 8005554:	2800      	cmp	r0, #0
 8005556:	f43f aec7 	beq.w	80052e8 <_strtod_l+0xa8>
 800555a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	2b28      	cmp	r3, #40	@ 0x28
 8005560:	d12e      	bne.n	80055c0 <_strtod_l+0x380>
 8005562:	4997      	ldr	r1, [pc, #604]	@ (80057c0 <_strtod_l+0x580>)
 8005564:	aa1c      	add	r2, sp, #112	@ 0x70
 8005566:	a819      	add	r0, sp, #100	@ 0x64
 8005568:	f002 fc32 	bl	8007dd0 <__hexnan>
 800556c:	2805      	cmp	r0, #5
 800556e:	d127      	bne.n	80055c0 <_strtod_l+0x380>
 8005570:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005572:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8005576:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800557a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800557e:	e698      	b.n	80052b2 <_strtod_l+0x72>
 8005580:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005582:	fb08 2101 	mla	r1, r8, r1, r2
 8005586:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800558a:	920e      	str	r2, [sp, #56]	@ 0x38
 800558c:	e7b5      	b.n	80054fa <_strtod_l+0x2ba>
 800558e:	2a6e      	cmp	r2, #110	@ 0x6e
 8005590:	e7da      	b.n	8005548 <_strtod_l+0x308>
 8005592:	498c      	ldr	r1, [pc, #560]	@ (80057c4 <_strtod_l+0x584>)
 8005594:	a819      	add	r0, sp, #100	@ 0x64
 8005596:	f002 fc07 	bl	8007da8 <__match>
 800559a:	2800      	cmp	r0, #0
 800559c:	f43f aea4 	beq.w	80052e8 <_strtod_l+0xa8>
 80055a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80055a2:	4989      	ldr	r1, [pc, #548]	@ (80057c8 <_strtod_l+0x588>)
 80055a4:	3b01      	subs	r3, #1
 80055a6:	a819      	add	r0, sp, #100	@ 0x64
 80055a8:	9319      	str	r3, [sp, #100]	@ 0x64
 80055aa:	f002 fbfd 	bl	8007da8 <__match>
 80055ae:	b910      	cbnz	r0, 80055b6 <_strtod_l+0x376>
 80055b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80055b2:	3301      	adds	r3, #1
 80055b4:	9319      	str	r3, [sp, #100]	@ 0x64
 80055b6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80057d8 <_strtod_l+0x598>
 80055ba:	f04f 0a00 	mov.w	sl, #0
 80055be:	e678      	b.n	80052b2 <_strtod_l+0x72>
 80055c0:	4882      	ldr	r0, [pc, #520]	@ (80057cc <_strtod_l+0x58c>)
 80055c2:	f001 faa9 	bl	8006b18 <nan>
 80055c6:	ec5b ab10 	vmov	sl, fp, d0
 80055ca:	e672      	b.n	80052b2 <_strtod_l+0x72>
 80055cc:	eba8 0309 	sub.w	r3, r8, r9
 80055d0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80055d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80055d4:	2f00      	cmp	r7, #0
 80055d6:	bf08      	it	eq
 80055d8:	462f      	moveq	r7, r5
 80055da:	2d10      	cmp	r5, #16
 80055dc:	462c      	mov	r4, r5
 80055de:	bfa8      	it	ge
 80055e0:	2410      	movge	r4, #16
 80055e2:	f7fa ff8f 	bl	8000504 <__aeabi_ui2d>
 80055e6:	2d09      	cmp	r5, #9
 80055e8:	4682      	mov	sl, r0
 80055ea:	468b      	mov	fp, r1
 80055ec:	dc13      	bgt.n	8005616 <_strtod_l+0x3d6>
 80055ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	f43f ae5e 	beq.w	80052b2 <_strtod_l+0x72>
 80055f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055f8:	dd78      	ble.n	80056ec <_strtod_l+0x4ac>
 80055fa:	2b16      	cmp	r3, #22
 80055fc:	dc5f      	bgt.n	80056be <_strtod_l+0x47e>
 80055fe:	4974      	ldr	r1, [pc, #464]	@ (80057d0 <_strtod_l+0x590>)
 8005600:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005604:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005608:	4652      	mov	r2, sl
 800560a:	465b      	mov	r3, fp
 800560c:	f7fa fff4 	bl	80005f8 <__aeabi_dmul>
 8005610:	4682      	mov	sl, r0
 8005612:	468b      	mov	fp, r1
 8005614:	e64d      	b.n	80052b2 <_strtod_l+0x72>
 8005616:	4b6e      	ldr	r3, [pc, #440]	@ (80057d0 <_strtod_l+0x590>)
 8005618:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800561c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8005620:	f7fa ffea 	bl	80005f8 <__aeabi_dmul>
 8005624:	4682      	mov	sl, r0
 8005626:	9808      	ldr	r0, [sp, #32]
 8005628:	468b      	mov	fp, r1
 800562a:	f7fa ff6b 	bl	8000504 <__aeabi_ui2d>
 800562e:	4602      	mov	r2, r0
 8005630:	460b      	mov	r3, r1
 8005632:	4650      	mov	r0, sl
 8005634:	4659      	mov	r1, fp
 8005636:	f7fa fe29 	bl	800028c <__adddf3>
 800563a:	2d0f      	cmp	r5, #15
 800563c:	4682      	mov	sl, r0
 800563e:	468b      	mov	fp, r1
 8005640:	ddd5      	ble.n	80055ee <_strtod_l+0x3ae>
 8005642:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005644:	1b2c      	subs	r4, r5, r4
 8005646:	441c      	add	r4, r3
 8005648:	2c00      	cmp	r4, #0
 800564a:	f340 8096 	ble.w	800577a <_strtod_l+0x53a>
 800564e:	f014 030f 	ands.w	r3, r4, #15
 8005652:	d00a      	beq.n	800566a <_strtod_l+0x42a>
 8005654:	495e      	ldr	r1, [pc, #376]	@ (80057d0 <_strtod_l+0x590>)
 8005656:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800565a:	4652      	mov	r2, sl
 800565c:	465b      	mov	r3, fp
 800565e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005662:	f7fa ffc9 	bl	80005f8 <__aeabi_dmul>
 8005666:	4682      	mov	sl, r0
 8005668:	468b      	mov	fp, r1
 800566a:	f034 040f 	bics.w	r4, r4, #15
 800566e:	d073      	beq.n	8005758 <_strtod_l+0x518>
 8005670:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8005674:	dd48      	ble.n	8005708 <_strtod_l+0x4c8>
 8005676:	2400      	movs	r4, #0
 8005678:	46a0      	mov	r8, r4
 800567a:	940a      	str	r4, [sp, #40]	@ 0x28
 800567c:	46a1      	mov	r9, r4
 800567e:	9a05      	ldr	r2, [sp, #20]
 8005680:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80057d8 <_strtod_l+0x598>
 8005684:	2322      	movs	r3, #34	@ 0x22
 8005686:	6013      	str	r3, [r2, #0]
 8005688:	f04f 0a00 	mov.w	sl, #0
 800568c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800568e:	2b00      	cmp	r3, #0
 8005690:	f43f ae0f 	beq.w	80052b2 <_strtod_l+0x72>
 8005694:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005696:	9805      	ldr	r0, [sp, #20]
 8005698:	f002 fd3e 	bl	8008118 <_Bfree>
 800569c:	9805      	ldr	r0, [sp, #20]
 800569e:	4649      	mov	r1, r9
 80056a0:	f002 fd3a 	bl	8008118 <_Bfree>
 80056a4:	9805      	ldr	r0, [sp, #20]
 80056a6:	4641      	mov	r1, r8
 80056a8:	f002 fd36 	bl	8008118 <_Bfree>
 80056ac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80056ae:	9805      	ldr	r0, [sp, #20]
 80056b0:	f002 fd32 	bl	8008118 <_Bfree>
 80056b4:	9805      	ldr	r0, [sp, #20]
 80056b6:	4621      	mov	r1, r4
 80056b8:	f002 fd2e 	bl	8008118 <_Bfree>
 80056bc:	e5f9      	b.n	80052b2 <_strtod_l+0x72>
 80056be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80056c0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80056c4:	4293      	cmp	r3, r2
 80056c6:	dbbc      	blt.n	8005642 <_strtod_l+0x402>
 80056c8:	4c41      	ldr	r4, [pc, #260]	@ (80057d0 <_strtod_l+0x590>)
 80056ca:	f1c5 050f 	rsb	r5, r5, #15
 80056ce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80056d2:	4652      	mov	r2, sl
 80056d4:	465b      	mov	r3, fp
 80056d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80056da:	f7fa ff8d 	bl	80005f8 <__aeabi_dmul>
 80056de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056e0:	1b5d      	subs	r5, r3, r5
 80056e2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80056e6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80056ea:	e78f      	b.n	800560c <_strtod_l+0x3cc>
 80056ec:	3316      	adds	r3, #22
 80056ee:	dba8      	blt.n	8005642 <_strtod_l+0x402>
 80056f0:	4b37      	ldr	r3, [pc, #220]	@ (80057d0 <_strtod_l+0x590>)
 80056f2:	eba9 0808 	sub.w	r8, r9, r8
 80056f6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80056fa:	e9d8 2300 	ldrd	r2, r3, [r8]
 80056fe:	4650      	mov	r0, sl
 8005700:	4659      	mov	r1, fp
 8005702:	f7fb f8a3 	bl	800084c <__aeabi_ddiv>
 8005706:	e783      	b.n	8005610 <_strtod_l+0x3d0>
 8005708:	4b32      	ldr	r3, [pc, #200]	@ (80057d4 <_strtod_l+0x594>)
 800570a:	9308      	str	r3, [sp, #32]
 800570c:	2300      	movs	r3, #0
 800570e:	1124      	asrs	r4, r4, #4
 8005710:	4650      	mov	r0, sl
 8005712:	4659      	mov	r1, fp
 8005714:	461e      	mov	r6, r3
 8005716:	2c01      	cmp	r4, #1
 8005718:	dc21      	bgt.n	800575e <_strtod_l+0x51e>
 800571a:	b10b      	cbz	r3, 8005720 <_strtod_l+0x4e0>
 800571c:	4682      	mov	sl, r0
 800571e:	468b      	mov	fp, r1
 8005720:	492c      	ldr	r1, [pc, #176]	@ (80057d4 <_strtod_l+0x594>)
 8005722:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8005726:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800572a:	4652      	mov	r2, sl
 800572c:	465b      	mov	r3, fp
 800572e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005732:	f7fa ff61 	bl	80005f8 <__aeabi_dmul>
 8005736:	4b28      	ldr	r3, [pc, #160]	@ (80057d8 <_strtod_l+0x598>)
 8005738:	460a      	mov	r2, r1
 800573a:	400b      	ands	r3, r1
 800573c:	4927      	ldr	r1, [pc, #156]	@ (80057dc <_strtod_l+0x59c>)
 800573e:	428b      	cmp	r3, r1
 8005740:	4682      	mov	sl, r0
 8005742:	d898      	bhi.n	8005676 <_strtod_l+0x436>
 8005744:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8005748:	428b      	cmp	r3, r1
 800574a:	bf86      	itte	hi
 800574c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80057e0 <_strtod_l+0x5a0>
 8005750:	f04f 3aff 	movhi.w	sl, #4294967295
 8005754:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8005758:	2300      	movs	r3, #0
 800575a:	9308      	str	r3, [sp, #32]
 800575c:	e07a      	b.n	8005854 <_strtod_l+0x614>
 800575e:	07e2      	lsls	r2, r4, #31
 8005760:	d505      	bpl.n	800576e <_strtod_l+0x52e>
 8005762:	9b08      	ldr	r3, [sp, #32]
 8005764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005768:	f7fa ff46 	bl	80005f8 <__aeabi_dmul>
 800576c:	2301      	movs	r3, #1
 800576e:	9a08      	ldr	r2, [sp, #32]
 8005770:	3208      	adds	r2, #8
 8005772:	3601      	adds	r6, #1
 8005774:	1064      	asrs	r4, r4, #1
 8005776:	9208      	str	r2, [sp, #32]
 8005778:	e7cd      	b.n	8005716 <_strtod_l+0x4d6>
 800577a:	d0ed      	beq.n	8005758 <_strtod_l+0x518>
 800577c:	4264      	negs	r4, r4
 800577e:	f014 020f 	ands.w	r2, r4, #15
 8005782:	d00a      	beq.n	800579a <_strtod_l+0x55a>
 8005784:	4b12      	ldr	r3, [pc, #72]	@ (80057d0 <_strtod_l+0x590>)
 8005786:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800578a:	4650      	mov	r0, sl
 800578c:	4659      	mov	r1, fp
 800578e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005792:	f7fb f85b 	bl	800084c <__aeabi_ddiv>
 8005796:	4682      	mov	sl, r0
 8005798:	468b      	mov	fp, r1
 800579a:	1124      	asrs	r4, r4, #4
 800579c:	d0dc      	beq.n	8005758 <_strtod_l+0x518>
 800579e:	2c1f      	cmp	r4, #31
 80057a0:	dd20      	ble.n	80057e4 <_strtod_l+0x5a4>
 80057a2:	2400      	movs	r4, #0
 80057a4:	46a0      	mov	r8, r4
 80057a6:	940a      	str	r4, [sp, #40]	@ 0x28
 80057a8:	46a1      	mov	r9, r4
 80057aa:	9a05      	ldr	r2, [sp, #20]
 80057ac:	2322      	movs	r3, #34	@ 0x22
 80057ae:	f04f 0a00 	mov.w	sl, #0
 80057b2:	f04f 0b00 	mov.w	fp, #0
 80057b6:	6013      	str	r3, [r2, #0]
 80057b8:	e768      	b.n	800568c <_strtod_l+0x44c>
 80057ba:	bf00      	nop
 80057bc:	0800a66d 	.word	0x0800a66d
 80057c0:	0800a60c 	.word	0x0800a60c
 80057c4:	0800a665 	.word	0x0800a665
 80057c8:	0800a74c 	.word	0x0800a74c
 80057cc:	0800a748 	.word	0x0800a748
 80057d0:	0800a8b0 	.word	0x0800a8b0
 80057d4:	0800a888 	.word	0x0800a888
 80057d8:	7ff00000 	.word	0x7ff00000
 80057dc:	7ca00000 	.word	0x7ca00000
 80057e0:	7fefffff 	.word	0x7fefffff
 80057e4:	f014 0310 	ands.w	r3, r4, #16
 80057e8:	bf18      	it	ne
 80057ea:	236a      	movne	r3, #106	@ 0x6a
 80057ec:	4ea9      	ldr	r6, [pc, #676]	@ (8005a94 <_strtod_l+0x854>)
 80057ee:	9308      	str	r3, [sp, #32]
 80057f0:	4650      	mov	r0, sl
 80057f2:	4659      	mov	r1, fp
 80057f4:	2300      	movs	r3, #0
 80057f6:	07e2      	lsls	r2, r4, #31
 80057f8:	d504      	bpl.n	8005804 <_strtod_l+0x5c4>
 80057fa:	e9d6 2300 	ldrd	r2, r3, [r6]
 80057fe:	f7fa fefb 	bl	80005f8 <__aeabi_dmul>
 8005802:	2301      	movs	r3, #1
 8005804:	1064      	asrs	r4, r4, #1
 8005806:	f106 0608 	add.w	r6, r6, #8
 800580a:	d1f4      	bne.n	80057f6 <_strtod_l+0x5b6>
 800580c:	b10b      	cbz	r3, 8005812 <_strtod_l+0x5d2>
 800580e:	4682      	mov	sl, r0
 8005810:	468b      	mov	fp, r1
 8005812:	9b08      	ldr	r3, [sp, #32]
 8005814:	b1b3      	cbz	r3, 8005844 <_strtod_l+0x604>
 8005816:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800581a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800581e:	2b00      	cmp	r3, #0
 8005820:	4659      	mov	r1, fp
 8005822:	dd0f      	ble.n	8005844 <_strtod_l+0x604>
 8005824:	2b1f      	cmp	r3, #31
 8005826:	dd55      	ble.n	80058d4 <_strtod_l+0x694>
 8005828:	2b34      	cmp	r3, #52	@ 0x34
 800582a:	bfde      	ittt	le
 800582c:	f04f 33ff 	movle.w	r3, #4294967295
 8005830:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8005834:	4093      	lslle	r3, r2
 8005836:	f04f 0a00 	mov.w	sl, #0
 800583a:	bfcc      	ite	gt
 800583c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8005840:	ea03 0b01 	andle.w	fp, r3, r1
 8005844:	2200      	movs	r2, #0
 8005846:	2300      	movs	r3, #0
 8005848:	4650      	mov	r0, sl
 800584a:	4659      	mov	r1, fp
 800584c:	f7fb f93c 	bl	8000ac8 <__aeabi_dcmpeq>
 8005850:	2800      	cmp	r0, #0
 8005852:	d1a6      	bne.n	80057a2 <_strtod_l+0x562>
 8005854:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005856:	9300      	str	r3, [sp, #0]
 8005858:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800585a:	9805      	ldr	r0, [sp, #20]
 800585c:	462b      	mov	r3, r5
 800585e:	463a      	mov	r2, r7
 8005860:	f002 fcc2 	bl	80081e8 <__s2b>
 8005864:	900a      	str	r0, [sp, #40]	@ 0x28
 8005866:	2800      	cmp	r0, #0
 8005868:	f43f af05 	beq.w	8005676 <_strtod_l+0x436>
 800586c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800586e:	2a00      	cmp	r2, #0
 8005870:	eba9 0308 	sub.w	r3, r9, r8
 8005874:	bfa8      	it	ge
 8005876:	2300      	movge	r3, #0
 8005878:	9312      	str	r3, [sp, #72]	@ 0x48
 800587a:	2400      	movs	r4, #0
 800587c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005880:	9316      	str	r3, [sp, #88]	@ 0x58
 8005882:	46a0      	mov	r8, r4
 8005884:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005886:	9805      	ldr	r0, [sp, #20]
 8005888:	6859      	ldr	r1, [r3, #4]
 800588a:	f002 fc05 	bl	8008098 <_Balloc>
 800588e:	4681      	mov	r9, r0
 8005890:	2800      	cmp	r0, #0
 8005892:	f43f aef4 	beq.w	800567e <_strtod_l+0x43e>
 8005896:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005898:	691a      	ldr	r2, [r3, #16]
 800589a:	3202      	adds	r2, #2
 800589c:	f103 010c 	add.w	r1, r3, #12
 80058a0:	0092      	lsls	r2, r2, #2
 80058a2:	300c      	adds	r0, #12
 80058a4:	f001 f927 	bl	8006af6 <memcpy>
 80058a8:	ec4b ab10 	vmov	d0, sl, fp
 80058ac:	9805      	ldr	r0, [sp, #20]
 80058ae:	aa1c      	add	r2, sp, #112	@ 0x70
 80058b0:	a91b      	add	r1, sp, #108	@ 0x6c
 80058b2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80058b6:	f002 ffd3 	bl	8008860 <__d2b>
 80058ba:	901a      	str	r0, [sp, #104]	@ 0x68
 80058bc:	2800      	cmp	r0, #0
 80058be:	f43f aede 	beq.w	800567e <_strtod_l+0x43e>
 80058c2:	9805      	ldr	r0, [sp, #20]
 80058c4:	2101      	movs	r1, #1
 80058c6:	f002 fd25 	bl	8008314 <__i2b>
 80058ca:	4680      	mov	r8, r0
 80058cc:	b948      	cbnz	r0, 80058e2 <_strtod_l+0x6a2>
 80058ce:	f04f 0800 	mov.w	r8, #0
 80058d2:	e6d4      	b.n	800567e <_strtod_l+0x43e>
 80058d4:	f04f 32ff 	mov.w	r2, #4294967295
 80058d8:	fa02 f303 	lsl.w	r3, r2, r3
 80058dc:	ea03 0a0a 	and.w	sl, r3, sl
 80058e0:	e7b0      	b.n	8005844 <_strtod_l+0x604>
 80058e2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80058e4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80058e6:	2d00      	cmp	r5, #0
 80058e8:	bfab      	itete	ge
 80058ea:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80058ec:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80058ee:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80058f0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80058f2:	bfac      	ite	ge
 80058f4:	18ef      	addge	r7, r5, r3
 80058f6:	1b5e      	sublt	r6, r3, r5
 80058f8:	9b08      	ldr	r3, [sp, #32]
 80058fa:	1aed      	subs	r5, r5, r3
 80058fc:	4415      	add	r5, r2
 80058fe:	4b66      	ldr	r3, [pc, #408]	@ (8005a98 <_strtod_l+0x858>)
 8005900:	3d01      	subs	r5, #1
 8005902:	429d      	cmp	r5, r3
 8005904:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8005908:	da50      	bge.n	80059ac <_strtod_l+0x76c>
 800590a:	1b5b      	subs	r3, r3, r5
 800590c:	2b1f      	cmp	r3, #31
 800590e:	eba2 0203 	sub.w	r2, r2, r3
 8005912:	f04f 0101 	mov.w	r1, #1
 8005916:	dc3d      	bgt.n	8005994 <_strtod_l+0x754>
 8005918:	fa01 f303 	lsl.w	r3, r1, r3
 800591c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800591e:	2300      	movs	r3, #0
 8005920:	9310      	str	r3, [sp, #64]	@ 0x40
 8005922:	18bd      	adds	r5, r7, r2
 8005924:	9b08      	ldr	r3, [sp, #32]
 8005926:	42af      	cmp	r7, r5
 8005928:	4416      	add	r6, r2
 800592a:	441e      	add	r6, r3
 800592c:	463b      	mov	r3, r7
 800592e:	bfa8      	it	ge
 8005930:	462b      	movge	r3, r5
 8005932:	42b3      	cmp	r3, r6
 8005934:	bfa8      	it	ge
 8005936:	4633      	movge	r3, r6
 8005938:	2b00      	cmp	r3, #0
 800593a:	bfc2      	ittt	gt
 800593c:	1aed      	subgt	r5, r5, r3
 800593e:	1af6      	subgt	r6, r6, r3
 8005940:	1aff      	subgt	r7, r7, r3
 8005942:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005944:	2b00      	cmp	r3, #0
 8005946:	dd16      	ble.n	8005976 <_strtod_l+0x736>
 8005948:	4641      	mov	r1, r8
 800594a:	9805      	ldr	r0, [sp, #20]
 800594c:	461a      	mov	r2, r3
 800594e:	f002 fda1 	bl	8008494 <__pow5mult>
 8005952:	4680      	mov	r8, r0
 8005954:	2800      	cmp	r0, #0
 8005956:	d0ba      	beq.n	80058ce <_strtod_l+0x68e>
 8005958:	4601      	mov	r1, r0
 800595a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800595c:	9805      	ldr	r0, [sp, #20]
 800595e:	f002 fcef 	bl	8008340 <__multiply>
 8005962:	900e      	str	r0, [sp, #56]	@ 0x38
 8005964:	2800      	cmp	r0, #0
 8005966:	f43f ae8a 	beq.w	800567e <_strtod_l+0x43e>
 800596a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800596c:	9805      	ldr	r0, [sp, #20]
 800596e:	f002 fbd3 	bl	8008118 <_Bfree>
 8005972:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005974:	931a      	str	r3, [sp, #104]	@ 0x68
 8005976:	2d00      	cmp	r5, #0
 8005978:	dc1d      	bgt.n	80059b6 <_strtod_l+0x776>
 800597a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800597c:	2b00      	cmp	r3, #0
 800597e:	dd23      	ble.n	80059c8 <_strtod_l+0x788>
 8005980:	4649      	mov	r1, r9
 8005982:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8005984:	9805      	ldr	r0, [sp, #20]
 8005986:	f002 fd85 	bl	8008494 <__pow5mult>
 800598a:	4681      	mov	r9, r0
 800598c:	b9e0      	cbnz	r0, 80059c8 <_strtod_l+0x788>
 800598e:	f04f 0900 	mov.w	r9, #0
 8005992:	e674      	b.n	800567e <_strtod_l+0x43e>
 8005994:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8005998:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800599c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80059a0:	35e2      	adds	r5, #226	@ 0xe2
 80059a2:	fa01 f305 	lsl.w	r3, r1, r5
 80059a6:	9310      	str	r3, [sp, #64]	@ 0x40
 80059a8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80059aa:	e7ba      	b.n	8005922 <_strtod_l+0x6e2>
 80059ac:	2300      	movs	r3, #0
 80059ae:	9310      	str	r3, [sp, #64]	@ 0x40
 80059b0:	2301      	movs	r3, #1
 80059b2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80059b4:	e7b5      	b.n	8005922 <_strtod_l+0x6e2>
 80059b6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80059b8:	9805      	ldr	r0, [sp, #20]
 80059ba:	462a      	mov	r2, r5
 80059bc:	f002 fdc4 	bl	8008548 <__lshift>
 80059c0:	901a      	str	r0, [sp, #104]	@ 0x68
 80059c2:	2800      	cmp	r0, #0
 80059c4:	d1d9      	bne.n	800597a <_strtod_l+0x73a>
 80059c6:	e65a      	b.n	800567e <_strtod_l+0x43e>
 80059c8:	2e00      	cmp	r6, #0
 80059ca:	dd07      	ble.n	80059dc <_strtod_l+0x79c>
 80059cc:	4649      	mov	r1, r9
 80059ce:	9805      	ldr	r0, [sp, #20]
 80059d0:	4632      	mov	r2, r6
 80059d2:	f002 fdb9 	bl	8008548 <__lshift>
 80059d6:	4681      	mov	r9, r0
 80059d8:	2800      	cmp	r0, #0
 80059da:	d0d8      	beq.n	800598e <_strtod_l+0x74e>
 80059dc:	2f00      	cmp	r7, #0
 80059de:	dd08      	ble.n	80059f2 <_strtod_l+0x7b2>
 80059e0:	4641      	mov	r1, r8
 80059e2:	9805      	ldr	r0, [sp, #20]
 80059e4:	463a      	mov	r2, r7
 80059e6:	f002 fdaf 	bl	8008548 <__lshift>
 80059ea:	4680      	mov	r8, r0
 80059ec:	2800      	cmp	r0, #0
 80059ee:	f43f ae46 	beq.w	800567e <_strtod_l+0x43e>
 80059f2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80059f4:	9805      	ldr	r0, [sp, #20]
 80059f6:	464a      	mov	r2, r9
 80059f8:	f002 fe2e 	bl	8008658 <__mdiff>
 80059fc:	4604      	mov	r4, r0
 80059fe:	2800      	cmp	r0, #0
 8005a00:	f43f ae3d 	beq.w	800567e <_strtod_l+0x43e>
 8005a04:	68c3      	ldr	r3, [r0, #12]
 8005a06:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005a08:	2300      	movs	r3, #0
 8005a0a:	60c3      	str	r3, [r0, #12]
 8005a0c:	4641      	mov	r1, r8
 8005a0e:	f002 fe07 	bl	8008620 <__mcmp>
 8005a12:	2800      	cmp	r0, #0
 8005a14:	da46      	bge.n	8005aa4 <_strtod_l+0x864>
 8005a16:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005a18:	ea53 030a 	orrs.w	r3, r3, sl
 8005a1c:	d16c      	bne.n	8005af8 <_strtod_l+0x8b8>
 8005a1e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d168      	bne.n	8005af8 <_strtod_l+0x8b8>
 8005a26:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005a2a:	0d1b      	lsrs	r3, r3, #20
 8005a2c:	051b      	lsls	r3, r3, #20
 8005a2e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8005a32:	d961      	bls.n	8005af8 <_strtod_l+0x8b8>
 8005a34:	6963      	ldr	r3, [r4, #20]
 8005a36:	b913      	cbnz	r3, 8005a3e <_strtod_l+0x7fe>
 8005a38:	6923      	ldr	r3, [r4, #16]
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	dd5c      	ble.n	8005af8 <_strtod_l+0x8b8>
 8005a3e:	4621      	mov	r1, r4
 8005a40:	2201      	movs	r2, #1
 8005a42:	9805      	ldr	r0, [sp, #20]
 8005a44:	f002 fd80 	bl	8008548 <__lshift>
 8005a48:	4641      	mov	r1, r8
 8005a4a:	4604      	mov	r4, r0
 8005a4c:	f002 fde8 	bl	8008620 <__mcmp>
 8005a50:	2800      	cmp	r0, #0
 8005a52:	dd51      	ble.n	8005af8 <_strtod_l+0x8b8>
 8005a54:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005a58:	9a08      	ldr	r2, [sp, #32]
 8005a5a:	0d1b      	lsrs	r3, r3, #20
 8005a5c:	051b      	lsls	r3, r3, #20
 8005a5e:	2a00      	cmp	r2, #0
 8005a60:	d06b      	beq.n	8005b3a <_strtod_l+0x8fa>
 8005a62:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8005a66:	d868      	bhi.n	8005b3a <_strtod_l+0x8fa>
 8005a68:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8005a6c:	f67f ae9d 	bls.w	80057aa <_strtod_l+0x56a>
 8005a70:	4b0a      	ldr	r3, [pc, #40]	@ (8005a9c <_strtod_l+0x85c>)
 8005a72:	4650      	mov	r0, sl
 8005a74:	4659      	mov	r1, fp
 8005a76:	2200      	movs	r2, #0
 8005a78:	f7fa fdbe 	bl	80005f8 <__aeabi_dmul>
 8005a7c:	4b08      	ldr	r3, [pc, #32]	@ (8005aa0 <_strtod_l+0x860>)
 8005a7e:	400b      	ands	r3, r1
 8005a80:	4682      	mov	sl, r0
 8005a82:	468b      	mov	fp, r1
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	f47f ae05 	bne.w	8005694 <_strtod_l+0x454>
 8005a8a:	9a05      	ldr	r2, [sp, #20]
 8005a8c:	2322      	movs	r3, #34	@ 0x22
 8005a8e:	6013      	str	r3, [r2, #0]
 8005a90:	e600      	b.n	8005694 <_strtod_l+0x454>
 8005a92:	bf00      	nop
 8005a94:	0800a638 	.word	0x0800a638
 8005a98:	fffffc02 	.word	0xfffffc02
 8005a9c:	39500000 	.word	0x39500000
 8005aa0:	7ff00000 	.word	0x7ff00000
 8005aa4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8005aa8:	d165      	bne.n	8005b76 <_strtod_l+0x936>
 8005aaa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8005aac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005ab0:	b35a      	cbz	r2, 8005b0a <_strtod_l+0x8ca>
 8005ab2:	4a9f      	ldr	r2, [pc, #636]	@ (8005d30 <_strtod_l+0xaf0>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d12b      	bne.n	8005b10 <_strtod_l+0x8d0>
 8005ab8:	9b08      	ldr	r3, [sp, #32]
 8005aba:	4651      	mov	r1, sl
 8005abc:	b303      	cbz	r3, 8005b00 <_strtod_l+0x8c0>
 8005abe:	4b9d      	ldr	r3, [pc, #628]	@ (8005d34 <_strtod_l+0xaf4>)
 8005ac0:	465a      	mov	r2, fp
 8005ac2:	4013      	ands	r3, r2
 8005ac4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8005ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8005acc:	d81b      	bhi.n	8005b06 <_strtod_l+0x8c6>
 8005ace:	0d1b      	lsrs	r3, r3, #20
 8005ad0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad8:	4299      	cmp	r1, r3
 8005ada:	d119      	bne.n	8005b10 <_strtod_l+0x8d0>
 8005adc:	4b96      	ldr	r3, [pc, #600]	@ (8005d38 <_strtod_l+0xaf8>)
 8005ade:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d102      	bne.n	8005aea <_strtod_l+0x8aa>
 8005ae4:	3101      	adds	r1, #1
 8005ae6:	f43f adca 	beq.w	800567e <_strtod_l+0x43e>
 8005aea:	4b92      	ldr	r3, [pc, #584]	@ (8005d34 <_strtod_l+0xaf4>)
 8005aec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005aee:	401a      	ands	r2, r3
 8005af0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8005af4:	f04f 0a00 	mov.w	sl, #0
 8005af8:	9b08      	ldr	r3, [sp, #32]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d1b8      	bne.n	8005a70 <_strtod_l+0x830>
 8005afe:	e5c9      	b.n	8005694 <_strtod_l+0x454>
 8005b00:	f04f 33ff 	mov.w	r3, #4294967295
 8005b04:	e7e8      	b.n	8005ad8 <_strtod_l+0x898>
 8005b06:	4613      	mov	r3, r2
 8005b08:	e7e6      	b.n	8005ad8 <_strtod_l+0x898>
 8005b0a:	ea53 030a 	orrs.w	r3, r3, sl
 8005b0e:	d0a1      	beq.n	8005a54 <_strtod_l+0x814>
 8005b10:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005b12:	b1db      	cbz	r3, 8005b4c <_strtod_l+0x90c>
 8005b14:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005b16:	4213      	tst	r3, r2
 8005b18:	d0ee      	beq.n	8005af8 <_strtod_l+0x8b8>
 8005b1a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005b1c:	9a08      	ldr	r2, [sp, #32]
 8005b1e:	4650      	mov	r0, sl
 8005b20:	4659      	mov	r1, fp
 8005b22:	b1bb      	cbz	r3, 8005b54 <_strtod_l+0x914>
 8005b24:	f7ff fb6b 	bl	80051fe <sulp>
 8005b28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005b2c:	ec53 2b10 	vmov	r2, r3, d0
 8005b30:	f7fa fbac 	bl	800028c <__adddf3>
 8005b34:	4682      	mov	sl, r0
 8005b36:	468b      	mov	fp, r1
 8005b38:	e7de      	b.n	8005af8 <_strtod_l+0x8b8>
 8005b3a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8005b3e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005b42:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005b46:	f04f 3aff 	mov.w	sl, #4294967295
 8005b4a:	e7d5      	b.n	8005af8 <_strtod_l+0x8b8>
 8005b4c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005b4e:	ea13 0f0a 	tst.w	r3, sl
 8005b52:	e7e1      	b.n	8005b18 <_strtod_l+0x8d8>
 8005b54:	f7ff fb53 	bl	80051fe <sulp>
 8005b58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005b5c:	ec53 2b10 	vmov	r2, r3, d0
 8005b60:	f7fa fb92 	bl	8000288 <__aeabi_dsub>
 8005b64:	2200      	movs	r2, #0
 8005b66:	2300      	movs	r3, #0
 8005b68:	4682      	mov	sl, r0
 8005b6a:	468b      	mov	fp, r1
 8005b6c:	f7fa ffac 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b70:	2800      	cmp	r0, #0
 8005b72:	d0c1      	beq.n	8005af8 <_strtod_l+0x8b8>
 8005b74:	e619      	b.n	80057aa <_strtod_l+0x56a>
 8005b76:	4641      	mov	r1, r8
 8005b78:	4620      	mov	r0, r4
 8005b7a:	f002 fec9 	bl	8008910 <__ratio>
 8005b7e:	ec57 6b10 	vmov	r6, r7, d0
 8005b82:	2200      	movs	r2, #0
 8005b84:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005b88:	4630      	mov	r0, r6
 8005b8a:	4639      	mov	r1, r7
 8005b8c:	f7fa ffb0 	bl	8000af0 <__aeabi_dcmple>
 8005b90:	2800      	cmp	r0, #0
 8005b92:	d06f      	beq.n	8005c74 <_strtod_l+0xa34>
 8005b94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d17a      	bne.n	8005c90 <_strtod_l+0xa50>
 8005b9a:	f1ba 0f00 	cmp.w	sl, #0
 8005b9e:	d158      	bne.n	8005c52 <_strtod_l+0xa12>
 8005ba0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005ba2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d15a      	bne.n	8005c60 <_strtod_l+0xa20>
 8005baa:	4b64      	ldr	r3, [pc, #400]	@ (8005d3c <_strtod_l+0xafc>)
 8005bac:	2200      	movs	r2, #0
 8005bae:	4630      	mov	r0, r6
 8005bb0:	4639      	mov	r1, r7
 8005bb2:	f7fa ff93 	bl	8000adc <__aeabi_dcmplt>
 8005bb6:	2800      	cmp	r0, #0
 8005bb8:	d159      	bne.n	8005c6e <_strtod_l+0xa2e>
 8005bba:	4630      	mov	r0, r6
 8005bbc:	4639      	mov	r1, r7
 8005bbe:	4b60      	ldr	r3, [pc, #384]	@ (8005d40 <_strtod_l+0xb00>)
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f7fa fd19 	bl	80005f8 <__aeabi_dmul>
 8005bc6:	4606      	mov	r6, r0
 8005bc8:	460f      	mov	r7, r1
 8005bca:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8005bce:	9606      	str	r6, [sp, #24]
 8005bd0:	9307      	str	r3, [sp, #28]
 8005bd2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005bd6:	4d57      	ldr	r5, [pc, #348]	@ (8005d34 <_strtod_l+0xaf4>)
 8005bd8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8005bdc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005bde:	401d      	ands	r5, r3
 8005be0:	4b58      	ldr	r3, [pc, #352]	@ (8005d44 <_strtod_l+0xb04>)
 8005be2:	429d      	cmp	r5, r3
 8005be4:	f040 80b2 	bne.w	8005d4c <_strtod_l+0xb0c>
 8005be8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005bea:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8005bee:	ec4b ab10 	vmov	d0, sl, fp
 8005bf2:	f002 fdc5 	bl	8008780 <__ulp>
 8005bf6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005bfa:	ec51 0b10 	vmov	r0, r1, d0
 8005bfe:	f7fa fcfb 	bl	80005f8 <__aeabi_dmul>
 8005c02:	4652      	mov	r2, sl
 8005c04:	465b      	mov	r3, fp
 8005c06:	f7fa fb41 	bl	800028c <__adddf3>
 8005c0a:	460b      	mov	r3, r1
 8005c0c:	4949      	ldr	r1, [pc, #292]	@ (8005d34 <_strtod_l+0xaf4>)
 8005c0e:	4a4e      	ldr	r2, [pc, #312]	@ (8005d48 <_strtod_l+0xb08>)
 8005c10:	4019      	ands	r1, r3
 8005c12:	4291      	cmp	r1, r2
 8005c14:	4682      	mov	sl, r0
 8005c16:	d942      	bls.n	8005c9e <_strtod_l+0xa5e>
 8005c18:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005c1a:	4b47      	ldr	r3, [pc, #284]	@ (8005d38 <_strtod_l+0xaf8>)
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d103      	bne.n	8005c28 <_strtod_l+0x9e8>
 8005c20:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005c22:	3301      	adds	r3, #1
 8005c24:	f43f ad2b 	beq.w	800567e <_strtod_l+0x43e>
 8005c28:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8005d38 <_strtod_l+0xaf8>
 8005c2c:	f04f 3aff 	mov.w	sl, #4294967295
 8005c30:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005c32:	9805      	ldr	r0, [sp, #20]
 8005c34:	f002 fa70 	bl	8008118 <_Bfree>
 8005c38:	9805      	ldr	r0, [sp, #20]
 8005c3a:	4649      	mov	r1, r9
 8005c3c:	f002 fa6c 	bl	8008118 <_Bfree>
 8005c40:	9805      	ldr	r0, [sp, #20]
 8005c42:	4641      	mov	r1, r8
 8005c44:	f002 fa68 	bl	8008118 <_Bfree>
 8005c48:	9805      	ldr	r0, [sp, #20]
 8005c4a:	4621      	mov	r1, r4
 8005c4c:	f002 fa64 	bl	8008118 <_Bfree>
 8005c50:	e618      	b.n	8005884 <_strtod_l+0x644>
 8005c52:	f1ba 0f01 	cmp.w	sl, #1
 8005c56:	d103      	bne.n	8005c60 <_strtod_l+0xa20>
 8005c58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	f43f ada5 	beq.w	80057aa <_strtod_l+0x56a>
 8005c60:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8005d10 <_strtod_l+0xad0>
 8005c64:	4f35      	ldr	r7, [pc, #212]	@ (8005d3c <_strtod_l+0xafc>)
 8005c66:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005c6a:	2600      	movs	r6, #0
 8005c6c:	e7b1      	b.n	8005bd2 <_strtod_l+0x992>
 8005c6e:	4f34      	ldr	r7, [pc, #208]	@ (8005d40 <_strtod_l+0xb00>)
 8005c70:	2600      	movs	r6, #0
 8005c72:	e7aa      	b.n	8005bca <_strtod_l+0x98a>
 8005c74:	4b32      	ldr	r3, [pc, #200]	@ (8005d40 <_strtod_l+0xb00>)
 8005c76:	4630      	mov	r0, r6
 8005c78:	4639      	mov	r1, r7
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f7fa fcbc 	bl	80005f8 <__aeabi_dmul>
 8005c80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005c82:	4606      	mov	r6, r0
 8005c84:	460f      	mov	r7, r1
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d09f      	beq.n	8005bca <_strtod_l+0x98a>
 8005c8a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8005c8e:	e7a0      	b.n	8005bd2 <_strtod_l+0x992>
 8005c90:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8005d18 <_strtod_l+0xad8>
 8005c94:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005c98:	ec57 6b17 	vmov	r6, r7, d7
 8005c9c:	e799      	b.n	8005bd2 <_strtod_l+0x992>
 8005c9e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8005ca2:	9b08      	ldr	r3, [sp, #32]
 8005ca4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d1c1      	bne.n	8005c30 <_strtod_l+0x9f0>
 8005cac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005cb0:	0d1b      	lsrs	r3, r3, #20
 8005cb2:	051b      	lsls	r3, r3, #20
 8005cb4:	429d      	cmp	r5, r3
 8005cb6:	d1bb      	bne.n	8005c30 <_strtod_l+0x9f0>
 8005cb8:	4630      	mov	r0, r6
 8005cba:	4639      	mov	r1, r7
 8005cbc:	f7fa ffac 	bl	8000c18 <__aeabi_d2lz>
 8005cc0:	f7fa fc6c 	bl	800059c <__aeabi_l2d>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	4630      	mov	r0, r6
 8005cca:	4639      	mov	r1, r7
 8005ccc:	f7fa fadc 	bl	8000288 <__aeabi_dsub>
 8005cd0:	460b      	mov	r3, r1
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005cd8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8005cdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005cde:	ea46 060a 	orr.w	r6, r6, sl
 8005ce2:	431e      	orrs	r6, r3
 8005ce4:	d06f      	beq.n	8005dc6 <_strtod_l+0xb86>
 8005ce6:	a30e      	add	r3, pc, #56	@ (adr r3, 8005d20 <_strtod_l+0xae0>)
 8005ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cec:	f7fa fef6 	bl	8000adc <__aeabi_dcmplt>
 8005cf0:	2800      	cmp	r0, #0
 8005cf2:	f47f accf 	bne.w	8005694 <_strtod_l+0x454>
 8005cf6:	a30c      	add	r3, pc, #48	@ (adr r3, 8005d28 <_strtod_l+0xae8>)
 8005cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cfc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005d00:	f7fa ff0a 	bl	8000b18 <__aeabi_dcmpgt>
 8005d04:	2800      	cmp	r0, #0
 8005d06:	d093      	beq.n	8005c30 <_strtod_l+0x9f0>
 8005d08:	e4c4      	b.n	8005694 <_strtod_l+0x454>
 8005d0a:	bf00      	nop
 8005d0c:	f3af 8000 	nop.w
 8005d10:	00000000 	.word	0x00000000
 8005d14:	bff00000 	.word	0xbff00000
 8005d18:	00000000 	.word	0x00000000
 8005d1c:	3ff00000 	.word	0x3ff00000
 8005d20:	94a03595 	.word	0x94a03595
 8005d24:	3fdfffff 	.word	0x3fdfffff
 8005d28:	35afe535 	.word	0x35afe535
 8005d2c:	3fe00000 	.word	0x3fe00000
 8005d30:	000fffff 	.word	0x000fffff
 8005d34:	7ff00000 	.word	0x7ff00000
 8005d38:	7fefffff 	.word	0x7fefffff
 8005d3c:	3ff00000 	.word	0x3ff00000
 8005d40:	3fe00000 	.word	0x3fe00000
 8005d44:	7fe00000 	.word	0x7fe00000
 8005d48:	7c9fffff 	.word	0x7c9fffff
 8005d4c:	9b08      	ldr	r3, [sp, #32]
 8005d4e:	b323      	cbz	r3, 8005d9a <_strtod_l+0xb5a>
 8005d50:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8005d54:	d821      	bhi.n	8005d9a <_strtod_l+0xb5a>
 8005d56:	a328      	add	r3, pc, #160	@ (adr r3, 8005df8 <_strtod_l+0xbb8>)
 8005d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d5c:	4630      	mov	r0, r6
 8005d5e:	4639      	mov	r1, r7
 8005d60:	f7fa fec6 	bl	8000af0 <__aeabi_dcmple>
 8005d64:	b1a0      	cbz	r0, 8005d90 <_strtod_l+0xb50>
 8005d66:	4639      	mov	r1, r7
 8005d68:	4630      	mov	r0, r6
 8005d6a:	f7fa ff1d 	bl	8000ba8 <__aeabi_d2uiz>
 8005d6e:	2801      	cmp	r0, #1
 8005d70:	bf38      	it	cc
 8005d72:	2001      	movcc	r0, #1
 8005d74:	f7fa fbc6 	bl	8000504 <__aeabi_ui2d>
 8005d78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005d7a:	4606      	mov	r6, r0
 8005d7c:	460f      	mov	r7, r1
 8005d7e:	b9fb      	cbnz	r3, 8005dc0 <_strtod_l+0xb80>
 8005d80:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005d84:	9014      	str	r0, [sp, #80]	@ 0x50
 8005d86:	9315      	str	r3, [sp, #84]	@ 0x54
 8005d88:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8005d8c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8005d90:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005d92:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8005d96:	1b5b      	subs	r3, r3, r5
 8005d98:	9311      	str	r3, [sp, #68]	@ 0x44
 8005d9a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005d9e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8005da2:	f002 fced 	bl	8008780 <__ulp>
 8005da6:	4650      	mov	r0, sl
 8005da8:	ec53 2b10 	vmov	r2, r3, d0
 8005dac:	4659      	mov	r1, fp
 8005dae:	f7fa fc23 	bl	80005f8 <__aeabi_dmul>
 8005db2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005db6:	f7fa fa69 	bl	800028c <__adddf3>
 8005dba:	4682      	mov	sl, r0
 8005dbc:	468b      	mov	fp, r1
 8005dbe:	e770      	b.n	8005ca2 <_strtod_l+0xa62>
 8005dc0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8005dc4:	e7e0      	b.n	8005d88 <_strtod_l+0xb48>
 8005dc6:	a30e      	add	r3, pc, #56	@ (adr r3, 8005e00 <_strtod_l+0xbc0>)
 8005dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dcc:	f7fa fe86 	bl	8000adc <__aeabi_dcmplt>
 8005dd0:	e798      	b.n	8005d04 <_strtod_l+0xac4>
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005dd6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8005dd8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005dda:	6013      	str	r3, [r2, #0]
 8005ddc:	f7ff ba6d 	b.w	80052ba <_strtod_l+0x7a>
 8005de0:	2a65      	cmp	r2, #101	@ 0x65
 8005de2:	f43f ab66 	beq.w	80054b2 <_strtod_l+0x272>
 8005de6:	2a45      	cmp	r2, #69	@ 0x45
 8005de8:	f43f ab63 	beq.w	80054b2 <_strtod_l+0x272>
 8005dec:	2301      	movs	r3, #1
 8005dee:	f7ff bb9e 	b.w	800552e <_strtod_l+0x2ee>
 8005df2:	bf00      	nop
 8005df4:	f3af 8000 	nop.w
 8005df8:	ffc00000 	.word	0xffc00000
 8005dfc:	41dfffff 	.word	0x41dfffff
 8005e00:	94a03595 	.word	0x94a03595
 8005e04:	3fcfffff 	.word	0x3fcfffff

08005e08 <strtod>:
 8005e08:	460a      	mov	r2, r1
 8005e0a:	4601      	mov	r1, r0
 8005e0c:	4802      	ldr	r0, [pc, #8]	@ (8005e18 <strtod+0x10>)
 8005e0e:	4b03      	ldr	r3, [pc, #12]	@ (8005e1c <strtod+0x14>)
 8005e10:	6800      	ldr	r0, [r0, #0]
 8005e12:	f7ff ba15 	b.w	8005240 <_strtod_l>
 8005e16:	bf00      	nop
 8005e18:	20000184 	.word	0x20000184
 8005e1c:	20000018 	.word	0x20000018

08005e20 <__cvt>:
 8005e20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e24:	ec57 6b10 	vmov	r6, r7, d0
 8005e28:	2f00      	cmp	r7, #0
 8005e2a:	460c      	mov	r4, r1
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	463b      	mov	r3, r7
 8005e30:	bfbb      	ittet	lt
 8005e32:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005e36:	461f      	movlt	r7, r3
 8005e38:	2300      	movge	r3, #0
 8005e3a:	232d      	movlt	r3, #45	@ 0x2d
 8005e3c:	700b      	strb	r3, [r1, #0]
 8005e3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e40:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005e44:	4691      	mov	r9, r2
 8005e46:	f023 0820 	bic.w	r8, r3, #32
 8005e4a:	bfbc      	itt	lt
 8005e4c:	4632      	movlt	r2, r6
 8005e4e:	4616      	movlt	r6, r2
 8005e50:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005e54:	d005      	beq.n	8005e62 <__cvt+0x42>
 8005e56:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005e5a:	d100      	bne.n	8005e5e <__cvt+0x3e>
 8005e5c:	3401      	adds	r4, #1
 8005e5e:	2102      	movs	r1, #2
 8005e60:	e000      	b.n	8005e64 <__cvt+0x44>
 8005e62:	2103      	movs	r1, #3
 8005e64:	ab03      	add	r3, sp, #12
 8005e66:	9301      	str	r3, [sp, #4]
 8005e68:	ab02      	add	r3, sp, #8
 8005e6a:	9300      	str	r3, [sp, #0]
 8005e6c:	ec47 6b10 	vmov	d0, r6, r7
 8005e70:	4653      	mov	r3, sl
 8005e72:	4622      	mov	r2, r4
 8005e74:	f000 ff00 	bl	8006c78 <_dtoa_r>
 8005e78:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005e7c:	4605      	mov	r5, r0
 8005e7e:	d119      	bne.n	8005eb4 <__cvt+0x94>
 8005e80:	f019 0f01 	tst.w	r9, #1
 8005e84:	d00e      	beq.n	8005ea4 <__cvt+0x84>
 8005e86:	eb00 0904 	add.w	r9, r0, r4
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	4630      	mov	r0, r6
 8005e90:	4639      	mov	r1, r7
 8005e92:	f7fa fe19 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e96:	b108      	cbz	r0, 8005e9c <__cvt+0x7c>
 8005e98:	f8cd 900c 	str.w	r9, [sp, #12]
 8005e9c:	2230      	movs	r2, #48	@ 0x30
 8005e9e:	9b03      	ldr	r3, [sp, #12]
 8005ea0:	454b      	cmp	r3, r9
 8005ea2:	d31e      	bcc.n	8005ee2 <__cvt+0xc2>
 8005ea4:	9b03      	ldr	r3, [sp, #12]
 8005ea6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005ea8:	1b5b      	subs	r3, r3, r5
 8005eaa:	4628      	mov	r0, r5
 8005eac:	6013      	str	r3, [r2, #0]
 8005eae:	b004      	add	sp, #16
 8005eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eb4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005eb8:	eb00 0904 	add.w	r9, r0, r4
 8005ebc:	d1e5      	bne.n	8005e8a <__cvt+0x6a>
 8005ebe:	7803      	ldrb	r3, [r0, #0]
 8005ec0:	2b30      	cmp	r3, #48	@ 0x30
 8005ec2:	d10a      	bne.n	8005eda <__cvt+0xba>
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	4630      	mov	r0, r6
 8005eca:	4639      	mov	r1, r7
 8005ecc:	f7fa fdfc 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ed0:	b918      	cbnz	r0, 8005eda <__cvt+0xba>
 8005ed2:	f1c4 0401 	rsb	r4, r4, #1
 8005ed6:	f8ca 4000 	str.w	r4, [sl]
 8005eda:	f8da 3000 	ldr.w	r3, [sl]
 8005ede:	4499      	add	r9, r3
 8005ee0:	e7d3      	b.n	8005e8a <__cvt+0x6a>
 8005ee2:	1c59      	adds	r1, r3, #1
 8005ee4:	9103      	str	r1, [sp, #12]
 8005ee6:	701a      	strb	r2, [r3, #0]
 8005ee8:	e7d9      	b.n	8005e9e <__cvt+0x7e>

08005eea <__exponent>:
 8005eea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005eec:	2900      	cmp	r1, #0
 8005eee:	bfba      	itte	lt
 8005ef0:	4249      	neglt	r1, r1
 8005ef2:	232d      	movlt	r3, #45	@ 0x2d
 8005ef4:	232b      	movge	r3, #43	@ 0x2b
 8005ef6:	2909      	cmp	r1, #9
 8005ef8:	7002      	strb	r2, [r0, #0]
 8005efa:	7043      	strb	r3, [r0, #1]
 8005efc:	dd29      	ble.n	8005f52 <__exponent+0x68>
 8005efe:	f10d 0307 	add.w	r3, sp, #7
 8005f02:	461d      	mov	r5, r3
 8005f04:	270a      	movs	r7, #10
 8005f06:	461a      	mov	r2, r3
 8005f08:	fbb1 f6f7 	udiv	r6, r1, r7
 8005f0c:	fb07 1416 	mls	r4, r7, r6, r1
 8005f10:	3430      	adds	r4, #48	@ 0x30
 8005f12:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005f16:	460c      	mov	r4, r1
 8005f18:	2c63      	cmp	r4, #99	@ 0x63
 8005f1a:	f103 33ff 	add.w	r3, r3, #4294967295
 8005f1e:	4631      	mov	r1, r6
 8005f20:	dcf1      	bgt.n	8005f06 <__exponent+0x1c>
 8005f22:	3130      	adds	r1, #48	@ 0x30
 8005f24:	1e94      	subs	r4, r2, #2
 8005f26:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005f2a:	1c41      	adds	r1, r0, #1
 8005f2c:	4623      	mov	r3, r4
 8005f2e:	42ab      	cmp	r3, r5
 8005f30:	d30a      	bcc.n	8005f48 <__exponent+0x5e>
 8005f32:	f10d 0309 	add.w	r3, sp, #9
 8005f36:	1a9b      	subs	r3, r3, r2
 8005f38:	42ac      	cmp	r4, r5
 8005f3a:	bf88      	it	hi
 8005f3c:	2300      	movhi	r3, #0
 8005f3e:	3302      	adds	r3, #2
 8005f40:	4403      	add	r3, r0
 8005f42:	1a18      	subs	r0, r3, r0
 8005f44:	b003      	add	sp, #12
 8005f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f48:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005f4c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005f50:	e7ed      	b.n	8005f2e <__exponent+0x44>
 8005f52:	2330      	movs	r3, #48	@ 0x30
 8005f54:	3130      	adds	r1, #48	@ 0x30
 8005f56:	7083      	strb	r3, [r0, #2]
 8005f58:	70c1      	strb	r1, [r0, #3]
 8005f5a:	1d03      	adds	r3, r0, #4
 8005f5c:	e7f1      	b.n	8005f42 <__exponent+0x58>
	...

08005f60 <_printf_float>:
 8005f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f64:	b08d      	sub	sp, #52	@ 0x34
 8005f66:	460c      	mov	r4, r1
 8005f68:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005f6c:	4616      	mov	r6, r2
 8005f6e:	461f      	mov	r7, r3
 8005f70:	4605      	mov	r5, r0
 8005f72:	f000 fd49 	bl	8006a08 <_localeconv_r>
 8005f76:	6803      	ldr	r3, [r0, #0]
 8005f78:	9304      	str	r3, [sp, #16]
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f7fa f978 	bl	8000270 <strlen>
 8005f80:	2300      	movs	r3, #0
 8005f82:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f84:	f8d8 3000 	ldr.w	r3, [r8]
 8005f88:	9005      	str	r0, [sp, #20]
 8005f8a:	3307      	adds	r3, #7
 8005f8c:	f023 0307 	bic.w	r3, r3, #7
 8005f90:	f103 0208 	add.w	r2, r3, #8
 8005f94:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005f98:	f8d4 b000 	ldr.w	fp, [r4]
 8005f9c:	f8c8 2000 	str.w	r2, [r8]
 8005fa0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005fa4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005fa8:	9307      	str	r3, [sp, #28]
 8005faa:	f8cd 8018 	str.w	r8, [sp, #24]
 8005fae:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005fb2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005fb6:	4b9c      	ldr	r3, [pc, #624]	@ (8006228 <_printf_float+0x2c8>)
 8005fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8005fbc:	f7fa fdb6 	bl	8000b2c <__aeabi_dcmpun>
 8005fc0:	bb70      	cbnz	r0, 8006020 <_printf_float+0xc0>
 8005fc2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005fc6:	4b98      	ldr	r3, [pc, #608]	@ (8006228 <_printf_float+0x2c8>)
 8005fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8005fcc:	f7fa fd90 	bl	8000af0 <__aeabi_dcmple>
 8005fd0:	bb30      	cbnz	r0, 8006020 <_printf_float+0xc0>
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	4640      	mov	r0, r8
 8005fd8:	4649      	mov	r1, r9
 8005fda:	f7fa fd7f 	bl	8000adc <__aeabi_dcmplt>
 8005fde:	b110      	cbz	r0, 8005fe6 <_printf_float+0x86>
 8005fe0:	232d      	movs	r3, #45	@ 0x2d
 8005fe2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fe6:	4a91      	ldr	r2, [pc, #580]	@ (800622c <_printf_float+0x2cc>)
 8005fe8:	4b91      	ldr	r3, [pc, #580]	@ (8006230 <_printf_float+0x2d0>)
 8005fea:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005fee:	bf94      	ite	ls
 8005ff0:	4690      	movls	r8, r2
 8005ff2:	4698      	movhi	r8, r3
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	6123      	str	r3, [r4, #16]
 8005ff8:	f02b 0304 	bic.w	r3, fp, #4
 8005ffc:	6023      	str	r3, [r4, #0]
 8005ffe:	f04f 0900 	mov.w	r9, #0
 8006002:	9700      	str	r7, [sp, #0]
 8006004:	4633      	mov	r3, r6
 8006006:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006008:	4621      	mov	r1, r4
 800600a:	4628      	mov	r0, r5
 800600c:	f000 f9d2 	bl	80063b4 <_printf_common>
 8006010:	3001      	adds	r0, #1
 8006012:	f040 808d 	bne.w	8006130 <_printf_float+0x1d0>
 8006016:	f04f 30ff 	mov.w	r0, #4294967295
 800601a:	b00d      	add	sp, #52	@ 0x34
 800601c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006020:	4642      	mov	r2, r8
 8006022:	464b      	mov	r3, r9
 8006024:	4640      	mov	r0, r8
 8006026:	4649      	mov	r1, r9
 8006028:	f7fa fd80 	bl	8000b2c <__aeabi_dcmpun>
 800602c:	b140      	cbz	r0, 8006040 <_printf_float+0xe0>
 800602e:	464b      	mov	r3, r9
 8006030:	2b00      	cmp	r3, #0
 8006032:	bfbc      	itt	lt
 8006034:	232d      	movlt	r3, #45	@ 0x2d
 8006036:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800603a:	4a7e      	ldr	r2, [pc, #504]	@ (8006234 <_printf_float+0x2d4>)
 800603c:	4b7e      	ldr	r3, [pc, #504]	@ (8006238 <_printf_float+0x2d8>)
 800603e:	e7d4      	b.n	8005fea <_printf_float+0x8a>
 8006040:	6863      	ldr	r3, [r4, #4]
 8006042:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006046:	9206      	str	r2, [sp, #24]
 8006048:	1c5a      	adds	r2, r3, #1
 800604a:	d13b      	bne.n	80060c4 <_printf_float+0x164>
 800604c:	2306      	movs	r3, #6
 800604e:	6063      	str	r3, [r4, #4]
 8006050:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006054:	2300      	movs	r3, #0
 8006056:	6022      	str	r2, [r4, #0]
 8006058:	9303      	str	r3, [sp, #12]
 800605a:	ab0a      	add	r3, sp, #40	@ 0x28
 800605c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006060:	ab09      	add	r3, sp, #36	@ 0x24
 8006062:	9300      	str	r3, [sp, #0]
 8006064:	6861      	ldr	r1, [r4, #4]
 8006066:	ec49 8b10 	vmov	d0, r8, r9
 800606a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800606e:	4628      	mov	r0, r5
 8006070:	f7ff fed6 	bl	8005e20 <__cvt>
 8006074:	9b06      	ldr	r3, [sp, #24]
 8006076:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006078:	2b47      	cmp	r3, #71	@ 0x47
 800607a:	4680      	mov	r8, r0
 800607c:	d129      	bne.n	80060d2 <_printf_float+0x172>
 800607e:	1cc8      	adds	r0, r1, #3
 8006080:	db02      	blt.n	8006088 <_printf_float+0x128>
 8006082:	6863      	ldr	r3, [r4, #4]
 8006084:	4299      	cmp	r1, r3
 8006086:	dd41      	ble.n	800610c <_printf_float+0x1ac>
 8006088:	f1aa 0a02 	sub.w	sl, sl, #2
 800608c:	fa5f fa8a 	uxtb.w	sl, sl
 8006090:	3901      	subs	r1, #1
 8006092:	4652      	mov	r2, sl
 8006094:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006098:	9109      	str	r1, [sp, #36]	@ 0x24
 800609a:	f7ff ff26 	bl	8005eea <__exponent>
 800609e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80060a0:	1813      	adds	r3, r2, r0
 80060a2:	2a01      	cmp	r2, #1
 80060a4:	4681      	mov	r9, r0
 80060a6:	6123      	str	r3, [r4, #16]
 80060a8:	dc02      	bgt.n	80060b0 <_printf_float+0x150>
 80060aa:	6822      	ldr	r2, [r4, #0]
 80060ac:	07d2      	lsls	r2, r2, #31
 80060ae:	d501      	bpl.n	80060b4 <_printf_float+0x154>
 80060b0:	3301      	adds	r3, #1
 80060b2:	6123      	str	r3, [r4, #16]
 80060b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d0a2      	beq.n	8006002 <_printf_float+0xa2>
 80060bc:	232d      	movs	r3, #45	@ 0x2d
 80060be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80060c2:	e79e      	b.n	8006002 <_printf_float+0xa2>
 80060c4:	9a06      	ldr	r2, [sp, #24]
 80060c6:	2a47      	cmp	r2, #71	@ 0x47
 80060c8:	d1c2      	bne.n	8006050 <_printf_float+0xf0>
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d1c0      	bne.n	8006050 <_printf_float+0xf0>
 80060ce:	2301      	movs	r3, #1
 80060d0:	e7bd      	b.n	800604e <_printf_float+0xee>
 80060d2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80060d6:	d9db      	bls.n	8006090 <_printf_float+0x130>
 80060d8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80060dc:	d118      	bne.n	8006110 <_printf_float+0x1b0>
 80060de:	2900      	cmp	r1, #0
 80060e0:	6863      	ldr	r3, [r4, #4]
 80060e2:	dd0b      	ble.n	80060fc <_printf_float+0x19c>
 80060e4:	6121      	str	r1, [r4, #16]
 80060e6:	b913      	cbnz	r3, 80060ee <_printf_float+0x18e>
 80060e8:	6822      	ldr	r2, [r4, #0]
 80060ea:	07d0      	lsls	r0, r2, #31
 80060ec:	d502      	bpl.n	80060f4 <_printf_float+0x194>
 80060ee:	3301      	adds	r3, #1
 80060f0:	440b      	add	r3, r1
 80060f2:	6123      	str	r3, [r4, #16]
 80060f4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80060f6:	f04f 0900 	mov.w	r9, #0
 80060fa:	e7db      	b.n	80060b4 <_printf_float+0x154>
 80060fc:	b913      	cbnz	r3, 8006104 <_printf_float+0x1a4>
 80060fe:	6822      	ldr	r2, [r4, #0]
 8006100:	07d2      	lsls	r2, r2, #31
 8006102:	d501      	bpl.n	8006108 <_printf_float+0x1a8>
 8006104:	3302      	adds	r3, #2
 8006106:	e7f4      	b.n	80060f2 <_printf_float+0x192>
 8006108:	2301      	movs	r3, #1
 800610a:	e7f2      	b.n	80060f2 <_printf_float+0x192>
 800610c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006110:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006112:	4299      	cmp	r1, r3
 8006114:	db05      	blt.n	8006122 <_printf_float+0x1c2>
 8006116:	6823      	ldr	r3, [r4, #0]
 8006118:	6121      	str	r1, [r4, #16]
 800611a:	07d8      	lsls	r0, r3, #31
 800611c:	d5ea      	bpl.n	80060f4 <_printf_float+0x194>
 800611e:	1c4b      	adds	r3, r1, #1
 8006120:	e7e7      	b.n	80060f2 <_printf_float+0x192>
 8006122:	2900      	cmp	r1, #0
 8006124:	bfd4      	ite	le
 8006126:	f1c1 0202 	rsble	r2, r1, #2
 800612a:	2201      	movgt	r2, #1
 800612c:	4413      	add	r3, r2
 800612e:	e7e0      	b.n	80060f2 <_printf_float+0x192>
 8006130:	6823      	ldr	r3, [r4, #0]
 8006132:	055a      	lsls	r2, r3, #21
 8006134:	d407      	bmi.n	8006146 <_printf_float+0x1e6>
 8006136:	6923      	ldr	r3, [r4, #16]
 8006138:	4642      	mov	r2, r8
 800613a:	4631      	mov	r1, r6
 800613c:	4628      	mov	r0, r5
 800613e:	47b8      	blx	r7
 8006140:	3001      	adds	r0, #1
 8006142:	d12b      	bne.n	800619c <_printf_float+0x23c>
 8006144:	e767      	b.n	8006016 <_printf_float+0xb6>
 8006146:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800614a:	f240 80dd 	bls.w	8006308 <_printf_float+0x3a8>
 800614e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006152:	2200      	movs	r2, #0
 8006154:	2300      	movs	r3, #0
 8006156:	f7fa fcb7 	bl	8000ac8 <__aeabi_dcmpeq>
 800615a:	2800      	cmp	r0, #0
 800615c:	d033      	beq.n	80061c6 <_printf_float+0x266>
 800615e:	4a37      	ldr	r2, [pc, #220]	@ (800623c <_printf_float+0x2dc>)
 8006160:	2301      	movs	r3, #1
 8006162:	4631      	mov	r1, r6
 8006164:	4628      	mov	r0, r5
 8006166:	47b8      	blx	r7
 8006168:	3001      	adds	r0, #1
 800616a:	f43f af54 	beq.w	8006016 <_printf_float+0xb6>
 800616e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006172:	4543      	cmp	r3, r8
 8006174:	db02      	blt.n	800617c <_printf_float+0x21c>
 8006176:	6823      	ldr	r3, [r4, #0]
 8006178:	07d8      	lsls	r0, r3, #31
 800617a:	d50f      	bpl.n	800619c <_printf_float+0x23c>
 800617c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006180:	4631      	mov	r1, r6
 8006182:	4628      	mov	r0, r5
 8006184:	47b8      	blx	r7
 8006186:	3001      	adds	r0, #1
 8006188:	f43f af45 	beq.w	8006016 <_printf_float+0xb6>
 800618c:	f04f 0900 	mov.w	r9, #0
 8006190:	f108 38ff 	add.w	r8, r8, #4294967295
 8006194:	f104 0a1a 	add.w	sl, r4, #26
 8006198:	45c8      	cmp	r8, r9
 800619a:	dc09      	bgt.n	80061b0 <_printf_float+0x250>
 800619c:	6823      	ldr	r3, [r4, #0]
 800619e:	079b      	lsls	r3, r3, #30
 80061a0:	f100 8103 	bmi.w	80063aa <_printf_float+0x44a>
 80061a4:	68e0      	ldr	r0, [r4, #12]
 80061a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80061a8:	4298      	cmp	r0, r3
 80061aa:	bfb8      	it	lt
 80061ac:	4618      	movlt	r0, r3
 80061ae:	e734      	b.n	800601a <_printf_float+0xba>
 80061b0:	2301      	movs	r3, #1
 80061b2:	4652      	mov	r2, sl
 80061b4:	4631      	mov	r1, r6
 80061b6:	4628      	mov	r0, r5
 80061b8:	47b8      	blx	r7
 80061ba:	3001      	adds	r0, #1
 80061bc:	f43f af2b 	beq.w	8006016 <_printf_float+0xb6>
 80061c0:	f109 0901 	add.w	r9, r9, #1
 80061c4:	e7e8      	b.n	8006198 <_printf_float+0x238>
 80061c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	dc39      	bgt.n	8006240 <_printf_float+0x2e0>
 80061cc:	4a1b      	ldr	r2, [pc, #108]	@ (800623c <_printf_float+0x2dc>)
 80061ce:	2301      	movs	r3, #1
 80061d0:	4631      	mov	r1, r6
 80061d2:	4628      	mov	r0, r5
 80061d4:	47b8      	blx	r7
 80061d6:	3001      	adds	r0, #1
 80061d8:	f43f af1d 	beq.w	8006016 <_printf_float+0xb6>
 80061dc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80061e0:	ea59 0303 	orrs.w	r3, r9, r3
 80061e4:	d102      	bne.n	80061ec <_printf_float+0x28c>
 80061e6:	6823      	ldr	r3, [r4, #0]
 80061e8:	07d9      	lsls	r1, r3, #31
 80061ea:	d5d7      	bpl.n	800619c <_printf_float+0x23c>
 80061ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061f0:	4631      	mov	r1, r6
 80061f2:	4628      	mov	r0, r5
 80061f4:	47b8      	blx	r7
 80061f6:	3001      	adds	r0, #1
 80061f8:	f43f af0d 	beq.w	8006016 <_printf_float+0xb6>
 80061fc:	f04f 0a00 	mov.w	sl, #0
 8006200:	f104 0b1a 	add.w	fp, r4, #26
 8006204:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006206:	425b      	negs	r3, r3
 8006208:	4553      	cmp	r3, sl
 800620a:	dc01      	bgt.n	8006210 <_printf_float+0x2b0>
 800620c:	464b      	mov	r3, r9
 800620e:	e793      	b.n	8006138 <_printf_float+0x1d8>
 8006210:	2301      	movs	r3, #1
 8006212:	465a      	mov	r2, fp
 8006214:	4631      	mov	r1, r6
 8006216:	4628      	mov	r0, r5
 8006218:	47b8      	blx	r7
 800621a:	3001      	adds	r0, #1
 800621c:	f43f aefb 	beq.w	8006016 <_printf_float+0xb6>
 8006220:	f10a 0a01 	add.w	sl, sl, #1
 8006224:	e7ee      	b.n	8006204 <_printf_float+0x2a4>
 8006226:	bf00      	nop
 8006228:	7fefffff 	.word	0x7fefffff
 800622c:	0800a660 	.word	0x0800a660
 8006230:	0800a664 	.word	0x0800a664
 8006234:	0800a668 	.word	0x0800a668
 8006238:	0800a66c 	.word	0x0800a66c
 800623c:	0800a670 	.word	0x0800a670
 8006240:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006242:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006246:	4553      	cmp	r3, sl
 8006248:	bfa8      	it	ge
 800624a:	4653      	movge	r3, sl
 800624c:	2b00      	cmp	r3, #0
 800624e:	4699      	mov	r9, r3
 8006250:	dc36      	bgt.n	80062c0 <_printf_float+0x360>
 8006252:	f04f 0b00 	mov.w	fp, #0
 8006256:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800625a:	f104 021a 	add.w	r2, r4, #26
 800625e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006260:	9306      	str	r3, [sp, #24]
 8006262:	eba3 0309 	sub.w	r3, r3, r9
 8006266:	455b      	cmp	r3, fp
 8006268:	dc31      	bgt.n	80062ce <_printf_float+0x36e>
 800626a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800626c:	459a      	cmp	sl, r3
 800626e:	dc3a      	bgt.n	80062e6 <_printf_float+0x386>
 8006270:	6823      	ldr	r3, [r4, #0]
 8006272:	07da      	lsls	r2, r3, #31
 8006274:	d437      	bmi.n	80062e6 <_printf_float+0x386>
 8006276:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006278:	ebaa 0903 	sub.w	r9, sl, r3
 800627c:	9b06      	ldr	r3, [sp, #24]
 800627e:	ebaa 0303 	sub.w	r3, sl, r3
 8006282:	4599      	cmp	r9, r3
 8006284:	bfa8      	it	ge
 8006286:	4699      	movge	r9, r3
 8006288:	f1b9 0f00 	cmp.w	r9, #0
 800628c:	dc33      	bgt.n	80062f6 <_printf_float+0x396>
 800628e:	f04f 0800 	mov.w	r8, #0
 8006292:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006296:	f104 0b1a 	add.w	fp, r4, #26
 800629a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800629c:	ebaa 0303 	sub.w	r3, sl, r3
 80062a0:	eba3 0309 	sub.w	r3, r3, r9
 80062a4:	4543      	cmp	r3, r8
 80062a6:	f77f af79 	ble.w	800619c <_printf_float+0x23c>
 80062aa:	2301      	movs	r3, #1
 80062ac:	465a      	mov	r2, fp
 80062ae:	4631      	mov	r1, r6
 80062b0:	4628      	mov	r0, r5
 80062b2:	47b8      	blx	r7
 80062b4:	3001      	adds	r0, #1
 80062b6:	f43f aeae 	beq.w	8006016 <_printf_float+0xb6>
 80062ba:	f108 0801 	add.w	r8, r8, #1
 80062be:	e7ec      	b.n	800629a <_printf_float+0x33a>
 80062c0:	4642      	mov	r2, r8
 80062c2:	4631      	mov	r1, r6
 80062c4:	4628      	mov	r0, r5
 80062c6:	47b8      	blx	r7
 80062c8:	3001      	adds	r0, #1
 80062ca:	d1c2      	bne.n	8006252 <_printf_float+0x2f2>
 80062cc:	e6a3      	b.n	8006016 <_printf_float+0xb6>
 80062ce:	2301      	movs	r3, #1
 80062d0:	4631      	mov	r1, r6
 80062d2:	4628      	mov	r0, r5
 80062d4:	9206      	str	r2, [sp, #24]
 80062d6:	47b8      	blx	r7
 80062d8:	3001      	adds	r0, #1
 80062da:	f43f ae9c 	beq.w	8006016 <_printf_float+0xb6>
 80062de:	9a06      	ldr	r2, [sp, #24]
 80062e0:	f10b 0b01 	add.w	fp, fp, #1
 80062e4:	e7bb      	b.n	800625e <_printf_float+0x2fe>
 80062e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062ea:	4631      	mov	r1, r6
 80062ec:	4628      	mov	r0, r5
 80062ee:	47b8      	blx	r7
 80062f0:	3001      	adds	r0, #1
 80062f2:	d1c0      	bne.n	8006276 <_printf_float+0x316>
 80062f4:	e68f      	b.n	8006016 <_printf_float+0xb6>
 80062f6:	9a06      	ldr	r2, [sp, #24]
 80062f8:	464b      	mov	r3, r9
 80062fa:	4442      	add	r2, r8
 80062fc:	4631      	mov	r1, r6
 80062fe:	4628      	mov	r0, r5
 8006300:	47b8      	blx	r7
 8006302:	3001      	adds	r0, #1
 8006304:	d1c3      	bne.n	800628e <_printf_float+0x32e>
 8006306:	e686      	b.n	8006016 <_printf_float+0xb6>
 8006308:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800630c:	f1ba 0f01 	cmp.w	sl, #1
 8006310:	dc01      	bgt.n	8006316 <_printf_float+0x3b6>
 8006312:	07db      	lsls	r3, r3, #31
 8006314:	d536      	bpl.n	8006384 <_printf_float+0x424>
 8006316:	2301      	movs	r3, #1
 8006318:	4642      	mov	r2, r8
 800631a:	4631      	mov	r1, r6
 800631c:	4628      	mov	r0, r5
 800631e:	47b8      	blx	r7
 8006320:	3001      	adds	r0, #1
 8006322:	f43f ae78 	beq.w	8006016 <_printf_float+0xb6>
 8006326:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800632a:	4631      	mov	r1, r6
 800632c:	4628      	mov	r0, r5
 800632e:	47b8      	blx	r7
 8006330:	3001      	adds	r0, #1
 8006332:	f43f ae70 	beq.w	8006016 <_printf_float+0xb6>
 8006336:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800633a:	2200      	movs	r2, #0
 800633c:	2300      	movs	r3, #0
 800633e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006342:	f7fa fbc1 	bl	8000ac8 <__aeabi_dcmpeq>
 8006346:	b9c0      	cbnz	r0, 800637a <_printf_float+0x41a>
 8006348:	4653      	mov	r3, sl
 800634a:	f108 0201 	add.w	r2, r8, #1
 800634e:	4631      	mov	r1, r6
 8006350:	4628      	mov	r0, r5
 8006352:	47b8      	blx	r7
 8006354:	3001      	adds	r0, #1
 8006356:	d10c      	bne.n	8006372 <_printf_float+0x412>
 8006358:	e65d      	b.n	8006016 <_printf_float+0xb6>
 800635a:	2301      	movs	r3, #1
 800635c:	465a      	mov	r2, fp
 800635e:	4631      	mov	r1, r6
 8006360:	4628      	mov	r0, r5
 8006362:	47b8      	blx	r7
 8006364:	3001      	adds	r0, #1
 8006366:	f43f ae56 	beq.w	8006016 <_printf_float+0xb6>
 800636a:	f108 0801 	add.w	r8, r8, #1
 800636e:	45d0      	cmp	r8, sl
 8006370:	dbf3      	blt.n	800635a <_printf_float+0x3fa>
 8006372:	464b      	mov	r3, r9
 8006374:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006378:	e6df      	b.n	800613a <_printf_float+0x1da>
 800637a:	f04f 0800 	mov.w	r8, #0
 800637e:	f104 0b1a 	add.w	fp, r4, #26
 8006382:	e7f4      	b.n	800636e <_printf_float+0x40e>
 8006384:	2301      	movs	r3, #1
 8006386:	4642      	mov	r2, r8
 8006388:	e7e1      	b.n	800634e <_printf_float+0x3ee>
 800638a:	2301      	movs	r3, #1
 800638c:	464a      	mov	r2, r9
 800638e:	4631      	mov	r1, r6
 8006390:	4628      	mov	r0, r5
 8006392:	47b8      	blx	r7
 8006394:	3001      	adds	r0, #1
 8006396:	f43f ae3e 	beq.w	8006016 <_printf_float+0xb6>
 800639a:	f108 0801 	add.w	r8, r8, #1
 800639e:	68e3      	ldr	r3, [r4, #12]
 80063a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80063a2:	1a5b      	subs	r3, r3, r1
 80063a4:	4543      	cmp	r3, r8
 80063a6:	dcf0      	bgt.n	800638a <_printf_float+0x42a>
 80063a8:	e6fc      	b.n	80061a4 <_printf_float+0x244>
 80063aa:	f04f 0800 	mov.w	r8, #0
 80063ae:	f104 0919 	add.w	r9, r4, #25
 80063b2:	e7f4      	b.n	800639e <_printf_float+0x43e>

080063b4 <_printf_common>:
 80063b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063b8:	4616      	mov	r6, r2
 80063ba:	4698      	mov	r8, r3
 80063bc:	688a      	ldr	r2, [r1, #8]
 80063be:	690b      	ldr	r3, [r1, #16]
 80063c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80063c4:	4293      	cmp	r3, r2
 80063c6:	bfb8      	it	lt
 80063c8:	4613      	movlt	r3, r2
 80063ca:	6033      	str	r3, [r6, #0]
 80063cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80063d0:	4607      	mov	r7, r0
 80063d2:	460c      	mov	r4, r1
 80063d4:	b10a      	cbz	r2, 80063da <_printf_common+0x26>
 80063d6:	3301      	adds	r3, #1
 80063d8:	6033      	str	r3, [r6, #0]
 80063da:	6823      	ldr	r3, [r4, #0]
 80063dc:	0699      	lsls	r1, r3, #26
 80063de:	bf42      	ittt	mi
 80063e0:	6833      	ldrmi	r3, [r6, #0]
 80063e2:	3302      	addmi	r3, #2
 80063e4:	6033      	strmi	r3, [r6, #0]
 80063e6:	6825      	ldr	r5, [r4, #0]
 80063e8:	f015 0506 	ands.w	r5, r5, #6
 80063ec:	d106      	bne.n	80063fc <_printf_common+0x48>
 80063ee:	f104 0a19 	add.w	sl, r4, #25
 80063f2:	68e3      	ldr	r3, [r4, #12]
 80063f4:	6832      	ldr	r2, [r6, #0]
 80063f6:	1a9b      	subs	r3, r3, r2
 80063f8:	42ab      	cmp	r3, r5
 80063fa:	dc26      	bgt.n	800644a <_printf_common+0x96>
 80063fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006400:	6822      	ldr	r2, [r4, #0]
 8006402:	3b00      	subs	r3, #0
 8006404:	bf18      	it	ne
 8006406:	2301      	movne	r3, #1
 8006408:	0692      	lsls	r2, r2, #26
 800640a:	d42b      	bmi.n	8006464 <_printf_common+0xb0>
 800640c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006410:	4641      	mov	r1, r8
 8006412:	4638      	mov	r0, r7
 8006414:	47c8      	blx	r9
 8006416:	3001      	adds	r0, #1
 8006418:	d01e      	beq.n	8006458 <_printf_common+0xa4>
 800641a:	6823      	ldr	r3, [r4, #0]
 800641c:	6922      	ldr	r2, [r4, #16]
 800641e:	f003 0306 	and.w	r3, r3, #6
 8006422:	2b04      	cmp	r3, #4
 8006424:	bf02      	ittt	eq
 8006426:	68e5      	ldreq	r5, [r4, #12]
 8006428:	6833      	ldreq	r3, [r6, #0]
 800642a:	1aed      	subeq	r5, r5, r3
 800642c:	68a3      	ldr	r3, [r4, #8]
 800642e:	bf0c      	ite	eq
 8006430:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006434:	2500      	movne	r5, #0
 8006436:	4293      	cmp	r3, r2
 8006438:	bfc4      	itt	gt
 800643a:	1a9b      	subgt	r3, r3, r2
 800643c:	18ed      	addgt	r5, r5, r3
 800643e:	2600      	movs	r6, #0
 8006440:	341a      	adds	r4, #26
 8006442:	42b5      	cmp	r5, r6
 8006444:	d11a      	bne.n	800647c <_printf_common+0xc8>
 8006446:	2000      	movs	r0, #0
 8006448:	e008      	b.n	800645c <_printf_common+0xa8>
 800644a:	2301      	movs	r3, #1
 800644c:	4652      	mov	r2, sl
 800644e:	4641      	mov	r1, r8
 8006450:	4638      	mov	r0, r7
 8006452:	47c8      	blx	r9
 8006454:	3001      	adds	r0, #1
 8006456:	d103      	bne.n	8006460 <_printf_common+0xac>
 8006458:	f04f 30ff 	mov.w	r0, #4294967295
 800645c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006460:	3501      	adds	r5, #1
 8006462:	e7c6      	b.n	80063f2 <_printf_common+0x3e>
 8006464:	18e1      	adds	r1, r4, r3
 8006466:	1c5a      	adds	r2, r3, #1
 8006468:	2030      	movs	r0, #48	@ 0x30
 800646a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800646e:	4422      	add	r2, r4
 8006470:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006474:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006478:	3302      	adds	r3, #2
 800647a:	e7c7      	b.n	800640c <_printf_common+0x58>
 800647c:	2301      	movs	r3, #1
 800647e:	4622      	mov	r2, r4
 8006480:	4641      	mov	r1, r8
 8006482:	4638      	mov	r0, r7
 8006484:	47c8      	blx	r9
 8006486:	3001      	adds	r0, #1
 8006488:	d0e6      	beq.n	8006458 <_printf_common+0xa4>
 800648a:	3601      	adds	r6, #1
 800648c:	e7d9      	b.n	8006442 <_printf_common+0x8e>
	...

08006490 <_printf_i>:
 8006490:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006494:	7e0f      	ldrb	r7, [r1, #24]
 8006496:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006498:	2f78      	cmp	r7, #120	@ 0x78
 800649a:	4691      	mov	r9, r2
 800649c:	4680      	mov	r8, r0
 800649e:	460c      	mov	r4, r1
 80064a0:	469a      	mov	sl, r3
 80064a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80064a6:	d807      	bhi.n	80064b8 <_printf_i+0x28>
 80064a8:	2f62      	cmp	r7, #98	@ 0x62
 80064aa:	d80a      	bhi.n	80064c2 <_printf_i+0x32>
 80064ac:	2f00      	cmp	r7, #0
 80064ae:	f000 80d2 	beq.w	8006656 <_printf_i+0x1c6>
 80064b2:	2f58      	cmp	r7, #88	@ 0x58
 80064b4:	f000 80b9 	beq.w	800662a <_printf_i+0x19a>
 80064b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80064bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80064c0:	e03a      	b.n	8006538 <_printf_i+0xa8>
 80064c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80064c6:	2b15      	cmp	r3, #21
 80064c8:	d8f6      	bhi.n	80064b8 <_printf_i+0x28>
 80064ca:	a101      	add	r1, pc, #4	@ (adr r1, 80064d0 <_printf_i+0x40>)
 80064cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80064d0:	08006529 	.word	0x08006529
 80064d4:	0800653d 	.word	0x0800653d
 80064d8:	080064b9 	.word	0x080064b9
 80064dc:	080064b9 	.word	0x080064b9
 80064e0:	080064b9 	.word	0x080064b9
 80064e4:	080064b9 	.word	0x080064b9
 80064e8:	0800653d 	.word	0x0800653d
 80064ec:	080064b9 	.word	0x080064b9
 80064f0:	080064b9 	.word	0x080064b9
 80064f4:	080064b9 	.word	0x080064b9
 80064f8:	080064b9 	.word	0x080064b9
 80064fc:	0800663d 	.word	0x0800663d
 8006500:	08006567 	.word	0x08006567
 8006504:	080065f7 	.word	0x080065f7
 8006508:	080064b9 	.word	0x080064b9
 800650c:	080064b9 	.word	0x080064b9
 8006510:	0800665f 	.word	0x0800665f
 8006514:	080064b9 	.word	0x080064b9
 8006518:	08006567 	.word	0x08006567
 800651c:	080064b9 	.word	0x080064b9
 8006520:	080064b9 	.word	0x080064b9
 8006524:	080065ff 	.word	0x080065ff
 8006528:	6833      	ldr	r3, [r6, #0]
 800652a:	1d1a      	adds	r2, r3, #4
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	6032      	str	r2, [r6, #0]
 8006530:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006534:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006538:	2301      	movs	r3, #1
 800653a:	e09d      	b.n	8006678 <_printf_i+0x1e8>
 800653c:	6833      	ldr	r3, [r6, #0]
 800653e:	6820      	ldr	r0, [r4, #0]
 8006540:	1d19      	adds	r1, r3, #4
 8006542:	6031      	str	r1, [r6, #0]
 8006544:	0606      	lsls	r6, r0, #24
 8006546:	d501      	bpl.n	800654c <_printf_i+0xbc>
 8006548:	681d      	ldr	r5, [r3, #0]
 800654a:	e003      	b.n	8006554 <_printf_i+0xc4>
 800654c:	0645      	lsls	r5, r0, #25
 800654e:	d5fb      	bpl.n	8006548 <_printf_i+0xb8>
 8006550:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006554:	2d00      	cmp	r5, #0
 8006556:	da03      	bge.n	8006560 <_printf_i+0xd0>
 8006558:	232d      	movs	r3, #45	@ 0x2d
 800655a:	426d      	negs	r5, r5
 800655c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006560:	4859      	ldr	r0, [pc, #356]	@ (80066c8 <_printf_i+0x238>)
 8006562:	230a      	movs	r3, #10
 8006564:	e011      	b.n	800658a <_printf_i+0xfa>
 8006566:	6821      	ldr	r1, [r4, #0]
 8006568:	6833      	ldr	r3, [r6, #0]
 800656a:	0608      	lsls	r0, r1, #24
 800656c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006570:	d402      	bmi.n	8006578 <_printf_i+0xe8>
 8006572:	0649      	lsls	r1, r1, #25
 8006574:	bf48      	it	mi
 8006576:	b2ad      	uxthmi	r5, r5
 8006578:	2f6f      	cmp	r7, #111	@ 0x6f
 800657a:	4853      	ldr	r0, [pc, #332]	@ (80066c8 <_printf_i+0x238>)
 800657c:	6033      	str	r3, [r6, #0]
 800657e:	bf14      	ite	ne
 8006580:	230a      	movne	r3, #10
 8006582:	2308      	moveq	r3, #8
 8006584:	2100      	movs	r1, #0
 8006586:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800658a:	6866      	ldr	r6, [r4, #4]
 800658c:	60a6      	str	r6, [r4, #8]
 800658e:	2e00      	cmp	r6, #0
 8006590:	bfa2      	ittt	ge
 8006592:	6821      	ldrge	r1, [r4, #0]
 8006594:	f021 0104 	bicge.w	r1, r1, #4
 8006598:	6021      	strge	r1, [r4, #0]
 800659a:	b90d      	cbnz	r5, 80065a0 <_printf_i+0x110>
 800659c:	2e00      	cmp	r6, #0
 800659e:	d04b      	beq.n	8006638 <_printf_i+0x1a8>
 80065a0:	4616      	mov	r6, r2
 80065a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80065a6:	fb03 5711 	mls	r7, r3, r1, r5
 80065aa:	5dc7      	ldrb	r7, [r0, r7]
 80065ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80065b0:	462f      	mov	r7, r5
 80065b2:	42bb      	cmp	r3, r7
 80065b4:	460d      	mov	r5, r1
 80065b6:	d9f4      	bls.n	80065a2 <_printf_i+0x112>
 80065b8:	2b08      	cmp	r3, #8
 80065ba:	d10b      	bne.n	80065d4 <_printf_i+0x144>
 80065bc:	6823      	ldr	r3, [r4, #0]
 80065be:	07df      	lsls	r7, r3, #31
 80065c0:	d508      	bpl.n	80065d4 <_printf_i+0x144>
 80065c2:	6923      	ldr	r3, [r4, #16]
 80065c4:	6861      	ldr	r1, [r4, #4]
 80065c6:	4299      	cmp	r1, r3
 80065c8:	bfde      	ittt	le
 80065ca:	2330      	movle	r3, #48	@ 0x30
 80065cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80065d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80065d4:	1b92      	subs	r2, r2, r6
 80065d6:	6122      	str	r2, [r4, #16]
 80065d8:	f8cd a000 	str.w	sl, [sp]
 80065dc:	464b      	mov	r3, r9
 80065de:	aa03      	add	r2, sp, #12
 80065e0:	4621      	mov	r1, r4
 80065e2:	4640      	mov	r0, r8
 80065e4:	f7ff fee6 	bl	80063b4 <_printf_common>
 80065e8:	3001      	adds	r0, #1
 80065ea:	d14a      	bne.n	8006682 <_printf_i+0x1f2>
 80065ec:	f04f 30ff 	mov.w	r0, #4294967295
 80065f0:	b004      	add	sp, #16
 80065f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065f6:	6823      	ldr	r3, [r4, #0]
 80065f8:	f043 0320 	orr.w	r3, r3, #32
 80065fc:	6023      	str	r3, [r4, #0]
 80065fe:	4833      	ldr	r0, [pc, #204]	@ (80066cc <_printf_i+0x23c>)
 8006600:	2778      	movs	r7, #120	@ 0x78
 8006602:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006606:	6823      	ldr	r3, [r4, #0]
 8006608:	6831      	ldr	r1, [r6, #0]
 800660a:	061f      	lsls	r7, r3, #24
 800660c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006610:	d402      	bmi.n	8006618 <_printf_i+0x188>
 8006612:	065f      	lsls	r7, r3, #25
 8006614:	bf48      	it	mi
 8006616:	b2ad      	uxthmi	r5, r5
 8006618:	6031      	str	r1, [r6, #0]
 800661a:	07d9      	lsls	r1, r3, #31
 800661c:	bf44      	itt	mi
 800661e:	f043 0320 	orrmi.w	r3, r3, #32
 8006622:	6023      	strmi	r3, [r4, #0]
 8006624:	b11d      	cbz	r5, 800662e <_printf_i+0x19e>
 8006626:	2310      	movs	r3, #16
 8006628:	e7ac      	b.n	8006584 <_printf_i+0xf4>
 800662a:	4827      	ldr	r0, [pc, #156]	@ (80066c8 <_printf_i+0x238>)
 800662c:	e7e9      	b.n	8006602 <_printf_i+0x172>
 800662e:	6823      	ldr	r3, [r4, #0]
 8006630:	f023 0320 	bic.w	r3, r3, #32
 8006634:	6023      	str	r3, [r4, #0]
 8006636:	e7f6      	b.n	8006626 <_printf_i+0x196>
 8006638:	4616      	mov	r6, r2
 800663a:	e7bd      	b.n	80065b8 <_printf_i+0x128>
 800663c:	6833      	ldr	r3, [r6, #0]
 800663e:	6825      	ldr	r5, [r4, #0]
 8006640:	6961      	ldr	r1, [r4, #20]
 8006642:	1d18      	adds	r0, r3, #4
 8006644:	6030      	str	r0, [r6, #0]
 8006646:	062e      	lsls	r6, r5, #24
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	d501      	bpl.n	8006650 <_printf_i+0x1c0>
 800664c:	6019      	str	r1, [r3, #0]
 800664e:	e002      	b.n	8006656 <_printf_i+0x1c6>
 8006650:	0668      	lsls	r0, r5, #25
 8006652:	d5fb      	bpl.n	800664c <_printf_i+0x1bc>
 8006654:	8019      	strh	r1, [r3, #0]
 8006656:	2300      	movs	r3, #0
 8006658:	6123      	str	r3, [r4, #16]
 800665a:	4616      	mov	r6, r2
 800665c:	e7bc      	b.n	80065d8 <_printf_i+0x148>
 800665e:	6833      	ldr	r3, [r6, #0]
 8006660:	1d1a      	adds	r2, r3, #4
 8006662:	6032      	str	r2, [r6, #0]
 8006664:	681e      	ldr	r6, [r3, #0]
 8006666:	6862      	ldr	r2, [r4, #4]
 8006668:	2100      	movs	r1, #0
 800666a:	4630      	mov	r0, r6
 800666c:	f7f9 fdb0 	bl	80001d0 <memchr>
 8006670:	b108      	cbz	r0, 8006676 <_printf_i+0x1e6>
 8006672:	1b80      	subs	r0, r0, r6
 8006674:	6060      	str	r0, [r4, #4]
 8006676:	6863      	ldr	r3, [r4, #4]
 8006678:	6123      	str	r3, [r4, #16]
 800667a:	2300      	movs	r3, #0
 800667c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006680:	e7aa      	b.n	80065d8 <_printf_i+0x148>
 8006682:	6923      	ldr	r3, [r4, #16]
 8006684:	4632      	mov	r2, r6
 8006686:	4649      	mov	r1, r9
 8006688:	4640      	mov	r0, r8
 800668a:	47d0      	blx	sl
 800668c:	3001      	adds	r0, #1
 800668e:	d0ad      	beq.n	80065ec <_printf_i+0x15c>
 8006690:	6823      	ldr	r3, [r4, #0]
 8006692:	079b      	lsls	r3, r3, #30
 8006694:	d413      	bmi.n	80066be <_printf_i+0x22e>
 8006696:	68e0      	ldr	r0, [r4, #12]
 8006698:	9b03      	ldr	r3, [sp, #12]
 800669a:	4298      	cmp	r0, r3
 800669c:	bfb8      	it	lt
 800669e:	4618      	movlt	r0, r3
 80066a0:	e7a6      	b.n	80065f0 <_printf_i+0x160>
 80066a2:	2301      	movs	r3, #1
 80066a4:	4632      	mov	r2, r6
 80066a6:	4649      	mov	r1, r9
 80066a8:	4640      	mov	r0, r8
 80066aa:	47d0      	blx	sl
 80066ac:	3001      	adds	r0, #1
 80066ae:	d09d      	beq.n	80065ec <_printf_i+0x15c>
 80066b0:	3501      	adds	r5, #1
 80066b2:	68e3      	ldr	r3, [r4, #12]
 80066b4:	9903      	ldr	r1, [sp, #12]
 80066b6:	1a5b      	subs	r3, r3, r1
 80066b8:	42ab      	cmp	r3, r5
 80066ba:	dcf2      	bgt.n	80066a2 <_printf_i+0x212>
 80066bc:	e7eb      	b.n	8006696 <_printf_i+0x206>
 80066be:	2500      	movs	r5, #0
 80066c0:	f104 0619 	add.w	r6, r4, #25
 80066c4:	e7f5      	b.n	80066b2 <_printf_i+0x222>
 80066c6:	bf00      	nop
 80066c8:	0800a672 	.word	0x0800a672
 80066cc:	0800a683 	.word	0x0800a683

080066d0 <std>:
 80066d0:	2300      	movs	r3, #0
 80066d2:	b510      	push	{r4, lr}
 80066d4:	4604      	mov	r4, r0
 80066d6:	e9c0 3300 	strd	r3, r3, [r0]
 80066da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80066de:	6083      	str	r3, [r0, #8]
 80066e0:	8181      	strh	r1, [r0, #12]
 80066e2:	6643      	str	r3, [r0, #100]	@ 0x64
 80066e4:	81c2      	strh	r2, [r0, #14]
 80066e6:	6183      	str	r3, [r0, #24]
 80066e8:	4619      	mov	r1, r3
 80066ea:	2208      	movs	r2, #8
 80066ec:	305c      	adds	r0, #92	@ 0x5c
 80066ee:	f000 f914 	bl	800691a <memset>
 80066f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006728 <std+0x58>)
 80066f4:	6263      	str	r3, [r4, #36]	@ 0x24
 80066f6:	4b0d      	ldr	r3, [pc, #52]	@ (800672c <std+0x5c>)
 80066f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80066fa:	4b0d      	ldr	r3, [pc, #52]	@ (8006730 <std+0x60>)
 80066fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80066fe:	4b0d      	ldr	r3, [pc, #52]	@ (8006734 <std+0x64>)
 8006700:	6323      	str	r3, [r4, #48]	@ 0x30
 8006702:	4b0d      	ldr	r3, [pc, #52]	@ (8006738 <std+0x68>)
 8006704:	6224      	str	r4, [r4, #32]
 8006706:	429c      	cmp	r4, r3
 8006708:	d006      	beq.n	8006718 <std+0x48>
 800670a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800670e:	4294      	cmp	r4, r2
 8006710:	d002      	beq.n	8006718 <std+0x48>
 8006712:	33d0      	adds	r3, #208	@ 0xd0
 8006714:	429c      	cmp	r4, r3
 8006716:	d105      	bne.n	8006724 <std+0x54>
 8006718:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800671c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006720:	f000 b9e6 	b.w	8006af0 <__retarget_lock_init_recursive>
 8006724:	bd10      	pop	{r4, pc}
 8006726:	bf00      	nop
 8006728:	08006895 	.word	0x08006895
 800672c:	080068b7 	.word	0x080068b7
 8006730:	080068ef 	.word	0x080068ef
 8006734:	08006913 	.word	0x08006913
 8006738:	20000570 	.word	0x20000570

0800673c <stdio_exit_handler>:
 800673c:	4a02      	ldr	r2, [pc, #8]	@ (8006748 <stdio_exit_handler+0xc>)
 800673e:	4903      	ldr	r1, [pc, #12]	@ (800674c <stdio_exit_handler+0x10>)
 8006740:	4803      	ldr	r0, [pc, #12]	@ (8006750 <stdio_exit_handler+0x14>)
 8006742:	f000 b869 	b.w	8006818 <_fwalk_sglue>
 8006746:	bf00      	nop
 8006748:	2000000c 	.word	0x2000000c
 800674c:	08008dcd 	.word	0x08008dcd
 8006750:	20000188 	.word	0x20000188

08006754 <cleanup_stdio>:
 8006754:	6841      	ldr	r1, [r0, #4]
 8006756:	4b0c      	ldr	r3, [pc, #48]	@ (8006788 <cleanup_stdio+0x34>)
 8006758:	4299      	cmp	r1, r3
 800675a:	b510      	push	{r4, lr}
 800675c:	4604      	mov	r4, r0
 800675e:	d001      	beq.n	8006764 <cleanup_stdio+0x10>
 8006760:	f002 fb34 	bl	8008dcc <_fflush_r>
 8006764:	68a1      	ldr	r1, [r4, #8]
 8006766:	4b09      	ldr	r3, [pc, #36]	@ (800678c <cleanup_stdio+0x38>)
 8006768:	4299      	cmp	r1, r3
 800676a:	d002      	beq.n	8006772 <cleanup_stdio+0x1e>
 800676c:	4620      	mov	r0, r4
 800676e:	f002 fb2d 	bl	8008dcc <_fflush_r>
 8006772:	68e1      	ldr	r1, [r4, #12]
 8006774:	4b06      	ldr	r3, [pc, #24]	@ (8006790 <cleanup_stdio+0x3c>)
 8006776:	4299      	cmp	r1, r3
 8006778:	d004      	beq.n	8006784 <cleanup_stdio+0x30>
 800677a:	4620      	mov	r0, r4
 800677c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006780:	f002 bb24 	b.w	8008dcc <_fflush_r>
 8006784:	bd10      	pop	{r4, pc}
 8006786:	bf00      	nop
 8006788:	20000570 	.word	0x20000570
 800678c:	200005d8 	.word	0x200005d8
 8006790:	20000640 	.word	0x20000640

08006794 <global_stdio_init.part.0>:
 8006794:	b510      	push	{r4, lr}
 8006796:	4b0b      	ldr	r3, [pc, #44]	@ (80067c4 <global_stdio_init.part.0+0x30>)
 8006798:	4c0b      	ldr	r4, [pc, #44]	@ (80067c8 <global_stdio_init.part.0+0x34>)
 800679a:	4a0c      	ldr	r2, [pc, #48]	@ (80067cc <global_stdio_init.part.0+0x38>)
 800679c:	601a      	str	r2, [r3, #0]
 800679e:	4620      	mov	r0, r4
 80067a0:	2200      	movs	r2, #0
 80067a2:	2104      	movs	r1, #4
 80067a4:	f7ff ff94 	bl	80066d0 <std>
 80067a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80067ac:	2201      	movs	r2, #1
 80067ae:	2109      	movs	r1, #9
 80067b0:	f7ff ff8e 	bl	80066d0 <std>
 80067b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80067b8:	2202      	movs	r2, #2
 80067ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067be:	2112      	movs	r1, #18
 80067c0:	f7ff bf86 	b.w	80066d0 <std>
 80067c4:	200006a8 	.word	0x200006a8
 80067c8:	20000570 	.word	0x20000570
 80067cc:	0800673d 	.word	0x0800673d

080067d0 <__sfp_lock_acquire>:
 80067d0:	4801      	ldr	r0, [pc, #4]	@ (80067d8 <__sfp_lock_acquire+0x8>)
 80067d2:	f000 b98e 	b.w	8006af2 <__retarget_lock_acquire_recursive>
 80067d6:	bf00      	nop
 80067d8:	200006b1 	.word	0x200006b1

080067dc <__sfp_lock_release>:
 80067dc:	4801      	ldr	r0, [pc, #4]	@ (80067e4 <__sfp_lock_release+0x8>)
 80067de:	f000 b989 	b.w	8006af4 <__retarget_lock_release_recursive>
 80067e2:	bf00      	nop
 80067e4:	200006b1 	.word	0x200006b1

080067e8 <__sinit>:
 80067e8:	b510      	push	{r4, lr}
 80067ea:	4604      	mov	r4, r0
 80067ec:	f7ff fff0 	bl	80067d0 <__sfp_lock_acquire>
 80067f0:	6a23      	ldr	r3, [r4, #32]
 80067f2:	b11b      	cbz	r3, 80067fc <__sinit+0x14>
 80067f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067f8:	f7ff bff0 	b.w	80067dc <__sfp_lock_release>
 80067fc:	4b04      	ldr	r3, [pc, #16]	@ (8006810 <__sinit+0x28>)
 80067fe:	6223      	str	r3, [r4, #32]
 8006800:	4b04      	ldr	r3, [pc, #16]	@ (8006814 <__sinit+0x2c>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d1f5      	bne.n	80067f4 <__sinit+0xc>
 8006808:	f7ff ffc4 	bl	8006794 <global_stdio_init.part.0>
 800680c:	e7f2      	b.n	80067f4 <__sinit+0xc>
 800680e:	bf00      	nop
 8006810:	08006755 	.word	0x08006755
 8006814:	200006a8 	.word	0x200006a8

08006818 <_fwalk_sglue>:
 8006818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800681c:	4607      	mov	r7, r0
 800681e:	4688      	mov	r8, r1
 8006820:	4614      	mov	r4, r2
 8006822:	2600      	movs	r6, #0
 8006824:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006828:	f1b9 0901 	subs.w	r9, r9, #1
 800682c:	d505      	bpl.n	800683a <_fwalk_sglue+0x22>
 800682e:	6824      	ldr	r4, [r4, #0]
 8006830:	2c00      	cmp	r4, #0
 8006832:	d1f7      	bne.n	8006824 <_fwalk_sglue+0xc>
 8006834:	4630      	mov	r0, r6
 8006836:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800683a:	89ab      	ldrh	r3, [r5, #12]
 800683c:	2b01      	cmp	r3, #1
 800683e:	d907      	bls.n	8006850 <_fwalk_sglue+0x38>
 8006840:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006844:	3301      	adds	r3, #1
 8006846:	d003      	beq.n	8006850 <_fwalk_sglue+0x38>
 8006848:	4629      	mov	r1, r5
 800684a:	4638      	mov	r0, r7
 800684c:	47c0      	blx	r8
 800684e:	4306      	orrs	r6, r0
 8006850:	3568      	adds	r5, #104	@ 0x68
 8006852:	e7e9      	b.n	8006828 <_fwalk_sglue+0x10>

08006854 <siprintf>:
 8006854:	b40e      	push	{r1, r2, r3}
 8006856:	b500      	push	{lr}
 8006858:	b09c      	sub	sp, #112	@ 0x70
 800685a:	ab1d      	add	r3, sp, #116	@ 0x74
 800685c:	9002      	str	r0, [sp, #8]
 800685e:	9006      	str	r0, [sp, #24]
 8006860:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006864:	4809      	ldr	r0, [pc, #36]	@ (800688c <siprintf+0x38>)
 8006866:	9107      	str	r1, [sp, #28]
 8006868:	9104      	str	r1, [sp, #16]
 800686a:	4909      	ldr	r1, [pc, #36]	@ (8006890 <siprintf+0x3c>)
 800686c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006870:	9105      	str	r1, [sp, #20]
 8006872:	6800      	ldr	r0, [r0, #0]
 8006874:	9301      	str	r3, [sp, #4]
 8006876:	a902      	add	r1, sp, #8
 8006878:	f002 f928 	bl	8008acc <_svfiprintf_r>
 800687c:	9b02      	ldr	r3, [sp, #8]
 800687e:	2200      	movs	r2, #0
 8006880:	701a      	strb	r2, [r3, #0]
 8006882:	b01c      	add	sp, #112	@ 0x70
 8006884:	f85d eb04 	ldr.w	lr, [sp], #4
 8006888:	b003      	add	sp, #12
 800688a:	4770      	bx	lr
 800688c:	20000184 	.word	0x20000184
 8006890:	ffff0208 	.word	0xffff0208

08006894 <__sread>:
 8006894:	b510      	push	{r4, lr}
 8006896:	460c      	mov	r4, r1
 8006898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800689c:	f000 f8da 	bl	8006a54 <_read_r>
 80068a0:	2800      	cmp	r0, #0
 80068a2:	bfab      	itete	ge
 80068a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80068a6:	89a3      	ldrhlt	r3, [r4, #12]
 80068a8:	181b      	addge	r3, r3, r0
 80068aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80068ae:	bfac      	ite	ge
 80068b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80068b2:	81a3      	strhlt	r3, [r4, #12]
 80068b4:	bd10      	pop	{r4, pc}

080068b6 <__swrite>:
 80068b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068ba:	461f      	mov	r7, r3
 80068bc:	898b      	ldrh	r3, [r1, #12]
 80068be:	05db      	lsls	r3, r3, #23
 80068c0:	4605      	mov	r5, r0
 80068c2:	460c      	mov	r4, r1
 80068c4:	4616      	mov	r6, r2
 80068c6:	d505      	bpl.n	80068d4 <__swrite+0x1e>
 80068c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068cc:	2302      	movs	r3, #2
 80068ce:	2200      	movs	r2, #0
 80068d0:	f000 f8ae 	bl	8006a30 <_lseek_r>
 80068d4:	89a3      	ldrh	r3, [r4, #12]
 80068d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80068de:	81a3      	strh	r3, [r4, #12]
 80068e0:	4632      	mov	r2, r6
 80068e2:	463b      	mov	r3, r7
 80068e4:	4628      	mov	r0, r5
 80068e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068ea:	f000 b8c5 	b.w	8006a78 <_write_r>

080068ee <__sseek>:
 80068ee:	b510      	push	{r4, lr}
 80068f0:	460c      	mov	r4, r1
 80068f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068f6:	f000 f89b 	bl	8006a30 <_lseek_r>
 80068fa:	1c43      	adds	r3, r0, #1
 80068fc:	89a3      	ldrh	r3, [r4, #12]
 80068fe:	bf15      	itete	ne
 8006900:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006902:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006906:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800690a:	81a3      	strheq	r3, [r4, #12]
 800690c:	bf18      	it	ne
 800690e:	81a3      	strhne	r3, [r4, #12]
 8006910:	bd10      	pop	{r4, pc}

08006912 <__sclose>:
 8006912:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006916:	f000 b87b 	b.w	8006a10 <_close_r>

0800691a <memset>:
 800691a:	4402      	add	r2, r0
 800691c:	4603      	mov	r3, r0
 800691e:	4293      	cmp	r3, r2
 8006920:	d100      	bne.n	8006924 <memset+0xa>
 8006922:	4770      	bx	lr
 8006924:	f803 1b01 	strb.w	r1, [r3], #1
 8006928:	e7f9      	b.n	800691e <memset+0x4>

0800692a <strncmp>:
 800692a:	b510      	push	{r4, lr}
 800692c:	b16a      	cbz	r2, 800694a <strncmp+0x20>
 800692e:	3901      	subs	r1, #1
 8006930:	1884      	adds	r4, r0, r2
 8006932:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006936:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800693a:	429a      	cmp	r2, r3
 800693c:	d103      	bne.n	8006946 <strncmp+0x1c>
 800693e:	42a0      	cmp	r0, r4
 8006940:	d001      	beq.n	8006946 <strncmp+0x1c>
 8006942:	2a00      	cmp	r2, #0
 8006944:	d1f5      	bne.n	8006932 <strncmp+0x8>
 8006946:	1ad0      	subs	r0, r2, r3
 8006948:	bd10      	pop	{r4, pc}
 800694a:	4610      	mov	r0, r2
 800694c:	e7fc      	b.n	8006948 <strncmp+0x1e>
	...

08006950 <strtok>:
 8006950:	4b16      	ldr	r3, [pc, #88]	@ (80069ac <strtok+0x5c>)
 8006952:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006956:	681f      	ldr	r7, [r3, #0]
 8006958:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800695a:	4605      	mov	r5, r0
 800695c:	460e      	mov	r6, r1
 800695e:	b9ec      	cbnz	r4, 800699c <strtok+0x4c>
 8006960:	2050      	movs	r0, #80	@ 0x50
 8006962:	f001 fad1 	bl	8007f08 <malloc>
 8006966:	4602      	mov	r2, r0
 8006968:	6478      	str	r0, [r7, #68]	@ 0x44
 800696a:	b920      	cbnz	r0, 8006976 <strtok+0x26>
 800696c:	4b10      	ldr	r3, [pc, #64]	@ (80069b0 <strtok+0x60>)
 800696e:	4811      	ldr	r0, [pc, #68]	@ (80069b4 <strtok+0x64>)
 8006970:	215b      	movs	r1, #91	@ 0x5b
 8006972:	f000 f8d9 	bl	8006b28 <__assert_func>
 8006976:	e9c0 4400 	strd	r4, r4, [r0]
 800697a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800697e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006982:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8006986:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800698a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800698e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8006992:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8006996:	6184      	str	r4, [r0, #24]
 8006998:	7704      	strb	r4, [r0, #28]
 800699a:	6244      	str	r4, [r0, #36]	@ 0x24
 800699c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800699e:	4631      	mov	r1, r6
 80069a0:	4628      	mov	r0, r5
 80069a2:	2301      	movs	r3, #1
 80069a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069a8:	f000 b806 	b.w	80069b8 <__strtok_r>
 80069ac:	20000184 	.word	0x20000184
 80069b0:	0800a694 	.word	0x0800a694
 80069b4:	0800a6ab 	.word	0x0800a6ab

080069b8 <__strtok_r>:
 80069b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069ba:	4604      	mov	r4, r0
 80069bc:	b908      	cbnz	r0, 80069c2 <__strtok_r+0xa>
 80069be:	6814      	ldr	r4, [r2, #0]
 80069c0:	b144      	cbz	r4, 80069d4 <__strtok_r+0x1c>
 80069c2:	4620      	mov	r0, r4
 80069c4:	f814 5b01 	ldrb.w	r5, [r4], #1
 80069c8:	460f      	mov	r7, r1
 80069ca:	f817 6b01 	ldrb.w	r6, [r7], #1
 80069ce:	b91e      	cbnz	r6, 80069d8 <__strtok_r+0x20>
 80069d0:	b965      	cbnz	r5, 80069ec <__strtok_r+0x34>
 80069d2:	6015      	str	r5, [r2, #0]
 80069d4:	2000      	movs	r0, #0
 80069d6:	e005      	b.n	80069e4 <__strtok_r+0x2c>
 80069d8:	42b5      	cmp	r5, r6
 80069da:	d1f6      	bne.n	80069ca <__strtok_r+0x12>
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d1f0      	bne.n	80069c2 <__strtok_r+0xa>
 80069e0:	6014      	str	r4, [r2, #0]
 80069e2:	7003      	strb	r3, [r0, #0]
 80069e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069e6:	461c      	mov	r4, r3
 80069e8:	e00c      	b.n	8006a04 <__strtok_r+0x4c>
 80069ea:	b915      	cbnz	r5, 80069f2 <__strtok_r+0x3a>
 80069ec:	f814 3b01 	ldrb.w	r3, [r4], #1
 80069f0:	460e      	mov	r6, r1
 80069f2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80069f6:	42ab      	cmp	r3, r5
 80069f8:	d1f7      	bne.n	80069ea <__strtok_r+0x32>
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d0f3      	beq.n	80069e6 <__strtok_r+0x2e>
 80069fe:	2300      	movs	r3, #0
 8006a00:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006a04:	6014      	str	r4, [r2, #0]
 8006a06:	e7ed      	b.n	80069e4 <__strtok_r+0x2c>

08006a08 <_localeconv_r>:
 8006a08:	4800      	ldr	r0, [pc, #0]	@ (8006a0c <_localeconv_r+0x4>)
 8006a0a:	4770      	bx	lr
 8006a0c:	20000108 	.word	0x20000108

08006a10 <_close_r>:
 8006a10:	b538      	push	{r3, r4, r5, lr}
 8006a12:	4d06      	ldr	r5, [pc, #24]	@ (8006a2c <_close_r+0x1c>)
 8006a14:	2300      	movs	r3, #0
 8006a16:	4604      	mov	r4, r0
 8006a18:	4608      	mov	r0, r1
 8006a1a:	602b      	str	r3, [r5, #0]
 8006a1c:	f7fa ff66 	bl	80018ec <_close>
 8006a20:	1c43      	adds	r3, r0, #1
 8006a22:	d102      	bne.n	8006a2a <_close_r+0x1a>
 8006a24:	682b      	ldr	r3, [r5, #0]
 8006a26:	b103      	cbz	r3, 8006a2a <_close_r+0x1a>
 8006a28:	6023      	str	r3, [r4, #0]
 8006a2a:	bd38      	pop	{r3, r4, r5, pc}
 8006a2c:	200006ac 	.word	0x200006ac

08006a30 <_lseek_r>:
 8006a30:	b538      	push	{r3, r4, r5, lr}
 8006a32:	4d07      	ldr	r5, [pc, #28]	@ (8006a50 <_lseek_r+0x20>)
 8006a34:	4604      	mov	r4, r0
 8006a36:	4608      	mov	r0, r1
 8006a38:	4611      	mov	r1, r2
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	602a      	str	r2, [r5, #0]
 8006a3e:	461a      	mov	r2, r3
 8006a40:	f7fa ff7b 	bl	800193a <_lseek>
 8006a44:	1c43      	adds	r3, r0, #1
 8006a46:	d102      	bne.n	8006a4e <_lseek_r+0x1e>
 8006a48:	682b      	ldr	r3, [r5, #0]
 8006a4a:	b103      	cbz	r3, 8006a4e <_lseek_r+0x1e>
 8006a4c:	6023      	str	r3, [r4, #0]
 8006a4e:	bd38      	pop	{r3, r4, r5, pc}
 8006a50:	200006ac 	.word	0x200006ac

08006a54 <_read_r>:
 8006a54:	b538      	push	{r3, r4, r5, lr}
 8006a56:	4d07      	ldr	r5, [pc, #28]	@ (8006a74 <_read_r+0x20>)
 8006a58:	4604      	mov	r4, r0
 8006a5a:	4608      	mov	r0, r1
 8006a5c:	4611      	mov	r1, r2
 8006a5e:	2200      	movs	r2, #0
 8006a60:	602a      	str	r2, [r5, #0]
 8006a62:	461a      	mov	r2, r3
 8006a64:	f7fa ff09 	bl	800187a <_read>
 8006a68:	1c43      	adds	r3, r0, #1
 8006a6a:	d102      	bne.n	8006a72 <_read_r+0x1e>
 8006a6c:	682b      	ldr	r3, [r5, #0]
 8006a6e:	b103      	cbz	r3, 8006a72 <_read_r+0x1e>
 8006a70:	6023      	str	r3, [r4, #0]
 8006a72:	bd38      	pop	{r3, r4, r5, pc}
 8006a74:	200006ac 	.word	0x200006ac

08006a78 <_write_r>:
 8006a78:	b538      	push	{r3, r4, r5, lr}
 8006a7a:	4d07      	ldr	r5, [pc, #28]	@ (8006a98 <_write_r+0x20>)
 8006a7c:	4604      	mov	r4, r0
 8006a7e:	4608      	mov	r0, r1
 8006a80:	4611      	mov	r1, r2
 8006a82:	2200      	movs	r2, #0
 8006a84:	602a      	str	r2, [r5, #0]
 8006a86:	461a      	mov	r2, r3
 8006a88:	f7fa ff14 	bl	80018b4 <_write>
 8006a8c:	1c43      	adds	r3, r0, #1
 8006a8e:	d102      	bne.n	8006a96 <_write_r+0x1e>
 8006a90:	682b      	ldr	r3, [r5, #0]
 8006a92:	b103      	cbz	r3, 8006a96 <_write_r+0x1e>
 8006a94:	6023      	str	r3, [r4, #0]
 8006a96:	bd38      	pop	{r3, r4, r5, pc}
 8006a98:	200006ac 	.word	0x200006ac

08006a9c <__errno>:
 8006a9c:	4b01      	ldr	r3, [pc, #4]	@ (8006aa4 <__errno+0x8>)
 8006a9e:	6818      	ldr	r0, [r3, #0]
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop
 8006aa4:	20000184 	.word	0x20000184

08006aa8 <__libc_init_array>:
 8006aa8:	b570      	push	{r4, r5, r6, lr}
 8006aaa:	4d0d      	ldr	r5, [pc, #52]	@ (8006ae0 <__libc_init_array+0x38>)
 8006aac:	4c0d      	ldr	r4, [pc, #52]	@ (8006ae4 <__libc_init_array+0x3c>)
 8006aae:	1b64      	subs	r4, r4, r5
 8006ab0:	10a4      	asrs	r4, r4, #2
 8006ab2:	2600      	movs	r6, #0
 8006ab4:	42a6      	cmp	r6, r4
 8006ab6:	d109      	bne.n	8006acc <__libc_init_array+0x24>
 8006ab8:	4d0b      	ldr	r5, [pc, #44]	@ (8006ae8 <__libc_init_array+0x40>)
 8006aba:	4c0c      	ldr	r4, [pc, #48]	@ (8006aec <__libc_init_array+0x44>)
 8006abc:	f003 fd5c 	bl	800a578 <_init>
 8006ac0:	1b64      	subs	r4, r4, r5
 8006ac2:	10a4      	asrs	r4, r4, #2
 8006ac4:	2600      	movs	r6, #0
 8006ac6:	42a6      	cmp	r6, r4
 8006ac8:	d105      	bne.n	8006ad6 <__libc_init_array+0x2e>
 8006aca:	bd70      	pop	{r4, r5, r6, pc}
 8006acc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ad0:	4798      	blx	r3
 8006ad2:	3601      	adds	r6, #1
 8006ad4:	e7ee      	b.n	8006ab4 <__libc_init_array+0xc>
 8006ad6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ada:	4798      	blx	r3
 8006adc:	3601      	adds	r6, #1
 8006ade:	e7f2      	b.n	8006ac6 <__libc_init_array+0x1e>
 8006ae0:	0800ac70 	.word	0x0800ac70
 8006ae4:	0800ac70 	.word	0x0800ac70
 8006ae8:	0800ac70 	.word	0x0800ac70
 8006aec:	0800ac74 	.word	0x0800ac74

08006af0 <__retarget_lock_init_recursive>:
 8006af0:	4770      	bx	lr

08006af2 <__retarget_lock_acquire_recursive>:
 8006af2:	4770      	bx	lr

08006af4 <__retarget_lock_release_recursive>:
 8006af4:	4770      	bx	lr

08006af6 <memcpy>:
 8006af6:	440a      	add	r2, r1
 8006af8:	4291      	cmp	r1, r2
 8006afa:	f100 33ff 	add.w	r3, r0, #4294967295
 8006afe:	d100      	bne.n	8006b02 <memcpy+0xc>
 8006b00:	4770      	bx	lr
 8006b02:	b510      	push	{r4, lr}
 8006b04:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b08:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b0c:	4291      	cmp	r1, r2
 8006b0e:	d1f9      	bne.n	8006b04 <memcpy+0xe>
 8006b10:	bd10      	pop	{r4, pc}
 8006b12:	0000      	movs	r0, r0
 8006b14:	0000      	movs	r0, r0
	...

08006b18 <nan>:
 8006b18:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8006b20 <nan+0x8>
 8006b1c:	4770      	bx	lr
 8006b1e:	bf00      	nop
 8006b20:	00000000 	.word	0x00000000
 8006b24:	7ff80000 	.word	0x7ff80000

08006b28 <__assert_func>:
 8006b28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006b2a:	4614      	mov	r4, r2
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	4b09      	ldr	r3, [pc, #36]	@ (8006b54 <__assert_func+0x2c>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4605      	mov	r5, r0
 8006b34:	68d8      	ldr	r0, [r3, #12]
 8006b36:	b954      	cbnz	r4, 8006b4e <__assert_func+0x26>
 8006b38:	4b07      	ldr	r3, [pc, #28]	@ (8006b58 <__assert_func+0x30>)
 8006b3a:	461c      	mov	r4, r3
 8006b3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006b40:	9100      	str	r1, [sp, #0]
 8006b42:	462b      	mov	r3, r5
 8006b44:	4905      	ldr	r1, [pc, #20]	@ (8006b5c <__assert_func+0x34>)
 8006b46:	f002 f969 	bl	8008e1c <fiprintf>
 8006b4a:	f002 f9a3 	bl	8008e94 <abort>
 8006b4e:	4b04      	ldr	r3, [pc, #16]	@ (8006b60 <__assert_func+0x38>)
 8006b50:	e7f4      	b.n	8006b3c <__assert_func+0x14>
 8006b52:	bf00      	nop
 8006b54:	20000184 	.word	0x20000184
 8006b58:	0800a748 	.word	0x0800a748
 8006b5c:	0800a71a 	.word	0x0800a71a
 8006b60:	0800a70d 	.word	0x0800a70d

08006b64 <quorem>:
 8006b64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b68:	6903      	ldr	r3, [r0, #16]
 8006b6a:	690c      	ldr	r4, [r1, #16]
 8006b6c:	42a3      	cmp	r3, r4
 8006b6e:	4607      	mov	r7, r0
 8006b70:	db7e      	blt.n	8006c70 <quorem+0x10c>
 8006b72:	3c01      	subs	r4, #1
 8006b74:	f101 0814 	add.w	r8, r1, #20
 8006b78:	00a3      	lsls	r3, r4, #2
 8006b7a:	f100 0514 	add.w	r5, r0, #20
 8006b7e:	9300      	str	r3, [sp, #0]
 8006b80:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b84:	9301      	str	r3, [sp, #4]
 8006b86:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006b8a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b8e:	3301      	adds	r3, #1
 8006b90:	429a      	cmp	r2, r3
 8006b92:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006b96:	fbb2 f6f3 	udiv	r6, r2, r3
 8006b9a:	d32e      	bcc.n	8006bfa <quorem+0x96>
 8006b9c:	f04f 0a00 	mov.w	sl, #0
 8006ba0:	46c4      	mov	ip, r8
 8006ba2:	46ae      	mov	lr, r5
 8006ba4:	46d3      	mov	fp, sl
 8006ba6:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006baa:	b298      	uxth	r0, r3
 8006bac:	fb06 a000 	mla	r0, r6, r0, sl
 8006bb0:	0c02      	lsrs	r2, r0, #16
 8006bb2:	0c1b      	lsrs	r3, r3, #16
 8006bb4:	fb06 2303 	mla	r3, r6, r3, r2
 8006bb8:	f8de 2000 	ldr.w	r2, [lr]
 8006bbc:	b280      	uxth	r0, r0
 8006bbe:	b292      	uxth	r2, r2
 8006bc0:	1a12      	subs	r2, r2, r0
 8006bc2:	445a      	add	r2, fp
 8006bc4:	f8de 0000 	ldr.w	r0, [lr]
 8006bc8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006bd2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006bd6:	b292      	uxth	r2, r2
 8006bd8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006bdc:	45e1      	cmp	r9, ip
 8006bde:	f84e 2b04 	str.w	r2, [lr], #4
 8006be2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006be6:	d2de      	bcs.n	8006ba6 <quorem+0x42>
 8006be8:	9b00      	ldr	r3, [sp, #0]
 8006bea:	58eb      	ldr	r3, [r5, r3]
 8006bec:	b92b      	cbnz	r3, 8006bfa <quorem+0x96>
 8006bee:	9b01      	ldr	r3, [sp, #4]
 8006bf0:	3b04      	subs	r3, #4
 8006bf2:	429d      	cmp	r5, r3
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	d32f      	bcc.n	8006c58 <quorem+0xf4>
 8006bf8:	613c      	str	r4, [r7, #16]
 8006bfa:	4638      	mov	r0, r7
 8006bfc:	f001 fd10 	bl	8008620 <__mcmp>
 8006c00:	2800      	cmp	r0, #0
 8006c02:	db25      	blt.n	8006c50 <quorem+0xec>
 8006c04:	4629      	mov	r1, r5
 8006c06:	2000      	movs	r0, #0
 8006c08:	f858 2b04 	ldr.w	r2, [r8], #4
 8006c0c:	f8d1 c000 	ldr.w	ip, [r1]
 8006c10:	fa1f fe82 	uxth.w	lr, r2
 8006c14:	fa1f f38c 	uxth.w	r3, ip
 8006c18:	eba3 030e 	sub.w	r3, r3, lr
 8006c1c:	4403      	add	r3, r0
 8006c1e:	0c12      	lsrs	r2, r2, #16
 8006c20:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006c24:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c2e:	45c1      	cmp	r9, r8
 8006c30:	f841 3b04 	str.w	r3, [r1], #4
 8006c34:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006c38:	d2e6      	bcs.n	8006c08 <quorem+0xa4>
 8006c3a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006c3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006c42:	b922      	cbnz	r2, 8006c4e <quorem+0xea>
 8006c44:	3b04      	subs	r3, #4
 8006c46:	429d      	cmp	r5, r3
 8006c48:	461a      	mov	r2, r3
 8006c4a:	d30b      	bcc.n	8006c64 <quorem+0x100>
 8006c4c:	613c      	str	r4, [r7, #16]
 8006c4e:	3601      	adds	r6, #1
 8006c50:	4630      	mov	r0, r6
 8006c52:	b003      	add	sp, #12
 8006c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c58:	6812      	ldr	r2, [r2, #0]
 8006c5a:	3b04      	subs	r3, #4
 8006c5c:	2a00      	cmp	r2, #0
 8006c5e:	d1cb      	bne.n	8006bf8 <quorem+0x94>
 8006c60:	3c01      	subs	r4, #1
 8006c62:	e7c6      	b.n	8006bf2 <quorem+0x8e>
 8006c64:	6812      	ldr	r2, [r2, #0]
 8006c66:	3b04      	subs	r3, #4
 8006c68:	2a00      	cmp	r2, #0
 8006c6a:	d1ef      	bne.n	8006c4c <quorem+0xe8>
 8006c6c:	3c01      	subs	r4, #1
 8006c6e:	e7ea      	b.n	8006c46 <quorem+0xe2>
 8006c70:	2000      	movs	r0, #0
 8006c72:	e7ee      	b.n	8006c52 <quorem+0xee>
 8006c74:	0000      	movs	r0, r0
	...

08006c78 <_dtoa_r>:
 8006c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c7c:	69c7      	ldr	r7, [r0, #28]
 8006c7e:	b099      	sub	sp, #100	@ 0x64
 8006c80:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006c84:	ec55 4b10 	vmov	r4, r5, d0
 8006c88:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006c8a:	9109      	str	r1, [sp, #36]	@ 0x24
 8006c8c:	4683      	mov	fp, r0
 8006c8e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006c90:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006c92:	b97f      	cbnz	r7, 8006cb4 <_dtoa_r+0x3c>
 8006c94:	2010      	movs	r0, #16
 8006c96:	f001 f937 	bl	8007f08 <malloc>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	f8cb 001c 	str.w	r0, [fp, #28]
 8006ca0:	b920      	cbnz	r0, 8006cac <_dtoa_r+0x34>
 8006ca2:	4ba7      	ldr	r3, [pc, #668]	@ (8006f40 <_dtoa_r+0x2c8>)
 8006ca4:	21ef      	movs	r1, #239	@ 0xef
 8006ca6:	48a7      	ldr	r0, [pc, #668]	@ (8006f44 <_dtoa_r+0x2cc>)
 8006ca8:	f7ff ff3e 	bl	8006b28 <__assert_func>
 8006cac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006cb0:	6007      	str	r7, [r0, #0]
 8006cb2:	60c7      	str	r7, [r0, #12]
 8006cb4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006cb8:	6819      	ldr	r1, [r3, #0]
 8006cba:	b159      	cbz	r1, 8006cd4 <_dtoa_r+0x5c>
 8006cbc:	685a      	ldr	r2, [r3, #4]
 8006cbe:	604a      	str	r2, [r1, #4]
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	4093      	lsls	r3, r2
 8006cc4:	608b      	str	r3, [r1, #8]
 8006cc6:	4658      	mov	r0, fp
 8006cc8:	f001 fa26 	bl	8008118 <_Bfree>
 8006ccc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	601a      	str	r2, [r3, #0]
 8006cd4:	1e2b      	subs	r3, r5, #0
 8006cd6:	bfb9      	ittee	lt
 8006cd8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006cdc:	9303      	strlt	r3, [sp, #12]
 8006cde:	2300      	movge	r3, #0
 8006ce0:	6033      	strge	r3, [r6, #0]
 8006ce2:	9f03      	ldr	r7, [sp, #12]
 8006ce4:	4b98      	ldr	r3, [pc, #608]	@ (8006f48 <_dtoa_r+0x2d0>)
 8006ce6:	bfbc      	itt	lt
 8006ce8:	2201      	movlt	r2, #1
 8006cea:	6032      	strlt	r2, [r6, #0]
 8006cec:	43bb      	bics	r3, r7
 8006cee:	d112      	bne.n	8006d16 <_dtoa_r+0x9e>
 8006cf0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006cf2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006cf6:	6013      	str	r3, [r2, #0]
 8006cf8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006cfc:	4323      	orrs	r3, r4
 8006cfe:	f000 854d 	beq.w	800779c <_dtoa_r+0xb24>
 8006d02:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006d04:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006f5c <_dtoa_r+0x2e4>
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	f000 854f 	beq.w	80077ac <_dtoa_r+0xb34>
 8006d0e:	f10a 0303 	add.w	r3, sl, #3
 8006d12:	f000 bd49 	b.w	80077a8 <_dtoa_r+0xb30>
 8006d16:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	ec51 0b17 	vmov	r0, r1, d7
 8006d20:	2300      	movs	r3, #0
 8006d22:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006d26:	f7f9 fecf 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d2a:	4680      	mov	r8, r0
 8006d2c:	b158      	cbz	r0, 8006d46 <_dtoa_r+0xce>
 8006d2e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006d30:	2301      	movs	r3, #1
 8006d32:	6013      	str	r3, [r2, #0]
 8006d34:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006d36:	b113      	cbz	r3, 8006d3e <_dtoa_r+0xc6>
 8006d38:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006d3a:	4b84      	ldr	r3, [pc, #528]	@ (8006f4c <_dtoa_r+0x2d4>)
 8006d3c:	6013      	str	r3, [r2, #0]
 8006d3e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006f60 <_dtoa_r+0x2e8>
 8006d42:	f000 bd33 	b.w	80077ac <_dtoa_r+0xb34>
 8006d46:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006d4a:	aa16      	add	r2, sp, #88	@ 0x58
 8006d4c:	a917      	add	r1, sp, #92	@ 0x5c
 8006d4e:	4658      	mov	r0, fp
 8006d50:	f001 fd86 	bl	8008860 <__d2b>
 8006d54:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006d58:	4681      	mov	r9, r0
 8006d5a:	2e00      	cmp	r6, #0
 8006d5c:	d077      	beq.n	8006e4e <_dtoa_r+0x1d6>
 8006d5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006d60:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006d64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d6c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006d70:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006d74:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006d78:	4619      	mov	r1, r3
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	4b74      	ldr	r3, [pc, #464]	@ (8006f50 <_dtoa_r+0x2d8>)
 8006d7e:	f7f9 fa83 	bl	8000288 <__aeabi_dsub>
 8006d82:	a369      	add	r3, pc, #420	@ (adr r3, 8006f28 <_dtoa_r+0x2b0>)
 8006d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d88:	f7f9 fc36 	bl	80005f8 <__aeabi_dmul>
 8006d8c:	a368      	add	r3, pc, #416	@ (adr r3, 8006f30 <_dtoa_r+0x2b8>)
 8006d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d92:	f7f9 fa7b 	bl	800028c <__adddf3>
 8006d96:	4604      	mov	r4, r0
 8006d98:	4630      	mov	r0, r6
 8006d9a:	460d      	mov	r5, r1
 8006d9c:	f7f9 fbc2 	bl	8000524 <__aeabi_i2d>
 8006da0:	a365      	add	r3, pc, #404	@ (adr r3, 8006f38 <_dtoa_r+0x2c0>)
 8006da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da6:	f7f9 fc27 	bl	80005f8 <__aeabi_dmul>
 8006daa:	4602      	mov	r2, r0
 8006dac:	460b      	mov	r3, r1
 8006dae:	4620      	mov	r0, r4
 8006db0:	4629      	mov	r1, r5
 8006db2:	f7f9 fa6b 	bl	800028c <__adddf3>
 8006db6:	4604      	mov	r4, r0
 8006db8:	460d      	mov	r5, r1
 8006dba:	f7f9 fecd 	bl	8000b58 <__aeabi_d2iz>
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	4607      	mov	r7, r0
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	4620      	mov	r0, r4
 8006dc6:	4629      	mov	r1, r5
 8006dc8:	f7f9 fe88 	bl	8000adc <__aeabi_dcmplt>
 8006dcc:	b140      	cbz	r0, 8006de0 <_dtoa_r+0x168>
 8006dce:	4638      	mov	r0, r7
 8006dd0:	f7f9 fba8 	bl	8000524 <__aeabi_i2d>
 8006dd4:	4622      	mov	r2, r4
 8006dd6:	462b      	mov	r3, r5
 8006dd8:	f7f9 fe76 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ddc:	b900      	cbnz	r0, 8006de0 <_dtoa_r+0x168>
 8006dde:	3f01      	subs	r7, #1
 8006de0:	2f16      	cmp	r7, #22
 8006de2:	d851      	bhi.n	8006e88 <_dtoa_r+0x210>
 8006de4:	4b5b      	ldr	r3, [pc, #364]	@ (8006f54 <_dtoa_r+0x2dc>)
 8006de6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006df2:	f7f9 fe73 	bl	8000adc <__aeabi_dcmplt>
 8006df6:	2800      	cmp	r0, #0
 8006df8:	d048      	beq.n	8006e8c <_dtoa_r+0x214>
 8006dfa:	3f01      	subs	r7, #1
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	9312      	str	r3, [sp, #72]	@ 0x48
 8006e00:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006e02:	1b9b      	subs	r3, r3, r6
 8006e04:	1e5a      	subs	r2, r3, #1
 8006e06:	bf44      	itt	mi
 8006e08:	f1c3 0801 	rsbmi	r8, r3, #1
 8006e0c:	2300      	movmi	r3, #0
 8006e0e:	9208      	str	r2, [sp, #32]
 8006e10:	bf54      	ite	pl
 8006e12:	f04f 0800 	movpl.w	r8, #0
 8006e16:	9308      	strmi	r3, [sp, #32]
 8006e18:	2f00      	cmp	r7, #0
 8006e1a:	db39      	blt.n	8006e90 <_dtoa_r+0x218>
 8006e1c:	9b08      	ldr	r3, [sp, #32]
 8006e1e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006e20:	443b      	add	r3, r7
 8006e22:	9308      	str	r3, [sp, #32]
 8006e24:	2300      	movs	r3, #0
 8006e26:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e2a:	2b09      	cmp	r3, #9
 8006e2c:	d864      	bhi.n	8006ef8 <_dtoa_r+0x280>
 8006e2e:	2b05      	cmp	r3, #5
 8006e30:	bfc4      	itt	gt
 8006e32:	3b04      	subgt	r3, #4
 8006e34:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006e36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e38:	f1a3 0302 	sub.w	r3, r3, #2
 8006e3c:	bfcc      	ite	gt
 8006e3e:	2400      	movgt	r4, #0
 8006e40:	2401      	movle	r4, #1
 8006e42:	2b03      	cmp	r3, #3
 8006e44:	d863      	bhi.n	8006f0e <_dtoa_r+0x296>
 8006e46:	e8df f003 	tbb	[pc, r3]
 8006e4a:	372a      	.short	0x372a
 8006e4c:	5535      	.short	0x5535
 8006e4e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006e52:	441e      	add	r6, r3
 8006e54:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006e58:	2b20      	cmp	r3, #32
 8006e5a:	bfc1      	itttt	gt
 8006e5c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006e60:	409f      	lslgt	r7, r3
 8006e62:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006e66:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006e6a:	bfd6      	itet	le
 8006e6c:	f1c3 0320 	rsble	r3, r3, #32
 8006e70:	ea47 0003 	orrgt.w	r0, r7, r3
 8006e74:	fa04 f003 	lslle.w	r0, r4, r3
 8006e78:	f7f9 fb44 	bl	8000504 <__aeabi_ui2d>
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006e82:	3e01      	subs	r6, #1
 8006e84:	9214      	str	r2, [sp, #80]	@ 0x50
 8006e86:	e777      	b.n	8006d78 <_dtoa_r+0x100>
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e7b8      	b.n	8006dfe <_dtoa_r+0x186>
 8006e8c:	9012      	str	r0, [sp, #72]	@ 0x48
 8006e8e:	e7b7      	b.n	8006e00 <_dtoa_r+0x188>
 8006e90:	427b      	negs	r3, r7
 8006e92:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e94:	2300      	movs	r3, #0
 8006e96:	eba8 0807 	sub.w	r8, r8, r7
 8006e9a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006e9c:	e7c4      	b.n	8006e28 <_dtoa_r+0x1b0>
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ea2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	dc35      	bgt.n	8006f14 <_dtoa_r+0x29c>
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	9300      	str	r3, [sp, #0]
 8006eac:	9307      	str	r3, [sp, #28]
 8006eae:	461a      	mov	r2, r3
 8006eb0:	920e      	str	r2, [sp, #56]	@ 0x38
 8006eb2:	e00b      	b.n	8006ecc <_dtoa_r+0x254>
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	e7f3      	b.n	8006ea0 <_dtoa_r+0x228>
 8006eb8:	2300      	movs	r3, #0
 8006eba:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ebc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ebe:	18fb      	adds	r3, r7, r3
 8006ec0:	9300      	str	r3, [sp, #0]
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	9307      	str	r3, [sp, #28]
 8006ec8:	bfb8      	it	lt
 8006eca:	2301      	movlt	r3, #1
 8006ecc:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006ed0:	2100      	movs	r1, #0
 8006ed2:	2204      	movs	r2, #4
 8006ed4:	f102 0514 	add.w	r5, r2, #20
 8006ed8:	429d      	cmp	r5, r3
 8006eda:	d91f      	bls.n	8006f1c <_dtoa_r+0x2a4>
 8006edc:	6041      	str	r1, [r0, #4]
 8006ede:	4658      	mov	r0, fp
 8006ee0:	f001 f8da 	bl	8008098 <_Balloc>
 8006ee4:	4682      	mov	sl, r0
 8006ee6:	2800      	cmp	r0, #0
 8006ee8:	d13c      	bne.n	8006f64 <_dtoa_r+0x2ec>
 8006eea:	4b1b      	ldr	r3, [pc, #108]	@ (8006f58 <_dtoa_r+0x2e0>)
 8006eec:	4602      	mov	r2, r0
 8006eee:	f240 11af 	movw	r1, #431	@ 0x1af
 8006ef2:	e6d8      	b.n	8006ca6 <_dtoa_r+0x2e>
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e7e0      	b.n	8006eba <_dtoa_r+0x242>
 8006ef8:	2401      	movs	r4, #1
 8006efa:	2300      	movs	r3, #0
 8006efc:	9309      	str	r3, [sp, #36]	@ 0x24
 8006efe:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006f00:	f04f 33ff 	mov.w	r3, #4294967295
 8006f04:	9300      	str	r3, [sp, #0]
 8006f06:	9307      	str	r3, [sp, #28]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	2312      	movs	r3, #18
 8006f0c:	e7d0      	b.n	8006eb0 <_dtoa_r+0x238>
 8006f0e:	2301      	movs	r3, #1
 8006f10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f12:	e7f5      	b.n	8006f00 <_dtoa_r+0x288>
 8006f14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f16:	9300      	str	r3, [sp, #0]
 8006f18:	9307      	str	r3, [sp, #28]
 8006f1a:	e7d7      	b.n	8006ecc <_dtoa_r+0x254>
 8006f1c:	3101      	adds	r1, #1
 8006f1e:	0052      	lsls	r2, r2, #1
 8006f20:	e7d8      	b.n	8006ed4 <_dtoa_r+0x25c>
 8006f22:	bf00      	nop
 8006f24:	f3af 8000 	nop.w
 8006f28:	636f4361 	.word	0x636f4361
 8006f2c:	3fd287a7 	.word	0x3fd287a7
 8006f30:	8b60c8b3 	.word	0x8b60c8b3
 8006f34:	3fc68a28 	.word	0x3fc68a28
 8006f38:	509f79fb 	.word	0x509f79fb
 8006f3c:	3fd34413 	.word	0x3fd34413
 8006f40:	0800a694 	.word	0x0800a694
 8006f44:	0800a756 	.word	0x0800a756
 8006f48:	7ff00000 	.word	0x7ff00000
 8006f4c:	0800a671 	.word	0x0800a671
 8006f50:	3ff80000 	.word	0x3ff80000
 8006f54:	0800a8b0 	.word	0x0800a8b0
 8006f58:	0800a7ae 	.word	0x0800a7ae
 8006f5c:	0800a752 	.word	0x0800a752
 8006f60:	0800a670 	.word	0x0800a670
 8006f64:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006f68:	6018      	str	r0, [r3, #0]
 8006f6a:	9b07      	ldr	r3, [sp, #28]
 8006f6c:	2b0e      	cmp	r3, #14
 8006f6e:	f200 80a4 	bhi.w	80070ba <_dtoa_r+0x442>
 8006f72:	2c00      	cmp	r4, #0
 8006f74:	f000 80a1 	beq.w	80070ba <_dtoa_r+0x442>
 8006f78:	2f00      	cmp	r7, #0
 8006f7a:	dd33      	ble.n	8006fe4 <_dtoa_r+0x36c>
 8006f7c:	4bad      	ldr	r3, [pc, #692]	@ (8007234 <_dtoa_r+0x5bc>)
 8006f7e:	f007 020f 	and.w	r2, r7, #15
 8006f82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f86:	ed93 7b00 	vldr	d7, [r3]
 8006f8a:	05f8      	lsls	r0, r7, #23
 8006f8c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006f90:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006f94:	d516      	bpl.n	8006fc4 <_dtoa_r+0x34c>
 8006f96:	4ba8      	ldr	r3, [pc, #672]	@ (8007238 <_dtoa_r+0x5c0>)
 8006f98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006f9c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006fa0:	f7f9 fc54 	bl	800084c <__aeabi_ddiv>
 8006fa4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fa8:	f004 040f 	and.w	r4, r4, #15
 8006fac:	2603      	movs	r6, #3
 8006fae:	4da2      	ldr	r5, [pc, #648]	@ (8007238 <_dtoa_r+0x5c0>)
 8006fb0:	b954      	cbnz	r4, 8006fc8 <_dtoa_r+0x350>
 8006fb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006fb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fba:	f7f9 fc47 	bl	800084c <__aeabi_ddiv>
 8006fbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fc2:	e028      	b.n	8007016 <_dtoa_r+0x39e>
 8006fc4:	2602      	movs	r6, #2
 8006fc6:	e7f2      	b.n	8006fae <_dtoa_r+0x336>
 8006fc8:	07e1      	lsls	r1, r4, #31
 8006fca:	d508      	bpl.n	8006fde <_dtoa_r+0x366>
 8006fcc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006fd0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006fd4:	f7f9 fb10 	bl	80005f8 <__aeabi_dmul>
 8006fd8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006fdc:	3601      	adds	r6, #1
 8006fde:	1064      	asrs	r4, r4, #1
 8006fe0:	3508      	adds	r5, #8
 8006fe2:	e7e5      	b.n	8006fb0 <_dtoa_r+0x338>
 8006fe4:	f000 80d2 	beq.w	800718c <_dtoa_r+0x514>
 8006fe8:	427c      	negs	r4, r7
 8006fea:	4b92      	ldr	r3, [pc, #584]	@ (8007234 <_dtoa_r+0x5bc>)
 8006fec:	4d92      	ldr	r5, [pc, #584]	@ (8007238 <_dtoa_r+0x5c0>)
 8006fee:	f004 020f 	and.w	r2, r4, #15
 8006ff2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ffa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006ffe:	f7f9 fafb 	bl	80005f8 <__aeabi_dmul>
 8007002:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007006:	1124      	asrs	r4, r4, #4
 8007008:	2300      	movs	r3, #0
 800700a:	2602      	movs	r6, #2
 800700c:	2c00      	cmp	r4, #0
 800700e:	f040 80b2 	bne.w	8007176 <_dtoa_r+0x4fe>
 8007012:	2b00      	cmp	r3, #0
 8007014:	d1d3      	bne.n	8006fbe <_dtoa_r+0x346>
 8007016:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007018:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800701c:	2b00      	cmp	r3, #0
 800701e:	f000 80b7 	beq.w	8007190 <_dtoa_r+0x518>
 8007022:	4b86      	ldr	r3, [pc, #536]	@ (800723c <_dtoa_r+0x5c4>)
 8007024:	2200      	movs	r2, #0
 8007026:	4620      	mov	r0, r4
 8007028:	4629      	mov	r1, r5
 800702a:	f7f9 fd57 	bl	8000adc <__aeabi_dcmplt>
 800702e:	2800      	cmp	r0, #0
 8007030:	f000 80ae 	beq.w	8007190 <_dtoa_r+0x518>
 8007034:	9b07      	ldr	r3, [sp, #28]
 8007036:	2b00      	cmp	r3, #0
 8007038:	f000 80aa 	beq.w	8007190 <_dtoa_r+0x518>
 800703c:	9b00      	ldr	r3, [sp, #0]
 800703e:	2b00      	cmp	r3, #0
 8007040:	dd37      	ble.n	80070b2 <_dtoa_r+0x43a>
 8007042:	1e7b      	subs	r3, r7, #1
 8007044:	9304      	str	r3, [sp, #16]
 8007046:	4620      	mov	r0, r4
 8007048:	4b7d      	ldr	r3, [pc, #500]	@ (8007240 <_dtoa_r+0x5c8>)
 800704a:	2200      	movs	r2, #0
 800704c:	4629      	mov	r1, r5
 800704e:	f7f9 fad3 	bl	80005f8 <__aeabi_dmul>
 8007052:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007056:	9c00      	ldr	r4, [sp, #0]
 8007058:	3601      	adds	r6, #1
 800705a:	4630      	mov	r0, r6
 800705c:	f7f9 fa62 	bl	8000524 <__aeabi_i2d>
 8007060:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007064:	f7f9 fac8 	bl	80005f8 <__aeabi_dmul>
 8007068:	4b76      	ldr	r3, [pc, #472]	@ (8007244 <_dtoa_r+0x5cc>)
 800706a:	2200      	movs	r2, #0
 800706c:	f7f9 f90e 	bl	800028c <__adddf3>
 8007070:	4605      	mov	r5, r0
 8007072:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007076:	2c00      	cmp	r4, #0
 8007078:	f040 808d 	bne.w	8007196 <_dtoa_r+0x51e>
 800707c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007080:	4b71      	ldr	r3, [pc, #452]	@ (8007248 <_dtoa_r+0x5d0>)
 8007082:	2200      	movs	r2, #0
 8007084:	f7f9 f900 	bl	8000288 <__aeabi_dsub>
 8007088:	4602      	mov	r2, r0
 800708a:	460b      	mov	r3, r1
 800708c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007090:	462a      	mov	r2, r5
 8007092:	4633      	mov	r3, r6
 8007094:	f7f9 fd40 	bl	8000b18 <__aeabi_dcmpgt>
 8007098:	2800      	cmp	r0, #0
 800709a:	f040 828b 	bne.w	80075b4 <_dtoa_r+0x93c>
 800709e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070a2:	462a      	mov	r2, r5
 80070a4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80070a8:	f7f9 fd18 	bl	8000adc <__aeabi_dcmplt>
 80070ac:	2800      	cmp	r0, #0
 80070ae:	f040 8128 	bne.w	8007302 <_dtoa_r+0x68a>
 80070b2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80070b6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80070ba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80070bc:	2b00      	cmp	r3, #0
 80070be:	f2c0 815a 	blt.w	8007376 <_dtoa_r+0x6fe>
 80070c2:	2f0e      	cmp	r7, #14
 80070c4:	f300 8157 	bgt.w	8007376 <_dtoa_r+0x6fe>
 80070c8:	4b5a      	ldr	r3, [pc, #360]	@ (8007234 <_dtoa_r+0x5bc>)
 80070ca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80070ce:	ed93 7b00 	vldr	d7, [r3]
 80070d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	ed8d 7b00 	vstr	d7, [sp]
 80070da:	da03      	bge.n	80070e4 <_dtoa_r+0x46c>
 80070dc:	9b07      	ldr	r3, [sp, #28]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	f340 8101 	ble.w	80072e6 <_dtoa_r+0x66e>
 80070e4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80070e8:	4656      	mov	r6, sl
 80070ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80070ee:	4620      	mov	r0, r4
 80070f0:	4629      	mov	r1, r5
 80070f2:	f7f9 fbab 	bl	800084c <__aeabi_ddiv>
 80070f6:	f7f9 fd2f 	bl	8000b58 <__aeabi_d2iz>
 80070fa:	4680      	mov	r8, r0
 80070fc:	f7f9 fa12 	bl	8000524 <__aeabi_i2d>
 8007100:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007104:	f7f9 fa78 	bl	80005f8 <__aeabi_dmul>
 8007108:	4602      	mov	r2, r0
 800710a:	460b      	mov	r3, r1
 800710c:	4620      	mov	r0, r4
 800710e:	4629      	mov	r1, r5
 8007110:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007114:	f7f9 f8b8 	bl	8000288 <__aeabi_dsub>
 8007118:	f806 4b01 	strb.w	r4, [r6], #1
 800711c:	9d07      	ldr	r5, [sp, #28]
 800711e:	eba6 040a 	sub.w	r4, r6, sl
 8007122:	42a5      	cmp	r5, r4
 8007124:	4602      	mov	r2, r0
 8007126:	460b      	mov	r3, r1
 8007128:	f040 8117 	bne.w	800735a <_dtoa_r+0x6e2>
 800712c:	f7f9 f8ae 	bl	800028c <__adddf3>
 8007130:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007134:	4604      	mov	r4, r0
 8007136:	460d      	mov	r5, r1
 8007138:	f7f9 fcee 	bl	8000b18 <__aeabi_dcmpgt>
 800713c:	2800      	cmp	r0, #0
 800713e:	f040 80f9 	bne.w	8007334 <_dtoa_r+0x6bc>
 8007142:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007146:	4620      	mov	r0, r4
 8007148:	4629      	mov	r1, r5
 800714a:	f7f9 fcbd 	bl	8000ac8 <__aeabi_dcmpeq>
 800714e:	b118      	cbz	r0, 8007158 <_dtoa_r+0x4e0>
 8007150:	f018 0f01 	tst.w	r8, #1
 8007154:	f040 80ee 	bne.w	8007334 <_dtoa_r+0x6bc>
 8007158:	4649      	mov	r1, r9
 800715a:	4658      	mov	r0, fp
 800715c:	f000 ffdc 	bl	8008118 <_Bfree>
 8007160:	2300      	movs	r3, #0
 8007162:	7033      	strb	r3, [r6, #0]
 8007164:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007166:	3701      	adds	r7, #1
 8007168:	601f      	str	r7, [r3, #0]
 800716a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800716c:	2b00      	cmp	r3, #0
 800716e:	f000 831d 	beq.w	80077ac <_dtoa_r+0xb34>
 8007172:	601e      	str	r6, [r3, #0]
 8007174:	e31a      	b.n	80077ac <_dtoa_r+0xb34>
 8007176:	07e2      	lsls	r2, r4, #31
 8007178:	d505      	bpl.n	8007186 <_dtoa_r+0x50e>
 800717a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800717e:	f7f9 fa3b 	bl	80005f8 <__aeabi_dmul>
 8007182:	3601      	adds	r6, #1
 8007184:	2301      	movs	r3, #1
 8007186:	1064      	asrs	r4, r4, #1
 8007188:	3508      	adds	r5, #8
 800718a:	e73f      	b.n	800700c <_dtoa_r+0x394>
 800718c:	2602      	movs	r6, #2
 800718e:	e742      	b.n	8007016 <_dtoa_r+0x39e>
 8007190:	9c07      	ldr	r4, [sp, #28]
 8007192:	9704      	str	r7, [sp, #16]
 8007194:	e761      	b.n	800705a <_dtoa_r+0x3e2>
 8007196:	4b27      	ldr	r3, [pc, #156]	@ (8007234 <_dtoa_r+0x5bc>)
 8007198:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800719a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800719e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80071a2:	4454      	add	r4, sl
 80071a4:	2900      	cmp	r1, #0
 80071a6:	d053      	beq.n	8007250 <_dtoa_r+0x5d8>
 80071a8:	4928      	ldr	r1, [pc, #160]	@ (800724c <_dtoa_r+0x5d4>)
 80071aa:	2000      	movs	r0, #0
 80071ac:	f7f9 fb4e 	bl	800084c <__aeabi_ddiv>
 80071b0:	4633      	mov	r3, r6
 80071b2:	462a      	mov	r2, r5
 80071b4:	f7f9 f868 	bl	8000288 <__aeabi_dsub>
 80071b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80071bc:	4656      	mov	r6, sl
 80071be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071c2:	f7f9 fcc9 	bl	8000b58 <__aeabi_d2iz>
 80071c6:	4605      	mov	r5, r0
 80071c8:	f7f9 f9ac 	bl	8000524 <__aeabi_i2d>
 80071cc:	4602      	mov	r2, r0
 80071ce:	460b      	mov	r3, r1
 80071d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071d4:	f7f9 f858 	bl	8000288 <__aeabi_dsub>
 80071d8:	3530      	adds	r5, #48	@ 0x30
 80071da:	4602      	mov	r2, r0
 80071dc:	460b      	mov	r3, r1
 80071de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80071e2:	f806 5b01 	strb.w	r5, [r6], #1
 80071e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80071ea:	f7f9 fc77 	bl	8000adc <__aeabi_dcmplt>
 80071ee:	2800      	cmp	r0, #0
 80071f0:	d171      	bne.n	80072d6 <_dtoa_r+0x65e>
 80071f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80071f6:	4911      	ldr	r1, [pc, #68]	@ (800723c <_dtoa_r+0x5c4>)
 80071f8:	2000      	movs	r0, #0
 80071fa:	f7f9 f845 	bl	8000288 <__aeabi_dsub>
 80071fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007202:	f7f9 fc6b 	bl	8000adc <__aeabi_dcmplt>
 8007206:	2800      	cmp	r0, #0
 8007208:	f040 8095 	bne.w	8007336 <_dtoa_r+0x6be>
 800720c:	42a6      	cmp	r6, r4
 800720e:	f43f af50 	beq.w	80070b2 <_dtoa_r+0x43a>
 8007212:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007216:	4b0a      	ldr	r3, [pc, #40]	@ (8007240 <_dtoa_r+0x5c8>)
 8007218:	2200      	movs	r2, #0
 800721a:	f7f9 f9ed 	bl	80005f8 <__aeabi_dmul>
 800721e:	4b08      	ldr	r3, [pc, #32]	@ (8007240 <_dtoa_r+0x5c8>)
 8007220:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007224:	2200      	movs	r2, #0
 8007226:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800722a:	f7f9 f9e5 	bl	80005f8 <__aeabi_dmul>
 800722e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007232:	e7c4      	b.n	80071be <_dtoa_r+0x546>
 8007234:	0800a8b0 	.word	0x0800a8b0
 8007238:	0800a888 	.word	0x0800a888
 800723c:	3ff00000 	.word	0x3ff00000
 8007240:	40240000 	.word	0x40240000
 8007244:	401c0000 	.word	0x401c0000
 8007248:	40140000 	.word	0x40140000
 800724c:	3fe00000 	.word	0x3fe00000
 8007250:	4631      	mov	r1, r6
 8007252:	4628      	mov	r0, r5
 8007254:	f7f9 f9d0 	bl	80005f8 <__aeabi_dmul>
 8007258:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800725c:	9415      	str	r4, [sp, #84]	@ 0x54
 800725e:	4656      	mov	r6, sl
 8007260:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007264:	f7f9 fc78 	bl	8000b58 <__aeabi_d2iz>
 8007268:	4605      	mov	r5, r0
 800726a:	f7f9 f95b 	bl	8000524 <__aeabi_i2d>
 800726e:	4602      	mov	r2, r0
 8007270:	460b      	mov	r3, r1
 8007272:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007276:	f7f9 f807 	bl	8000288 <__aeabi_dsub>
 800727a:	3530      	adds	r5, #48	@ 0x30
 800727c:	f806 5b01 	strb.w	r5, [r6], #1
 8007280:	4602      	mov	r2, r0
 8007282:	460b      	mov	r3, r1
 8007284:	42a6      	cmp	r6, r4
 8007286:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800728a:	f04f 0200 	mov.w	r2, #0
 800728e:	d124      	bne.n	80072da <_dtoa_r+0x662>
 8007290:	4bac      	ldr	r3, [pc, #688]	@ (8007544 <_dtoa_r+0x8cc>)
 8007292:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007296:	f7f8 fff9 	bl	800028c <__adddf3>
 800729a:	4602      	mov	r2, r0
 800729c:	460b      	mov	r3, r1
 800729e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072a2:	f7f9 fc39 	bl	8000b18 <__aeabi_dcmpgt>
 80072a6:	2800      	cmp	r0, #0
 80072a8:	d145      	bne.n	8007336 <_dtoa_r+0x6be>
 80072aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80072ae:	49a5      	ldr	r1, [pc, #660]	@ (8007544 <_dtoa_r+0x8cc>)
 80072b0:	2000      	movs	r0, #0
 80072b2:	f7f8 ffe9 	bl	8000288 <__aeabi_dsub>
 80072b6:	4602      	mov	r2, r0
 80072b8:	460b      	mov	r3, r1
 80072ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072be:	f7f9 fc0d 	bl	8000adc <__aeabi_dcmplt>
 80072c2:	2800      	cmp	r0, #0
 80072c4:	f43f aef5 	beq.w	80070b2 <_dtoa_r+0x43a>
 80072c8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80072ca:	1e73      	subs	r3, r6, #1
 80072cc:	9315      	str	r3, [sp, #84]	@ 0x54
 80072ce:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80072d2:	2b30      	cmp	r3, #48	@ 0x30
 80072d4:	d0f8      	beq.n	80072c8 <_dtoa_r+0x650>
 80072d6:	9f04      	ldr	r7, [sp, #16]
 80072d8:	e73e      	b.n	8007158 <_dtoa_r+0x4e0>
 80072da:	4b9b      	ldr	r3, [pc, #620]	@ (8007548 <_dtoa_r+0x8d0>)
 80072dc:	f7f9 f98c 	bl	80005f8 <__aeabi_dmul>
 80072e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072e4:	e7bc      	b.n	8007260 <_dtoa_r+0x5e8>
 80072e6:	d10c      	bne.n	8007302 <_dtoa_r+0x68a>
 80072e8:	4b98      	ldr	r3, [pc, #608]	@ (800754c <_dtoa_r+0x8d4>)
 80072ea:	2200      	movs	r2, #0
 80072ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80072f0:	f7f9 f982 	bl	80005f8 <__aeabi_dmul>
 80072f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80072f8:	f7f9 fc04 	bl	8000b04 <__aeabi_dcmpge>
 80072fc:	2800      	cmp	r0, #0
 80072fe:	f000 8157 	beq.w	80075b0 <_dtoa_r+0x938>
 8007302:	2400      	movs	r4, #0
 8007304:	4625      	mov	r5, r4
 8007306:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007308:	43db      	mvns	r3, r3
 800730a:	9304      	str	r3, [sp, #16]
 800730c:	4656      	mov	r6, sl
 800730e:	2700      	movs	r7, #0
 8007310:	4621      	mov	r1, r4
 8007312:	4658      	mov	r0, fp
 8007314:	f000 ff00 	bl	8008118 <_Bfree>
 8007318:	2d00      	cmp	r5, #0
 800731a:	d0dc      	beq.n	80072d6 <_dtoa_r+0x65e>
 800731c:	b12f      	cbz	r7, 800732a <_dtoa_r+0x6b2>
 800731e:	42af      	cmp	r7, r5
 8007320:	d003      	beq.n	800732a <_dtoa_r+0x6b2>
 8007322:	4639      	mov	r1, r7
 8007324:	4658      	mov	r0, fp
 8007326:	f000 fef7 	bl	8008118 <_Bfree>
 800732a:	4629      	mov	r1, r5
 800732c:	4658      	mov	r0, fp
 800732e:	f000 fef3 	bl	8008118 <_Bfree>
 8007332:	e7d0      	b.n	80072d6 <_dtoa_r+0x65e>
 8007334:	9704      	str	r7, [sp, #16]
 8007336:	4633      	mov	r3, r6
 8007338:	461e      	mov	r6, r3
 800733a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800733e:	2a39      	cmp	r2, #57	@ 0x39
 8007340:	d107      	bne.n	8007352 <_dtoa_r+0x6da>
 8007342:	459a      	cmp	sl, r3
 8007344:	d1f8      	bne.n	8007338 <_dtoa_r+0x6c0>
 8007346:	9a04      	ldr	r2, [sp, #16]
 8007348:	3201      	adds	r2, #1
 800734a:	9204      	str	r2, [sp, #16]
 800734c:	2230      	movs	r2, #48	@ 0x30
 800734e:	f88a 2000 	strb.w	r2, [sl]
 8007352:	781a      	ldrb	r2, [r3, #0]
 8007354:	3201      	adds	r2, #1
 8007356:	701a      	strb	r2, [r3, #0]
 8007358:	e7bd      	b.n	80072d6 <_dtoa_r+0x65e>
 800735a:	4b7b      	ldr	r3, [pc, #492]	@ (8007548 <_dtoa_r+0x8d0>)
 800735c:	2200      	movs	r2, #0
 800735e:	f7f9 f94b 	bl	80005f8 <__aeabi_dmul>
 8007362:	2200      	movs	r2, #0
 8007364:	2300      	movs	r3, #0
 8007366:	4604      	mov	r4, r0
 8007368:	460d      	mov	r5, r1
 800736a:	f7f9 fbad 	bl	8000ac8 <__aeabi_dcmpeq>
 800736e:	2800      	cmp	r0, #0
 8007370:	f43f aebb 	beq.w	80070ea <_dtoa_r+0x472>
 8007374:	e6f0      	b.n	8007158 <_dtoa_r+0x4e0>
 8007376:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007378:	2a00      	cmp	r2, #0
 800737a:	f000 80db 	beq.w	8007534 <_dtoa_r+0x8bc>
 800737e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007380:	2a01      	cmp	r2, #1
 8007382:	f300 80bf 	bgt.w	8007504 <_dtoa_r+0x88c>
 8007386:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007388:	2a00      	cmp	r2, #0
 800738a:	f000 80b7 	beq.w	80074fc <_dtoa_r+0x884>
 800738e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007392:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007394:	4646      	mov	r6, r8
 8007396:	9a08      	ldr	r2, [sp, #32]
 8007398:	2101      	movs	r1, #1
 800739a:	441a      	add	r2, r3
 800739c:	4658      	mov	r0, fp
 800739e:	4498      	add	r8, r3
 80073a0:	9208      	str	r2, [sp, #32]
 80073a2:	f000 ffb7 	bl	8008314 <__i2b>
 80073a6:	4605      	mov	r5, r0
 80073a8:	b15e      	cbz	r6, 80073c2 <_dtoa_r+0x74a>
 80073aa:	9b08      	ldr	r3, [sp, #32]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	dd08      	ble.n	80073c2 <_dtoa_r+0x74a>
 80073b0:	42b3      	cmp	r3, r6
 80073b2:	9a08      	ldr	r2, [sp, #32]
 80073b4:	bfa8      	it	ge
 80073b6:	4633      	movge	r3, r6
 80073b8:	eba8 0803 	sub.w	r8, r8, r3
 80073bc:	1af6      	subs	r6, r6, r3
 80073be:	1ad3      	subs	r3, r2, r3
 80073c0:	9308      	str	r3, [sp, #32]
 80073c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80073c4:	b1f3      	cbz	r3, 8007404 <_dtoa_r+0x78c>
 80073c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	f000 80b7 	beq.w	800753c <_dtoa_r+0x8c4>
 80073ce:	b18c      	cbz	r4, 80073f4 <_dtoa_r+0x77c>
 80073d0:	4629      	mov	r1, r5
 80073d2:	4622      	mov	r2, r4
 80073d4:	4658      	mov	r0, fp
 80073d6:	f001 f85d 	bl	8008494 <__pow5mult>
 80073da:	464a      	mov	r2, r9
 80073dc:	4601      	mov	r1, r0
 80073de:	4605      	mov	r5, r0
 80073e0:	4658      	mov	r0, fp
 80073e2:	f000 ffad 	bl	8008340 <__multiply>
 80073e6:	4649      	mov	r1, r9
 80073e8:	9004      	str	r0, [sp, #16]
 80073ea:	4658      	mov	r0, fp
 80073ec:	f000 fe94 	bl	8008118 <_Bfree>
 80073f0:	9b04      	ldr	r3, [sp, #16]
 80073f2:	4699      	mov	r9, r3
 80073f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80073f6:	1b1a      	subs	r2, r3, r4
 80073f8:	d004      	beq.n	8007404 <_dtoa_r+0x78c>
 80073fa:	4649      	mov	r1, r9
 80073fc:	4658      	mov	r0, fp
 80073fe:	f001 f849 	bl	8008494 <__pow5mult>
 8007402:	4681      	mov	r9, r0
 8007404:	2101      	movs	r1, #1
 8007406:	4658      	mov	r0, fp
 8007408:	f000 ff84 	bl	8008314 <__i2b>
 800740c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800740e:	4604      	mov	r4, r0
 8007410:	2b00      	cmp	r3, #0
 8007412:	f000 81cf 	beq.w	80077b4 <_dtoa_r+0xb3c>
 8007416:	461a      	mov	r2, r3
 8007418:	4601      	mov	r1, r0
 800741a:	4658      	mov	r0, fp
 800741c:	f001 f83a 	bl	8008494 <__pow5mult>
 8007420:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007422:	2b01      	cmp	r3, #1
 8007424:	4604      	mov	r4, r0
 8007426:	f300 8095 	bgt.w	8007554 <_dtoa_r+0x8dc>
 800742a:	9b02      	ldr	r3, [sp, #8]
 800742c:	2b00      	cmp	r3, #0
 800742e:	f040 8087 	bne.w	8007540 <_dtoa_r+0x8c8>
 8007432:	9b03      	ldr	r3, [sp, #12]
 8007434:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007438:	2b00      	cmp	r3, #0
 800743a:	f040 8089 	bne.w	8007550 <_dtoa_r+0x8d8>
 800743e:	9b03      	ldr	r3, [sp, #12]
 8007440:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007444:	0d1b      	lsrs	r3, r3, #20
 8007446:	051b      	lsls	r3, r3, #20
 8007448:	b12b      	cbz	r3, 8007456 <_dtoa_r+0x7de>
 800744a:	9b08      	ldr	r3, [sp, #32]
 800744c:	3301      	adds	r3, #1
 800744e:	9308      	str	r3, [sp, #32]
 8007450:	f108 0801 	add.w	r8, r8, #1
 8007454:	2301      	movs	r3, #1
 8007456:	930a      	str	r3, [sp, #40]	@ 0x28
 8007458:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800745a:	2b00      	cmp	r3, #0
 800745c:	f000 81b0 	beq.w	80077c0 <_dtoa_r+0xb48>
 8007460:	6923      	ldr	r3, [r4, #16]
 8007462:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007466:	6918      	ldr	r0, [r3, #16]
 8007468:	f000 ff08 	bl	800827c <__hi0bits>
 800746c:	f1c0 0020 	rsb	r0, r0, #32
 8007470:	9b08      	ldr	r3, [sp, #32]
 8007472:	4418      	add	r0, r3
 8007474:	f010 001f 	ands.w	r0, r0, #31
 8007478:	d077      	beq.n	800756a <_dtoa_r+0x8f2>
 800747a:	f1c0 0320 	rsb	r3, r0, #32
 800747e:	2b04      	cmp	r3, #4
 8007480:	dd6b      	ble.n	800755a <_dtoa_r+0x8e2>
 8007482:	9b08      	ldr	r3, [sp, #32]
 8007484:	f1c0 001c 	rsb	r0, r0, #28
 8007488:	4403      	add	r3, r0
 800748a:	4480      	add	r8, r0
 800748c:	4406      	add	r6, r0
 800748e:	9308      	str	r3, [sp, #32]
 8007490:	f1b8 0f00 	cmp.w	r8, #0
 8007494:	dd05      	ble.n	80074a2 <_dtoa_r+0x82a>
 8007496:	4649      	mov	r1, r9
 8007498:	4642      	mov	r2, r8
 800749a:	4658      	mov	r0, fp
 800749c:	f001 f854 	bl	8008548 <__lshift>
 80074a0:	4681      	mov	r9, r0
 80074a2:	9b08      	ldr	r3, [sp, #32]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	dd05      	ble.n	80074b4 <_dtoa_r+0x83c>
 80074a8:	4621      	mov	r1, r4
 80074aa:	461a      	mov	r2, r3
 80074ac:	4658      	mov	r0, fp
 80074ae:	f001 f84b 	bl	8008548 <__lshift>
 80074b2:	4604      	mov	r4, r0
 80074b4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d059      	beq.n	800756e <_dtoa_r+0x8f6>
 80074ba:	4621      	mov	r1, r4
 80074bc:	4648      	mov	r0, r9
 80074be:	f001 f8af 	bl	8008620 <__mcmp>
 80074c2:	2800      	cmp	r0, #0
 80074c4:	da53      	bge.n	800756e <_dtoa_r+0x8f6>
 80074c6:	1e7b      	subs	r3, r7, #1
 80074c8:	9304      	str	r3, [sp, #16]
 80074ca:	4649      	mov	r1, r9
 80074cc:	2300      	movs	r3, #0
 80074ce:	220a      	movs	r2, #10
 80074d0:	4658      	mov	r0, fp
 80074d2:	f000 fe43 	bl	800815c <__multadd>
 80074d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80074d8:	4681      	mov	r9, r0
 80074da:	2b00      	cmp	r3, #0
 80074dc:	f000 8172 	beq.w	80077c4 <_dtoa_r+0xb4c>
 80074e0:	2300      	movs	r3, #0
 80074e2:	4629      	mov	r1, r5
 80074e4:	220a      	movs	r2, #10
 80074e6:	4658      	mov	r0, fp
 80074e8:	f000 fe38 	bl	800815c <__multadd>
 80074ec:	9b00      	ldr	r3, [sp, #0]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	4605      	mov	r5, r0
 80074f2:	dc67      	bgt.n	80075c4 <_dtoa_r+0x94c>
 80074f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074f6:	2b02      	cmp	r3, #2
 80074f8:	dc41      	bgt.n	800757e <_dtoa_r+0x906>
 80074fa:	e063      	b.n	80075c4 <_dtoa_r+0x94c>
 80074fc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80074fe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007502:	e746      	b.n	8007392 <_dtoa_r+0x71a>
 8007504:	9b07      	ldr	r3, [sp, #28]
 8007506:	1e5c      	subs	r4, r3, #1
 8007508:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800750a:	42a3      	cmp	r3, r4
 800750c:	bfbf      	itttt	lt
 800750e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007510:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007512:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007514:	1ae3      	sublt	r3, r4, r3
 8007516:	bfb4      	ite	lt
 8007518:	18d2      	addlt	r2, r2, r3
 800751a:	1b1c      	subge	r4, r3, r4
 800751c:	9b07      	ldr	r3, [sp, #28]
 800751e:	bfbc      	itt	lt
 8007520:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007522:	2400      	movlt	r4, #0
 8007524:	2b00      	cmp	r3, #0
 8007526:	bfb5      	itete	lt
 8007528:	eba8 0603 	sublt.w	r6, r8, r3
 800752c:	9b07      	ldrge	r3, [sp, #28]
 800752e:	2300      	movlt	r3, #0
 8007530:	4646      	movge	r6, r8
 8007532:	e730      	b.n	8007396 <_dtoa_r+0x71e>
 8007534:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007536:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007538:	4646      	mov	r6, r8
 800753a:	e735      	b.n	80073a8 <_dtoa_r+0x730>
 800753c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800753e:	e75c      	b.n	80073fa <_dtoa_r+0x782>
 8007540:	2300      	movs	r3, #0
 8007542:	e788      	b.n	8007456 <_dtoa_r+0x7de>
 8007544:	3fe00000 	.word	0x3fe00000
 8007548:	40240000 	.word	0x40240000
 800754c:	40140000 	.word	0x40140000
 8007550:	9b02      	ldr	r3, [sp, #8]
 8007552:	e780      	b.n	8007456 <_dtoa_r+0x7de>
 8007554:	2300      	movs	r3, #0
 8007556:	930a      	str	r3, [sp, #40]	@ 0x28
 8007558:	e782      	b.n	8007460 <_dtoa_r+0x7e8>
 800755a:	d099      	beq.n	8007490 <_dtoa_r+0x818>
 800755c:	9a08      	ldr	r2, [sp, #32]
 800755e:	331c      	adds	r3, #28
 8007560:	441a      	add	r2, r3
 8007562:	4498      	add	r8, r3
 8007564:	441e      	add	r6, r3
 8007566:	9208      	str	r2, [sp, #32]
 8007568:	e792      	b.n	8007490 <_dtoa_r+0x818>
 800756a:	4603      	mov	r3, r0
 800756c:	e7f6      	b.n	800755c <_dtoa_r+0x8e4>
 800756e:	9b07      	ldr	r3, [sp, #28]
 8007570:	9704      	str	r7, [sp, #16]
 8007572:	2b00      	cmp	r3, #0
 8007574:	dc20      	bgt.n	80075b8 <_dtoa_r+0x940>
 8007576:	9300      	str	r3, [sp, #0]
 8007578:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800757a:	2b02      	cmp	r3, #2
 800757c:	dd1e      	ble.n	80075bc <_dtoa_r+0x944>
 800757e:	9b00      	ldr	r3, [sp, #0]
 8007580:	2b00      	cmp	r3, #0
 8007582:	f47f aec0 	bne.w	8007306 <_dtoa_r+0x68e>
 8007586:	4621      	mov	r1, r4
 8007588:	2205      	movs	r2, #5
 800758a:	4658      	mov	r0, fp
 800758c:	f000 fde6 	bl	800815c <__multadd>
 8007590:	4601      	mov	r1, r0
 8007592:	4604      	mov	r4, r0
 8007594:	4648      	mov	r0, r9
 8007596:	f001 f843 	bl	8008620 <__mcmp>
 800759a:	2800      	cmp	r0, #0
 800759c:	f77f aeb3 	ble.w	8007306 <_dtoa_r+0x68e>
 80075a0:	4656      	mov	r6, sl
 80075a2:	2331      	movs	r3, #49	@ 0x31
 80075a4:	f806 3b01 	strb.w	r3, [r6], #1
 80075a8:	9b04      	ldr	r3, [sp, #16]
 80075aa:	3301      	adds	r3, #1
 80075ac:	9304      	str	r3, [sp, #16]
 80075ae:	e6ae      	b.n	800730e <_dtoa_r+0x696>
 80075b0:	9c07      	ldr	r4, [sp, #28]
 80075b2:	9704      	str	r7, [sp, #16]
 80075b4:	4625      	mov	r5, r4
 80075b6:	e7f3      	b.n	80075a0 <_dtoa_r+0x928>
 80075b8:	9b07      	ldr	r3, [sp, #28]
 80075ba:	9300      	str	r3, [sp, #0]
 80075bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80075be:	2b00      	cmp	r3, #0
 80075c0:	f000 8104 	beq.w	80077cc <_dtoa_r+0xb54>
 80075c4:	2e00      	cmp	r6, #0
 80075c6:	dd05      	ble.n	80075d4 <_dtoa_r+0x95c>
 80075c8:	4629      	mov	r1, r5
 80075ca:	4632      	mov	r2, r6
 80075cc:	4658      	mov	r0, fp
 80075ce:	f000 ffbb 	bl	8008548 <__lshift>
 80075d2:	4605      	mov	r5, r0
 80075d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d05a      	beq.n	8007690 <_dtoa_r+0xa18>
 80075da:	6869      	ldr	r1, [r5, #4]
 80075dc:	4658      	mov	r0, fp
 80075de:	f000 fd5b 	bl	8008098 <_Balloc>
 80075e2:	4606      	mov	r6, r0
 80075e4:	b928      	cbnz	r0, 80075f2 <_dtoa_r+0x97a>
 80075e6:	4b84      	ldr	r3, [pc, #528]	@ (80077f8 <_dtoa_r+0xb80>)
 80075e8:	4602      	mov	r2, r0
 80075ea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80075ee:	f7ff bb5a 	b.w	8006ca6 <_dtoa_r+0x2e>
 80075f2:	692a      	ldr	r2, [r5, #16]
 80075f4:	3202      	adds	r2, #2
 80075f6:	0092      	lsls	r2, r2, #2
 80075f8:	f105 010c 	add.w	r1, r5, #12
 80075fc:	300c      	adds	r0, #12
 80075fe:	f7ff fa7a 	bl	8006af6 <memcpy>
 8007602:	2201      	movs	r2, #1
 8007604:	4631      	mov	r1, r6
 8007606:	4658      	mov	r0, fp
 8007608:	f000 ff9e 	bl	8008548 <__lshift>
 800760c:	f10a 0301 	add.w	r3, sl, #1
 8007610:	9307      	str	r3, [sp, #28]
 8007612:	9b00      	ldr	r3, [sp, #0]
 8007614:	4453      	add	r3, sl
 8007616:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007618:	9b02      	ldr	r3, [sp, #8]
 800761a:	f003 0301 	and.w	r3, r3, #1
 800761e:	462f      	mov	r7, r5
 8007620:	930a      	str	r3, [sp, #40]	@ 0x28
 8007622:	4605      	mov	r5, r0
 8007624:	9b07      	ldr	r3, [sp, #28]
 8007626:	4621      	mov	r1, r4
 8007628:	3b01      	subs	r3, #1
 800762a:	4648      	mov	r0, r9
 800762c:	9300      	str	r3, [sp, #0]
 800762e:	f7ff fa99 	bl	8006b64 <quorem>
 8007632:	4639      	mov	r1, r7
 8007634:	9002      	str	r0, [sp, #8]
 8007636:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800763a:	4648      	mov	r0, r9
 800763c:	f000 fff0 	bl	8008620 <__mcmp>
 8007640:	462a      	mov	r2, r5
 8007642:	9008      	str	r0, [sp, #32]
 8007644:	4621      	mov	r1, r4
 8007646:	4658      	mov	r0, fp
 8007648:	f001 f806 	bl	8008658 <__mdiff>
 800764c:	68c2      	ldr	r2, [r0, #12]
 800764e:	4606      	mov	r6, r0
 8007650:	bb02      	cbnz	r2, 8007694 <_dtoa_r+0xa1c>
 8007652:	4601      	mov	r1, r0
 8007654:	4648      	mov	r0, r9
 8007656:	f000 ffe3 	bl	8008620 <__mcmp>
 800765a:	4602      	mov	r2, r0
 800765c:	4631      	mov	r1, r6
 800765e:	4658      	mov	r0, fp
 8007660:	920e      	str	r2, [sp, #56]	@ 0x38
 8007662:	f000 fd59 	bl	8008118 <_Bfree>
 8007666:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007668:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800766a:	9e07      	ldr	r6, [sp, #28]
 800766c:	ea43 0102 	orr.w	r1, r3, r2
 8007670:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007672:	4319      	orrs	r1, r3
 8007674:	d110      	bne.n	8007698 <_dtoa_r+0xa20>
 8007676:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800767a:	d029      	beq.n	80076d0 <_dtoa_r+0xa58>
 800767c:	9b08      	ldr	r3, [sp, #32]
 800767e:	2b00      	cmp	r3, #0
 8007680:	dd02      	ble.n	8007688 <_dtoa_r+0xa10>
 8007682:	9b02      	ldr	r3, [sp, #8]
 8007684:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007688:	9b00      	ldr	r3, [sp, #0]
 800768a:	f883 8000 	strb.w	r8, [r3]
 800768e:	e63f      	b.n	8007310 <_dtoa_r+0x698>
 8007690:	4628      	mov	r0, r5
 8007692:	e7bb      	b.n	800760c <_dtoa_r+0x994>
 8007694:	2201      	movs	r2, #1
 8007696:	e7e1      	b.n	800765c <_dtoa_r+0x9e4>
 8007698:	9b08      	ldr	r3, [sp, #32]
 800769a:	2b00      	cmp	r3, #0
 800769c:	db04      	blt.n	80076a8 <_dtoa_r+0xa30>
 800769e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80076a0:	430b      	orrs	r3, r1
 80076a2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80076a4:	430b      	orrs	r3, r1
 80076a6:	d120      	bne.n	80076ea <_dtoa_r+0xa72>
 80076a8:	2a00      	cmp	r2, #0
 80076aa:	dded      	ble.n	8007688 <_dtoa_r+0xa10>
 80076ac:	4649      	mov	r1, r9
 80076ae:	2201      	movs	r2, #1
 80076b0:	4658      	mov	r0, fp
 80076b2:	f000 ff49 	bl	8008548 <__lshift>
 80076b6:	4621      	mov	r1, r4
 80076b8:	4681      	mov	r9, r0
 80076ba:	f000 ffb1 	bl	8008620 <__mcmp>
 80076be:	2800      	cmp	r0, #0
 80076c0:	dc03      	bgt.n	80076ca <_dtoa_r+0xa52>
 80076c2:	d1e1      	bne.n	8007688 <_dtoa_r+0xa10>
 80076c4:	f018 0f01 	tst.w	r8, #1
 80076c8:	d0de      	beq.n	8007688 <_dtoa_r+0xa10>
 80076ca:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80076ce:	d1d8      	bne.n	8007682 <_dtoa_r+0xa0a>
 80076d0:	9a00      	ldr	r2, [sp, #0]
 80076d2:	2339      	movs	r3, #57	@ 0x39
 80076d4:	7013      	strb	r3, [r2, #0]
 80076d6:	4633      	mov	r3, r6
 80076d8:	461e      	mov	r6, r3
 80076da:	3b01      	subs	r3, #1
 80076dc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80076e0:	2a39      	cmp	r2, #57	@ 0x39
 80076e2:	d052      	beq.n	800778a <_dtoa_r+0xb12>
 80076e4:	3201      	adds	r2, #1
 80076e6:	701a      	strb	r2, [r3, #0]
 80076e8:	e612      	b.n	8007310 <_dtoa_r+0x698>
 80076ea:	2a00      	cmp	r2, #0
 80076ec:	dd07      	ble.n	80076fe <_dtoa_r+0xa86>
 80076ee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80076f2:	d0ed      	beq.n	80076d0 <_dtoa_r+0xa58>
 80076f4:	9a00      	ldr	r2, [sp, #0]
 80076f6:	f108 0301 	add.w	r3, r8, #1
 80076fa:	7013      	strb	r3, [r2, #0]
 80076fc:	e608      	b.n	8007310 <_dtoa_r+0x698>
 80076fe:	9b07      	ldr	r3, [sp, #28]
 8007700:	9a07      	ldr	r2, [sp, #28]
 8007702:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007706:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007708:	4293      	cmp	r3, r2
 800770a:	d028      	beq.n	800775e <_dtoa_r+0xae6>
 800770c:	4649      	mov	r1, r9
 800770e:	2300      	movs	r3, #0
 8007710:	220a      	movs	r2, #10
 8007712:	4658      	mov	r0, fp
 8007714:	f000 fd22 	bl	800815c <__multadd>
 8007718:	42af      	cmp	r7, r5
 800771a:	4681      	mov	r9, r0
 800771c:	f04f 0300 	mov.w	r3, #0
 8007720:	f04f 020a 	mov.w	r2, #10
 8007724:	4639      	mov	r1, r7
 8007726:	4658      	mov	r0, fp
 8007728:	d107      	bne.n	800773a <_dtoa_r+0xac2>
 800772a:	f000 fd17 	bl	800815c <__multadd>
 800772e:	4607      	mov	r7, r0
 8007730:	4605      	mov	r5, r0
 8007732:	9b07      	ldr	r3, [sp, #28]
 8007734:	3301      	adds	r3, #1
 8007736:	9307      	str	r3, [sp, #28]
 8007738:	e774      	b.n	8007624 <_dtoa_r+0x9ac>
 800773a:	f000 fd0f 	bl	800815c <__multadd>
 800773e:	4629      	mov	r1, r5
 8007740:	4607      	mov	r7, r0
 8007742:	2300      	movs	r3, #0
 8007744:	220a      	movs	r2, #10
 8007746:	4658      	mov	r0, fp
 8007748:	f000 fd08 	bl	800815c <__multadd>
 800774c:	4605      	mov	r5, r0
 800774e:	e7f0      	b.n	8007732 <_dtoa_r+0xaba>
 8007750:	9b00      	ldr	r3, [sp, #0]
 8007752:	2b00      	cmp	r3, #0
 8007754:	bfcc      	ite	gt
 8007756:	461e      	movgt	r6, r3
 8007758:	2601      	movle	r6, #1
 800775a:	4456      	add	r6, sl
 800775c:	2700      	movs	r7, #0
 800775e:	4649      	mov	r1, r9
 8007760:	2201      	movs	r2, #1
 8007762:	4658      	mov	r0, fp
 8007764:	f000 fef0 	bl	8008548 <__lshift>
 8007768:	4621      	mov	r1, r4
 800776a:	4681      	mov	r9, r0
 800776c:	f000 ff58 	bl	8008620 <__mcmp>
 8007770:	2800      	cmp	r0, #0
 8007772:	dcb0      	bgt.n	80076d6 <_dtoa_r+0xa5e>
 8007774:	d102      	bne.n	800777c <_dtoa_r+0xb04>
 8007776:	f018 0f01 	tst.w	r8, #1
 800777a:	d1ac      	bne.n	80076d6 <_dtoa_r+0xa5e>
 800777c:	4633      	mov	r3, r6
 800777e:	461e      	mov	r6, r3
 8007780:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007784:	2a30      	cmp	r2, #48	@ 0x30
 8007786:	d0fa      	beq.n	800777e <_dtoa_r+0xb06>
 8007788:	e5c2      	b.n	8007310 <_dtoa_r+0x698>
 800778a:	459a      	cmp	sl, r3
 800778c:	d1a4      	bne.n	80076d8 <_dtoa_r+0xa60>
 800778e:	9b04      	ldr	r3, [sp, #16]
 8007790:	3301      	adds	r3, #1
 8007792:	9304      	str	r3, [sp, #16]
 8007794:	2331      	movs	r3, #49	@ 0x31
 8007796:	f88a 3000 	strb.w	r3, [sl]
 800779a:	e5b9      	b.n	8007310 <_dtoa_r+0x698>
 800779c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800779e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80077fc <_dtoa_r+0xb84>
 80077a2:	b11b      	cbz	r3, 80077ac <_dtoa_r+0xb34>
 80077a4:	f10a 0308 	add.w	r3, sl, #8
 80077a8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80077aa:	6013      	str	r3, [r2, #0]
 80077ac:	4650      	mov	r0, sl
 80077ae:	b019      	add	sp, #100	@ 0x64
 80077b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077b6:	2b01      	cmp	r3, #1
 80077b8:	f77f ae37 	ble.w	800742a <_dtoa_r+0x7b2>
 80077bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80077be:	930a      	str	r3, [sp, #40]	@ 0x28
 80077c0:	2001      	movs	r0, #1
 80077c2:	e655      	b.n	8007470 <_dtoa_r+0x7f8>
 80077c4:	9b00      	ldr	r3, [sp, #0]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	f77f aed6 	ble.w	8007578 <_dtoa_r+0x900>
 80077cc:	4656      	mov	r6, sl
 80077ce:	4621      	mov	r1, r4
 80077d0:	4648      	mov	r0, r9
 80077d2:	f7ff f9c7 	bl	8006b64 <quorem>
 80077d6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80077da:	f806 8b01 	strb.w	r8, [r6], #1
 80077de:	9b00      	ldr	r3, [sp, #0]
 80077e0:	eba6 020a 	sub.w	r2, r6, sl
 80077e4:	4293      	cmp	r3, r2
 80077e6:	ddb3      	ble.n	8007750 <_dtoa_r+0xad8>
 80077e8:	4649      	mov	r1, r9
 80077ea:	2300      	movs	r3, #0
 80077ec:	220a      	movs	r2, #10
 80077ee:	4658      	mov	r0, fp
 80077f0:	f000 fcb4 	bl	800815c <__multadd>
 80077f4:	4681      	mov	r9, r0
 80077f6:	e7ea      	b.n	80077ce <_dtoa_r+0xb56>
 80077f8:	0800a7ae 	.word	0x0800a7ae
 80077fc:	0800a749 	.word	0x0800a749

08007800 <_free_r>:
 8007800:	b538      	push	{r3, r4, r5, lr}
 8007802:	4605      	mov	r5, r0
 8007804:	2900      	cmp	r1, #0
 8007806:	d041      	beq.n	800788c <_free_r+0x8c>
 8007808:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800780c:	1f0c      	subs	r4, r1, #4
 800780e:	2b00      	cmp	r3, #0
 8007810:	bfb8      	it	lt
 8007812:	18e4      	addlt	r4, r4, r3
 8007814:	f000 fc34 	bl	8008080 <__malloc_lock>
 8007818:	4a1d      	ldr	r2, [pc, #116]	@ (8007890 <_free_r+0x90>)
 800781a:	6813      	ldr	r3, [r2, #0]
 800781c:	b933      	cbnz	r3, 800782c <_free_r+0x2c>
 800781e:	6063      	str	r3, [r4, #4]
 8007820:	6014      	str	r4, [r2, #0]
 8007822:	4628      	mov	r0, r5
 8007824:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007828:	f000 bc30 	b.w	800808c <__malloc_unlock>
 800782c:	42a3      	cmp	r3, r4
 800782e:	d908      	bls.n	8007842 <_free_r+0x42>
 8007830:	6820      	ldr	r0, [r4, #0]
 8007832:	1821      	adds	r1, r4, r0
 8007834:	428b      	cmp	r3, r1
 8007836:	bf01      	itttt	eq
 8007838:	6819      	ldreq	r1, [r3, #0]
 800783a:	685b      	ldreq	r3, [r3, #4]
 800783c:	1809      	addeq	r1, r1, r0
 800783e:	6021      	streq	r1, [r4, #0]
 8007840:	e7ed      	b.n	800781e <_free_r+0x1e>
 8007842:	461a      	mov	r2, r3
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	b10b      	cbz	r3, 800784c <_free_r+0x4c>
 8007848:	42a3      	cmp	r3, r4
 800784a:	d9fa      	bls.n	8007842 <_free_r+0x42>
 800784c:	6811      	ldr	r1, [r2, #0]
 800784e:	1850      	adds	r0, r2, r1
 8007850:	42a0      	cmp	r0, r4
 8007852:	d10b      	bne.n	800786c <_free_r+0x6c>
 8007854:	6820      	ldr	r0, [r4, #0]
 8007856:	4401      	add	r1, r0
 8007858:	1850      	adds	r0, r2, r1
 800785a:	4283      	cmp	r3, r0
 800785c:	6011      	str	r1, [r2, #0]
 800785e:	d1e0      	bne.n	8007822 <_free_r+0x22>
 8007860:	6818      	ldr	r0, [r3, #0]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	6053      	str	r3, [r2, #4]
 8007866:	4408      	add	r0, r1
 8007868:	6010      	str	r0, [r2, #0]
 800786a:	e7da      	b.n	8007822 <_free_r+0x22>
 800786c:	d902      	bls.n	8007874 <_free_r+0x74>
 800786e:	230c      	movs	r3, #12
 8007870:	602b      	str	r3, [r5, #0]
 8007872:	e7d6      	b.n	8007822 <_free_r+0x22>
 8007874:	6820      	ldr	r0, [r4, #0]
 8007876:	1821      	adds	r1, r4, r0
 8007878:	428b      	cmp	r3, r1
 800787a:	bf04      	itt	eq
 800787c:	6819      	ldreq	r1, [r3, #0]
 800787e:	685b      	ldreq	r3, [r3, #4]
 8007880:	6063      	str	r3, [r4, #4]
 8007882:	bf04      	itt	eq
 8007884:	1809      	addeq	r1, r1, r0
 8007886:	6021      	streq	r1, [r4, #0]
 8007888:	6054      	str	r4, [r2, #4]
 800788a:	e7ca      	b.n	8007822 <_free_r+0x22>
 800788c:	bd38      	pop	{r3, r4, r5, pc}
 800788e:	bf00      	nop
 8007890:	200006b8 	.word	0x200006b8

08007894 <rshift>:
 8007894:	6903      	ldr	r3, [r0, #16]
 8007896:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800789a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800789e:	ea4f 1261 	mov.w	r2, r1, asr #5
 80078a2:	f100 0414 	add.w	r4, r0, #20
 80078a6:	dd45      	ble.n	8007934 <rshift+0xa0>
 80078a8:	f011 011f 	ands.w	r1, r1, #31
 80078ac:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80078b0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80078b4:	d10c      	bne.n	80078d0 <rshift+0x3c>
 80078b6:	f100 0710 	add.w	r7, r0, #16
 80078ba:	4629      	mov	r1, r5
 80078bc:	42b1      	cmp	r1, r6
 80078be:	d334      	bcc.n	800792a <rshift+0x96>
 80078c0:	1a9b      	subs	r3, r3, r2
 80078c2:	009b      	lsls	r3, r3, #2
 80078c4:	1eea      	subs	r2, r5, #3
 80078c6:	4296      	cmp	r6, r2
 80078c8:	bf38      	it	cc
 80078ca:	2300      	movcc	r3, #0
 80078cc:	4423      	add	r3, r4
 80078ce:	e015      	b.n	80078fc <rshift+0x68>
 80078d0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80078d4:	f1c1 0820 	rsb	r8, r1, #32
 80078d8:	40cf      	lsrs	r7, r1
 80078da:	f105 0e04 	add.w	lr, r5, #4
 80078de:	46a1      	mov	r9, r4
 80078e0:	4576      	cmp	r6, lr
 80078e2:	46f4      	mov	ip, lr
 80078e4:	d815      	bhi.n	8007912 <rshift+0x7e>
 80078e6:	1a9a      	subs	r2, r3, r2
 80078e8:	0092      	lsls	r2, r2, #2
 80078ea:	3a04      	subs	r2, #4
 80078ec:	3501      	adds	r5, #1
 80078ee:	42ae      	cmp	r6, r5
 80078f0:	bf38      	it	cc
 80078f2:	2200      	movcc	r2, #0
 80078f4:	18a3      	adds	r3, r4, r2
 80078f6:	50a7      	str	r7, [r4, r2]
 80078f8:	b107      	cbz	r7, 80078fc <rshift+0x68>
 80078fa:	3304      	adds	r3, #4
 80078fc:	1b1a      	subs	r2, r3, r4
 80078fe:	42a3      	cmp	r3, r4
 8007900:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007904:	bf08      	it	eq
 8007906:	2300      	moveq	r3, #0
 8007908:	6102      	str	r2, [r0, #16]
 800790a:	bf08      	it	eq
 800790c:	6143      	streq	r3, [r0, #20]
 800790e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007912:	f8dc c000 	ldr.w	ip, [ip]
 8007916:	fa0c fc08 	lsl.w	ip, ip, r8
 800791a:	ea4c 0707 	orr.w	r7, ip, r7
 800791e:	f849 7b04 	str.w	r7, [r9], #4
 8007922:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007926:	40cf      	lsrs	r7, r1
 8007928:	e7da      	b.n	80078e0 <rshift+0x4c>
 800792a:	f851 cb04 	ldr.w	ip, [r1], #4
 800792e:	f847 cf04 	str.w	ip, [r7, #4]!
 8007932:	e7c3      	b.n	80078bc <rshift+0x28>
 8007934:	4623      	mov	r3, r4
 8007936:	e7e1      	b.n	80078fc <rshift+0x68>

08007938 <__hexdig_fun>:
 8007938:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800793c:	2b09      	cmp	r3, #9
 800793e:	d802      	bhi.n	8007946 <__hexdig_fun+0xe>
 8007940:	3820      	subs	r0, #32
 8007942:	b2c0      	uxtb	r0, r0
 8007944:	4770      	bx	lr
 8007946:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800794a:	2b05      	cmp	r3, #5
 800794c:	d801      	bhi.n	8007952 <__hexdig_fun+0x1a>
 800794e:	3847      	subs	r0, #71	@ 0x47
 8007950:	e7f7      	b.n	8007942 <__hexdig_fun+0xa>
 8007952:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007956:	2b05      	cmp	r3, #5
 8007958:	d801      	bhi.n	800795e <__hexdig_fun+0x26>
 800795a:	3827      	subs	r0, #39	@ 0x27
 800795c:	e7f1      	b.n	8007942 <__hexdig_fun+0xa>
 800795e:	2000      	movs	r0, #0
 8007960:	4770      	bx	lr
	...

08007964 <__gethex>:
 8007964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007968:	b085      	sub	sp, #20
 800796a:	468a      	mov	sl, r1
 800796c:	9302      	str	r3, [sp, #8]
 800796e:	680b      	ldr	r3, [r1, #0]
 8007970:	9001      	str	r0, [sp, #4]
 8007972:	4690      	mov	r8, r2
 8007974:	1c9c      	adds	r4, r3, #2
 8007976:	46a1      	mov	r9, r4
 8007978:	f814 0b01 	ldrb.w	r0, [r4], #1
 800797c:	2830      	cmp	r0, #48	@ 0x30
 800797e:	d0fa      	beq.n	8007976 <__gethex+0x12>
 8007980:	eba9 0303 	sub.w	r3, r9, r3
 8007984:	f1a3 0b02 	sub.w	fp, r3, #2
 8007988:	f7ff ffd6 	bl	8007938 <__hexdig_fun>
 800798c:	4605      	mov	r5, r0
 800798e:	2800      	cmp	r0, #0
 8007990:	d168      	bne.n	8007a64 <__gethex+0x100>
 8007992:	49a0      	ldr	r1, [pc, #640]	@ (8007c14 <__gethex+0x2b0>)
 8007994:	2201      	movs	r2, #1
 8007996:	4648      	mov	r0, r9
 8007998:	f7fe ffc7 	bl	800692a <strncmp>
 800799c:	4607      	mov	r7, r0
 800799e:	2800      	cmp	r0, #0
 80079a0:	d167      	bne.n	8007a72 <__gethex+0x10e>
 80079a2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80079a6:	4626      	mov	r6, r4
 80079a8:	f7ff ffc6 	bl	8007938 <__hexdig_fun>
 80079ac:	2800      	cmp	r0, #0
 80079ae:	d062      	beq.n	8007a76 <__gethex+0x112>
 80079b0:	4623      	mov	r3, r4
 80079b2:	7818      	ldrb	r0, [r3, #0]
 80079b4:	2830      	cmp	r0, #48	@ 0x30
 80079b6:	4699      	mov	r9, r3
 80079b8:	f103 0301 	add.w	r3, r3, #1
 80079bc:	d0f9      	beq.n	80079b2 <__gethex+0x4e>
 80079be:	f7ff ffbb 	bl	8007938 <__hexdig_fun>
 80079c2:	fab0 f580 	clz	r5, r0
 80079c6:	096d      	lsrs	r5, r5, #5
 80079c8:	f04f 0b01 	mov.w	fp, #1
 80079cc:	464a      	mov	r2, r9
 80079ce:	4616      	mov	r6, r2
 80079d0:	3201      	adds	r2, #1
 80079d2:	7830      	ldrb	r0, [r6, #0]
 80079d4:	f7ff ffb0 	bl	8007938 <__hexdig_fun>
 80079d8:	2800      	cmp	r0, #0
 80079da:	d1f8      	bne.n	80079ce <__gethex+0x6a>
 80079dc:	498d      	ldr	r1, [pc, #564]	@ (8007c14 <__gethex+0x2b0>)
 80079de:	2201      	movs	r2, #1
 80079e0:	4630      	mov	r0, r6
 80079e2:	f7fe ffa2 	bl	800692a <strncmp>
 80079e6:	2800      	cmp	r0, #0
 80079e8:	d13f      	bne.n	8007a6a <__gethex+0x106>
 80079ea:	b944      	cbnz	r4, 80079fe <__gethex+0x9a>
 80079ec:	1c74      	adds	r4, r6, #1
 80079ee:	4622      	mov	r2, r4
 80079f0:	4616      	mov	r6, r2
 80079f2:	3201      	adds	r2, #1
 80079f4:	7830      	ldrb	r0, [r6, #0]
 80079f6:	f7ff ff9f 	bl	8007938 <__hexdig_fun>
 80079fa:	2800      	cmp	r0, #0
 80079fc:	d1f8      	bne.n	80079f0 <__gethex+0x8c>
 80079fe:	1ba4      	subs	r4, r4, r6
 8007a00:	00a7      	lsls	r7, r4, #2
 8007a02:	7833      	ldrb	r3, [r6, #0]
 8007a04:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8007a08:	2b50      	cmp	r3, #80	@ 0x50
 8007a0a:	d13e      	bne.n	8007a8a <__gethex+0x126>
 8007a0c:	7873      	ldrb	r3, [r6, #1]
 8007a0e:	2b2b      	cmp	r3, #43	@ 0x2b
 8007a10:	d033      	beq.n	8007a7a <__gethex+0x116>
 8007a12:	2b2d      	cmp	r3, #45	@ 0x2d
 8007a14:	d034      	beq.n	8007a80 <__gethex+0x11c>
 8007a16:	1c71      	adds	r1, r6, #1
 8007a18:	2400      	movs	r4, #0
 8007a1a:	7808      	ldrb	r0, [r1, #0]
 8007a1c:	f7ff ff8c 	bl	8007938 <__hexdig_fun>
 8007a20:	1e43      	subs	r3, r0, #1
 8007a22:	b2db      	uxtb	r3, r3
 8007a24:	2b18      	cmp	r3, #24
 8007a26:	d830      	bhi.n	8007a8a <__gethex+0x126>
 8007a28:	f1a0 0210 	sub.w	r2, r0, #16
 8007a2c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007a30:	f7ff ff82 	bl	8007938 <__hexdig_fun>
 8007a34:	f100 3cff 	add.w	ip, r0, #4294967295
 8007a38:	fa5f fc8c 	uxtb.w	ip, ip
 8007a3c:	f1bc 0f18 	cmp.w	ip, #24
 8007a40:	f04f 030a 	mov.w	r3, #10
 8007a44:	d91e      	bls.n	8007a84 <__gethex+0x120>
 8007a46:	b104      	cbz	r4, 8007a4a <__gethex+0xe6>
 8007a48:	4252      	negs	r2, r2
 8007a4a:	4417      	add	r7, r2
 8007a4c:	f8ca 1000 	str.w	r1, [sl]
 8007a50:	b1ed      	cbz	r5, 8007a8e <__gethex+0x12a>
 8007a52:	f1bb 0f00 	cmp.w	fp, #0
 8007a56:	bf0c      	ite	eq
 8007a58:	2506      	moveq	r5, #6
 8007a5a:	2500      	movne	r5, #0
 8007a5c:	4628      	mov	r0, r5
 8007a5e:	b005      	add	sp, #20
 8007a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a64:	2500      	movs	r5, #0
 8007a66:	462c      	mov	r4, r5
 8007a68:	e7b0      	b.n	80079cc <__gethex+0x68>
 8007a6a:	2c00      	cmp	r4, #0
 8007a6c:	d1c7      	bne.n	80079fe <__gethex+0x9a>
 8007a6e:	4627      	mov	r7, r4
 8007a70:	e7c7      	b.n	8007a02 <__gethex+0x9e>
 8007a72:	464e      	mov	r6, r9
 8007a74:	462f      	mov	r7, r5
 8007a76:	2501      	movs	r5, #1
 8007a78:	e7c3      	b.n	8007a02 <__gethex+0x9e>
 8007a7a:	2400      	movs	r4, #0
 8007a7c:	1cb1      	adds	r1, r6, #2
 8007a7e:	e7cc      	b.n	8007a1a <__gethex+0xb6>
 8007a80:	2401      	movs	r4, #1
 8007a82:	e7fb      	b.n	8007a7c <__gethex+0x118>
 8007a84:	fb03 0002 	mla	r0, r3, r2, r0
 8007a88:	e7ce      	b.n	8007a28 <__gethex+0xc4>
 8007a8a:	4631      	mov	r1, r6
 8007a8c:	e7de      	b.n	8007a4c <__gethex+0xe8>
 8007a8e:	eba6 0309 	sub.w	r3, r6, r9
 8007a92:	3b01      	subs	r3, #1
 8007a94:	4629      	mov	r1, r5
 8007a96:	2b07      	cmp	r3, #7
 8007a98:	dc0a      	bgt.n	8007ab0 <__gethex+0x14c>
 8007a9a:	9801      	ldr	r0, [sp, #4]
 8007a9c:	f000 fafc 	bl	8008098 <_Balloc>
 8007aa0:	4604      	mov	r4, r0
 8007aa2:	b940      	cbnz	r0, 8007ab6 <__gethex+0x152>
 8007aa4:	4b5c      	ldr	r3, [pc, #368]	@ (8007c18 <__gethex+0x2b4>)
 8007aa6:	4602      	mov	r2, r0
 8007aa8:	21e4      	movs	r1, #228	@ 0xe4
 8007aaa:	485c      	ldr	r0, [pc, #368]	@ (8007c1c <__gethex+0x2b8>)
 8007aac:	f7ff f83c 	bl	8006b28 <__assert_func>
 8007ab0:	3101      	adds	r1, #1
 8007ab2:	105b      	asrs	r3, r3, #1
 8007ab4:	e7ef      	b.n	8007a96 <__gethex+0x132>
 8007ab6:	f100 0a14 	add.w	sl, r0, #20
 8007aba:	2300      	movs	r3, #0
 8007abc:	4655      	mov	r5, sl
 8007abe:	469b      	mov	fp, r3
 8007ac0:	45b1      	cmp	r9, r6
 8007ac2:	d337      	bcc.n	8007b34 <__gethex+0x1d0>
 8007ac4:	f845 bb04 	str.w	fp, [r5], #4
 8007ac8:	eba5 050a 	sub.w	r5, r5, sl
 8007acc:	10ad      	asrs	r5, r5, #2
 8007ace:	6125      	str	r5, [r4, #16]
 8007ad0:	4658      	mov	r0, fp
 8007ad2:	f000 fbd3 	bl	800827c <__hi0bits>
 8007ad6:	016d      	lsls	r5, r5, #5
 8007ad8:	f8d8 6000 	ldr.w	r6, [r8]
 8007adc:	1a2d      	subs	r5, r5, r0
 8007ade:	42b5      	cmp	r5, r6
 8007ae0:	dd54      	ble.n	8007b8c <__gethex+0x228>
 8007ae2:	1bad      	subs	r5, r5, r6
 8007ae4:	4629      	mov	r1, r5
 8007ae6:	4620      	mov	r0, r4
 8007ae8:	f000 ff67 	bl	80089ba <__any_on>
 8007aec:	4681      	mov	r9, r0
 8007aee:	b178      	cbz	r0, 8007b10 <__gethex+0x1ac>
 8007af0:	1e6b      	subs	r3, r5, #1
 8007af2:	1159      	asrs	r1, r3, #5
 8007af4:	f003 021f 	and.w	r2, r3, #31
 8007af8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007afc:	f04f 0901 	mov.w	r9, #1
 8007b00:	fa09 f202 	lsl.w	r2, r9, r2
 8007b04:	420a      	tst	r2, r1
 8007b06:	d003      	beq.n	8007b10 <__gethex+0x1ac>
 8007b08:	454b      	cmp	r3, r9
 8007b0a:	dc36      	bgt.n	8007b7a <__gethex+0x216>
 8007b0c:	f04f 0902 	mov.w	r9, #2
 8007b10:	4629      	mov	r1, r5
 8007b12:	4620      	mov	r0, r4
 8007b14:	f7ff febe 	bl	8007894 <rshift>
 8007b18:	442f      	add	r7, r5
 8007b1a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007b1e:	42bb      	cmp	r3, r7
 8007b20:	da42      	bge.n	8007ba8 <__gethex+0x244>
 8007b22:	9801      	ldr	r0, [sp, #4]
 8007b24:	4621      	mov	r1, r4
 8007b26:	f000 faf7 	bl	8008118 <_Bfree>
 8007b2a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	6013      	str	r3, [r2, #0]
 8007b30:	25a3      	movs	r5, #163	@ 0xa3
 8007b32:	e793      	b.n	8007a5c <__gethex+0xf8>
 8007b34:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8007b38:	2a2e      	cmp	r2, #46	@ 0x2e
 8007b3a:	d012      	beq.n	8007b62 <__gethex+0x1fe>
 8007b3c:	2b20      	cmp	r3, #32
 8007b3e:	d104      	bne.n	8007b4a <__gethex+0x1e6>
 8007b40:	f845 bb04 	str.w	fp, [r5], #4
 8007b44:	f04f 0b00 	mov.w	fp, #0
 8007b48:	465b      	mov	r3, fp
 8007b4a:	7830      	ldrb	r0, [r6, #0]
 8007b4c:	9303      	str	r3, [sp, #12]
 8007b4e:	f7ff fef3 	bl	8007938 <__hexdig_fun>
 8007b52:	9b03      	ldr	r3, [sp, #12]
 8007b54:	f000 000f 	and.w	r0, r0, #15
 8007b58:	4098      	lsls	r0, r3
 8007b5a:	ea4b 0b00 	orr.w	fp, fp, r0
 8007b5e:	3304      	adds	r3, #4
 8007b60:	e7ae      	b.n	8007ac0 <__gethex+0x15c>
 8007b62:	45b1      	cmp	r9, r6
 8007b64:	d8ea      	bhi.n	8007b3c <__gethex+0x1d8>
 8007b66:	492b      	ldr	r1, [pc, #172]	@ (8007c14 <__gethex+0x2b0>)
 8007b68:	9303      	str	r3, [sp, #12]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	4630      	mov	r0, r6
 8007b6e:	f7fe fedc 	bl	800692a <strncmp>
 8007b72:	9b03      	ldr	r3, [sp, #12]
 8007b74:	2800      	cmp	r0, #0
 8007b76:	d1e1      	bne.n	8007b3c <__gethex+0x1d8>
 8007b78:	e7a2      	b.n	8007ac0 <__gethex+0x15c>
 8007b7a:	1ea9      	subs	r1, r5, #2
 8007b7c:	4620      	mov	r0, r4
 8007b7e:	f000 ff1c 	bl	80089ba <__any_on>
 8007b82:	2800      	cmp	r0, #0
 8007b84:	d0c2      	beq.n	8007b0c <__gethex+0x1a8>
 8007b86:	f04f 0903 	mov.w	r9, #3
 8007b8a:	e7c1      	b.n	8007b10 <__gethex+0x1ac>
 8007b8c:	da09      	bge.n	8007ba2 <__gethex+0x23e>
 8007b8e:	1b75      	subs	r5, r6, r5
 8007b90:	4621      	mov	r1, r4
 8007b92:	9801      	ldr	r0, [sp, #4]
 8007b94:	462a      	mov	r2, r5
 8007b96:	f000 fcd7 	bl	8008548 <__lshift>
 8007b9a:	1b7f      	subs	r7, r7, r5
 8007b9c:	4604      	mov	r4, r0
 8007b9e:	f100 0a14 	add.w	sl, r0, #20
 8007ba2:	f04f 0900 	mov.w	r9, #0
 8007ba6:	e7b8      	b.n	8007b1a <__gethex+0x1b6>
 8007ba8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007bac:	42bd      	cmp	r5, r7
 8007bae:	dd6f      	ble.n	8007c90 <__gethex+0x32c>
 8007bb0:	1bed      	subs	r5, r5, r7
 8007bb2:	42ae      	cmp	r6, r5
 8007bb4:	dc34      	bgt.n	8007c20 <__gethex+0x2bc>
 8007bb6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007bba:	2b02      	cmp	r3, #2
 8007bbc:	d022      	beq.n	8007c04 <__gethex+0x2a0>
 8007bbe:	2b03      	cmp	r3, #3
 8007bc0:	d024      	beq.n	8007c0c <__gethex+0x2a8>
 8007bc2:	2b01      	cmp	r3, #1
 8007bc4:	d115      	bne.n	8007bf2 <__gethex+0x28e>
 8007bc6:	42ae      	cmp	r6, r5
 8007bc8:	d113      	bne.n	8007bf2 <__gethex+0x28e>
 8007bca:	2e01      	cmp	r6, #1
 8007bcc:	d10b      	bne.n	8007be6 <__gethex+0x282>
 8007bce:	9a02      	ldr	r2, [sp, #8]
 8007bd0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007bd4:	6013      	str	r3, [r2, #0]
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	6123      	str	r3, [r4, #16]
 8007bda:	f8ca 3000 	str.w	r3, [sl]
 8007bde:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007be0:	2562      	movs	r5, #98	@ 0x62
 8007be2:	601c      	str	r4, [r3, #0]
 8007be4:	e73a      	b.n	8007a5c <__gethex+0xf8>
 8007be6:	1e71      	subs	r1, r6, #1
 8007be8:	4620      	mov	r0, r4
 8007bea:	f000 fee6 	bl	80089ba <__any_on>
 8007bee:	2800      	cmp	r0, #0
 8007bf0:	d1ed      	bne.n	8007bce <__gethex+0x26a>
 8007bf2:	9801      	ldr	r0, [sp, #4]
 8007bf4:	4621      	mov	r1, r4
 8007bf6:	f000 fa8f 	bl	8008118 <_Bfree>
 8007bfa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	6013      	str	r3, [r2, #0]
 8007c00:	2550      	movs	r5, #80	@ 0x50
 8007c02:	e72b      	b.n	8007a5c <__gethex+0xf8>
 8007c04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d1f3      	bne.n	8007bf2 <__gethex+0x28e>
 8007c0a:	e7e0      	b.n	8007bce <__gethex+0x26a>
 8007c0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d1dd      	bne.n	8007bce <__gethex+0x26a>
 8007c12:	e7ee      	b.n	8007bf2 <__gethex+0x28e>
 8007c14:	0800a608 	.word	0x0800a608
 8007c18:	0800a7ae 	.word	0x0800a7ae
 8007c1c:	0800a7bf 	.word	0x0800a7bf
 8007c20:	1e6f      	subs	r7, r5, #1
 8007c22:	f1b9 0f00 	cmp.w	r9, #0
 8007c26:	d130      	bne.n	8007c8a <__gethex+0x326>
 8007c28:	b127      	cbz	r7, 8007c34 <__gethex+0x2d0>
 8007c2a:	4639      	mov	r1, r7
 8007c2c:	4620      	mov	r0, r4
 8007c2e:	f000 fec4 	bl	80089ba <__any_on>
 8007c32:	4681      	mov	r9, r0
 8007c34:	117a      	asrs	r2, r7, #5
 8007c36:	2301      	movs	r3, #1
 8007c38:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007c3c:	f007 071f 	and.w	r7, r7, #31
 8007c40:	40bb      	lsls	r3, r7
 8007c42:	4213      	tst	r3, r2
 8007c44:	4629      	mov	r1, r5
 8007c46:	4620      	mov	r0, r4
 8007c48:	bf18      	it	ne
 8007c4a:	f049 0902 	orrne.w	r9, r9, #2
 8007c4e:	f7ff fe21 	bl	8007894 <rshift>
 8007c52:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8007c56:	1b76      	subs	r6, r6, r5
 8007c58:	2502      	movs	r5, #2
 8007c5a:	f1b9 0f00 	cmp.w	r9, #0
 8007c5e:	d047      	beq.n	8007cf0 <__gethex+0x38c>
 8007c60:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007c64:	2b02      	cmp	r3, #2
 8007c66:	d015      	beq.n	8007c94 <__gethex+0x330>
 8007c68:	2b03      	cmp	r3, #3
 8007c6a:	d017      	beq.n	8007c9c <__gethex+0x338>
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d109      	bne.n	8007c84 <__gethex+0x320>
 8007c70:	f019 0f02 	tst.w	r9, #2
 8007c74:	d006      	beq.n	8007c84 <__gethex+0x320>
 8007c76:	f8da 3000 	ldr.w	r3, [sl]
 8007c7a:	ea49 0903 	orr.w	r9, r9, r3
 8007c7e:	f019 0f01 	tst.w	r9, #1
 8007c82:	d10e      	bne.n	8007ca2 <__gethex+0x33e>
 8007c84:	f045 0510 	orr.w	r5, r5, #16
 8007c88:	e032      	b.n	8007cf0 <__gethex+0x38c>
 8007c8a:	f04f 0901 	mov.w	r9, #1
 8007c8e:	e7d1      	b.n	8007c34 <__gethex+0x2d0>
 8007c90:	2501      	movs	r5, #1
 8007c92:	e7e2      	b.n	8007c5a <__gethex+0x2f6>
 8007c94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c96:	f1c3 0301 	rsb	r3, r3, #1
 8007c9a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007c9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d0f0      	beq.n	8007c84 <__gethex+0x320>
 8007ca2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007ca6:	f104 0314 	add.w	r3, r4, #20
 8007caa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007cae:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007cb2:	f04f 0c00 	mov.w	ip, #0
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cbc:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007cc0:	d01b      	beq.n	8007cfa <__gethex+0x396>
 8007cc2:	3201      	adds	r2, #1
 8007cc4:	6002      	str	r2, [r0, #0]
 8007cc6:	2d02      	cmp	r5, #2
 8007cc8:	f104 0314 	add.w	r3, r4, #20
 8007ccc:	d13c      	bne.n	8007d48 <__gethex+0x3e4>
 8007cce:	f8d8 2000 	ldr.w	r2, [r8]
 8007cd2:	3a01      	subs	r2, #1
 8007cd4:	42b2      	cmp	r2, r6
 8007cd6:	d109      	bne.n	8007cec <__gethex+0x388>
 8007cd8:	1171      	asrs	r1, r6, #5
 8007cda:	2201      	movs	r2, #1
 8007cdc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007ce0:	f006 061f 	and.w	r6, r6, #31
 8007ce4:	fa02 f606 	lsl.w	r6, r2, r6
 8007ce8:	421e      	tst	r6, r3
 8007cea:	d13a      	bne.n	8007d62 <__gethex+0x3fe>
 8007cec:	f045 0520 	orr.w	r5, r5, #32
 8007cf0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007cf2:	601c      	str	r4, [r3, #0]
 8007cf4:	9b02      	ldr	r3, [sp, #8]
 8007cf6:	601f      	str	r7, [r3, #0]
 8007cf8:	e6b0      	b.n	8007a5c <__gethex+0xf8>
 8007cfa:	4299      	cmp	r1, r3
 8007cfc:	f843 cc04 	str.w	ip, [r3, #-4]
 8007d00:	d8d9      	bhi.n	8007cb6 <__gethex+0x352>
 8007d02:	68a3      	ldr	r3, [r4, #8]
 8007d04:	459b      	cmp	fp, r3
 8007d06:	db17      	blt.n	8007d38 <__gethex+0x3d4>
 8007d08:	6861      	ldr	r1, [r4, #4]
 8007d0a:	9801      	ldr	r0, [sp, #4]
 8007d0c:	3101      	adds	r1, #1
 8007d0e:	f000 f9c3 	bl	8008098 <_Balloc>
 8007d12:	4681      	mov	r9, r0
 8007d14:	b918      	cbnz	r0, 8007d1e <__gethex+0x3ba>
 8007d16:	4b1a      	ldr	r3, [pc, #104]	@ (8007d80 <__gethex+0x41c>)
 8007d18:	4602      	mov	r2, r0
 8007d1a:	2184      	movs	r1, #132	@ 0x84
 8007d1c:	e6c5      	b.n	8007aaa <__gethex+0x146>
 8007d1e:	6922      	ldr	r2, [r4, #16]
 8007d20:	3202      	adds	r2, #2
 8007d22:	f104 010c 	add.w	r1, r4, #12
 8007d26:	0092      	lsls	r2, r2, #2
 8007d28:	300c      	adds	r0, #12
 8007d2a:	f7fe fee4 	bl	8006af6 <memcpy>
 8007d2e:	4621      	mov	r1, r4
 8007d30:	9801      	ldr	r0, [sp, #4]
 8007d32:	f000 f9f1 	bl	8008118 <_Bfree>
 8007d36:	464c      	mov	r4, r9
 8007d38:	6923      	ldr	r3, [r4, #16]
 8007d3a:	1c5a      	adds	r2, r3, #1
 8007d3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007d40:	6122      	str	r2, [r4, #16]
 8007d42:	2201      	movs	r2, #1
 8007d44:	615a      	str	r2, [r3, #20]
 8007d46:	e7be      	b.n	8007cc6 <__gethex+0x362>
 8007d48:	6922      	ldr	r2, [r4, #16]
 8007d4a:	455a      	cmp	r2, fp
 8007d4c:	dd0b      	ble.n	8007d66 <__gethex+0x402>
 8007d4e:	2101      	movs	r1, #1
 8007d50:	4620      	mov	r0, r4
 8007d52:	f7ff fd9f 	bl	8007894 <rshift>
 8007d56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007d5a:	3701      	adds	r7, #1
 8007d5c:	42bb      	cmp	r3, r7
 8007d5e:	f6ff aee0 	blt.w	8007b22 <__gethex+0x1be>
 8007d62:	2501      	movs	r5, #1
 8007d64:	e7c2      	b.n	8007cec <__gethex+0x388>
 8007d66:	f016 061f 	ands.w	r6, r6, #31
 8007d6a:	d0fa      	beq.n	8007d62 <__gethex+0x3fe>
 8007d6c:	4453      	add	r3, sl
 8007d6e:	f1c6 0620 	rsb	r6, r6, #32
 8007d72:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007d76:	f000 fa81 	bl	800827c <__hi0bits>
 8007d7a:	42b0      	cmp	r0, r6
 8007d7c:	dbe7      	blt.n	8007d4e <__gethex+0x3ea>
 8007d7e:	e7f0      	b.n	8007d62 <__gethex+0x3fe>
 8007d80:	0800a7ae 	.word	0x0800a7ae

08007d84 <L_shift>:
 8007d84:	f1c2 0208 	rsb	r2, r2, #8
 8007d88:	0092      	lsls	r2, r2, #2
 8007d8a:	b570      	push	{r4, r5, r6, lr}
 8007d8c:	f1c2 0620 	rsb	r6, r2, #32
 8007d90:	6843      	ldr	r3, [r0, #4]
 8007d92:	6804      	ldr	r4, [r0, #0]
 8007d94:	fa03 f506 	lsl.w	r5, r3, r6
 8007d98:	432c      	orrs	r4, r5
 8007d9a:	40d3      	lsrs	r3, r2
 8007d9c:	6004      	str	r4, [r0, #0]
 8007d9e:	f840 3f04 	str.w	r3, [r0, #4]!
 8007da2:	4288      	cmp	r0, r1
 8007da4:	d3f4      	bcc.n	8007d90 <L_shift+0xc>
 8007da6:	bd70      	pop	{r4, r5, r6, pc}

08007da8 <__match>:
 8007da8:	b530      	push	{r4, r5, lr}
 8007daa:	6803      	ldr	r3, [r0, #0]
 8007dac:	3301      	adds	r3, #1
 8007dae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007db2:	b914      	cbnz	r4, 8007dba <__match+0x12>
 8007db4:	6003      	str	r3, [r0, #0]
 8007db6:	2001      	movs	r0, #1
 8007db8:	bd30      	pop	{r4, r5, pc}
 8007dba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007dbe:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8007dc2:	2d19      	cmp	r5, #25
 8007dc4:	bf98      	it	ls
 8007dc6:	3220      	addls	r2, #32
 8007dc8:	42a2      	cmp	r2, r4
 8007dca:	d0f0      	beq.n	8007dae <__match+0x6>
 8007dcc:	2000      	movs	r0, #0
 8007dce:	e7f3      	b.n	8007db8 <__match+0x10>

08007dd0 <__hexnan>:
 8007dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dd4:	680b      	ldr	r3, [r1, #0]
 8007dd6:	6801      	ldr	r1, [r0, #0]
 8007dd8:	115e      	asrs	r6, r3, #5
 8007dda:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007dde:	f013 031f 	ands.w	r3, r3, #31
 8007de2:	b087      	sub	sp, #28
 8007de4:	bf18      	it	ne
 8007de6:	3604      	addne	r6, #4
 8007de8:	2500      	movs	r5, #0
 8007dea:	1f37      	subs	r7, r6, #4
 8007dec:	4682      	mov	sl, r0
 8007dee:	4690      	mov	r8, r2
 8007df0:	9301      	str	r3, [sp, #4]
 8007df2:	f846 5c04 	str.w	r5, [r6, #-4]
 8007df6:	46b9      	mov	r9, r7
 8007df8:	463c      	mov	r4, r7
 8007dfa:	9502      	str	r5, [sp, #8]
 8007dfc:	46ab      	mov	fp, r5
 8007dfe:	784a      	ldrb	r2, [r1, #1]
 8007e00:	1c4b      	adds	r3, r1, #1
 8007e02:	9303      	str	r3, [sp, #12]
 8007e04:	b342      	cbz	r2, 8007e58 <__hexnan+0x88>
 8007e06:	4610      	mov	r0, r2
 8007e08:	9105      	str	r1, [sp, #20]
 8007e0a:	9204      	str	r2, [sp, #16]
 8007e0c:	f7ff fd94 	bl	8007938 <__hexdig_fun>
 8007e10:	2800      	cmp	r0, #0
 8007e12:	d151      	bne.n	8007eb8 <__hexnan+0xe8>
 8007e14:	9a04      	ldr	r2, [sp, #16]
 8007e16:	9905      	ldr	r1, [sp, #20]
 8007e18:	2a20      	cmp	r2, #32
 8007e1a:	d818      	bhi.n	8007e4e <__hexnan+0x7e>
 8007e1c:	9b02      	ldr	r3, [sp, #8]
 8007e1e:	459b      	cmp	fp, r3
 8007e20:	dd13      	ble.n	8007e4a <__hexnan+0x7a>
 8007e22:	454c      	cmp	r4, r9
 8007e24:	d206      	bcs.n	8007e34 <__hexnan+0x64>
 8007e26:	2d07      	cmp	r5, #7
 8007e28:	dc04      	bgt.n	8007e34 <__hexnan+0x64>
 8007e2a:	462a      	mov	r2, r5
 8007e2c:	4649      	mov	r1, r9
 8007e2e:	4620      	mov	r0, r4
 8007e30:	f7ff ffa8 	bl	8007d84 <L_shift>
 8007e34:	4544      	cmp	r4, r8
 8007e36:	d952      	bls.n	8007ede <__hexnan+0x10e>
 8007e38:	2300      	movs	r3, #0
 8007e3a:	f1a4 0904 	sub.w	r9, r4, #4
 8007e3e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007e42:	f8cd b008 	str.w	fp, [sp, #8]
 8007e46:	464c      	mov	r4, r9
 8007e48:	461d      	mov	r5, r3
 8007e4a:	9903      	ldr	r1, [sp, #12]
 8007e4c:	e7d7      	b.n	8007dfe <__hexnan+0x2e>
 8007e4e:	2a29      	cmp	r2, #41	@ 0x29
 8007e50:	d157      	bne.n	8007f02 <__hexnan+0x132>
 8007e52:	3102      	adds	r1, #2
 8007e54:	f8ca 1000 	str.w	r1, [sl]
 8007e58:	f1bb 0f00 	cmp.w	fp, #0
 8007e5c:	d051      	beq.n	8007f02 <__hexnan+0x132>
 8007e5e:	454c      	cmp	r4, r9
 8007e60:	d206      	bcs.n	8007e70 <__hexnan+0xa0>
 8007e62:	2d07      	cmp	r5, #7
 8007e64:	dc04      	bgt.n	8007e70 <__hexnan+0xa0>
 8007e66:	462a      	mov	r2, r5
 8007e68:	4649      	mov	r1, r9
 8007e6a:	4620      	mov	r0, r4
 8007e6c:	f7ff ff8a 	bl	8007d84 <L_shift>
 8007e70:	4544      	cmp	r4, r8
 8007e72:	d936      	bls.n	8007ee2 <__hexnan+0x112>
 8007e74:	f1a8 0204 	sub.w	r2, r8, #4
 8007e78:	4623      	mov	r3, r4
 8007e7a:	f853 1b04 	ldr.w	r1, [r3], #4
 8007e7e:	f842 1f04 	str.w	r1, [r2, #4]!
 8007e82:	429f      	cmp	r7, r3
 8007e84:	d2f9      	bcs.n	8007e7a <__hexnan+0xaa>
 8007e86:	1b3b      	subs	r3, r7, r4
 8007e88:	f023 0303 	bic.w	r3, r3, #3
 8007e8c:	3304      	adds	r3, #4
 8007e8e:	3401      	adds	r4, #1
 8007e90:	3e03      	subs	r6, #3
 8007e92:	42b4      	cmp	r4, r6
 8007e94:	bf88      	it	hi
 8007e96:	2304      	movhi	r3, #4
 8007e98:	4443      	add	r3, r8
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	f843 2b04 	str.w	r2, [r3], #4
 8007ea0:	429f      	cmp	r7, r3
 8007ea2:	d2fb      	bcs.n	8007e9c <__hexnan+0xcc>
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	b91b      	cbnz	r3, 8007eb0 <__hexnan+0xe0>
 8007ea8:	4547      	cmp	r7, r8
 8007eaa:	d128      	bne.n	8007efe <__hexnan+0x12e>
 8007eac:	2301      	movs	r3, #1
 8007eae:	603b      	str	r3, [r7, #0]
 8007eb0:	2005      	movs	r0, #5
 8007eb2:	b007      	add	sp, #28
 8007eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eb8:	3501      	adds	r5, #1
 8007eba:	2d08      	cmp	r5, #8
 8007ebc:	f10b 0b01 	add.w	fp, fp, #1
 8007ec0:	dd06      	ble.n	8007ed0 <__hexnan+0x100>
 8007ec2:	4544      	cmp	r4, r8
 8007ec4:	d9c1      	bls.n	8007e4a <__hexnan+0x7a>
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	f844 3c04 	str.w	r3, [r4, #-4]
 8007ecc:	2501      	movs	r5, #1
 8007ece:	3c04      	subs	r4, #4
 8007ed0:	6822      	ldr	r2, [r4, #0]
 8007ed2:	f000 000f 	and.w	r0, r0, #15
 8007ed6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007eda:	6020      	str	r0, [r4, #0]
 8007edc:	e7b5      	b.n	8007e4a <__hexnan+0x7a>
 8007ede:	2508      	movs	r5, #8
 8007ee0:	e7b3      	b.n	8007e4a <__hexnan+0x7a>
 8007ee2:	9b01      	ldr	r3, [sp, #4]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d0dd      	beq.n	8007ea4 <__hexnan+0xd4>
 8007ee8:	f1c3 0320 	rsb	r3, r3, #32
 8007eec:	f04f 32ff 	mov.w	r2, #4294967295
 8007ef0:	40da      	lsrs	r2, r3
 8007ef2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007ef6:	4013      	ands	r3, r2
 8007ef8:	f846 3c04 	str.w	r3, [r6, #-4]
 8007efc:	e7d2      	b.n	8007ea4 <__hexnan+0xd4>
 8007efe:	3f04      	subs	r7, #4
 8007f00:	e7d0      	b.n	8007ea4 <__hexnan+0xd4>
 8007f02:	2004      	movs	r0, #4
 8007f04:	e7d5      	b.n	8007eb2 <__hexnan+0xe2>
	...

08007f08 <malloc>:
 8007f08:	4b02      	ldr	r3, [pc, #8]	@ (8007f14 <malloc+0xc>)
 8007f0a:	4601      	mov	r1, r0
 8007f0c:	6818      	ldr	r0, [r3, #0]
 8007f0e:	f000 b825 	b.w	8007f5c <_malloc_r>
 8007f12:	bf00      	nop
 8007f14:	20000184 	.word	0x20000184

08007f18 <sbrk_aligned>:
 8007f18:	b570      	push	{r4, r5, r6, lr}
 8007f1a:	4e0f      	ldr	r6, [pc, #60]	@ (8007f58 <sbrk_aligned+0x40>)
 8007f1c:	460c      	mov	r4, r1
 8007f1e:	6831      	ldr	r1, [r6, #0]
 8007f20:	4605      	mov	r5, r0
 8007f22:	b911      	cbnz	r1, 8007f2a <sbrk_aligned+0x12>
 8007f24:	f000 ffa6 	bl	8008e74 <_sbrk_r>
 8007f28:	6030      	str	r0, [r6, #0]
 8007f2a:	4621      	mov	r1, r4
 8007f2c:	4628      	mov	r0, r5
 8007f2e:	f000 ffa1 	bl	8008e74 <_sbrk_r>
 8007f32:	1c43      	adds	r3, r0, #1
 8007f34:	d103      	bne.n	8007f3e <sbrk_aligned+0x26>
 8007f36:	f04f 34ff 	mov.w	r4, #4294967295
 8007f3a:	4620      	mov	r0, r4
 8007f3c:	bd70      	pop	{r4, r5, r6, pc}
 8007f3e:	1cc4      	adds	r4, r0, #3
 8007f40:	f024 0403 	bic.w	r4, r4, #3
 8007f44:	42a0      	cmp	r0, r4
 8007f46:	d0f8      	beq.n	8007f3a <sbrk_aligned+0x22>
 8007f48:	1a21      	subs	r1, r4, r0
 8007f4a:	4628      	mov	r0, r5
 8007f4c:	f000 ff92 	bl	8008e74 <_sbrk_r>
 8007f50:	3001      	adds	r0, #1
 8007f52:	d1f2      	bne.n	8007f3a <sbrk_aligned+0x22>
 8007f54:	e7ef      	b.n	8007f36 <sbrk_aligned+0x1e>
 8007f56:	bf00      	nop
 8007f58:	200006b4 	.word	0x200006b4

08007f5c <_malloc_r>:
 8007f5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f60:	1ccd      	adds	r5, r1, #3
 8007f62:	f025 0503 	bic.w	r5, r5, #3
 8007f66:	3508      	adds	r5, #8
 8007f68:	2d0c      	cmp	r5, #12
 8007f6a:	bf38      	it	cc
 8007f6c:	250c      	movcc	r5, #12
 8007f6e:	2d00      	cmp	r5, #0
 8007f70:	4606      	mov	r6, r0
 8007f72:	db01      	blt.n	8007f78 <_malloc_r+0x1c>
 8007f74:	42a9      	cmp	r1, r5
 8007f76:	d904      	bls.n	8007f82 <_malloc_r+0x26>
 8007f78:	230c      	movs	r3, #12
 8007f7a:	6033      	str	r3, [r6, #0]
 8007f7c:	2000      	movs	r0, #0
 8007f7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f82:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008058 <_malloc_r+0xfc>
 8007f86:	f000 f87b 	bl	8008080 <__malloc_lock>
 8007f8a:	f8d8 3000 	ldr.w	r3, [r8]
 8007f8e:	461c      	mov	r4, r3
 8007f90:	bb44      	cbnz	r4, 8007fe4 <_malloc_r+0x88>
 8007f92:	4629      	mov	r1, r5
 8007f94:	4630      	mov	r0, r6
 8007f96:	f7ff ffbf 	bl	8007f18 <sbrk_aligned>
 8007f9a:	1c43      	adds	r3, r0, #1
 8007f9c:	4604      	mov	r4, r0
 8007f9e:	d158      	bne.n	8008052 <_malloc_r+0xf6>
 8007fa0:	f8d8 4000 	ldr.w	r4, [r8]
 8007fa4:	4627      	mov	r7, r4
 8007fa6:	2f00      	cmp	r7, #0
 8007fa8:	d143      	bne.n	8008032 <_malloc_r+0xd6>
 8007faa:	2c00      	cmp	r4, #0
 8007fac:	d04b      	beq.n	8008046 <_malloc_r+0xea>
 8007fae:	6823      	ldr	r3, [r4, #0]
 8007fb0:	4639      	mov	r1, r7
 8007fb2:	4630      	mov	r0, r6
 8007fb4:	eb04 0903 	add.w	r9, r4, r3
 8007fb8:	f000 ff5c 	bl	8008e74 <_sbrk_r>
 8007fbc:	4581      	cmp	r9, r0
 8007fbe:	d142      	bne.n	8008046 <_malloc_r+0xea>
 8007fc0:	6821      	ldr	r1, [r4, #0]
 8007fc2:	1a6d      	subs	r5, r5, r1
 8007fc4:	4629      	mov	r1, r5
 8007fc6:	4630      	mov	r0, r6
 8007fc8:	f7ff ffa6 	bl	8007f18 <sbrk_aligned>
 8007fcc:	3001      	adds	r0, #1
 8007fce:	d03a      	beq.n	8008046 <_malloc_r+0xea>
 8007fd0:	6823      	ldr	r3, [r4, #0]
 8007fd2:	442b      	add	r3, r5
 8007fd4:	6023      	str	r3, [r4, #0]
 8007fd6:	f8d8 3000 	ldr.w	r3, [r8]
 8007fda:	685a      	ldr	r2, [r3, #4]
 8007fdc:	bb62      	cbnz	r2, 8008038 <_malloc_r+0xdc>
 8007fde:	f8c8 7000 	str.w	r7, [r8]
 8007fe2:	e00f      	b.n	8008004 <_malloc_r+0xa8>
 8007fe4:	6822      	ldr	r2, [r4, #0]
 8007fe6:	1b52      	subs	r2, r2, r5
 8007fe8:	d420      	bmi.n	800802c <_malloc_r+0xd0>
 8007fea:	2a0b      	cmp	r2, #11
 8007fec:	d917      	bls.n	800801e <_malloc_r+0xc2>
 8007fee:	1961      	adds	r1, r4, r5
 8007ff0:	42a3      	cmp	r3, r4
 8007ff2:	6025      	str	r5, [r4, #0]
 8007ff4:	bf18      	it	ne
 8007ff6:	6059      	strne	r1, [r3, #4]
 8007ff8:	6863      	ldr	r3, [r4, #4]
 8007ffa:	bf08      	it	eq
 8007ffc:	f8c8 1000 	streq.w	r1, [r8]
 8008000:	5162      	str	r2, [r4, r5]
 8008002:	604b      	str	r3, [r1, #4]
 8008004:	4630      	mov	r0, r6
 8008006:	f000 f841 	bl	800808c <__malloc_unlock>
 800800a:	f104 000b 	add.w	r0, r4, #11
 800800e:	1d23      	adds	r3, r4, #4
 8008010:	f020 0007 	bic.w	r0, r0, #7
 8008014:	1ac2      	subs	r2, r0, r3
 8008016:	bf1c      	itt	ne
 8008018:	1a1b      	subne	r3, r3, r0
 800801a:	50a3      	strne	r3, [r4, r2]
 800801c:	e7af      	b.n	8007f7e <_malloc_r+0x22>
 800801e:	6862      	ldr	r2, [r4, #4]
 8008020:	42a3      	cmp	r3, r4
 8008022:	bf0c      	ite	eq
 8008024:	f8c8 2000 	streq.w	r2, [r8]
 8008028:	605a      	strne	r2, [r3, #4]
 800802a:	e7eb      	b.n	8008004 <_malloc_r+0xa8>
 800802c:	4623      	mov	r3, r4
 800802e:	6864      	ldr	r4, [r4, #4]
 8008030:	e7ae      	b.n	8007f90 <_malloc_r+0x34>
 8008032:	463c      	mov	r4, r7
 8008034:	687f      	ldr	r7, [r7, #4]
 8008036:	e7b6      	b.n	8007fa6 <_malloc_r+0x4a>
 8008038:	461a      	mov	r2, r3
 800803a:	685b      	ldr	r3, [r3, #4]
 800803c:	42a3      	cmp	r3, r4
 800803e:	d1fb      	bne.n	8008038 <_malloc_r+0xdc>
 8008040:	2300      	movs	r3, #0
 8008042:	6053      	str	r3, [r2, #4]
 8008044:	e7de      	b.n	8008004 <_malloc_r+0xa8>
 8008046:	230c      	movs	r3, #12
 8008048:	6033      	str	r3, [r6, #0]
 800804a:	4630      	mov	r0, r6
 800804c:	f000 f81e 	bl	800808c <__malloc_unlock>
 8008050:	e794      	b.n	8007f7c <_malloc_r+0x20>
 8008052:	6005      	str	r5, [r0, #0]
 8008054:	e7d6      	b.n	8008004 <_malloc_r+0xa8>
 8008056:	bf00      	nop
 8008058:	200006b8 	.word	0x200006b8

0800805c <__ascii_mbtowc>:
 800805c:	b082      	sub	sp, #8
 800805e:	b901      	cbnz	r1, 8008062 <__ascii_mbtowc+0x6>
 8008060:	a901      	add	r1, sp, #4
 8008062:	b142      	cbz	r2, 8008076 <__ascii_mbtowc+0x1a>
 8008064:	b14b      	cbz	r3, 800807a <__ascii_mbtowc+0x1e>
 8008066:	7813      	ldrb	r3, [r2, #0]
 8008068:	600b      	str	r3, [r1, #0]
 800806a:	7812      	ldrb	r2, [r2, #0]
 800806c:	1e10      	subs	r0, r2, #0
 800806e:	bf18      	it	ne
 8008070:	2001      	movne	r0, #1
 8008072:	b002      	add	sp, #8
 8008074:	4770      	bx	lr
 8008076:	4610      	mov	r0, r2
 8008078:	e7fb      	b.n	8008072 <__ascii_mbtowc+0x16>
 800807a:	f06f 0001 	mvn.w	r0, #1
 800807e:	e7f8      	b.n	8008072 <__ascii_mbtowc+0x16>

08008080 <__malloc_lock>:
 8008080:	4801      	ldr	r0, [pc, #4]	@ (8008088 <__malloc_lock+0x8>)
 8008082:	f7fe bd36 	b.w	8006af2 <__retarget_lock_acquire_recursive>
 8008086:	bf00      	nop
 8008088:	200006b0 	.word	0x200006b0

0800808c <__malloc_unlock>:
 800808c:	4801      	ldr	r0, [pc, #4]	@ (8008094 <__malloc_unlock+0x8>)
 800808e:	f7fe bd31 	b.w	8006af4 <__retarget_lock_release_recursive>
 8008092:	bf00      	nop
 8008094:	200006b0 	.word	0x200006b0

08008098 <_Balloc>:
 8008098:	b570      	push	{r4, r5, r6, lr}
 800809a:	69c6      	ldr	r6, [r0, #28]
 800809c:	4604      	mov	r4, r0
 800809e:	460d      	mov	r5, r1
 80080a0:	b976      	cbnz	r6, 80080c0 <_Balloc+0x28>
 80080a2:	2010      	movs	r0, #16
 80080a4:	f7ff ff30 	bl	8007f08 <malloc>
 80080a8:	4602      	mov	r2, r0
 80080aa:	61e0      	str	r0, [r4, #28]
 80080ac:	b920      	cbnz	r0, 80080b8 <_Balloc+0x20>
 80080ae:	4b18      	ldr	r3, [pc, #96]	@ (8008110 <_Balloc+0x78>)
 80080b0:	4818      	ldr	r0, [pc, #96]	@ (8008114 <_Balloc+0x7c>)
 80080b2:	216b      	movs	r1, #107	@ 0x6b
 80080b4:	f7fe fd38 	bl	8006b28 <__assert_func>
 80080b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80080bc:	6006      	str	r6, [r0, #0]
 80080be:	60c6      	str	r6, [r0, #12]
 80080c0:	69e6      	ldr	r6, [r4, #28]
 80080c2:	68f3      	ldr	r3, [r6, #12]
 80080c4:	b183      	cbz	r3, 80080e8 <_Balloc+0x50>
 80080c6:	69e3      	ldr	r3, [r4, #28]
 80080c8:	68db      	ldr	r3, [r3, #12]
 80080ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80080ce:	b9b8      	cbnz	r0, 8008100 <_Balloc+0x68>
 80080d0:	2101      	movs	r1, #1
 80080d2:	fa01 f605 	lsl.w	r6, r1, r5
 80080d6:	1d72      	adds	r2, r6, #5
 80080d8:	0092      	lsls	r2, r2, #2
 80080da:	4620      	mov	r0, r4
 80080dc:	f000 fee1 	bl	8008ea2 <_calloc_r>
 80080e0:	b160      	cbz	r0, 80080fc <_Balloc+0x64>
 80080e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80080e6:	e00e      	b.n	8008106 <_Balloc+0x6e>
 80080e8:	2221      	movs	r2, #33	@ 0x21
 80080ea:	2104      	movs	r1, #4
 80080ec:	4620      	mov	r0, r4
 80080ee:	f000 fed8 	bl	8008ea2 <_calloc_r>
 80080f2:	69e3      	ldr	r3, [r4, #28]
 80080f4:	60f0      	str	r0, [r6, #12]
 80080f6:	68db      	ldr	r3, [r3, #12]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d1e4      	bne.n	80080c6 <_Balloc+0x2e>
 80080fc:	2000      	movs	r0, #0
 80080fe:	bd70      	pop	{r4, r5, r6, pc}
 8008100:	6802      	ldr	r2, [r0, #0]
 8008102:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008106:	2300      	movs	r3, #0
 8008108:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800810c:	e7f7      	b.n	80080fe <_Balloc+0x66>
 800810e:	bf00      	nop
 8008110:	0800a694 	.word	0x0800a694
 8008114:	0800a81f 	.word	0x0800a81f

08008118 <_Bfree>:
 8008118:	b570      	push	{r4, r5, r6, lr}
 800811a:	69c6      	ldr	r6, [r0, #28]
 800811c:	4605      	mov	r5, r0
 800811e:	460c      	mov	r4, r1
 8008120:	b976      	cbnz	r6, 8008140 <_Bfree+0x28>
 8008122:	2010      	movs	r0, #16
 8008124:	f7ff fef0 	bl	8007f08 <malloc>
 8008128:	4602      	mov	r2, r0
 800812a:	61e8      	str	r0, [r5, #28]
 800812c:	b920      	cbnz	r0, 8008138 <_Bfree+0x20>
 800812e:	4b09      	ldr	r3, [pc, #36]	@ (8008154 <_Bfree+0x3c>)
 8008130:	4809      	ldr	r0, [pc, #36]	@ (8008158 <_Bfree+0x40>)
 8008132:	218f      	movs	r1, #143	@ 0x8f
 8008134:	f7fe fcf8 	bl	8006b28 <__assert_func>
 8008138:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800813c:	6006      	str	r6, [r0, #0]
 800813e:	60c6      	str	r6, [r0, #12]
 8008140:	b13c      	cbz	r4, 8008152 <_Bfree+0x3a>
 8008142:	69eb      	ldr	r3, [r5, #28]
 8008144:	6862      	ldr	r2, [r4, #4]
 8008146:	68db      	ldr	r3, [r3, #12]
 8008148:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800814c:	6021      	str	r1, [r4, #0]
 800814e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008152:	bd70      	pop	{r4, r5, r6, pc}
 8008154:	0800a694 	.word	0x0800a694
 8008158:	0800a81f 	.word	0x0800a81f

0800815c <__multadd>:
 800815c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008160:	690d      	ldr	r5, [r1, #16]
 8008162:	4607      	mov	r7, r0
 8008164:	460c      	mov	r4, r1
 8008166:	461e      	mov	r6, r3
 8008168:	f101 0c14 	add.w	ip, r1, #20
 800816c:	2000      	movs	r0, #0
 800816e:	f8dc 3000 	ldr.w	r3, [ip]
 8008172:	b299      	uxth	r1, r3
 8008174:	fb02 6101 	mla	r1, r2, r1, r6
 8008178:	0c1e      	lsrs	r6, r3, #16
 800817a:	0c0b      	lsrs	r3, r1, #16
 800817c:	fb02 3306 	mla	r3, r2, r6, r3
 8008180:	b289      	uxth	r1, r1
 8008182:	3001      	adds	r0, #1
 8008184:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008188:	4285      	cmp	r5, r0
 800818a:	f84c 1b04 	str.w	r1, [ip], #4
 800818e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008192:	dcec      	bgt.n	800816e <__multadd+0x12>
 8008194:	b30e      	cbz	r6, 80081da <__multadd+0x7e>
 8008196:	68a3      	ldr	r3, [r4, #8]
 8008198:	42ab      	cmp	r3, r5
 800819a:	dc19      	bgt.n	80081d0 <__multadd+0x74>
 800819c:	6861      	ldr	r1, [r4, #4]
 800819e:	4638      	mov	r0, r7
 80081a0:	3101      	adds	r1, #1
 80081a2:	f7ff ff79 	bl	8008098 <_Balloc>
 80081a6:	4680      	mov	r8, r0
 80081a8:	b928      	cbnz	r0, 80081b6 <__multadd+0x5a>
 80081aa:	4602      	mov	r2, r0
 80081ac:	4b0c      	ldr	r3, [pc, #48]	@ (80081e0 <__multadd+0x84>)
 80081ae:	480d      	ldr	r0, [pc, #52]	@ (80081e4 <__multadd+0x88>)
 80081b0:	21ba      	movs	r1, #186	@ 0xba
 80081b2:	f7fe fcb9 	bl	8006b28 <__assert_func>
 80081b6:	6922      	ldr	r2, [r4, #16]
 80081b8:	3202      	adds	r2, #2
 80081ba:	f104 010c 	add.w	r1, r4, #12
 80081be:	0092      	lsls	r2, r2, #2
 80081c0:	300c      	adds	r0, #12
 80081c2:	f7fe fc98 	bl	8006af6 <memcpy>
 80081c6:	4621      	mov	r1, r4
 80081c8:	4638      	mov	r0, r7
 80081ca:	f7ff ffa5 	bl	8008118 <_Bfree>
 80081ce:	4644      	mov	r4, r8
 80081d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80081d4:	3501      	adds	r5, #1
 80081d6:	615e      	str	r6, [r3, #20]
 80081d8:	6125      	str	r5, [r4, #16]
 80081da:	4620      	mov	r0, r4
 80081dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081e0:	0800a7ae 	.word	0x0800a7ae
 80081e4:	0800a81f 	.word	0x0800a81f

080081e8 <__s2b>:
 80081e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081ec:	460c      	mov	r4, r1
 80081ee:	4615      	mov	r5, r2
 80081f0:	461f      	mov	r7, r3
 80081f2:	2209      	movs	r2, #9
 80081f4:	3308      	adds	r3, #8
 80081f6:	4606      	mov	r6, r0
 80081f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80081fc:	2100      	movs	r1, #0
 80081fe:	2201      	movs	r2, #1
 8008200:	429a      	cmp	r2, r3
 8008202:	db09      	blt.n	8008218 <__s2b+0x30>
 8008204:	4630      	mov	r0, r6
 8008206:	f7ff ff47 	bl	8008098 <_Balloc>
 800820a:	b940      	cbnz	r0, 800821e <__s2b+0x36>
 800820c:	4602      	mov	r2, r0
 800820e:	4b19      	ldr	r3, [pc, #100]	@ (8008274 <__s2b+0x8c>)
 8008210:	4819      	ldr	r0, [pc, #100]	@ (8008278 <__s2b+0x90>)
 8008212:	21d3      	movs	r1, #211	@ 0xd3
 8008214:	f7fe fc88 	bl	8006b28 <__assert_func>
 8008218:	0052      	lsls	r2, r2, #1
 800821a:	3101      	adds	r1, #1
 800821c:	e7f0      	b.n	8008200 <__s2b+0x18>
 800821e:	9b08      	ldr	r3, [sp, #32]
 8008220:	6143      	str	r3, [r0, #20]
 8008222:	2d09      	cmp	r5, #9
 8008224:	f04f 0301 	mov.w	r3, #1
 8008228:	6103      	str	r3, [r0, #16]
 800822a:	dd16      	ble.n	800825a <__s2b+0x72>
 800822c:	f104 0909 	add.w	r9, r4, #9
 8008230:	46c8      	mov	r8, r9
 8008232:	442c      	add	r4, r5
 8008234:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008238:	4601      	mov	r1, r0
 800823a:	3b30      	subs	r3, #48	@ 0x30
 800823c:	220a      	movs	r2, #10
 800823e:	4630      	mov	r0, r6
 8008240:	f7ff ff8c 	bl	800815c <__multadd>
 8008244:	45a0      	cmp	r8, r4
 8008246:	d1f5      	bne.n	8008234 <__s2b+0x4c>
 8008248:	f1a5 0408 	sub.w	r4, r5, #8
 800824c:	444c      	add	r4, r9
 800824e:	1b2d      	subs	r5, r5, r4
 8008250:	1963      	adds	r3, r4, r5
 8008252:	42bb      	cmp	r3, r7
 8008254:	db04      	blt.n	8008260 <__s2b+0x78>
 8008256:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800825a:	340a      	adds	r4, #10
 800825c:	2509      	movs	r5, #9
 800825e:	e7f6      	b.n	800824e <__s2b+0x66>
 8008260:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008264:	4601      	mov	r1, r0
 8008266:	3b30      	subs	r3, #48	@ 0x30
 8008268:	220a      	movs	r2, #10
 800826a:	4630      	mov	r0, r6
 800826c:	f7ff ff76 	bl	800815c <__multadd>
 8008270:	e7ee      	b.n	8008250 <__s2b+0x68>
 8008272:	bf00      	nop
 8008274:	0800a7ae 	.word	0x0800a7ae
 8008278:	0800a81f 	.word	0x0800a81f

0800827c <__hi0bits>:
 800827c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008280:	4603      	mov	r3, r0
 8008282:	bf36      	itet	cc
 8008284:	0403      	lslcc	r3, r0, #16
 8008286:	2000      	movcs	r0, #0
 8008288:	2010      	movcc	r0, #16
 800828a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800828e:	bf3c      	itt	cc
 8008290:	021b      	lslcc	r3, r3, #8
 8008292:	3008      	addcc	r0, #8
 8008294:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008298:	bf3c      	itt	cc
 800829a:	011b      	lslcc	r3, r3, #4
 800829c:	3004      	addcc	r0, #4
 800829e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082a2:	bf3c      	itt	cc
 80082a4:	009b      	lslcc	r3, r3, #2
 80082a6:	3002      	addcc	r0, #2
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	db05      	blt.n	80082b8 <__hi0bits+0x3c>
 80082ac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80082b0:	f100 0001 	add.w	r0, r0, #1
 80082b4:	bf08      	it	eq
 80082b6:	2020      	moveq	r0, #32
 80082b8:	4770      	bx	lr

080082ba <__lo0bits>:
 80082ba:	6803      	ldr	r3, [r0, #0]
 80082bc:	4602      	mov	r2, r0
 80082be:	f013 0007 	ands.w	r0, r3, #7
 80082c2:	d00b      	beq.n	80082dc <__lo0bits+0x22>
 80082c4:	07d9      	lsls	r1, r3, #31
 80082c6:	d421      	bmi.n	800830c <__lo0bits+0x52>
 80082c8:	0798      	lsls	r0, r3, #30
 80082ca:	bf49      	itett	mi
 80082cc:	085b      	lsrmi	r3, r3, #1
 80082ce:	089b      	lsrpl	r3, r3, #2
 80082d0:	2001      	movmi	r0, #1
 80082d2:	6013      	strmi	r3, [r2, #0]
 80082d4:	bf5c      	itt	pl
 80082d6:	6013      	strpl	r3, [r2, #0]
 80082d8:	2002      	movpl	r0, #2
 80082da:	4770      	bx	lr
 80082dc:	b299      	uxth	r1, r3
 80082de:	b909      	cbnz	r1, 80082e4 <__lo0bits+0x2a>
 80082e0:	0c1b      	lsrs	r3, r3, #16
 80082e2:	2010      	movs	r0, #16
 80082e4:	b2d9      	uxtb	r1, r3
 80082e6:	b909      	cbnz	r1, 80082ec <__lo0bits+0x32>
 80082e8:	3008      	adds	r0, #8
 80082ea:	0a1b      	lsrs	r3, r3, #8
 80082ec:	0719      	lsls	r1, r3, #28
 80082ee:	bf04      	itt	eq
 80082f0:	091b      	lsreq	r3, r3, #4
 80082f2:	3004      	addeq	r0, #4
 80082f4:	0799      	lsls	r1, r3, #30
 80082f6:	bf04      	itt	eq
 80082f8:	089b      	lsreq	r3, r3, #2
 80082fa:	3002      	addeq	r0, #2
 80082fc:	07d9      	lsls	r1, r3, #31
 80082fe:	d403      	bmi.n	8008308 <__lo0bits+0x4e>
 8008300:	085b      	lsrs	r3, r3, #1
 8008302:	f100 0001 	add.w	r0, r0, #1
 8008306:	d003      	beq.n	8008310 <__lo0bits+0x56>
 8008308:	6013      	str	r3, [r2, #0]
 800830a:	4770      	bx	lr
 800830c:	2000      	movs	r0, #0
 800830e:	4770      	bx	lr
 8008310:	2020      	movs	r0, #32
 8008312:	4770      	bx	lr

08008314 <__i2b>:
 8008314:	b510      	push	{r4, lr}
 8008316:	460c      	mov	r4, r1
 8008318:	2101      	movs	r1, #1
 800831a:	f7ff febd 	bl	8008098 <_Balloc>
 800831e:	4602      	mov	r2, r0
 8008320:	b928      	cbnz	r0, 800832e <__i2b+0x1a>
 8008322:	4b05      	ldr	r3, [pc, #20]	@ (8008338 <__i2b+0x24>)
 8008324:	4805      	ldr	r0, [pc, #20]	@ (800833c <__i2b+0x28>)
 8008326:	f240 1145 	movw	r1, #325	@ 0x145
 800832a:	f7fe fbfd 	bl	8006b28 <__assert_func>
 800832e:	2301      	movs	r3, #1
 8008330:	6144      	str	r4, [r0, #20]
 8008332:	6103      	str	r3, [r0, #16]
 8008334:	bd10      	pop	{r4, pc}
 8008336:	bf00      	nop
 8008338:	0800a7ae 	.word	0x0800a7ae
 800833c:	0800a81f 	.word	0x0800a81f

08008340 <__multiply>:
 8008340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008344:	4614      	mov	r4, r2
 8008346:	690a      	ldr	r2, [r1, #16]
 8008348:	6923      	ldr	r3, [r4, #16]
 800834a:	429a      	cmp	r2, r3
 800834c:	bfa8      	it	ge
 800834e:	4623      	movge	r3, r4
 8008350:	460f      	mov	r7, r1
 8008352:	bfa4      	itt	ge
 8008354:	460c      	movge	r4, r1
 8008356:	461f      	movge	r7, r3
 8008358:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800835c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008360:	68a3      	ldr	r3, [r4, #8]
 8008362:	6861      	ldr	r1, [r4, #4]
 8008364:	eb0a 0609 	add.w	r6, sl, r9
 8008368:	42b3      	cmp	r3, r6
 800836a:	b085      	sub	sp, #20
 800836c:	bfb8      	it	lt
 800836e:	3101      	addlt	r1, #1
 8008370:	f7ff fe92 	bl	8008098 <_Balloc>
 8008374:	b930      	cbnz	r0, 8008384 <__multiply+0x44>
 8008376:	4602      	mov	r2, r0
 8008378:	4b44      	ldr	r3, [pc, #272]	@ (800848c <__multiply+0x14c>)
 800837a:	4845      	ldr	r0, [pc, #276]	@ (8008490 <__multiply+0x150>)
 800837c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008380:	f7fe fbd2 	bl	8006b28 <__assert_func>
 8008384:	f100 0514 	add.w	r5, r0, #20
 8008388:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800838c:	462b      	mov	r3, r5
 800838e:	2200      	movs	r2, #0
 8008390:	4543      	cmp	r3, r8
 8008392:	d321      	bcc.n	80083d8 <__multiply+0x98>
 8008394:	f107 0114 	add.w	r1, r7, #20
 8008398:	f104 0214 	add.w	r2, r4, #20
 800839c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80083a0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80083a4:	9302      	str	r3, [sp, #8]
 80083a6:	1b13      	subs	r3, r2, r4
 80083a8:	3b15      	subs	r3, #21
 80083aa:	f023 0303 	bic.w	r3, r3, #3
 80083ae:	3304      	adds	r3, #4
 80083b0:	f104 0715 	add.w	r7, r4, #21
 80083b4:	42ba      	cmp	r2, r7
 80083b6:	bf38      	it	cc
 80083b8:	2304      	movcc	r3, #4
 80083ba:	9301      	str	r3, [sp, #4]
 80083bc:	9b02      	ldr	r3, [sp, #8]
 80083be:	9103      	str	r1, [sp, #12]
 80083c0:	428b      	cmp	r3, r1
 80083c2:	d80c      	bhi.n	80083de <__multiply+0x9e>
 80083c4:	2e00      	cmp	r6, #0
 80083c6:	dd03      	ble.n	80083d0 <__multiply+0x90>
 80083c8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d05b      	beq.n	8008488 <__multiply+0x148>
 80083d0:	6106      	str	r6, [r0, #16]
 80083d2:	b005      	add	sp, #20
 80083d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083d8:	f843 2b04 	str.w	r2, [r3], #4
 80083dc:	e7d8      	b.n	8008390 <__multiply+0x50>
 80083de:	f8b1 a000 	ldrh.w	sl, [r1]
 80083e2:	f1ba 0f00 	cmp.w	sl, #0
 80083e6:	d024      	beq.n	8008432 <__multiply+0xf2>
 80083e8:	f104 0e14 	add.w	lr, r4, #20
 80083ec:	46a9      	mov	r9, r5
 80083ee:	f04f 0c00 	mov.w	ip, #0
 80083f2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80083f6:	f8d9 3000 	ldr.w	r3, [r9]
 80083fa:	fa1f fb87 	uxth.w	fp, r7
 80083fe:	b29b      	uxth	r3, r3
 8008400:	fb0a 330b 	mla	r3, sl, fp, r3
 8008404:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008408:	f8d9 7000 	ldr.w	r7, [r9]
 800840c:	4463      	add	r3, ip
 800840e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008412:	fb0a c70b 	mla	r7, sl, fp, ip
 8008416:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800841a:	b29b      	uxth	r3, r3
 800841c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008420:	4572      	cmp	r2, lr
 8008422:	f849 3b04 	str.w	r3, [r9], #4
 8008426:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800842a:	d8e2      	bhi.n	80083f2 <__multiply+0xb2>
 800842c:	9b01      	ldr	r3, [sp, #4]
 800842e:	f845 c003 	str.w	ip, [r5, r3]
 8008432:	9b03      	ldr	r3, [sp, #12]
 8008434:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008438:	3104      	adds	r1, #4
 800843a:	f1b9 0f00 	cmp.w	r9, #0
 800843e:	d021      	beq.n	8008484 <__multiply+0x144>
 8008440:	682b      	ldr	r3, [r5, #0]
 8008442:	f104 0c14 	add.w	ip, r4, #20
 8008446:	46ae      	mov	lr, r5
 8008448:	f04f 0a00 	mov.w	sl, #0
 800844c:	f8bc b000 	ldrh.w	fp, [ip]
 8008450:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008454:	fb09 770b 	mla	r7, r9, fp, r7
 8008458:	4457      	add	r7, sl
 800845a:	b29b      	uxth	r3, r3
 800845c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008460:	f84e 3b04 	str.w	r3, [lr], #4
 8008464:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008468:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800846c:	f8be 3000 	ldrh.w	r3, [lr]
 8008470:	fb09 330a 	mla	r3, r9, sl, r3
 8008474:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008478:	4562      	cmp	r2, ip
 800847a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800847e:	d8e5      	bhi.n	800844c <__multiply+0x10c>
 8008480:	9f01      	ldr	r7, [sp, #4]
 8008482:	51eb      	str	r3, [r5, r7]
 8008484:	3504      	adds	r5, #4
 8008486:	e799      	b.n	80083bc <__multiply+0x7c>
 8008488:	3e01      	subs	r6, #1
 800848a:	e79b      	b.n	80083c4 <__multiply+0x84>
 800848c:	0800a7ae 	.word	0x0800a7ae
 8008490:	0800a81f 	.word	0x0800a81f

08008494 <__pow5mult>:
 8008494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008498:	4615      	mov	r5, r2
 800849a:	f012 0203 	ands.w	r2, r2, #3
 800849e:	4607      	mov	r7, r0
 80084a0:	460e      	mov	r6, r1
 80084a2:	d007      	beq.n	80084b4 <__pow5mult+0x20>
 80084a4:	4c25      	ldr	r4, [pc, #148]	@ (800853c <__pow5mult+0xa8>)
 80084a6:	3a01      	subs	r2, #1
 80084a8:	2300      	movs	r3, #0
 80084aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80084ae:	f7ff fe55 	bl	800815c <__multadd>
 80084b2:	4606      	mov	r6, r0
 80084b4:	10ad      	asrs	r5, r5, #2
 80084b6:	d03d      	beq.n	8008534 <__pow5mult+0xa0>
 80084b8:	69fc      	ldr	r4, [r7, #28]
 80084ba:	b97c      	cbnz	r4, 80084dc <__pow5mult+0x48>
 80084bc:	2010      	movs	r0, #16
 80084be:	f7ff fd23 	bl	8007f08 <malloc>
 80084c2:	4602      	mov	r2, r0
 80084c4:	61f8      	str	r0, [r7, #28]
 80084c6:	b928      	cbnz	r0, 80084d4 <__pow5mult+0x40>
 80084c8:	4b1d      	ldr	r3, [pc, #116]	@ (8008540 <__pow5mult+0xac>)
 80084ca:	481e      	ldr	r0, [pc, #120]	@ (8008544 <__pow5mult+0xb0>)
 80084cc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80084d0:	f7fe fb2a 	bl	8006b28 <__assert_func>
 80084d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80084d8:	6004      	str	r4, [r0, #0]
 80084da:	60c4      	str	r4, [r0, #12]
 80084dc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80084e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80084e4:	b94c      	cbnz	r4, 80084fa <__pow5mult+0x66>
 80084e6:	f240 2171 	movw	r1, #625	@ 0x271
 80084ea:	4638      	mov	r0, r7
 80084ec:	f7ff ff12 	bl	8008314 <__i2b>
 80084f0:	2300      	movs	r3, #0
 80084f2:	f8c8 0008 	str.w	r0, [r8, #8]
 80084f6:	4604      	mov	r4, r0
 80084f8:	6003      	str	r3, [r0, #0]
 80084fa:	f04f 0900 	mov.w	r9, #0
 80084fe:	07eb      	lsls	r3, r5, #31
 8008500:	d50a      	bpl.n	8008518 <__pow5mult+0x84>
 8008502:	4631      	mov	r1, r6
 8008504:	4622      	mov	r2, r4
 8008506:	4638      	mov	r0, r7
 8008508:	f7ff ff1a 	bl	8008340 <__multiply>
 800850c:	4631      	mov	r1, r6
 800850e:	4680      	mov	r8, r0
 8008510:	4638      	mov	r0, r7
 8008512:	f7ff fe01 	bl	8008118 <_Bfree>
 8008516:	4646      	mov	r6, r8
 8008518:	106d      	asrs	r5, r5, #1
 800851a:	d00b      	beq.n	8008534 <__pow5mult+0xa0>
 800851c:	6820      	ldr	r0, [r4, #0]
 800851e:	b938      	cbnz	r0, 8008530 <__pow5mult+0x9c>
 8008520:	4622      	mov	r2, r4
 8008522:	4621      	mov	r1, r4
 8008524:	4638      	mov	r0, r7
 8008526:	f7ff ff0b 	bl	8008340 <__multiply>
 800852a:	6020      	str	r0, [r4, #0]
 800852c:	f8c0 9000 	str.w	r9, [r0]
 8008530:	4604      	mov	r4, r0
 8008532:	e7e4      	b.n	80084fe <__pow5mult+0x6a>
 8008534:	4630      	mov	r0, r6
 8008536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800853a:	bf00      	nop
 800853c:	0800a878 	.word	0x0800a878
 8008540:	0800a694 	.word	0x0800a694
 8008544:	0800a81f 	.word	0x0800a81f

08008548 <__lshift>:
 8008548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800854c:	460c      	mov	r4, r1
 800854e:	6849      	ldr	r1, [r1, #4]
 8008550:	6923      	ldr	r3, [r4, #16]
 8008552:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008556:	68a3      	ldr	r3, [r4, #8]
 8008558:	4607      	mov	r7, r0
 800855a:	4691      	mov	r9, r2
 800855c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008560:	f108 0601 	add.w	r6, r8, #1
 8008564:	42b3      	cmp	r3, r6
 8008566:	db0b      	blt.n	8008580 <__lshift+0x38>
 8008568:	4638      	mov	r0, r7
 800856a:	f7ff fd95 	bl	8008098 <_Balloc>
 800856e:	4605      	mov	r5, r0
 8008570:	b948      	cbnz	r0, 8008586 <__lshift+0x3e>
 8008572:	4602      	mov	r2, r0
 8008574:	4b28      	ldr	r3, [pc, #160]	@ (8008618 <__lshift+0xd0>)
 8008576:	4829      	ldr	r0, [pc, #164]	@ (800861c <__lshift+0xd4>)
 8008578:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800857c:	f7fe fad4 	bl	8006b28 <__assert_func>
 8008580:	3101      	adds	r1, #1
 8008582:	005b      	lsls	r3, r3, #1
 8008584:	e7ee      	b.n	8008564 <__lshift+0x1c>
 8008586:	2300      	movs	r3, #0
 8008588:	f100 0114 	add.w	r1, r0, #20
 800858c:	f100 0210 	add.w	r2, r0, #16
 8008590:	4618      	mov	r0, r3
 8008592:	4553      	cmp	r3, sl
 8008594:	db33      	blt.n	80085fe <__lshift+0xb6>
 8008596:	6920      	ldr	r0, [r4, #16]
 8008598:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800859c:	f104 0314 	add.w	r3, r4, #20
 80085a0:	f019 091f 	ands.w	r9, r9, #31
 80085a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80085a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80085ac:	d02b      	beq.n	8008606 <__lshift+0xbe>
 80085ae:	f1c9 0e20 	rsb	lr, r9, #32
 80085b2:	468a      	mov	sl, r1
 80085b4:	2200      	movs	r2, #0
 80085b6:	6818      	ldr	r0, [r3, #0]
 80085b8:	fa00 f009 	lsl.w	r0, r0, r9
 80085bc:	4310      	orrs	r0, r2
 80085be:	f84a 0b04 	str.w	r0, [sl], #4
 80085c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80085c6:	459c      	cmp	ip, r3
 80085c8:	fa22 f20e 	lsr.w	r2, r2, lr
 80085cc:	d8f3      	bhi.n	80085b6 <__lshift+0x6e>
 80085ce:	ebac 0304 	sub.w	r3, ip, r4
 80085d2:	3b15      	subs	r3, #21
 80085d4:	f023 0303 	bic.w	r3, r3, #3
 80085d8:	3304      	adds	r3, #4
 80085da:	f104 0015 	add.w	r0, r4, #21
 80085de:	4584      	cmp	ip, r0
 80085e0:	bf38      	it	cc
 80085e2:	2304      	movcc	r3, #4
 80085e4:	50ca      	str	r2, [r1, r3]
 80085e6:	b10a      	cbz	r2, 80085ec <__lshift+0xa4>
 80085e8:	f108 0602 	add.w	r6, r8, #2
 80085ec:	3e01      	subs	r6, #1
 80085ee:	4638      	mov	r0, r7
 80085f0:	612e      	str	r6, [r5, #16]
 80085f2:	4621      	mov	r1, r4
 80085f4:	f7ff fd90 	bl	8008118 <_Bfree>
 80085f8:	4628      	mov	r0, r5
 80085fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085fe:	f842 0f04 	str.w	r0, [r2, #4]!
 8008602:	3301      	adds	r3, #1
 8008604:	e7c5      	b.n	8008592 <__lshift+0x4a>
 8008606:	3904      	subs	r1, #4
 8008608:	f853 2b04 	ldr.w	r2, [r3], #4
 800860c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008610:	459c      	cmp	ip, r3
 8008612:	d8f9      	bhi.n	8008608 <__lshift+0xc0>
 8008614:	e7ea      	b.n	80085ec <__lshift+0xa4>
 8008616:	bf00      	nop
 8008618:	0800a7ae 	.word	0x0800a7ae
 800861c:	0800a81f 	.word	0x0800a81f

08008620 <__mcmp>:
 8008620:	690a      	ldr	r2, [r1, #16]
 8008622:	4603      	mov	r3, r0
 8008624:	6900      	ldr	r0, [r0, #16]
 8008626:	1a80      	subs	r0, r0, r2
 8008628:	b530      	push	{r4, r5, lr}
 800862a:	d10e      	bne.n	800864a <__mcmp+0x2a>
 800862c:	3314      	adds	r3, #20
 800862e:	3114      	adds	r1, #20
 8008630:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008634:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008638:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800863c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008640:	4295      	cmp	r5, r2
 8008642:	d003      	beq.n	800864c <__mcmp+0x2c>
 8008644:	d205      	bcs.n	8008652 <__mcmp+0x32>
 8008646:	f04f 30ff 	mov.w	r0, #4294967295
 800864a:	bd30      	pop	{r4, r5, pc}
 800864c:	42a3      	cmp	r3, r4
 800864e:	d3f3      	bcc.n	8008638 <__mcmp+0x18>
 8008650:	e7fb      	b.n	800864a <__mcmp+0x2a>
 8008652:	2001      	movs	r0, #1
 8008654:	e7f9      	b.n	800864a <__mcmp+0x2a>
	...

08008658 <__mdiff>:
 8008658:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800865c:	4689      	mov	r9, r1
 800865e:	4606      	mov	r6, r0
 8008660:	4611      	mov	r1, r2
 8008662:	4648      	mov	r0, r9
 8008664:	4614      	mov	r4, r2
 8008666:	f7ff ffdb 	bl	8008620 <__mcmp>
 800866a:	1e05      	subs	r5, r0, #0
 800866c:	d112      	bne.n	8008694 <__mdiff+0x3c>
 800866e:	4629      	mov	r1, r5
 8008670:	4630      	mov	r0, r6
 8008672:	f7ff fd11 	bl	8008098 <_Balloc>
 8008676:	4602      	mov	r2, r0
 8008678:	b928      	cbnz	r0, 8008686 <__mdiff+0x2e>
 800867a:	4b3f      	ldr	r3, [pc, #252]	@ (8008778 <__mdiff+0x120>)
 800867c:	f240 2137 	movw	r1, #567	@ 0x237
 8008680:	483e      	ldr	r0, [pc, #248]	@ (800877c <__mdiff+0x124>)
 8008682:	f7fe fa51 	bl	8006b28 <__assert_func>
 8008686:	2301      	movs	r3, #1
 8008688:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800868c:	4610      	mov	r0, r2
 800868e:	b003      	add	sp, #12
 8008690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008694:	bfbc      	itt	lt
 8008696:	464b      	movlt	r3, r9
 8008698:	46a1      	movlt	r9, r4
 800869a:	4630      	mov	r0, r6
 800869c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80086a0:	bfba      	itte	lt
 80086a2:	461c      	movlt	r4, r3
 80086a4:	2501      	movlt	r5, #1
 80086a6:	2500      	movge	r5, #0
 80086a8:	f7ff fcf6 	bl	8008098 <_Balloc>
 80086ac:	4602      	mov	r2, r0
 80086ae:	b918      	cbnz	r0, 80086b8 <__mdiff+0x60>
 80086b0:	4b31      	ldr	r3, [pc, #196]	@ (8008778 <__mdiff+0x120>)
 80086b2:	f240 2145 	movw	r1, #581	@ 0x245
 80086b6:	e7e3      	b.n	8008680 <__mdiff+0x28>
 80086b8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80086bc:	6926      	ldr	r6, [r4, #16]
 80086be:	60c5      	str	r5, [r0, #12]
 80086c0:	f109 0310 	add.w	r3, r9, #16
 80086c4:	f109 0514 	add.w	r5, r9, #20
 80086c8:	f104 0e14 	add.w	lr, r4, #20
 80086cc:	f100 0b14 	add.w	fp, r0, #20
 80086d0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80086d4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80086d8:	9301      	str	r3, [sp, #4]
 80086da:	46d9      	mov	r9, fp
 80086dc:	f04f 0c00 	mov.w	ip, #0
 80086e0:	9b01      	ldr	r3, [sp, #4]
 80086e2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80086e6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80086ea:	9301      	str	r3, [sp, #4]
 80086ec:	fa1f f38a 	uxth.w	r3, sl
 80086f0:	4619      	mov	r1, r3
 80086f2:	b283      	uxth	r3, r0
 80086f4:	1acb      	subs	r3, r1, r3
 80086f6:	0c00      	lsrs	r0, r0, #16
 80086f8:	4463      	add	r3, ip
 80086fa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80086fe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008702:	b29b      	uxth	r3, r3
 8008704:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008708:	4576      	cmp	r6, lr
 800870a:	f849 3b04 	str.w	r3, [r9], #4
 800870e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008712:	d8e5      	bhi.n	80086e0 <__mdiff+0x88>
 8008714:	1b33      	subs	r3, r6, r4
 8008716:	3b15      	subs	r3, #21
 8008718:	f023 0303 	bic.w	r3, r3, #3
 800871c:	3415      	adds	r4, #21
 800871e:	3304      	adds	r3, #4
 8008720:	42a6      	cmp	r6, r4
 8008722:	bf38      	it	cc
 8008724:	2304      	movcc	r3, #4
 8008726:	441d      	add	r5, r3
 8008728:	445b      	add	r3, fp
 800872a:	461e      	mov	r6, r3
 800872c:	462c      	mov	r4, r5
 800872e:	4544      	cmp	r4, r8
 8008730:	d30e      	bcc.n	8008750 <__mdiff+0xf8>
 8008732:	f108 0103 	add.w	r1, r8, #3
 8008736:	1b49      	subs	r1, r1, r5
 8008738:	f021 0103 	bic.w	r1, r1, #3
 800873c:	3d03      	subs	r5, #3
 800873e:	45a8      	cmp	r8, r5
 8008740:	bf38      	it	cc
 8008742:	2100      	movcc	r1, #0
 8008744:	440b      	add	r3, r1
 8008746:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800874a:	b191      	cbz	r1, 8008772 <__mdiff+0x11a>
 800874c:	6117      	str	r7, [r2, #16]
 800874e:	e79d      	b.n	800868c <__mdiff+0x34>
 8008750:	f854 1b04 	ldr.w	r1, [r4], #4
 8008754:	46e6      	mov	lr, ip
 8008756:	0c08      	lsrs	r0, r1, #16
 8008758:	fa1c fc81 	uxtah	ip, ip, r1
 800875c:	4471      	add	r1, lr
 800875e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008762:	b289      	uxth	r1, r1
 8008764:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008768:	f846 1b04 	str.w	r1, [r6], #4
 800876c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008770:	e7dd      	b.n	800872e <__mdiff+0xd6>
 8008772:	3f01      	subs	r7, #1
 8008774:	e7e7      	b.n	8008746 <__mdiff+0xee>
 8008776:	bf00      	nop
 8008778:	0800a7ae 	.word	0x0800a7ae
 800877c:	0800a81f 	.word	0x0800a81f

08008780 <__ulp>:
 8008780:	b082      	sub	sp, #8
 8008782:	ed8d 0b00 	vstr	d0, [sp]
 8008786:	9a01      	ldr	r2, [sp, #4]
 8008788:	4b0f      	ldr	r3, [pc, #60]	@ (80087c8 <__ulp+0x48>)
 800878a:	4013      	ands	r3, r2
 800878c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008790:	2b00      	cmp	r3, #0
 8008792:	dc08      	bgt.n	80087a6 <__ulp+0x26>
 8008794:	425b      	negs	r3, r3
 8008796:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800879a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800879e:	da04      	bge.n	80087aa <__ulp+0x2a>
 80087a0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80087a4:	4113      	asrs	r3, r2
 80087a6:	2200      	movs	r2, #0
 80087a8:	e008      	b.n	80087bc <__ulp+0x3c>
 80087aa:	f1a2 0314 	sub.w	r3, r2, #20
 80087ae:	2b1e      	cmp	r3, #30
 80087b0:	bfda      	itte	le
 80087b2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80087b6:	40da      	lsrle	r2, r3
 80087b8:	2201      	movgt	r2, #1
 80087ba:	2300      	movs	r3, #0
 80087bc:	4619      	mov	r1, r3
 80087be:	4610      	mov	r0, r2
 80087c0:	ec41 0b10 	vmov	d0, r0, r1
 80087c4:	b002      	add	sp, #8
 80087c6:	4770      	bx	lr
 80087c8:	7ff00000 	.word	0x7ff00000

080087cc <__b2d>:
 80087cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087d0:	6906      	ldr	r6, [r0, #16]
 80087d2:	f100 0814 	add.w	r8, r0, #20
 80087d6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80087da:	1f37      	subs	r7, r6, #4
 80087dc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80087e0:	4610      	mov	r0, r2
 80087e2:	f7ff fd4b 	bl	800827c <__hi0bits>
 80087e6:	f1c0 0320 	rsb	r3, r0, #32
 80087ea:	280a      	cmp	r0, #10
 80087ec:	600b      	str	r3, [r1, #0]
 80087ee:	491b      	ldr	r1, [pc, #108]	@ (800885c <__b2d+0x90>)
 80087f0:	dc15      	bgt.n	800881e <__b2d+0x52>
 80087f2:	f1c0 0c0b 	rsb	ip, r0, #11
 80087f6:	fa22 f30c 	lsr.w	r3, r2, ip
 80087fa:	45b8      	cmp	r8, r7
 80087fc:	ea43 0501 	orr.w	r5, r3, r1
 8008800:	bf34      	ite	cc
 8008802:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008806:	2300      	movcs	r3, #0
 8008808:	3015      	adds	r0, #21
 800880a:	fa02 f000 	lsl.w	r0, r2, r0
 800880e:	fa23 f30c 	lsr.w	r3, r3, ip
 8008812:	4303      	orrs	r3, r0
 8008814:	461c      	mov	r4, r3
 8008816:	ec45 4b10 	vmov	d0, r4, r5
 800881a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800881e:	45b8      	cmp	r8, r7
 8008820:	bf3a      	itte	cc
 8008822:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008826:	f1a6 0708 	subcc.w	r7, r6, #8
 800882a:	2300      	movcs	r3, #0
 800882c:	380b      	subs	r0, #11
 800882e:	d012      	beq.n	8008856 <__b2d+0x8a>
 8008830:	f1c0 0120 	rsb	r1, r0, #32
 8008834:	fa23 f401 	lsr.w	r4, r3, r1
 8008838:	4082      	lsls	r2, r0
 800883a:	4322      	orrs	r2, r4
 800883c:	4547      	cmp	r7, r8
 800883e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008842:	bf8c      	ite	hi
 8008844:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008848:	2200      	movls	r2, #0
 800884a:	4083      	lsls	r3, r0
 800884c:	40ca      	lsrs	r2, r1
 800884e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008852:	4313      	orrs	r3, r2
 8008854:	e7de      	b.n	8008814 <__b2d+0x48>
 8008856:	ea42 0501 	orr.w	r5, r2, r1
 800885a:	e7db      	b.n	8008814 <__b2d+0x48>
 800885c:	3ff00000 	.word	0x3ff00000

08008860 <__d2b>:
 8008860:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008864:	460f      	mov	r7, r1
 8008866:	2101      	movs	r1, #1
 8008868:	ec59 8b10 	vmov	r8, r9, d0
 800886c:	4616      	mov	r6, r2
 800886e:	f7ff fc13 	bl	8008098 <_Balloc>
 8008872:	4604      	mov	r4, r0
 8008874:	b930      	cbnz	r0, 8008884 <__d2b+0x24>
 8008876:	4602      	mov	r2, r0
 8008878:	4b23      	ldr	r3, [pc, #140]	@ (8008908 <__d2b+0xa8>)
 800887a:	4824      	ldr	r0, [pc, #144]	@ (800890c <__d2b+0xac>)
 800887c:	f240 310f 	movw	r1, #783	@ 0x30f
 8008880:	f7fe f952 	bl	8006b28 <__assert_func>
 8008884:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008888:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800888c:	b10d      	cbz	r5, 8008892 <__d2b+0x32>
 800888e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008892:	9301      	str	r3, [sp, #4]
 8008894:	f1b8 0300 	subs.w	r3, r8, #0
 8008898:	d023      	beq.n	80088e2 <__d2b+0x82>
 800889a:	4668      	mov	r0, sp
 800889c:	9300      	str	r3, [sp, #0]
 800889e:	f7ff fd0c 	bl	80082ba <__lo0bits>
 80088a2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80088a6:	b1d0      	cbz	r0, 80088de <__d2b+0x7e>
 80088a8:	f1c0 0320 	rsb	r3, r0, #32
 80088ac:	fa02 f303 	lsl.w	r3, r2, r3
 80088b0:	430b      	orrs	r3, r1
 80088b2:	40c2      	lsrs	r2, r0
 80088b4:	6163      	str	r3, [r4, #20]
 80088b6:	9201      	str	r2, [sp, #4]
 80088b8:	9b01      	ldr	r3, [sp, #4]
 80088ba:	61a3      	str	r3, [r4, #24]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	bf0c      	ite	eq
 80088c0:	2201      	moveq	r2, #1
 80088c2:	2202      	movne	r2, #2
 80088c4:	6122      	str	r2, [r4, #16]
 80088c6:	b1a5      	cbz	r5, 80088f2 <__d2b+0x92>
 80088c8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80088cc:	4405      	add	r5, r0
 80088ce:	603d      	str	r5, [r7, #0]
 80088d0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80088d4:	6030      	str	r0, [r6, #0]
 80088d6:	4620      	mov	r0, r4
 80088d8:	b003      	add	sp, #12
 80088da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80088de:	6161      	str	r1, [r4, #20]
 80088e0:	e7ea      	b.n	80088b8 <__d2b+0x58>
 80088e2:	a801      	add	r0, sp, #4
 80088e4:	f7ff fce9 	bl	80082ba <__lo0bits>
 80088e8:	9b01      	ldr	r3, [sp, #4]
 80088ea:	6163      	str	r3, [r4, #20]
 80088ec:	3020      	adds	r0, #32
 80088ee:	2201      	movs	r2, #1
 80088f0:	e7e8      	b.n	80088c4 <__d2b+0x64>
 80088f2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80088f6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80088fa:	6038      	str	r0, [r7, #0]
 80088fc:	6918      	ldr	r0, [r3, #16]
 80088fe:	f7ff fcbd 	bl	800827c <__hi0bits>
 8008902:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008906:	e7e5      	b.n	80088d4 <__d2b+0x74>
 8008908:	0800a7ae 	.word	0x0800a7ae
 800890c:	0800a81f 	.word	0x0800a81f

08008910 <__ratio>:
 8008910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008914:	b085      	sub	sp, #20
 8008916:	e9cd 1000 	strd	r1, r0, [sp]
 800891a:	a902      	add	r1, sp, #8
 800891c:	f7ff ff56 	bl	80087cc <__b2d>
 8008920:	9800      	ldr	r0, [sp, #0]
 8008922:	a903      	add	r1, sp, #12
 8008924:	ec55 4b10 	vmov	r4, r5, d0
 8008928:	f7ff ff50 	bl	80087cc <__b2d>
 800892c:	9b01      	ldr	r3, [sp, #4]
 800892e:	6919      	ldr	r1, [r3, #16]
 8008930:	9b00      	ldr	r3, [sp, #0]
 8008932:	691b      	ldr	r3, [r3, #16]
 8008934:	1ac9      	subs	r1, r1, r3
 8008936:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800893a:	1a9b      	subs	r3, r3, r2
 800893c:	ec5b ab10 	vmov	sl, fp, d0
 8008940:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008944:	2b00      	cmp	r3, #0
 8008946:	bfce      	itee	gt
 8008948:	462a      	movgt	r2, r5
 800894a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800894e:	465a      	movle	r2, fp
 8008950:	462f      	mov	r7, r5
 8008952:	46d9      	mov	r9, fp
 8008954:	bfcc      	ite	gt
 8008956:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800895a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800895e:	464b      	mov	r3, r9
 8008960:	4652      	mov	r2, sl
 8008962:	4620      	mov	r0, r4
 8008964:	4639      	mov	r1, r7
 8008966:	f7f7 ff71 	bl	800084c <__aeabi_ddiv>
 800896a:	ec41 0b10 	vmov	d0, r0, r1
 800896e:	b005      	add	sp, #20
 8008970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008974 <__copybits>:
 8008974:	3901      	subs	r1, #1
 8008976:	b570      	push	{r4, r5, r6, lr}
 8008978:	1149      	asrs	r1, r1, #5
 800897a:	6914      	ldr	r4, [r2, #16]
 800897c:	3101      	adds	r1, #1
 800897e:	f102 0314 	add.w	r3, r2, #20
 8008982:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008986:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800898a:	1f05      	subs	r5, r0, #4
 800898c:	42a3      	cmp	r3, r4
 800898e:	d30c      	bcc.n	80089aa <__copybits+0x36>
 8008990:	1aa3      	subs	r3, r4, r2
 8008992:	3b11      	subs	r3, #17
 8008994:	f023 0303 	bic.w	r3, r3, #3
 8008998:	3211      	adds	r2, #17
 800899a:	42a2      	cmp	r2, r4
 800899c:	bf88      	it	hi
 800899e:	2300      	movhi	r3, #0
 80089a0:	4418      	add	r0, r3
 80089a2:	2300      	movs	r3, #0
 80089a4:	4288      	cmp	r0, r1
 80089a6:	d305      	bcc.n	80089b4 <__copybits+0x40>
 80089a8:	bd70      	pop	{r4, r5, r6, pc}
 80089aa:	f853 6b04 	ldr.w	r6, [r3], #4
 80089ae:	f845 6f04 	str.w	r6, [r5, #4]!
 80089b2:	e7eb      	b.n	800898c <__copybits+0x18>
 80089b4:	f840 3b04 	str.w	r3, [r0], #4
 80089b8:	e7f4      	b.n	80089a4 <__copybits+0x30>

080089ba <__any_on>:
 80089ba:	f100 0214 	add.w	r2, r0, #20
 80089be:	6900      	ldr	r0, [r0, #16]
 80089c0:	114b      	asrs	r3, r1, #5
 80089c2:	4298      	cmp	r0, r3
 80089c4:	b510      	push	{r4, lr}
 80089c6:	db11      	blt.n	80089ec <__any_on+0x32>
 80089c8:	dd0a      	ble.n	80089e0 <__any_on+0x26>
 80089ca:	f011 011f 	ands.w	r1, r1, #31
 80089ce:	d007      	beq.n	80089e0 <__any_on+0x26>
 80089d0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80089d4:	fa24 f001 	lsr.w	r0, r4, r1
 80089d8:	fa00 f101 	lsl.w	r1, r0, r1
 80089dc:	428c      	cmp	r4, r1
 80089de:	d10b      	bne.n	80089f8 <__any_on+0x3e>
 80089e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d803      	bhi.n	80089f0 <__any_on+0x36>
 80089e8:	2000      	movs	r0, #0
 80089ea:	bd10      	pop	{r4, pc}
 80089ec:	4603      	mov	r3, r0
 80089ee:	e7f7      	b.n	80089e0 <__any_on+0x26>
 80089f0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80089f4:	2900      	cmp	r1, #0
 80089f6:	d0f5      	beq.n	80089e4 <__any_on+0x2a>
 80089f8:	2001      	movs	r0, #1
 80089fa:	e7f6      	b.n	80089ea <__any_on+0x30>

080089fc <__ascii_wctomb>:
 80089fc:	4603      	mov	r3, r0
 80089fe:	4608      	mov	r0, r1
 8008a00:	b141      	cbz	r1, 8008a14 <__ascii_wctomb+0x18>
 8008a02:	2aff      	cmp	r2, #255	@ 0xff
 8008a04:	d904      	bls.n	8008a10 <__ascii_wctomb+0x14>
 8008a06:	228a      	movs	r2, #138	@ 0x8a
 8008a08:	601a      	str	r2, [r3, #0]
 8008a0a:	f04f 30ff 	mov.w	r0, #4294967295
 8008a0e:	4770      	bx	lr
 8008a10:	700a      	strb	r2, [r1, #0]
 8008a12:	2001      	movs	r0, #1
 8008a14:	4770      	bx	lr

08008a16 <__ssputs_r>:
 8008a16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a1a:	688e      	ldr	r6, [r1, #8]
 8008a1c:	461f      	mov	r7, r3
 8008a1e:	42be      	cmp	r6, r7
 8008a20:	680b      	ldr	r3, [r1, #0]
 8008a22:	4682      	mov	sl, r0
 8008a24:	460c      	mov	r4, r1
 8008a26:	4690      	mov	r8, r2
 8008a28:	d82d      	bhi.n	8008a86 <__ssputs_r+0x70>
 8008a2a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008a2e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008a32:	d026      	beq.n	8008a82 <__ssputs_r+0x6c>
 8008a34:	6965      	ldr	r5, [r4, #20]
 8008a36:	6909      	ldr	r1, [r1, #16]
 8008a38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008a3c:	eba3 0901 	sub.w	r9, r3, r1
 8008a40:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008a44:	1c7b      	adds	r3, r7, #1
 8008a46:	444b      	add	r3, r9
 8008a48:	106d      	asrs	r5, r5, #1
 8008a4a:	429d      	cmp	r5, r3
 8008a4c:	bf38      	it	cc
 8008a4e:	461d      	movcc	r5, r3
 8008a50:	0553      	lsls	r3, r2, #21
 8008a52:	d527      	bpl.n	8008aa4 <__ssputs_r+0x8e>
 8008a54:	4629      	mov	r1, r5
 8008a56:	f7ff fa81 	bl	8007f5c <_malloc_r>
 8008a5a:	4606      	mov	r6, r0
 8008a5c:	b360      	cbz	r0, 8008ab8 <__ssputs_r+0xa2>
 8008a5e:	6921      	ldr	r1, [r4, #16]
 8008a60:	464a      	mov	r2, r9
 8008a62:	f7fe f848 	bl	8006af6 <memcpy>
 8008a66:	89a3      	ldrh	r3, [r4, #12]
 8008a68:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008a6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a70:	81a3      	strh	r3, [r4, #12]
 8008a72:	6126      	str	r6, [r4, #16]
 8008a74:	6165      	str	r5, [r4, #20]
 8008a76:	444e      	add	r6, r9
 8008a78:	eba5 0509 	sub.w	r5, r5, r9
 8008a7c:	6026      	str	r6, [r4, #0]
 8008a7e:	60a5      	str	r5, [r4, #8]
 8008a80:	463e      	mov	r6, r7
 8008a82:	42be      	cmp	r6, r7
 8008a84:	d900      	bls.n	8008a88 <__ssputs_r+0x72>
 8008a86:	463e      	mov	r6, r7
 8008a88:	6820      	ldr	r0, [r4, #0]
 8008a8a:	4632      	mov	r2, r6
 8008a8c:	4641      	mov	r1, r8
 8008a8e:	f000 f9d7 	bl	8008e40 <memmove>
 8008a92:	68a3      	ldr	r3, [r4, #8]
 8008a94:	1b9b      	subs	r3, r3, r6
 8008a96:	60a3      	str	r3, [r4, #8]
 8008a98:	6823      	ldr	r3, [r4, #0]
 8008a9a:	4433      	add	r3, r6
 8008a9c:	6023      	str	r3, [r4, #0]
 8008a9e:	2000      	movs	r0, #0
 8008aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008aa4:	462a      	mov	r2, r5
 8008aa6:	f000 fa10 	bl	8008eca <_realloc_r>
 8008aaa:	4606      	mov	r6, r0
 8008aac:	2800      	cmp	r0, #0
 8008aae:	d1e0      	bne.n	8008a72 <__ssputs_r+0x5c>
 8008ab0:	6921      	ldr	r1, [r4, #16]
 8008ab2:	4650      	mov	r0, sl
 8008ab4:	f7fe fea4 	bl	8007800 <_free_r>
 8008ab8:	230c      	movs	r3, #12
 8008aba:	f8ca 3000 	str.w	r3, [sl]
 8008abe:	89a3      	ldrh	r3, [r4, #12]
 8008ac0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ac4:	81a3      	strh	r3, [r4, #12]
 8008ac6:	f04f 30ff 	mov.w	r0, #4294967295
 8008aca:	e7e9      	b.n	8008aa0 <__ssputs_r+0x8a>

08008acc <_svfiprintf_r>:
 8008acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ad0:	4698      	mov	r8, r3
 8008ad2:	898b      	ldrh	r3, [r1, #12]
 8008ad4:	061b      	lsls	r3, r3, #24
 8008ad6:	b09d      	sub	sp, #116	@ 0x74
 8008ad8:	4607      	mov	r7, r0
 8008ada:	460d      	mov	r5, r1
 8008adc:	4614      	mov	r4, r2
 8008ade:	d510      	bpl.n	8008b02 <_svfiprintf_r+0x36>
 8008ae0:	690b      	ldr	r3, [r1, #16]
 8008ae2:	b973      	cbnz	r3, 8008b02 <_svfiprintf_r+0x36>
 8008ae4:	2140      	movs	r1, #64	@ 0x40
 8008ae6:	f7ff fa39 	bl	8007f5c <_malloc_r>
 8008aea:	6028      	str	r0, [r5, #0]
 8008aec:	6128      	str	r0, [r5, #16]
 8008aee:	b930      	cbnz	r0, 8008afe <_svfiprintf_r+0x32>
 8008af0:	230c      	movs	r3, #12
 8008af2:	603b      	str	r3, [r7, #0]
 8008af4:	f04f 30ff 	mov.w	r0, #4294967295
 8008af8:	b01d      	add	sp, #116	@ 0x74
 8008afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008afe:	2340      	movs	r3, #64	@ 0x40
 8008b00:	616b      	str	r3, [r5, #20]
 8008b02:	2300      	movs	r3, #0
 8008b04:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b06:	2320      	movs	r3, #32
 8008b08:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008b0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b10:	2330      	movs	r3, #48	@ 0x30
 8008b12:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008cb0 <_svfiprintf_r+0x1e4>
 8008b16:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008b1a:	f04f 0901 	mov.w	r9, #1
 8008b1e:	4623      	mov	r3, r4
 8008b20:	469a      	mov	sl, r3
 8008b22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b26:	b10a      	cbz	r2, 8008b2c <_svfiprintf_r+0x60>
 8008b28:	2a25      	cmp	r2, #37	@ 0x25
 8008b2a:	d1f9      	bne.n	8008b20 <_svfiprintf_r+0x54>
 8008b2c:	ebba 0b04 	subs.w	fp, sl, r4
 8008b30:	d00b      	beq.n	8008b4a <_svfiprintf_r+0x7e>
 8008b32:	465b      	mov	r3, fp
 8008b34:	4622      	mov	r2, r4
 8008b36:	4629      	mov	r1, r5
 8008b38:	4638      	mov	r0, r7
 8008b3a:	f7ff ff6c 	bl	8008a16 <__ssputs_r>
 8008b3e:	3001      	adds	r0, #1
 8008b40:	f000 80a7 	beq.w	8008c92 <_svfiprintf_r+0x1c6>
 8008b44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b46:	445a      	add	r2, fp
 8008b48:	9209      	str	r2, [sp, #36]	@ 0x24
 8008b4a:	f89a 3000 	ldrb.w	r3, [sl]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	f000 809f 	beq.w	8008c92 <_svfiprintf_r+0x1c6>
 8008b54:	2300      	movs	r3, #0
 8008b56:	f04f 32ff 	mov.w	r2, #4294967295
 8008b5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b5e:	f10a 0a01 	add.w	sl, sl, #1
 8008b62:	9304      	str	r3, [sp, #16]
 8008b64:	9307      	str	r3, [sp, #28]
 8008b66:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008b6a:	931a      	str	r3, [sp, #104]	@ 0x68
 8008b6c:	4654      	mov	r4, sl
 8008b6e:	2205      	movs	r2, #5
 8008b70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b74:	484e      	ldr	r0, [pc, #312]	@ (8008cb0 <_svfiprintf_r+0x1e4>)
 8008b76:	f7f7 fb2b 	bl	80001d0 <memchr>
 8008b7a:	9a04      	ldr	r2, [sp, #16]
 8008b7c:	b9d8      	cbnz	r0, 8008bb6 <_svfiprintf_r+0xea>
 8008b7e:	06d0      	lsls	r0, r2, #27
 8008b80:	bf44      	itt	mi
 8008b82:	2320      	movmi	r3, #32
 8008b84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b88:	0711      	lsls	r1, r2, #28
 8008b8a:	bf44      	itt	mi
 8008b8c:	232b      	movmi	r3, #43	@ 0x2b
 8008b8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b92:	f89a 3000 	ldrb.w	r3, [sl]
 8008b96:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b98:	d015      	beq.n	8008bc6 <_svfiprintf_r+0xfa>
 8008b9a:	9a07      	ldr	r2, [sp, #28]
 8008b9c:	4654      	mov	r4, sl
 8008b9e:	2000      	movs	r0, #0
 8008ba0:	f04f 0c0a 	mov.w	ip, #10
 8008ba4:	4621      	mov	r1, r4
 8008ba6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008baa:	3b30      	subs	r3, #48	@ 0x30
 8008bac:	2b09      	cmp	r3, #9
 8008bae:	d94b      	bls.n	8008c48 <_svfiprintf_r+0x17c>
 8008bb0:	b1b0      	cbz	r0, 8008be0 <_svfiprintf_r+0x114>
 8008bb2:	9207      	str	r2, [sp, #28]
 8008bb4:	e014      	b.n	8008be0 <_svfiprintf_r+0x114>
 8008bb6:	eba0 0308 	sub.w	r3, r0, r8
 8008bba:	fa09 f303 	lsl.w	r3, r9, r3
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	9304      	str	r3, [sp, #16]
 8008bc2:	46a2      	mov	sl, r4
 8008bc4:	e7d2      	b.n	8008b6c <_svfiprintf_r+0xa0>
 8008bc6:	9b03      	ldr	r3, [sp, #12]
 8008bc8:	1d19      	adds	r1, r3, #4
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	9103      	str	r1, [sp, #12]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	bfbb      	ittet	lt
 8008bd2:	425b      	neglt	r3, r3
 8008bd4:	f042 0202 	orrlt.w	r2, r2, #2
 8008bd8:	9307      	strge	r3, [sp, #28]
 8008bda:	9307      	strlt	r3, [sp, #28]
 8008bdc:	bfb8      	it	lt
 8008bde:	9204      	strlt	r2, [sp, #16]
 8008be0:	7823      	ldrb	r3, [r4, #0]
 8008be2:	2b2e      	cmp	r3, #46	@ 0x2e
 8008be4:	d10a      	bne.n	8008bfc <_svfiprintf_r+0x130>
 8008be6:	7863      	ldrb	r3, [r4, #1]
 8008be8:	2b2a      	cmp	r3, #42	@ 0x2a
 8008bea:	d132      	bne.n	8008c52 <_svfiprintf_r+0x186>
 8008bec:	9b03      	ldr	r3, [sp, #12]
 8008bee:	1d1a      	adds	r2, r3, #4
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	9203      	str	r2, [sp, #12]
 8008bf4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008bf8:	3402      	adds	r4, #2
 8008bfa:	9305      	str	r3, [sp, #20]
 8008bfc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008cc0 <_svfiprintf_r+0x1f4>
 8008c00:	7821      	ldrb	r1, [r4, #0]
 8008c02:	2203      	movs	r2, #3
 8008c04:	4650      	mov	r0, sl
 8008c06:	f7f7 fae3 	bl	80001d0 <memchr>
 8008c0a:	b138      	cbz	r0, 8008c1c <_svfiprintf_r+0x150>
 8008c0c:	9b04      	ldr	r3, [sp, #16]
 8008c0e:	eba0 000a 	sub.w	r0, r0, sl
 8008c12:	2240      	movs	r2, #64	@ 0x40
 8008c14:	4082      	lsls	r2, r0
 8008c16:	4313      	orrs	r3, r2
 8008c18:	3401      	adds	r4, #1
 8008c1a:	9304      	str	r3, [sp, #16]
 8008c1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c20:	4824      	ldr	r0, [pc, #144]	@ (8008cb4 <_svfiprintf_r+0x1e8>)
 8008c22:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008c26:	2206      	movs	r2, #6
 8008c28:	f7f7 fad2 	bl	80001d0 <memchr>
 8008c2c:	2800      	cmp	r0, #0
 8008c2e:	d036      	beq.n	8008c9e <_svfiprintf_r+0x1d2>
 8008c30:	4b21      	ldr	r3, [pc, #132]	@ (8008cb8 <_svfiprintf_r+0x1ec>)
 8008c32:	bb1b      	cbnz	r3, 8008c7c <_svfiprintf_r+0x1b0>
 8008c34:	9b03      	ldr	r3, [sp, #12]
 8008c36:	3307      	adds	r3, #7
 8008c38:	f023 0307 	bic.w	r3, r3, #7
 8008c3c:	3308      	adds	r3, #8
 8008c3e:	9303      	str	r3, [sp, #12]
 8008c40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c42:	4433      	add	r3, r6
 8008c44:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c46:	e76a      	b.n	8008b1e <_svfiprintf_r+0x52>
 8008c48:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c4c:	460c      	mov	r4, r1
 8008c4e:	2001      	movs	r0, #1
 8008c50:	e7a8      	b.n	8008ba4 <_svfiprintf_r+0xd8>
 8008c52:	2300      	movs	r3, #0
 8008c54:	3401      	adds	r4, #1
 8008c56:	9305      	str	r3, [sp, #20]
 8008c58:	4619      	mov	r1, r3
 8008c5a:	f04f 0c0a 	mov.w	ip, #10
 8008c5e:	4620      	mov	r0, r4
 8008c60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c64:	3a30      	subs	r2, #48	@ 0x30
 8008c66:	2a09      	cmp	r2, #9
 8008c68:	d903      	bls.n	8008c72 <_svfiprintf_r+0x1a6>
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d0c6      	beq.n	8008bfc <_svfiprintf_r+0x130>
 8008c6e:	9105      	str	r1, [sp, #20]
 8008c70:	e7c4      	b.n	8008bfc <_svfiprintf_r+0x130>
 8008c72:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c76:	4604      	mov	r4, r0
 8008c78:	2301      	movs	r3, #1
 8008c7a:	e7f0      	b.n	8008c5e <_svfiprintf_r+0x192>
 8008c7c:	ab03      	add	r3, sp, #12
 8008c7e:	9300      	str	r3, [sp, #0]
 8008c80:	462a      	mov	r2, r5
 8008c82:	4b0e      	ldr	r3, [pc, #56]	@ (8008cbc <_svfiprintf_r+0x1f0>)
 8008c84:	a904      	add	r1, sp, #16
 8008c86:	4638      	mov	r0, r7
 8008c88:	f7fd f96a 	bl	8005f60 <_printf_float>
 8008c8c:	1c42      	adds	r2, r0, #1
 8008c8e:	4606      	mov	r6, r0
 8008c90:	d1d6      	bne.n	8008c40 <_svfiprintf_r+0x174>
 8008c92:	89ab      	ldrh	r3, [r5, #12]
 8008c94:	065b      	lsls	r3, r3, #25
 8008c96:	f53f af2d 	bmi.w	8008af4 <_svfiprintf_r+0x28>
 8008c9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008c9c:	e72c      	b.n	8008af8 <_svfiprintf_r+0x2c>
 8008c9e:	ab03      	add	r3, sp, #12
 8008ca0:	9300      	str	r3, [sp, #0]
 8008ca2:	462a      	mov	r2, r5
 8008ca4:	4b05      	ldr	r3, [pc, #20]	@ (8008cbc <_svfiprintf_r+0x1f0>)
 8008ca6:	a904      	add	r1, sp, #16
 8008ca8:	4638      	mov	r0, r7
 8008caa:	f7fd fbf1 	bl	8006490 <_printf_i>
 8008cae:	e7ed      	b.n	8008c8c <_svfiprintf_r+0x1c0>
 8008cb0:	0800aa79 	.word	0x0800aa79
 8008cb4:	0800aa83 	.word	0x0800aa83
 8008cb8:	08005f61 	.word	0x08005f61
 8008cbc:	08008a17 	.word	0x08008a17
 8008cc0:	0800aa7f 	.word	0x0800aa7f

08008cc4 <__sflush_r>:
 8008cc4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ccc:	0716      	lsls	r6, r2, #28
 8008cce:	4605      	mov	r5, r0
 8008cd0:	460c      	mov	r4, r1
 8008cd2:	d454      	bmi.n	8008d7e <__sflush_r+0xba>
 8008cd4:	684b      	ldr	r3, [r1, #4]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	dc02      	bgt.n	8008ce0 <__sflush_r+0x1c>
 8008cda:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	dd48      	ble.n	8008d72 <__sflush_r+0xae>
 8008ce0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008ce2:	2e00      	cmp	r6, #0
 8008ce4:	d045      	beq.n	8008d72 <__sflush_r+0xae>
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008cec:	682f      	ldr	r7, [r5, #0]
 8008cee:	6a21      	ldr	r1, [r4, #32]
 8008cf0:	602b      	str	r3, [r5, #0]
 8008cf2:	d030      	beq.n	8008d56 <__sflush_r+0x92>
 8008cf4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008cf6:	89a3      	ldrh	r3, [r4, #12]
 8008cf8:	0759      	lsls	r1, r3, #29
 8008cfa:	d505      	bpl.n	8008d08 <__sflush_r+0x44>
 8008cfc:	6863      	ldr	r3, [r4, #4]
 8008cfe:	1ad2      	subs	r2, r2, r3
 8008d00:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008d02:	b10b      	cbz	r3, 8008d08 <__sflush_r+0x44>
 8008d04:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008d06:	1ad2      	subs	r2, r2, r3
 8008d08:	2300      	movs	r3, #0
 8008d0a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008d0c:	6a21      	ldr	r1, [r4, #32]
 8008d0e:	4628      	mov	r0, r5
 8008d10:	47b0      	blx	r6
 8008d12:	1c43      	adds	r3, r0, #1
 8008d14:	89a3      	ldrh	r3, [r4, #12]
 8008d16:	d106      	bne.n	8008d26 <__sflush_r+0x62>
 8008d18:	6829      	ldr	r1, [r5, #0]
 8008d1a:	291d      	cmp	r1, #29
 8008d1c:	d82b      	bhi.n	8008d76 <__sflush_r+0xb2>
 8008d1e:	4a2a      	ldr	r2, [pc, #168]	@ (8008dc8 <__sflush_r+0x104>)
 8008d20:	410a      	asrs	r2, r1
 8008d22:	07d6      	lsls	r6, r2, #31
 8008d24:	d427      	bmi.n	8008d76 <__sflush_r+0xb2>
 8008d26:	2200      	movs	r2, #0
 8008d28:	6062      	str	r2, [r4, #4]
 8008d2a:	04d9      	lsls	r1, r3, #19
 8008d2c:	6922      	ldr	r2, [r4, #16]
 8008d2e:	6022      	str	r2, [r4, #0]
 8008d30:	d504      	bpl.n	8008d3c <__sflush_r+0x78>
 8008d32:	1c42      	adds	r2, r0, #1
 8008d34:	d101      	bne.n	8008d3a <__sflush_r+0x76>
 8008d36:	682b      	ldr	r3, [r5, #0]
 8008d38:	b903      	cbnz	r3, 8008d3c <__sflush_r+0x78>
 8008d3a:	6560      	str	r0, [r4, #84]	@ 0x54
 8008d3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008d3e:	602f      	str	r7, [r5, #0]
 8008d40:	b1b9      	cbz	r1, 8008d72 <__sflush_r+0xae>
 8008d42:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008d46:	4299      	cmp	r1, r3
 8008d48:	d002      	beq.n	8008d50 <__sflush_r+0x8c>
 8008d4a:	4628      	mov	r0, r5
 8008d4c:	f7fe fd58 	bl	8007800 <_free_r>
 8008d50:	2300      	movs	r3, #0
 8008d52:	6363      	str	r3, [r4, #52]	@ 0x34
 8008d54:	e00d      	b.n	8008d72 <__sflush_r+0xae>
 8008d56:	2301      	movs	r3, #1
 8008d58:	4628      	mov	r0, r5
 8008d5a:	47b0      	blx	r6
 8008d5c:	4602      	mov	r2, r0
 8008d5e:	1c50      	adds	r0, r2, #1
 8008d60:	d1c9      	bne.n	8008cf6 <__sflush_r+0x32>
 8008d62:	682b      	ldr	r3, [r5, #0]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d0c6      	beq.n	8008cf6 <__sflush_r+0x32>
 8008d68:	2b1d      	cmp	r3, #29
 8008d6a:	d001      	beq.n	8008d70 <__sflush_r+0xac>
 8008d6c:	2b16      	cmp	r3, #22
 8008d6e:	d11e      	bne.n	8008dae <__sflush_r+0xea>
 8008d70:	602f      	str	r7, [r5, #0]
 8008d72:	2000      	movs	r0, #0
 8008d74:	e022      	b.n	8008dbc <__sflush_r+0xf8>
 8008d76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d7a:	b21b      	sxth	r3, r3
 8008d7c:	e01b      	b.n	8008db6 <__sflush_r+0xf2>
 8008d7e:	690f      	ldr	r7, [r1, #16]
 8008d80:	2f00      	cmp	r7, #0
 8008d82:	d0f6      	beq.n	8008d72 <__sflush_r+0xae>
 8008d84:	0793      	lsls	r3, r2, #30
 8008d86:	680e      	ldr	r6, [r1, #0]
 8008d88:	bf08      	it	eq
 8008d8a:	694b      	ldreq	r3, [r1, #20]
 8008d8c:	600f      	str	r7, [r1, #0]
 8008d8e:	bf18      	it	ne
 8008d90:	2300      	movne	r3, #0
 8008d92:	eba6 0807 	sub.w	r8, r6, r7
 8008d96:	608b      	str	r3, [r1, #8]
 8008d98:	f1b8 0f00 	cmp.w	r8, #0
 8008d9c:	dde9      	ble.n	8008d72 <__sflush_r+0xae>
 8008d9e:	6a21      	ldr	r1, [r4, #32]
 8008da0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008da2:	4643      	mov	r3, r8
 8008da4:	463a      	mov	r2, r7
 8008da6:	4628      	mov	r0, r5
 8008da8:	47b0      	blx	r6
 8008daa:	2800      	cmp	r0, #0
 8008dac:	dc08      	bgt.n	8008dc0 <__sflush_r+0xfc>
 8008dae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008db2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008db6:	81a3      	strh	r3, [r4, #12]
 8008db8:	f04f 30ff 	mov.w	r0, #4294967295
 8008dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dc0:	4407      	add	r7, r0
 8008dc2:	eba8 0800 	sub.w	r8, r8, r0
 8008dc6:	e7e7      	b.n	8008d98 <__sflush_r+0xd4>
 8008dc8:	dfbffffe 	.word	0xdfbffffe

08008dcc <_fflush_r>:
 8008dcc:	b538      	push	{r3, r4, r5, lr}
 8008dce:	690b      	ldr	r3, [r1, #16]
 8008dd0:	4605      	mov	r5, r0
 8008dd2:	460c      	mov	r4, r1
 8008dd4:	b913      	cbnz	r3, 8008ddc <_fflush_r+0x10>
 8008dd6:	2500      	movs	r5, #0
 8008dd8:	4628      	mov	r0, r5
 8008dda:	bd38      	pop	{r3, r4, r5, pc}
 8008ddc:	b118      	cbz	r0, 8008de6 <_fflush_r+0x1a>
 8008dde:	6a03      	ldr	r3, [r0, #32]
 8008de0:	b90b      	cbnz	r3, 8008de6 <_fflush_r+0x1a>
 8008de2:	f7fd fd01 	bl	80067e8 <__sinit>
 8008de6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d0f3      	beq.n	8008dd6 <_fflush_r+0xa>
 8008dee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008df0:	07d0      	lsls	r0, r2, #31
 8008df2:	d404      	bmi.n	8008dfe <_fflush_r+0x32>
 8008df4:	0599      	lsls	r1, r3, #22
 8008df6:	d402      	bmi.n	8008dfe <_fflush_r+0x32>
 8008df8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008dfa:	f7fd fe7a 	bl	8006af2 <__retarget_lock_acquire_recursive>
 8008dfe:	4628      	mov	r0, r5
 8008e00:	4621      	mov	r1, r4
 8008e02:	f7ff ff5f 	bl	8008cc4 <__sflush_r>
 8008e06:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008e08:	07da      	lsls	r2, r3, #31
 8008e0a:	4605      	mov	r5, r0
 8008e0c:	d4e4      	bmi.n	8008dd8 <_fflush_r+0xc>
 8008e0e:	89a3      	ldrh	r3, [r4, #12]
 8008e10:	059b      	lsls	r3, r3, #22
 8008e12:	d4e1      	bmi.n	8008dd8 <_fflush_r+0xc>
 8008e14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008e16:	f7fd fe6d 	bl	8006af4 <__retarget_lock_release_recursive>
 8008e1a:	e7dd      	b.n	8008dd8 <_fflush_r+0xc>

08008e1c <fiprintf>:
 8008e1c:	b40e      	push	{r1, r2, r3}
 8008e1e:	b503      	push	{r0, r1, lr}
 8008e20:	4601      	mov	r1, r0
 8008e22:	ab03      	add	r3, sp, #12
 8008e24:	4805      	ldr	r0, [pc, #20]	@ (8008e3c <fiprintf+0x20>)
 8008e26:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e2a:	6800      	ldr	r0, [r0, #0]
 8008e2c:	9301      	str	r3, [sp, #4]
 8008e2e:	f000 f8a3 	bl	8008f78 <_vfiprintf_r>
 8008e32:	b002      	add	sp, #8
 8008e34:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e38:	b003      	add	sp, #12
 8008e3a:	4770      	bx	lr
 8008e3c:	20000184 	.word	0x20000184

08008e40 <memmove>:
 8008e40:	4288      	cmp	r0, r1
 8008e42:	b510      	push	{r4, lr}
 8008e44:	eb01 0402 	add.w	r4, r1, r2
 8008e48:	d902      	bls.n	8008e50 <memmove+0x10>
 8008e4a:	4284      	cmp	r4, r0
 8008e4c:	4623      	mov	r3, r4
 8008e4e:	d807      	bhi.n	8008e60 <memmove+0x20>
 8008e50:	1e43      	subs	r3, r0, #1
 8008e52:	42a1      	cmp	r1, r4
 8008e54:	d008      	beq.n	8008e68 <memmove+0x28>
 8008e56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008e5e:	e7f8      	b.n	8008e52 <memmove+0x12>
 8008e60:	4402      	add	r2, r0
 8008e62:	4601      	mov	r1, r0
 8008e64:	428a      	cmp	r2, r1
 8008e66:	d100      	bne.n	8008e6a <memmove+0x2a>
 8008e68:	bd10      	pop	{r4, pc}
 8008e6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008e6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008e72:	e7f7      	b.n	8008e64 <memmove+0x24>

08008e74 <_sbrk_r>:
 8008e74:	b538      	push	{r3, r4, r5, lr}
 8008e76:	4d06      	ldr	r5, [pc, #24]	@ (8008e90 <_sbrk_r+0x1c>)
 8008e78:	2300      	movs	r3, #0
 8008e7a:	4604      	mov	r4, r0
 8008e7c:	4608      	mov	r0, r1
 8008e7e:	602b      	str	r3, [r5, #0]
 8008e80:	f7f8 fd68 	bl	8001954 <_sbrk>
 8008e84:	1c43      	adds	r3, r0, #1
 8008e86:	d102      	bne.n	8008e8e <_sbrk_r+0x1a>
 8008e88:	682b      	ldr	r3, [r5, #0]
 8008e8a:	b103      	cbz	r3, 8008e8e <_sbrk_r+0x1a>
 8008e8c:	6023      	str	r3, [r4, #0]
 8008e8e:	bd38      	pop	{r3, r4, r5, pc}
 8008e90:	200006ac 	.word	0x200006ac

08008e94 <abort>:
 8008e94:	b508      	push	{r3, lr}
 8008e96:	2006      	movs	r0, #6
 8008e98:	f000 fa42 	bl	8009320 <raise>
 8008e9c:	2001      	movs	r0, #1
 8008e9e:	f7f8 fce1 	bl	8001864 <_exit>

08008ea2 <_calloc_r>:
 8008ea2:	b570      	push	{r4, r5, r6, lr}
 8008ea4:	fba1 5402 	umull	r5, r4, r1, r2
 8008ea8:	b93c      	cbnz	r4, 8008eba <_calloc_r+0x18>
 8008eaa:	4629      	mov	r1, r5
 8008eac:	f7ff f856 	bl	8007f5c <_malloc_r>
 8008eb0:	4606      	mov	r6, r0
 8008eb2:	b928      	cbnz	r0, 8008ec0 <_calloc_r+0x1e>
 8008eb4:	2600      	movs	r6, #0
 8008eb6:	4630      	mov	r0, r6
 8008eb8:	bd70      	pop	{r4, r5, r6, pc}
 8008eba:	220c      	movs	r2, #12
 8008ebc:	6002      	str	r2, [r0, #0]
 8008ebe:	e7f9      	b.n	8008eb4 <_calloc_r+0x12>
 8008ec0:	462a      	mov	r2, r5
 8008ec2:	4621      	mov	r1, r4
 8008ec4:	f7fd fd29 	bl	800691a <memset>
 8008ec8:	e7f5      	b.n	8008eb6 <_calloc_r+0x14>

08008eca <_realloc_r>:
 8008eca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ece:	4680      	mov	r8, r0
 8008ed0:	4615      	mov	r5, r2
 8008ed2:	460c      	mov	r4, r1
 8008ed4:	b921      	cbnz	r1, 8008ee0 <_realloc_r+0x16>
 8008ed6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008eda:	4611      	mov	r1, r2
 8008edc:	f7ff b83e 	b.w	8007f5c <_malloc_r>
 8008ee0:	b92a      	cbnz	r2, 8008eee <_realloc_r+0x24>
 8008ee2:	f7fe fc8d 	bl	8007800 <_free_r>
 8008ee6:	2400      	movs	r4, #0
 8008ee8:	4620      	mov	r0, r4
 8008eea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008eee:	f000 fa33 	bl	8009358 <_malloc_usable_size_r>
 8008ef2:	4285      	cmp	r5, r0
 8008ef4:	4606      	mov	r6, r0
 8008ef6:	d802      	bhi.n	8008efe <_realloc_r+0x34>
 8008ef8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008efc:	d8f4      	bhi.n	8008ee8 <_realloc_r+0x1e>
 8008efe:	4629      	mov	r1, r5
 8008f00:	4640      	mov	r0, r8
 8008f02:	f7ff f82b 	bl	8007f5c <_malloc_r>
 8008f06:	4607      	mov	r7, r0
 8008f08:	2800      	cmp	r0, #0
 8008f0a:	d0ec      	beq.n	8008ee6 <_realloc_r+0x1c>
 8008f0c:	42b5      	cmp	r5, r6
 8008f0e:	462a      	mov	r2, r5
 8008f10:	4621      	mov	r1, r4
 8008f12:	bf28      	it	cs
 8008f14:	4632      	movcs	r2, r6
 8008f16:	f7fd fdee 	bl	8006af6 <memcpy>
 8008f1a:	4621      	mov	r1, r4
 8008f1c:	4640      	mov	r0, r8
 8008f1e:	f7fe fc6f 	bl	8007800 <_free_r>
 8008f22:	463c      	mov	r4, r7
 8008f24:	e7e0      	b.n	8008ee8 <_realloc_r+0x1e>

08008f26 <__sfputc_r>:
 8008f26:	6893      	ldr	r3, [r2, #8]
 8008f28:	3b01      	subs	r3, #1
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	b410      	push	{r4}
 8008f2e:	6093      	str	r3, [r2, #8]
 8008f30:	da08      	bge.n	8008f44 <__sfputc_r+0x1e>
 8008f32:	6994      	ldr	r4, [r2, #24]
 8008f34:	42a3      	cmp	r3, r4
 8008f36:	db01      	blt.n	8008f3c <__sfputc_r+0x16>
 8008f38:	290a      	cmp	r1, #10
 8008f3a:	d103      	bne.n	8008f44 <__sfputc_r+0x1e>
 8008f3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f40:	f000 b932 	b.w	80091a8 <__swbuf_r>
 8008f44:	6813      	ldr	r3, [r2, #0]
 8008f46:	1c58      	adds	r0, r3, #1
 8008f48:	6010      	str	r0, [r2, #0]
 8008f4a:	7019      	strb	r1, [r3, #0]
 8008f4c:	4608      	mov	r0, r1
 8008f4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f52:	4770      	bx	lr

08008f54 <__sfputs_r>:
 8008f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f56:	4606      	mov	r6, r0
 8008f58:	460f      	mov	r7, r1
 8008f5a:	4614      	mov	r4, r2
 8008f5c:	18d5      	adds	r5, r2, r3
 8008f5e:	42ac      	cmp	r4, r5
 8008f60:	d101      	bne.n	8008f66 <__sfputs_r+0x12>
 8008f62:	2000      	movs	r0, #0
 8008f64:	e007      	b.n	8008f76 <__sfputs_r+0x22>
 8008f66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f6a:	463a      	mov	r2, r7
 8008f6c:	4630      	mov	r0, r6
 8008f6e:	f7ff ffda 	bl	8008f26 <__sfputc_r>
 8008f72:	1c43      	adds	r3, r0, #1
 8008f74:	d1f3      	bne.n	8008f5e <__sfputs_r+0xa>
 8008f76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008f78 <_vfiprintf_r>:
 8008f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f7c:	460d      	mov	r5, r1
 8008f7e:	b09d      	sub	sp, #116	@ 0x74
 8008f80:	4614      	mov	r4, r2
 8008f82:	4698      	mov	r8, r3
 8008f84:	4606      	mov	r6, r0
 8008f86:	b118      	cbz	r0, 8008f90 <_vfiprintf_r+0x18>
 8008f88:	6a03      	ldr	r3, [r0, #32]
 8008f8a:	b90b      	cbnz	r3, 8008f90 <_vfiprintf_r+0x18>
 8008f8c:	f7fd fc2c 	bl	80067e8 <__sinit>
 8008f90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008f92:	07d9      	lsls	r1, r3, #31
 8008f94:	d405      	bmi.n	8008fa2 <_vfiprintf_r+0x2a>
 8008f96:	89ab      	ldrh	r3, [r5, #12]
 8008f98:	059a      	lsls	r2, r3, #22
 8008f9a:	d402      	bmi.n	8008fa2 <_vfiprintf_r+0x2a>
 8008f9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008f9e:	f7fd fda8 	bl	8006af2 <__retarget_lock_acquire_recursive>
 8008fa2:	89ab      	ldrh	r3, [r5, #12]
 8008fa4:	071b      	lsls	r3, r3, #28
 8008fa6:	d501      	bpl.n	8008fac <_vfiprintf_r+0x34>
 8008fa8:	692b      	ldr	r3, [r5, #16]
 8008faa:	b99b      	cbnz	r3, 8008fd4 <_vfiprintf_r+0x5c>
 8008fac:	4629      	mov	r1, r5
 8008fae:	4630      	mov	r0, r6
 8008fb0:	f000 f938 	bl	8009224 <__swsetup_r>
 8008fb4:	b170      	cbz	r0, 8008fd4 <_vfiprintf_r+0x5c>
 8008fb6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008fb8:	07dc      	lsls	r4, r3, #31
 8008fba:	d504      	bpl.n	8008fc6 <_vfiprintf_r+0x4e>
 8008fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8008fc0:	b01d      	add	sp, #116	@ 0x74
 8008fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fc6:	89ab      	ldrh	r3, [r5, #12]
 8008fc8:	0598      	lsls	r0, r3, #22
 8008fca:	d4f7      	bmi.n	8008fbc <_vfiprintf_r+0x44>
 8008fcc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008fce:	f7fd fd91 	bl	8006af4 <__retarget_lock_release_recursive>
 8008fd2:	e7f3      	b.n	8008fbc <_vfiprintf_r+0x44>
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fd8:	2320      	movs	r3, #32
 8008fda:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008fde:	f8cd 800c 	str.w	r8, [sp, #12]
 8008fe2:	2330      	movs	r3, #48	@ 0x30
 8008fe4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009194 <_vfiprintf_r+0x21c>
 8008fe8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008fec:	f04f 0901 	mov.w	r9, #1
 8008ff0:	4623      	mov	r3, r4
 8008ff2:	469a      	mov	sl, r3
 8008ff4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ff8:	b10a      	cbz	r2, 8008ffe <_vfiprintf_r+0x86>
 8008ffa:	2a25      	cmp	r2, #37	@ 0x25
 8008ffc:	d1f9      	bne.n	8008ff2 <_vfiprintf_r+0x7a>
 8008ffe:	ebba 0b04 	subs.w	fp, sl, r4
 8009002:	d00b      	beq.n	800901c <_vfiprintf_r+0xa4>
 8009004:	465b      	mov	r3, fp
 8009006:	4622      	mov	r2, r4
 8009008:	4629      	mov	r1, r5
 800900a:	4630      	mov	r0, r6
 800900c:	f7ff ffa2 	bl	8008f54 <__sfputs_r>
 8009010:	3001      	adds	r0, #1
 8009012:	f000 80a7 	beq.w	8009164 <_vfiprintf_r+0x1ec>
 8009016:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009018:	445a      	add	r2, fp
 800901a:	9209      	str	r2, [sp, #36]	@ 0x24
 800901c:	f89a 3000 	ldrb.w	r3, [sl]
 8009020:	2b00      	cmp	r3, #0
 8009022:	f000 809f 	beq.w	8009164 <_vfiprintf_r+0x1ec>
 8009026:	2300      	movs	r3, #0
 8009028:	f04f 32ff 	mov.w	r2, #4294967295
 800902c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009030:	f10a 0a01 	add.w	sl, sl, #1
 8009034:	9304      	str	r3, [sp, #16]
 8009036:	9307      	str	r3, [sp, #28]
 8009038:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800903c:	931a      	str	r3, [sp, #104]	@ 0x68
 800903e:	4654      	mov	r4, sl
 8009040:	2205      	movs	r2, #5
 8009042:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009046:	4853      	ldr	r0, [pc, #332]	@ (8009194 <_vfiprintf_r+0x21c>)
 8009048:	f7f7 f8c2 	bl	80001d0 <memchr>
 800904c:	9a04      	ldr	r2, [sp, #16]
 800904e:	b9d8      	cbnz	r0, 8009088 <_vfiprintf_r+0x110>
 8009050:	06d1      	lsls	r1, r2, #27
 8009052:	bf44      	itt	mi
 8009054:	2320      	movmi	r3, #32
 8009056:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800905a:	0713      	lsls	r3, r2, #28
 800905c:	bf44      	itt	mi
 800905e:	232b      	movmi	r3, #43	@ 0x2b
 8009060:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009064:	f89a 3000 	ldrb.w	r3, [sl]
 8009068:	2b2a      	cmp	r3, #42	@ 0x2a
 800906a:	d015      	beq.n	8009098 <_vfiprintf_r+0x120>
 800906c:	9a07      	ldr	r2, [sp, #28]
 800906e:	4654      	mov	r4, sl
 8009070:	2000      	movs	r0, #0
 8009072:	f04f 0c0a 	mov.w	ip, #10
 8009076:	4621      	mov	r1, r4
 8009078:	f811 3b01 	ldrb.w	r3, [r1], #1
 800907c:	3b30      	subs	r3, #48	@ 0x30
 800907e:	2b09      	cmp	r3, #9
 8009080:	d94b      	bls.n	800911a <_vfiprintf_r+0x1a2>
 8009082:	b1b0      	cbz	r0, 80090b2 <_vfiprintf_r+0x13a>
 8009084:	9207      	str	r2, [sp, #28]
 8009086:	e014      	b.n	80090b2 <_vfiprintf_r+0x13a>
 8009088:	eba0 0308 	sub.w	r3, r0, r8
 800908c:	fa09 f303 	lsl.w	r3, r9, r3
 8009090:	4313      	orrs	r3, r2
 8009092:	9304      	str	r3, [sp, #16]
 8009094:	46a2      	mov	sl, r4
 8009096:	e7d2      	b.n	800903e <_vfiprintf_r+0xc6>
 8009098:	9b03      	ldr	r3, [sp, #12]
 800909a:	1d19      	adds	r1, r3, #4
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	9103      	str	r1, [sp, #12]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	bfbb      	ittet	lt
 80090a4:	425b      	neglt	r3, r3
 80090a6:	f042 0202 	orrlt.w	r2, r2, #2
 80090aa:	9307      	strge	r3, [sp, #28]
 80090ac:	9307      	strlt	r3, [sp, #28]
 80090ae:	bfb8      	it	lt
 80090b0:	9204      	strlt	r2, [sp, #16]
 80090b2:	7823      	ldrb	r3, [r4, #0]
 80090b4:	2b2e      	cmp	r3, #46	@ 0x2e
 80090b6:	d10a      	bne.n	80090ce <_vfiprintf_r+0x156>
 80090b8:	7863      	ldrb	r3, [r4, #1]
 80090ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80090bc:	d132      	bne.n	8009124 <_vfiprintf_r+0x1ac>
 80090be:	9b03      	ldr	r3, [sp, #12]
 80090c0:	1d1a      	adds	r2, r3, #4
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	9203      	str	r2, [sp, #12]
 80090c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80090ca:	3402      	adds	r4, #2
 80090cc:	9305      	str	r3, [sp, #20]
 80090ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80091a4 <_vfiprintf_r+0x22c>
 80090d2:	7821      	ldrb	r1, [r4, #0]
 80090d4:	2203      	movs	r2, #3
 80090d6:	4650      	mov	r0, sl
 80090d8:	f7f7 f87a 	bl	80001d0 <memchr>
 80090dc:	b138      	cbz	r0, 80090ee <_vfiprintf_r+0x176>
 80090de:	9b04      	ldr	r3, [sp, #16]
 80090e0:	eba0 000a 	sub.w	r0, r0, sl
 80090e4:	2240      	movs	r2, #64	@ 0x40
 80090e6:	4082      	lsls	r2, r0
 80090e8:	4313      	orrs	r3, r2
 80090ea:	3401      	adds	r4, #1
 80090ec:	9304      	str	r3, [sp, #16]
 80090ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090f2:	4829      	ldr	r0, [pc, #164]	@ (8009198 <_vfiprintf_r+0x220>)
 80090f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80090f8:	2206      	movs	r2, #6
 80090fa:	f7f7 f869 	bl	80001d0 <memchr>
 80090fe:	2800      	cmp	r0, #0
 8009100:	d03f      	beq.n	8009182 <_vfiprintf_r+0x20a>
 8009102:	4b26      	ldr	r3, [pc, #152]	@ (800919c <_vfiprintf_r+0x224>)
 8009104:	bb1b      	cbnz	r3, 800914e <_vfiprintf_r+0x1d6>
 8009106:	9b03      	ldr	r3, [sp, #12]
 8009108:	3307      	adds	r3, #7
 800910a:	f023 0307 	bic.w	r3, r3, #7
 800910e:	3308      	adds	r3, #8
 8009110:	9303      	str	r3, [sp, #12]
 8009112:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009114:	443b      	add	r3, r7
 8009116:	9309      	str	r3, [sp, #36]	@ 0x24
 8009118:	e76a      	b.n	8008ff0 <_vfiprintf_r+0x78>
 800911a:	fb0c 3202 	mla	r2, ip, r2, r3
 800911e:	460c      	mov	r4, r1
 8009120:	2001      	movs	r0, #1
 8009122:	e7a8      	b.n	8009076 <_vfiprintf_r+0xfe>
 8009124:	2300      	movs	r3, #0
 8009126:	3401      	adds	r4, #1
 8009128:	9305      	str	r3, [sp, #20]
 800912a:	4619      	mov	r1, r3
 800912c:	f04f 0c0a 	mov.w	ip, #10
 8009130:	4620      	mov	r0, r4
 8009132:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009136:	3a30      	subs	r2, #48	@ 0x30
 8009138:	2a09      	cmp	r2, #9
 800913a:	d903      	bls.n	8009144 <_vfiprintf_r+0x1cc>
 800913c:	2b00      	cmp	r3, #0
 800913e:	d0c6      	beq.n	80090ce <_vfiprintf_r+0x156>
 8009140:	9105      	str	r1, [sp, #20]
 8009142:	e7c4      	b.n	80090ce <_vfiprintf_r+0x156>
 8009144:	fb0c 2101 	mla	r1, ip, r1, r2
 8009148:	4604      	mov	r4, r0
 800914a:	2301      	movs	r3, #1
 800914c:	e7f0      	b.n	8009130 <_vfiprintf_r+0x1b8>
 800914e:	ab03      	add	r3, sp, #12
 8009150:	9300      	str	r3, [sp, #0]
 8009152:	462a      	mov	r2, r5
 8009154:	4b12      	ldr	r3, [pc, #72]	@ (80091a0 <_vfiprintf_r+0x228>)
 8009156:	a904      	add	r1, sp, #16
 8009158:	4630      	mov	r0, r6
 800915a:	f7fc ff01 	bl	8005f60 <_printf_float>
 800915e:	4607      	mov	r7, r0
 8009160:	1c78      	adds	r0, r7, #1
 8009162:	d1d6      	bne.n	8009112 <_vfiprintf_r+0x19a>
 8009164:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009166:	07d9      	lsls	r1, r3, #31
 8009168:	d405      	bmi.n	8009176 <_vfiprintf_r+0x1fe>
 800916a:	89ab      	ldrh	r3, [r5, #12]
 800916c:	059a      	lsls	r2, r3, #22
 800916e:	d402      	bmi.n	8009176 <_vfiprintf_r+0x1fe>
 8009170:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009172:	f7fd fcbf 	bl	8006af4 <__retarget_lock_release_recursive>
 8009176:	89ab      	ldrh	r3, [r5, #12]
 8009178:	065b      	lsls	r3, r3, #25
 800917a:	f53f af1f 	bmi.w	8008fbc <_vfiprintf_r+0x44>
 800917e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009180:	e71e      	b.n	8008fc0 <_vfiprintf_r+0x48>
 8009182:	ab03      	add	r3, sp, #12
 8009184:	9300      	str	r3, [sp, #0]
 8009186:	462a      	mov	r2, r5
 8009188:	4b05      	ldr	r3, [pc, #20]	@ (80091a0 <_vfiprintf_r+0x228>)
 800918a:	a904      	add	r1, sp, #16
 800918c:	4630      	mov	r0, r6
 800918e:	f7fd f97f 	bl	8006490 <_printf_i>
 8009192:	e7e4      	b.n	800915e <_vfiprintf_r+0x1e6>
 8009194:	0800aa79 	.word	0x0800aa79
 8009198:	0800aa83 	.word	0x0800aa83
 800919c:	08005f61 	.word	0x08005f61
 80091a0:	08008f55 	.word	0x08008f55
 80091a4:	0800aa7f 	.word	0x0800aa7f

080091a8 <__swbuf_r>:
 80091a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091aa:	460e      	mov	r6, r1
 80091ac:	4614      	mov	r4, r2
 80091ae:	4605      	mov	r5, r0
 80091b0:	b118      	cbz	r0, 80091ba <__swbuf_r+0x12>
 80091b2:	6a03      	ldr	r3, [r0, #32]
 80091b4:	b90b      	cbnz	r3, 80091ba <__swbuf_r+0x12>
 80091b6:	f7fd fb17 	bl	80067e8 <__sinit>
 80091ba:	69a3      	ldr	r3, [r4, #24]
 80091bc:	60a3      	str	r3, [r4, #8]
 80091be:	89a3      	ldrh	r3, [r4, #12]
 80091c0:	071a      	lsls	r2, r3, #28
 80091c2:	d501      	bpl.n	80091c8 <__swbuf_r+0x20>
 80091c4:	6923      	ldr	r3, [r4, #16]
 80091c6:	b943      	cbnz	r3, 80091da <__swbuf_r+0x32>
 80091c8:	4621      	mov	r1, r4
 80091ca:	4628      	mov	r0, r5
 80091cc:	f000 f82a 	bl	8009224 <__swsetup_r>
 80091d0:	b118      	cbz	r0, 80091da <__swbuf_r+0x32>
 80091d2:	f04f 37ff 	mov.w	r7, #4294967295
 80091d6:	4638      	mov	r0, r7
 80091d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091da:	6823      	ldr	r3, [r4, #0]
 80091dc:	6922      	ldr	r2, [r4, #16]
 80091de:	1a98      	subs	r0, r3, r2
 80091e0:	6963      	ldr	r3, [r4, #20]
 80091e2:	b2f6      	uxtb	r6, r6
 80091e4:	4283      	cmp	r3, r0
 80091e6:	4637      	mov	r7, r6
 80091e8:	dc05      	bgt.n	80091f6 <__swbuf_r+0x4e>
 80091ea:	4621      	mov	r1, r4
 80091ec:	4628      	mov	r0, r5
 80091ee:	f7ff fded 	bl	8008dcc <_fflush_r>
 80091f2:	2800      	cmp	r0, #0
 80091f4:	d1ed      	bne.n	80091d2 <__swbuf_r+0x2a>
 80091f6:	68a3      	ldr	r3, [r4, #8]
 80091f8:	3b01      	subs	r3, #1
 80091fa:	60a3      	str	r3, [r4, #8]
 80091fc:	6823      	ldr	r3, [r4, #0]
 80091fe:	1c5a      	adds	r2, r3, #1
 8009200:	6022      	str	r2, [r4, #0]
 8009202:	701e      	strb	r6, [r3, #0]
 8009204:	6962      	ldr	r2, [r4, #20]
 8009206:	1c43      	adds	r3, r0, #1
 8009208:	429a      	cmp	r2, r3
 800920a:	d004      	beq.n	8009216 <__swbuf_r+0x6e>
 800920c:	89a3      	ldrh	r3, [r4, #12]
 800920e:	07db      	lsls	r3, r3, #31
 8009210:	d5e1      	bpl.n	80091d6 <__swbuf_r+0x2e>
 8009212:	2e0a      	cmp	r6, #10
 8009214:	d1df      	bne.n	80091d6 <__swbuf_r+0x2e>
 8009216:	4621      	mov	r1, r4
 8009218:	4628      	mov	r0, r5
 800921a:	f7ff fdd7 	bl	8008dcc <_fflush_r>
 800921e:	2800      	cmp	r0, #0
 8009220:	d0d9      	beq.n	80091d6 <__swbuf_r+0x2e>
 8009222:	e7d6      	b.n	80091d2 <__swbuf_r+0x2a>

08009224 <__swsetup_r>:
 8009224:	b538      	push	{r3, r4, r5, lr}
 8009226:	4b29      	ldr	r3, [pc, #164]	@ (80092cc <__swsetup_r+0xa8>)
 8009228:	4605      	mov	r5, r0
 800922a:	6818      	ldr	r0, [r3, #0]
 800922c:	460c      	mov	r4, r1
 800922e:	b118      	cbz	r0, 8009238 <__swsetup_r+0x14>
 8009230:	6a03      	ldr	r3, [r0, #32]
 8009232:	b90b      	cbnz	r3, 8009238 <__swsetup_r+0x14>
 8009234:	f7fd fad8 	bl	80067e8 <__sinit>
 8009238:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800923c:	0719      	lsls	r1, r3, #28
 800923e:	d422      	bmi.n	8009286 <__swsetup_r+0x62>
 8009240:	06da      	lsls	r2, r3, #27
 8009242:	d407      	bmi.n	8009254 <__swsetup_r+0x30>
 8009244:	2209      	movs	r2, #9
 8009246:	602a      	str	r2, [r5, #0]
 8009248:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800924c:	81a3      	strh	r3, [r4, #12]
 800924e:	f04f 30ff 	mov.w	r0, #4294967295
 8009252:	e033      	b.n	80092bc <__swsetup_r+0x98>
 8009254:	0758      	lsls	r0, r3, #29
 8009256:	d512      	bpl.n	800927e <__swsetup_r+0x5a>
 8009258:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800925a:	b141      	cbz	r1, 800926e <__swsetup_r+0x4a>
 800925c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009260:	4299      	cmp	r1, r3
 8009262:	d002      	beq.n	800926a <__swsetup_r+0x46>
 8009264:	4628      	mov	r0, r5
 8009266:	f7fe facb 	bl	8007800 <_free_r>
 800926a:	2300      	movs	r3, #0
 800926c:	6363      	str	r3, [r4, #52]	@ 0x34
 800926e:	89a3      	ldrh	r3, [r4, #12]
 8009270:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009274:	81a3      	strh	r3, [r4, #12]
 8009276:	2300      	movs	r3, #0
 8009278:	6063      	str	r3, [r4, #4]
 800927a:	6923      	ldr	r3, [r4, #16]
 800927c:	6023      	str	r3, [r4, #0]
 800927e:	89a3      	ldrh	r3, [r4, #12]
 8009280:	f043 0308 	orr.w	r3, r3, #8
 8009284:	81a3      	strh	r3, [r4, #12]
 8009286:	6923      	ldr	r3, [r4, #16]
 8009288:	b94b      	cbnz	r3, 800929e <__swsetup_r+0x7a>
 800928a:	89a3      	ldrh	r3, [r4, #12]
 800928c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009290:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009294:	d003      	beq.n	800929e <__swsetup_r+0x7a>
 8009296:	4621      	mov	r1, r4
 8009298:	4628      	mov	r0, r5
 800929a:	f000 f88b 	bl	80093b4 <__smakebuf_r>
 800929e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092a2:	f013 0201 	ands.w	r2, r3, #1
 80092a6:	d00a      	beq.n	80092be <__swsetup_r+0x9a>
 80092a8:	2200      	movs	r2, #0
 80092aa:	60a2      	str	r2, [r4, #8]
 80092ac:	6962      	ldr	r2, [r4, #20]
 80092ae:	4252      	negs	r2, r2
 80092b0:	61a2      	str	r2, [r4, #24]
 80092b2:	6922      	ldr	r2, [r4, #16]
 80092b4:	b942      	cbnz	r2, 80092c8 <__swsetup_r+0xa4>
 80092b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80092ba:	d1c5      	bne.n	8009248 <__swsetup_r+0x24>
 80092bc:	bd38      	pop	{r3, r4, r5, pc}
 80092be:	0799      	lsls	r1, r3, #30
 80092c0:	bf58      	it	pl
 80092c2:	6962      	ldrpl	r2, [r4, #20]
 80092c4:	60a2      	str	r2, [r4, #8]
 80092c6:	e7f4      	b.n	80092b2 <__swsetup_r+0x8e>
 80092c8:	2000      	movs	r0, #0
 80092ca:	e7f7      	b.n	80092bc <__swsetup_r+0x98>
 80092cc:	20000184 	.word	0x20000184

080092d0 <_raise_r>:
 80092d0:	291f      	cmp	r1, #31
 80092d2:	b538      	push	{r3, r4, r5, lr}
 80092d4:	4605      	mov	r5, r0
 80092d6:	460c      	mov	r4, r1
 80092d8:	d904      	bls.n	80092e4 <_raise_r+0x14>
 80092da:	2316      	movs	r3, #22
 80092dc:	6003      	str	r3, [r0, #0]
 80092de:	f04f 30ff 	mov.w	r0, #4294967295
 80092e2:	bd38      	pop	{r3, r4, r5, pc}
 80092e4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80092e6:	b112      	cbz	r2, 80092ee <_raise_r+0x1e>
 80092e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80092ec:	b94b      	cbnz	r3, 8009302 <_raise_r+0x32>
 80092ee:	4628      	mov	r0, r5
 80092f0:	f000 f830 	bl	8009354 <_getpid_r>
 80092f4:	4622      	mov	r2, r4
 80092f6:	4601      	mov	r1, r0
 80092f8:	4628      	mov	r0, r5
 80092fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092fe:	f000 b817 	b.w	8009330 <_kill_r>
 8009302:	2b01      	cmp	r3, #1
 8009304:	d00a      	beq.n	800931c <_raise_r+0x4c>
 8009306:	1c59      	adds	r1, r3, #1
 8009308:	d103      	bne.n	8009312 <_raise_r+0x42>
 800930a:	2316      	movs	r3, #22
 800930c:	6003      	str	r3, [r0, #0]
 800930e:	2001      	movs	r0, #1
 8009310:	e7e7      	b.n	80092e2 <_raise_r+0x12>
 8009312:	2100      	movs	r1, #0
 8009314:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009318:	4620      	mov	r0, r4
 800931a:	4798      	blx	r3
 800931c:	2000      	movs	r0, #0
 800931e:	e7e0      	b.n	80092e2 <_raise_r+0x12>

08009320 <raise>:
 8009320:	4b02      	ldr	r3, [pc, #8]	@ (800932c <raise+0xc>)
 8009322:	4601      	mov	r1, r0
 8009324:	6818      	ldr	r0, [r3, #0]
 8009326:	f7ff bfd3 	b.w	80092d0 <_raise_r>
 800932a:	bf00      	nop
 800932c:	20000184 	.word	0x20000184

08009330 <_kill_r>:
 8009330:	b538      	push	{r3, r4, r5, lr}
 8009332:	4d07      	ldr	r5, [pc, #28]	@ (8009350 <_kill_r+0x20>)
 8009334:	2300      	movs	r3, #0
 8009336:	4604      	mov	r4, r0
 8009338:	4608      	mov	r0, r1
 800933a:	4611      	mov	r1, r2
 800933c:	602b      	str	r3, [r5, #0]
 800933e:	f7f8 fa81 	bl	8001844 <_kill>
 8009342:	1c43      	adds	r3, r0, #1
 8009344:	d102      	bne.n	800934c <_kill_r+0x1c>
 8009346:	682b      	ldr	r3, [r5, #0]
 8009348:	b103      	cbz	r3, 800934c <_kill_r+0x1c>
 800934a:	6023      	str	r3, [r4, #0]
 800934c:	bd38      	pop	{r3, r4, r5, pc}
 800934e:	bf00      	nop
 8009350:	200006ac 	.word	0x200006ac

08009354 <_getpid_r>:
 8009354:	f7f8 ba6e 	b.w	8001834 <_getpid>

08009358 <_malloc_usable_size_r>:
 8009358:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800935c:	1f18      	subs	r0, r3, #4
 800935e:	2b00      	cmp	r3, #0
 8009360:	bfbc      	itt	lt
 8009362:	580b      	ldrlt	r3, [r1, r0]
 8009364:	18c0      	addlt	r0, r0, r3
 8009366:	4770      	bx	lr

08009368 <__swhatbuf_r>:
 8009368:	b570      	push	{r4, r5, r6, lr}
 800936a:	460c      	mov	r4, r1
 800936c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009370:	2900      	cmp	r1, #0
 8009372:	b096      	sub	sp, #88	@ 0x58
 8009374:	4615      	mov	r5, r2
 8009376:	461e      	mov	r6, r3
 8009378:	da0d      	bge.n	8009396 <__swhatbuf_r+0x2e>
 800937a:	89a3      	ldrh	r3, [r4, #12]
 800937c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009380:	f04f 0100 	mov.w	r1, #0
 8009384:	bf14      	ite	ne
 8009386:	2340      	movne	r3, #64	@ 0x40
 8009388:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800938c:	2000      	movs	r0, #0
 800938e:	6031      	str	r1, [r6, #0]
 8009390:	602b      	str	r3, [r5, #0]
 8009392:	b016      	add	sp, #88	@ 0x58
 8009394:	bd70      	pop	{r4, r5, r6, pc}
 8009396:	466a      	mov	r2, sp
 8009398:	f000 f848 	bl	800942c <_fstat_r>
 800939c:	2800      	cmp	r0, #0
 800939e:	dbec      	blt.n	800937a <__swhatbuf_r+0x12>
 80093a0:	9901      	ldr	r1, [sp, #4]
 80093a2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80093a6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80093aa:	4259      	negs	r1, r3
 80093ac:	4159      	adcs	r1, r3
 80093ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80093b2:	e7eb      	b.n	800938c <__swhatbuf_r+0x24>

080093b4 <__smakebuf_r>:
 80093b4:	898b      	ldrh	r3, [r1, #12]
 80093b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093b8:	079d      	lsls	r5, r3, #30
 80093ba:	4606      	mov	r6, r0
 80093bc:	460c      	mov	r4, r1
 80093be:	d507      	bpl.n	80093d0 <__smakebuf_r+0x1c>
 80093c0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80093c4:	6023      	str	r3, [r4, #0]
 80093c6:	6123      	str	r3, [r4, #16]
 80093c8:	2301      	movs	r3, #1
 80093ca:	6163      	str	r3, [r4, #20]
 80093cc:	b003      	add	sp, #12
 80093ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093d0:	ab01      	add	r3, sp, #4
 80093d2:	466a      	mov	r2, sp
 80093d4:	f7ff ffc8 	bl	8009368 <__swhatbuf_r>
 80093d8:	9f00      	ldr	r7, [sp, #0]
 80093da:	4605      	mov	r5, r0
 80093dc:	4639      	mov	r1, r7
 80093de:	4630      	mov	r0, r6
 80093e0:	f7fe fdbc 	bl	8007f5c <_malloc_r>
 80093e4:	b948      	cbnz	r0, 80093fa <__smakebuf_r+0x46>
 80093e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093ea:	059a      	lsls	r2, r3, #22
 80093ec:	d4ee      	bmi.n	80093cc <__smakebuf_r+0x18>
 80093ee:	f023 0303 	bic.w	r3, r3, #3
 80093f2:	f043 0302 	orr.w	r3, r3, #2
 80093f6:	81a3      	strh	r3, [r4, #12]
 80093f8:	e7e2      	b.n	80093c0 <__smakebuf_r+0xc>
 80093fa:	89a3      	ldrh	r3, [r4, #12]
 80093fc:	6020      	str	r0, [r4, #0]
 80093fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009402:	81a3      	strh	r3, [r4, #12]
 8009404:	9b01      	ldr	r3, [sp, #4]
 8009406:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800940a:	b15b      	cbz	r3, 8009424 <__smakebuf_r+0x70>
 800940c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009410:	4630      	mov	r0, r6
 8009412:	f000 f81d 	bl	8009450 <_isatty_r>
 8009416:	b128      	cbz	r0, 8009424 <__smakebuf_r+0x70>
 8009418:	89a3      	ldrh	r3, [r4, #12]
 800941a:	f023 0303 	bic.w	r3, r3, #3
 800941e:	f043 0301 	orr.w	r3, r3, #1
 8009422:	81a3      	strh	r3, [r4, #12]
 8009424:	89a3      	ldrh	r3, [r4, #12]
 8009426:	431d      	orrs	r5, r3
 8009428:	81a5      	strh	r5, [r4, #12]
 800942a:	e7cf      	b.n	80093cc <__smakebuf_r+0x18>

0800942c <_fstat_r>:
 800942c:	b538      	push	{r3, r4, r5, lr}
 800942e:	4d07      	ldr	r5, [pc, #28]	@ (800944c <_fstat_r+0x20>)
 8009430:	2300      	movs	r3, #0
 8009432:	4604      	mov	r4, r0
 8009434:	4608      	mov	r0, r1
 8009436:	4611      	mov	r1, r2
 8009438:	602b      	str	r3, [r5, #0]
 800943a:	f7f8 fa63 	bl	8001904 <_fstat>
 800943e:	1c43      	adds	r3, r0, #1
 8009440:	d102      	bne.n	8009448 <_fstat_r+0x1c>
 8009442:	682b      	ldr	r3, [r5, #0]
 8009444:	b103      	cbz	r3, 8009448 <_fstat_r+0x1c>
 8009446:	6023      	str	r3, [r4, #0]
 8009448:	bd38      	pop	{r3, r4, r5, pc}
 800944a:	bf00      	nop
 800944c:	200006ac 	.word	0x200006ac

08009450 <_isatty_r>:
 8009450:	b538      	push	{r3, r4, r5, lr}
 8009452:	4d06      	ldr	r5, [pc, #24]	@ (800946c <_isatty_r+0x1c>)
 8009454:	2300      	movs	r3, #0
 8009456:	4604      	mov	r4, r0
 8009458:	4608      	mov	r0, r1
 800945a:	602b      	str	r3, [r5, #0]
 800945c:	f7f8 fa62 	bl	8001924 <_isatty>
 8009460:	1c43      	adds	r3, r0, #1
 8009462:	d102      	bne.n	800946a <_isatty_r+0x1a>
 8009464:	682b      	ldr	r3, [r5, #0]
 8009466:	b103      	cbz	r3, 800946a <_isatty_r+0x1a>
 8009468:	6023      	str	r3, [r4, #0]
 800946a:	bd38      	pop	{r3, r4, r5, pc}
 800946c:	200006ac 	.word	0x200006ac

08009470 <cos>:
 8009470:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009472:	ec53 2b10 	vmov	r2, r3, d0
 8009476:	4826      	ldr	r0, [pc, #152]	@ (8009510 <cos+0xa0>)
 8009478:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800947c:	4281      	cmp	r1, r0
 800947e:	d806      	bhi.n	800948e <cos+0x1e>
 8009480:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8009508 <cos+0x98>
 8009484:	b005      	add	sp, #20
 8009486:	f85d eb04 	ldr.w	lr, [sp], #4
 800948a:	f000 b899 	b.w	80095c0 <__kernel_cos>
 800948e:	4821      	ldr	r0, [pc, #132]	@ (8009514 <cos+0xa4>)
 8009490:	4281      	cmp	r1, r0
 8009492:	d908      	bls.n	80094a6 <cos+0x36>
 8009494:	4610      	mov	r0, r2
 8009496:	4619      	mov	r1, r3
 8009498:	f7f6 fef6 	bl	8000288 <__aeabi_dsub>
 800949c:	ec41 0b10 	vmov	d0, r0, r1
 80094a0:	b005      	add	sp, #20
 80094a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80094a6:	4668      	mov	r0, sp
 80094a8:	f000 fa0e 	bl	80098c8 <__ieee754_rem_pio2>
 80094ac:	f000 0003 	and.w	r0, r0, #3
 80094b0:	2801      	cmp	r0, #1
 80094b2:	d00b      	beq.n	80094cc <cos+0x5c>
 80094b4:	2802      	cmp	r0, #2
 80094b6:	d015      	beq.n	80094e4 <cos+0x74>
 80094b8:	b9d8      	cbnz	r0, 80094f2 <cos+0x82>
 80094ba:	ed9d 1b02 	vldr	d1, [sp, #8]
 80094be:	ed9d 0b00 	vldr	d0, [sp]
 80094c2:	f000 f87d 	bl	80095c0 <__kernel_cos>
 80094c6:	ec51 0b10 	vmov	r0, r1, d0
 80094ca:	e7e7      	b.n	800949c <cos+0x2c>
 80094cc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80094d0:	ed9d 0b00 	vldr	d0, [sp]
 80094d4:	f000 f93c 	bl	8009750 <__kernel_sin>
 80094d8:	ec53 2b10 	vmov	r2, r3, d0
 80094dc:	4610      	mov	r0, r2
 80094de:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80094e2:	e7db      	b.n	800949c <cos+0x2c>
 80094e4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80094e8:	ed9d 0b00 	vldr	d0, [sp]
 80094ec:	f000 f868 	bl	80095c0 <__kernel_cos>
 80094f0:	e7f2      	b.n	80094d8 <cos+0x68>
 80094f2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80094f6:	ed9d 0b00 	vldr	d0, [sp]
 80094fa:	2001      	movs	r0, #1
 80094fc:	f000 f928 	bl	8009750 <__kernel_sin>
 8009500:	e7e1      	b.n	80094c6 <cos+0x56>
 8009502:	bf00      	nop
 8009504:	f3af 8000 	nop.w
	...
 8009510:	3fe921fb 	.word	0x3fe921fb
 8009514:	7fefffff 	.word	0x7fefffff

08009518 <sin>:
 8009518:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800951a:	ec53 2b10 	vmov	r2, r3, d0
 800951e:	4826      	ldr	r0, [pc, #152]	@ (80095b8 <sin+0xa0>)
 8009520:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009524:	4281      	cmp	r1, r0
 8009526:	d807      	bhi.n	8009538 <sin+0x20>
 8009528:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80095b0 <sin+0x98>
 800952c:	2000      	movs	r0, #0
 800952e:	b005      	add	sp, #20
 8009530:	f85d eb04 	ldr.w	lr, [sp], #4
 8009534:	f000 b90c 	b.w	8009750 <__kernel_sin>
 8009538:	4820      	ldr	r0, [pc, #128]	@ (80095bc <sin+0xa4>)
 800953a:	4281      	cmp	r1, r0
 800953c:	d908      	bls.n	8009550 <sin+0x38>
 800953e:	4610      	mov	r0, r2
 8009540:	4619      	mov	r1, r3
 8009542:	f7f6 fea1 	bl	8000288 <__aeabi_dsub>
 8009546:	ec41 0b10 	vmov	d0, r0, r1
 800954a:	b005      	add	sp, #20
 800954c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009550:	4668      	mov	r0, sp
 8009552:	f000 f9b9 	bl	80098c8 <__ieee754_rem_pio2>
 8009556:	f000 0003 	and.w	r0, r0, #3
 800955a:	2801      	cmp	r0, #1
 800955c:	d00c      	beq.n	8009578 <sin+0x60>
 800955e:	2802      	cmp	r0, #2
 8009560:	d011      	beq.n	8009586 <sin+0x6e>
 8009562:	b9e8      	cbnz	r0, 80095a0 <sin+0x88>
 8009564:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009568:	ed9d 0b00 	vldr	d0, [sp]
 800956c:	2001      	movs	r0, #1
 800956e:	f000 f8ef 	bl	8009750 <__kernel_sin>
 8009572:	ec51 0b10 	vmov	r0, r1, d0
 8009576:	e7e6      	b.n	8009546 <sin+0x2e>
 8009578:	ed9d 1b02 	vldr	d1, [sp, #8]
 800957c:	ed9d 0b00 	vldr	d0, [sp]
 8009580:	f000 f81e 	bl	80095c0 <__kernel_cos>
 8009584:	e7f5      	b.n	8009572 <sin+0x5a>
 8009586:	ed9d 1b02 	vldr	d1, [sp, #8]
 800958a:	ed9d 0b00 	vldr	d0, [sp]
 800958e:	2001      	movs	r0, #1
 8009590:	f000 f8de 	bl	8009750 <__kernel_sin>
 8009594:	ec53 2b10 	vmov	r2, r3, d0
 8009598:	4610      	mov	r0, r2
 800959a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800959e:	e7d2      	b.n	8009546 <sin+0x2e>
 80095a0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80095a4:	ed9d 0b00 	vldr	d0, [sp]
 80095a8:	f000 f80a 	bl	80095c0 <__kernel_cos>
 80095ac:	e7f2      	b.n	8009594 <sin+0x7c>
 80095ae:	bf00      	nop
	...
 80095b8:	3fe921fb 	.word	0x3fe921fb
 80095bc:	7fefffff 	.word	0x7fefffff

080095c0 <__kernel_cos>:
 80095c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095c4:	ec57 6b10 	vmov	r6, r7, d0
 80095c8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80095cc:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 80095d0:	ed8d 1b00 	vstr	d1, [sp]
 80095d4:	d206      	bcs.n	80095e4 <__kernel_cos+0x24>
 80095d6:	4630      	mov	r0, r6
 80095d8:	4639      	mov	r1, r7
 80095da:	f7f7 fabd 	bl	8000b58 <__aeabi_d2iz>
 80095de:	2800      	cmp	r0, #0
 80095e0:	f000 8088 	beq.w	80096f4 <__kernel_cos+0x134>
 80095e4:	4632      	mov	r2, r6
 80095e6:	463b      	mov	r3, r7
 80095e8:	4630      	mov	r0, r6
 80095ea:	4639      	mov	r1, r7
 80095ec:	f7f7 f804 	bl	80005f8 <__aeabi_dmul>
 80095f0:	4b51      	ldr	r3, [pc, #324]	@ (8009738 <__kernel_cos+0x178>)
 80095f2:	2200      	movs	r2, #0
 80095f4:	4604      	mov	r4, r0
 80095f6:	460d      	mov	r5, r1
 80095f8:	f7f6 fffe 	bl	80005f8 <__aeabi_dmul>
 80095fc:	a340      	add	r3, pc, #256	@ (adr r3, 8009700 <__kernel_cos+0x140>)
 80095fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009602:	4682      	mov	sl, r0
 8009604:	468b      	mov	fp, r1
 8009606:	4620      	mov	r0, r4
 8009608:	4629      	mov	r1, r5
 800960a:	f7f6 fff5 	bl	80005f8 <__aeabi_dmul>
 800960e:	a33e      	add	r3, pc, #248	@ (adr r3, 8009708 <__kernel_cos+0x148>)
 8009610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009614:	f7f6 fe3a 	bl	800028c <__adddf3>
 8009618:	4622      	mov	r2, r4
 800961a:	462b      	mov	r3, r5
 800961c:	f7f6 ffec 	bl	80005f8 <__aeabi_dmul>
 8009620:	a33b      	add	r3, pc, #236	@ (adr r3, 8009710 <__kernel_cos+0x150>)
 8009622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009626:	f7f6 fe2f 	bl	8000288 <__aeabi_dsub>
 800962a:	4622      	mov	r2, r4
 800962c:	462b      	mov	r3, r5
 800962e:	f7f6 ffe3 	bl	80005f8 <__aeabi_dmul>
 8009632:	a339      	add	r3, pc, #228	@ (adr r3, 8009718 <__kernel_cos+0x158>)
 8009634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009638:	f7f6 fe28 	bl	800028c <__adddf3>
 800963c:	4622      	mov	r2, r4
 800963e:	462b      	mov	r3, r5
 8009640:	f7f6 ffda 	bl	80005f8 <__aeabi_dmul>
 8009644:	a336      	add	r3, pc, #216	@ (adr r3, 8009720 <__kernel_cos+0x160>)
 8009646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800964a:	f7f6 fe1d 	bl	8000288 <__aeabi_dsub>
 800964e:	4622      	mov	r2, r4
 8009650:	462b      	mov	r3, r5
 8009652:	f7f6 ffd1 	bl	80005f8 <__aeabi_dmul>
 8009656:	a334      	add	r3, pc, #208	@ (adr r3, 8009728 <__kernel_cos+0x168>)
 8009658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800965c:	f7f6 fe16 	bl	800028c <__adddf3>
 8009660:	4622      	mov	r2, r4
 8009662:	462b      	mov	r3, r5
 8009664:	f7f6 ffc8 	bl	80005f8 <__aeabi_dmul>
 8009668:	4622      	mov	r2, r4
 800966a:	462b      	mov	r3, r5
 800966c:	f7f6 ffc4 	bl	80005f8 <__aeabi_dmul>
 8009670:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009674:	4604      	mov	r4, r0
 8009676:	460d      	mov	r5, r1
 8009678:	4630      	mov	r0, r6
 800967a:	4639      	mov	r1, r7
 800967c:	f7f6 ffbc 	bl	80005f8 <__aeabi_dmul>
 8009680:	460b      	mov	r3, r1
 8009682:	4602      	mov	r2, r0
 8009684:	4629      	mov	r1, r5
 8009686:	4620      	mov	r0, r4
 8009688:	f7f6 fdfe 	bl	8000288 <__aeabi_dsub>
 800968c:	4b2b      	ldr	r3, [pc, #172]	@ (800973c <__kernel_cos+0x17c>)
 800968e:	4598      	cmp	r8, r3
 8009690:	4606      	mov	r6, r0
 8009692:	460f      	mov	r7, r1
 8009694:	d810      	bhi.n	80096b8 <__kernel_cos+0xf8>
 8009696:	4602      	mov	r2, r0
 8009698:	460b      	mov	r3, r1
 800969a:	4650      	mov	r0, sl
 800969c:	4659      	mov	r1, fp
 800969e:	f7f6 fdf3 	bl	8000288 <__aeabi_dsub>
 80096a2:	460b      	mov	r3, r1
 80096a4:	4926      	ldr	r1, [pc, #152]	@ (8009740 <__kernel_cos+0x180>)
 80096a6:	4602      	mov	r2, r0
 80096a8:	2000      	movs	r0, #0
 80096aa:	f7f6 fded 	bl	8000288 <__aeabi_dsub>
 80096ae:	ec41 0b10 	vmov	d0, r0, r1
 80096b2:	b003      	add	sp, #12
 80096b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096b8:	4b22      	ldr	r3, [pc, #136]	@ (8009744 <__kernel_cos+0x184>)
 80096ba:	4921      	ldr	r1, [pc, #132]	@ (8009740 <__kernel_cos+0x180>)
 80096bc:	4598      	cmp	r8, r3
 80096be:	bf8c      	ite	hi
 80096c0:	4d21      	ldrhi	r5, [pc, #132]	@ (8009748 <__kernel_cos+0x188>)
 80096c2:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 80096c6:	2400      	movs	r4, #0
 80096c8:	4622      	mov	r2, r4
 80096ca:	462b      	mov	r3, r5
 80096cc:	2000      	movs	r0, #0
 80096ce:	f7f6 fddb 	bl	8000288 <__aeabi_dsub>
 80096d2:	4622      	mov	r2, r4
 80096d4:	4680      	mov	r8, r0
 80096d6:	4689      	mov	r9, r1
 80096d8:	462b      	mov	r3, r5
 80096da:	4650      	mov	r0, sl
 80096dc:	4659      	mov	r1, fp
 80096de:	f7f6 fdd3 	bl	8000288 <__aeabi_dsub>
 80096e2:	4632      	mov	r2, r6
 80096e4:	463b      	mov	r3, r7
 80096e6:	f7f6 fdcf 	bl	8000288 <__aeabi_dsub>
 80096ea:	4602      	mov	r2, r0
 80096ec:	460b      	mov	r3, r1
 80096ee:	4640      	mov	r0, r8
 80096f0:	4649      	mov	r1, r9
 80096f2:	e7da      	b.n	80096aa <__kernel_cos+0xea>
 80096f4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8009730 <__kernel_cos+0x170>
 80096f8:	e7db      	b.n	80096b2 <__kernel_cos+0xf2>
 80096fa:	bf00      	nop
 80096fc:	f3af 8000 	nop.w
 8009700:	be8838d4 	.word	0xbe8838d4
 8009704:	bda8fae9 	.word	0xbda8fae9
 8009708:	bdb4b1c4 	.word	0xbdb4b1c4
 800970c:	3e21ee9e 	.word	0x3e21ee9e
 8009710:	809c52ad 	.word	0x809c52ad
 8009714:	3e927e4f 	.word	0x3e927e4f
 8009718:	19cb1590 	.word	0x19cb1590
 800971c:	3efa01a0 	.word	0x3efa01a0
 8009720:	16c15177 	.word	0x16c15177
 8009724:	3f56c16c 	.word	0x3f56c16c
 8009728:	5555554c 	.word	0x5555554c
 800972c:	3fa55555 	.word	0x3fa55555
 8009730:	00000000 	.word	0x00000000
 8009734:	3ff00000 	.word	0x3ff00000
 8009738:	3fe00000 	.word	0x3fe00000
 800973c:	3fd33332 	.word	0x3fd33332
 8009740:	3ff00000 	.word	0x3ff00000
 8009744:	3fe90000 	.word	0x3fe90000
 8009748:	3fd20000 	.word	0x3fd20000
 800974c:	00000000 	.word	0x00000000

08009750 <__kernel_sin>:
 8009750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009754:	ec55 4b10 	vmov	r4, r5, d0
 8009758:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800975c:	b085      	sub	sp, #20
 800975e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8009762:	ed8d 1b02 	vstr	d1, [sp, #8]
 8009766:	4680      	mov	r8, r0
 8009768:	d205      	bcs.n	8009776 <__kernel_sin+0x26>
 800976a:	4620      	mov	r0, r4
 800976c:	4629      	mov	r1, r5
 800976e:	f7f7 f9f3 	bl	8000b58 <__aeabi_d2iz>
 8009772:	2800      	cmp	r0, #0
 8009774:	d052      	beq.n	800981c <__kernel_sin+0xcc>
 8009776:	4622      	mov	r2, r4
 8009778:	462b      	mov	r3, r5
 800977a:	4620      	mov	r0, r4
 800977c:	4629      	mov	r1, r5
 800977e:	f7f6 ff3b 	bl	80005f8 <__aeabi_dmul>
 8009782:	4682      	mov	sl, r0
 8009784:	468b      	mov	fp, r1
 8009786:	4602      	mov	r2, r0
 8009788:	460b      	mov	r3, r1
 800978a:	4620      	mov	r0, r4
 800978c:	4629      	mov	r1, r5
 800978e:	f7f6 ff33 	bl	80005f8 <__aeabi_dmul>
 8009792:	a342      	add	r3, pc, #264	@ (adr r3, 800989c <__kernel_sin+0x14c>)
 8009794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009798:	e9cd 0100 	strd	r0, r1, [sp]
 800979c:	4650      	mov	r0, sl
 800979e:	4659      	mov	r1, fp
 80097a0:	f7f6 ff2a 	bl	80005f8 <__aeabi_dmul>
 80097a4:	a33f      	add	r3, pc, #252	@ (adr r3, 80098a4 <__kernel_sin+0x154>)
 80097a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097aa:	f7f6 fd6d 	bl	8000288 <__aeabi_dsub>
 80097ae:	4652      	mov	r2, sl
 80097b0:	465b      	mov	r3, fp
 80097b2:	f7f6 ff21 	bl	80005f8 <__aeabi_dmul>
 80097b6:	a33d      	add	r3, pc, #244	@ (adr r3, 80098ac <__kernel_sin+0x15c>)
 80097b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097bc:	f7f6 fd66 	bl	800028c <__adddf3>
 80097c0:	4652      	mov	r2, sl
 80097c2:	465b      	mov	r3, fp
 80097c4:	f7f6 ff18 	bl	80005f8 <__aeabi_dmul>
 80097c8:	a33a      	add	r3, pc, #232	@ (adr r3, 80098b4 <__kernel_sin+0x164>)
 80097ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ce:	f7f6 fd5b 	bl	8000288 <__aeabi_dsub>
 80097d2:	4652      	mov	r2, sl
 80097d4:	465b      	mov	r3, fp
 80097d6:	f7f6 ff0f 	bl	80005f8 <__aeabi_dmul>
 80097da:	a338      	add	r3, pc, #224	@ (adr r3, 80098bc <__kernel_sin+0x16c>)
 80097dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e0:	f7f6 fd54 	bl	800028c <__adddf3>
 80097e4:	4606      	mov	r6, r0
 80097e6:	460f      	mov	r7, r1
 80097e8:	f1b8 0f00 	cmp.w	r8, #0
 80097ec:	d11b      	bne.n	8009826 <__kernel_sin+0xd6>
 80097ee:	4602      	mov	r2, r0
 80097f0:	460b      	mov	r3, r1
 80097f2:	4650      	mov	r0, sl
 80097f4:	4659      	mov	r1, fp
 80097f6:	f7f6 feff 	bl	80005f8 <__aeabi_dmul>
 80097fa:	a325      	add	r3, pc, #148	@ (adr r3, 8009890 <__kernel_sin+0x140>)
 80097fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009800:	f7f6 fd42 	bl	8000288 <__aeabi_dsub>
 8009804:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009808:	f7f6 fef6 	bl	80005f8 <__aeabi_dmul>
 800980c:	4602      	mov	r2, r0
 800980e:	460b      	mov	r3, r1
 8009810:	4620      	mov	r0, r4
 8009812:	4629      	mov	r1, r5
 8009814:	f7f6 fd3a 	bl	800028c <__adddf3>
 8009818:	4604      	mov	r4, r0
 800981a:	460d      	mov	r5, r1
 800981c:	ec45 4b10 	vmov	d0, r4, r5
 8009820:	b005      	add	sp, #20
 8009822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009826:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800982a:	4b1b      	ldr	r3, [pc, #108]	@ (8009898 <__kernel_sin+0x148>)
 800982c:	2200      	movs	r2, #0
 800982e:	f7f6 fee3 	bl	80005f8 <__aeabi_dmul>
 8009832:	4632      	mov	r2, r6
 8009834:	4680      	mov	r8, r0
 8009836:	4689      	mov	r9, r1
 8009838:	463b      	mov	r3, r7
 800983a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800983e:	f7f6 fedb 	bl	80005f8 <__aeabi_dmul>
 8009842:	4602      	mov	r2, r0
 8009844:	460b      	mov	r3, r1
 8009846:	4640      	mov	r0, r8
 8009848:	4649      	mov	r1, r9
 800984a:	f7f6 fd1d 	bl	8000288 <__aeabi_dsub>
 800984e:	4652      	mov	r2, sl
 8009850:	465b      	mov	r3, fp
 8009852:	f7f6 fed1 	bl	80005f8 <__aeabi_dmul>
 8009856:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800985a:	f7f6 fd15 	bl	8000288 <__aeabi_dsub>
 800985e:	a30c      	add	r3, pc, #48	@ (adr r3, 8009890 <__kernel_sin+0x140>)
 8009860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009864:	4606      	mov	r6, r0
 8009866:	460f      	mov	r7, r1
 8009868:	e9dd 0100 	ldrd	r0, r1, [sp]
 800986c:	f7f6 fec4 	bl	80005f8 <__aeabi_dmul>
 8009870:	4602      	mov	r2, r0
 8009872:	460b      	mov	r3, r1
 8009874:	4630      	mov	r0, r6
 8009876:	4639      	mov	r1, r7
 8009878:	f7f6 fd08 	bl	800028c <__adddf3>
 800987c:	4602      	mov	r2, r0
 800987e:	460b      	mov	r3, r1
 8009880:	4620      	mov	r0, r4
 8009882:	4629      	mov	r1, r5
 8009884:	f7f6 fd00 	bl	8000288 <__aeabi_dsub>
 8009888:	e7c6      	b.n	8009818 <__kernel_sin+0xc8>
 800988a:	bf00      	nop
 800988c:	f3af 8000 	nop.w
 8009890:	55555549 	.word	0x55555549
 8009894:	3fc55555 	.word	0x3fc55555
 8009898:	3fe00000 	.word	0x3fe00000
 800989c:	5acfd57c 	.word	0x5acfd57c
 80098a0:	3de5d93a 	.word	0x3de5d93a
 80098a4:	8a2b9ceb 	.word	0x8a2b9ceb
 80098a8:	3e5ae5e6 	.word	0x3e5ae5e6
 80098ac:	57b1fe7d 	.word	0x57b1fe7d
 80098b0:	3ec71de3 	.word	0x3ec71de3
 80098b4:	19c161d5 	.word	0x19c161d5
 80098b8:	3f2a01a0 	.word	0x3f2a01a0
 80098bc:	1110f8a6 	.word	0x1110f8a6
 80098c0:	3f811111 	.word	0x3f811111
 80098c4:	00000000 	.word	0x00000000

080098c8 <__ieee754_rem_pio2>:
 80098c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098cc:	ec57 6b10 	vmov	r6, r7, d0
 80098d0:	4bc5      	ldr	r3, [pc, #788]	@ (8009be8 <__ieee754_rem_pio2+0x320>)
 80098d2:	b08d      	sub	sp, #52	@ 0x34
 80098d4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80098d8:	4598      	cmp	r8, r3
 80098da:	4604      	mov	r4, r0
 80098dc:	9704      	str	r7, [sp, #16]
 80098de:	d807      	bhi.n	80098f0 <__ieee754_rem_pio2+0x28>
 80098e0:	2200      	movs	r2, #0
 80098e2:	2300      	movs	r3, #0
 80098e4:	ed80 0b00 	vstr	d0, [r0]
 80098e8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80098ec:	2500      	movs	r5, #0
 80098ee:	e028      	b.n	8009942 <__ieee754_rem_pio2+0x7a>
 80098f0:	4bbe      	ldr	r3, [pc, #760]	@ (8009bec <__ieee754_rem_pio2+0x324>)
 80098f2:	4598      	cmp	r8, r3
 80098f4:	d878      	bhi.n	80099e8 <__ieee754_rem_pio2+0x120>
 80098f6:	9b04      	ldr	r3, [sp, #16]
 80098f8:	4dbd      	ldr	r5, [pc, #756]	@ (8009bf0 <__ieee754_rem_pio2+0x328>)
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	4630      	mov	r0, r6
 80098fe:	a3ac      	add	r3, pc, #688	@ (adr r3, 8009bb0 <__ieee754_rem_pio2+0x2e8>)
 8009900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009904:	4639      	mov	r1, r7
 8009906:	dd38      	ble.n	800997a <__ieee754_rem_pio2+0xb2>
 8009908:	f7f6 fcbe 	bl	8000288 <__aeabi_dsub>
 800990c:	45a8      	cmp	r8, r5
 800990e:	4606      	mov	r6, r0
 8009910:	460f      	mov	r7, r1
 8009912:	d01a      	beq.n	800994a <__ieee754_rem_pio2+0x82>
 8009914:	a3a8      	add	r3, pc, #672	@ (adr r3, 8009bb8 <__ieee754_rem_pio2+0x2f0>)
 8009916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800991a:	f7f6 fcb5 	bl	8000288 <__aeabi_dsub>
 800991e:	4602      	mov	r2, r0
 8009920:	460b      	mov	r3, r1
 8009922:	4680      	mov	r8, r0
 8009924:	4689      	mov	r9, r1
 8009926:	4630      	mov	r0, r6
 8009928:	4639      	mov	r1, r7
 800992a:	f7f6 fcad 	bl	8000288 <__aeabi_dsub>
 800992e:	a3a2      	add	r3, pc, #648	@ (adr r3, 8009bb8 <__ieee754_rem_pio2+0x2f0>)
 8009930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009934:	f7f6 fca8 	bl	8000288 <__aeabi_dsub>
 8009938:	e9c4 8900 	strd	r8, r9, [r4]
 800993c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009940:	2501      	movs	r5, #1
 8009942:	4628      	mov	r0, r5
 8009944:	b00d      	add	sp, #52	@ 0x34
 8009946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800994a:	a39d      	add	r3, pc, #628	@ (adr r3, 8009bc0 <__ieee754_rem_pio2+0x2f8>)
 800994c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009950:	f7f6 fc9a 	bl	8000288 <__aeabi_dsub>
 8009954:	a39c      	add	r3, pc, #624	@ (adr r3, 8009bc8 <__ieee754_rem_pio2+0x300>)
 8009956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800995a:	4606      	mov	r6, r0
 800995c:	460f      	mov	r7, r1
 800995e:	f7f6 fc93 	bl	8000288 <__aeabi_dsub>
 8009962:	4602      	mov	r2, r0
 8009964:	460b      	mov	r3, r1
 8009966:	4680      	mov	r8, r0
 8009968:	4689      	mov	r9, r1
 800996a:	4630      	mov	r0, r6
 800996c:	4639      	mov	r1, r7
 800996e:	f7f6 fc8b 	bl	8000288 <__aeabi_dsub>
 8009972:	a395      	add	r3, pc, #596	@ (adr r3, 8009bc8 <__ieee754_rem_pio2+0x300>)
 8009974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009978:	e7dc      	b.n	8009934 <__ieee754_rem_pio2+0x6c>
 800997a:	f7f6 fc87 	bl	800028c <__adddf3>
 800997e:	45a8      	cmp	r8, r5
 8009980:	4606      	mov	r6, r0
 8009982:	460f      	mov	r7, r1
 8009984:	d018      	beq.n	80099b8 <__ieee754_rem_pio2+0xf0>
 8009986:	a38c      	add	r3, pc, #560	@ (adr r3, 8009bb8 <__ieee754_rem_pio2+0x2f0>)
 8009988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800998c:	f7f6 fc7e 	bl	800028c <__adddf3>
 8009990:	4602      	mov	r2, r0
 8009992:	460b      	mov	r3, r1
 8009994:	4680      	mov	r8, r0
 8009996:	4689      	mov	r9, r1
 8009998:	4630      	mov	r0, r6
 800999a:	4639      	mov	r1, r7
 800999c:	f7f6 fc74 	bl	8000288 <__aeabi_dsub>
 80099a0:	a385      	add	r3, pc, #532	@ (adr r3, 8009bb8 <__ieee754_rem_pio2+0x2f0>)
 80099a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a6:	f7f6 fc71 	bl	800028c <__adddf3>
 80099aa:	f04f 35ff 	mov.w	r5, #4294967295
 80099ae:	e9c4 8900 	strd	r8, r9, [r4]
 80099b2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80099b6:	e7c4      	b.n	8009942 <__ieee754_rem_pio2+0x7a>
 80099b8:	a381      	add	r3, pc, #516	@ (adr r3, 8009bc0 <__ieee754_rem_pio2+0x2f8>)
 80099ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099be:	f7f6 fc65 	bl	800028c <__adddf3>
 80099c2:	a381      	add	r3, pc, #516	@ (adr r3, 8009bc8 <__ieee754_rem_pio2+0x300>)
 80099c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c8:	4606      	mov	r6, r0
 80099ca:	460f      	mov	r7, r1
 80099cc:	f7f6 fc5e 	bl	800028c <__adddf3>
 80099d0:	4602      	mov	r2, r0
 80099d2:	460b      	mov	r3, r1
 80099d4:	4680      	mov	r8, r0
 80099d6:	4689      	mov	r9, r1
 80099d8:	4630      	mov	r0, r6
 80099da:	4639      	mov	r1, r7
 80099dc:	f7f6 fc54 	bl	8000288 <__aeabi_dsub>
 80099e0:	a379      	add	r3, pc, #484	@ (adr r3, 8009bc8 <__ieee754_rem_pio2+0x300>)
 80099e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099e6:	e7de      	b.n	80099a6 <__ieee754_rem_pio2+0xde>
 80099e8:	4b82      	ldr	r3, [pc, #520]	@ (8009bf4 <__ieee754_rem_pio2+0x32c>)
 80099ea:	4598      	cmp	r8, r3
 80099ec:	f200 80d1 	bhi.w	8009b92 <__ieee754_rem_pio2+0x2ca>
 80099f0:	f000 f966 	bl	8009cc0 <fabs>
 80099f4:	ec57 6b10 	vmov	r6, r7, d0
 80099f8:	a375      	add	r3, pc, #468	@ (adr r3, 8009bd0 <__ieee754_rem_pio2+0x308>)
 80099fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099fe:	4630      	mov	r0, r6
 8009a00:	4639      	mov	r1, r7
 8009a02:	f7f6 fdf9 	bl	80005f8 <__aeabi_dmul>
 8009a06:	4b7c      	ldr	r3, [pc, #496]	@ (8009bf8 <__ieee754_rem_pio2+0x330>)
 8009a08:	2200      	movs	r2, #0
 8009a0a:	f7f6 fc3f 	bl	800028c <__adddf3>
 8009a0e:	f7f7 f8a3 	bl	8000b58 <__aeabi_d2iz>
 8009a12:	4605      	mov	r5, r0
 8009a14:	f7f6 fd86 	bl	8000524 <__aeabi_i2d>
 8009a18:	4602      	mov	r2, r0
 8009a1a:	460b      	mov	r3, r1
 8009a1c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009a20:	a363      	add	r3, pc, #396	@ (adr r3, 8009bb0 <__ieee754_rem_pio2+0x2e8>)
 8009a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a26:	f7f6 fde7 	bl	80005f8 <__aeabi_dmul>
 8009a2a:	4602      	mov	r2, r0
 8009a2c:	460b      	mov	r3, r1
 8009a2e:	4630      	mov	r0, r6
 8009a30:	4639      	mov	r1, r7
 8009a32:	f7f6 fc29 	bl	8000288 <__aeabi_dsub>
 8009a36:	a360      	add	r3, pc, #384	@ (adr r3, 8009bb8 <__ieee754_rem_pio2+0x2f0>)
 8009a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a3c:	4682      	mov	sl, r0
 8009a3e:	468b      	mov	fp, r1
 8009a40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a44:	f7f6 fdd8 	bl	80005f8 <__aeabi_dmul>
 8009a48:	2d1f      	cmp	r5, #31
 8009a4a:	4606      	mov	r6, r0
 8009a4c:	460f      	mov	r7, r1
 8009a4e:	dc0c      	bgt.n	8009a6a <__ieee754_rem_pio2+0x1a2>
 8009a50:	4b6a      	ldr	r3, [pc, #424]	@ (8009bfc <__ieee754_rem_pio2+0x334>)
 8009a52:	1e6a      	subs	r2, r5, #1
 8009a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a58:	4543      	cmp	r3, r8
 8009a5a:	d006      	beq.n	8009a6a <__ieee754_rem_pio2+0x1a2>
 8009a5c:	4632      	mov	r2, r6
 8009a5e:	463b      	mov	r3, r7
 8009a60:	4650      	mov	r0, sl
 8009a62:	4659      	mov	r1, fp
 8009a64:	f7f6 fc10 	bl	8000288 <__aeabi_dsub>
 8009a68:	e00e      	b.n	8009a88 <__ieee754_rem_pio2+0x1c0>
 8009a6a:	463b      	mov	r3, r7
 8009a6c:	4632      	mov	r2, r6
 8009a6e:	4650      	mov	r0, sl
 8009a70:	4659      	mov	r1, fp
 8009a72:	f7f6 fc09 	bl	8000288 <__aeabi_dsub>
 8009a76:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009a7a:	9305      	str	r3, [sp, #20]
 8009a7c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009a80:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8009a84:	2b10      	cmp	r3, #16
 8009a86:	dc02      	bgt.n	8009a8e <__ieee754_rem_pio2+0x1c6>
 8009a88:	e9c4 0100 	strd	r0, r1, [r4]
 8009a8c:	e039      	b.n	8009b02 <__ieee754_rem_pio2+0x23a>
 8009a8e:	a34c      	add	r3, pc, #304	@ (adr r3, 8009bc0 <__ieee754_rem_pio2+0x2f8>)
 8009a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a98:	f7f6 fdae 	bl	80005f8 <__aeabi_dmul>
 8009a9c:	4606      	mov	r6, r0
 8009a9e:	460f      	mov	r7, r1
 8009aa0:	4602      	mov	r2, r0
 8009aa2:	460b      	mov	r3, r1
 8009aa4:	4650      	mov	r0, sl
 8009aa6:	4659      	mov	r1, fp
 8009aa8:	f7f6 fbee 	bl	8000288 <__aeabi_dsub>
 8009aac:	4602      	mov	r2, r0
 8009aae:	460b      	mov	r3, r1
 8009ab0:	4680      	mov	r8, r0
 8009ab2:	4689      	mov	r9, r1
 8009ab4:	4650      	mov	r0, sl
 8009ab6:	4659      	mov	r1, fp
 8009ab8:	f7f6 fbe6 	bl	8000288 <__aeabi_dsub>
 8009abc:	4632      	mov	r2, r6
 8009abe:	463b      	mov	r3, r7
 8009ac0:	f7f6 fbe2 	bl	8000288 <__aeabi_dsub>
 8009ac4:	a340      	add	r3, pc, #256	@ (adr r3, 8009bc8 <__ieee754_rem_pio2+0x300>)
 8009ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aca:	4606      	mov	r6, r0
 8009acc:	460f      	mov	r7, r1
 8009ace:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ad2:	f7f6 fd91 	bl	80005f8 <__aeabi_dmul>
 8009ad6:	4632      	mov	r2, r6
 8009ad8:	463b      	mov	r3, r7
 8009ada:	f7f6 fbd5 	bl	8000288 <__aeabi_dsub>
 8009ade:	4602      	mov	r2, r0
 8009ae0:	460b      	mov	r3, r1
 8009ae2:	4606      	mov	r6, r0
 8009ae4:	460f      	mov	r7, r1
 8009ae6:	4640      	mov	r0, r8
 8009ae8:	4649      	mov	r1, r9
 8009aea:	f7f6 fbcd 	bl	8000288 <__aeabi_dsub>
 8009aee:	9a05      	ldr	r2, [sp, #20]
 8009af0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009af4:	1ad3      	subs	r3, r2, r3
 8009af6:	2b31      	cmp	r3, #49	@ 0x31
 8009af8:	dc20      	bgt.n	8009b3c <__ieee754_rem_pio2+0x274>
 8009afa:	e9c4 0100 	strd	r0, r1, [r4]
 8009afe:	46c2      	mov	sl, r8
 8009b00:	46cb      	mov	fp, r9
 8009b02:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009b06:	4650      	mov	r0, sl
 8009b08:	4642      	mov	r2, r8
 8009b0a:	464b      	mov	r3, r9
 8009b0c:	4659      	mov	r1, fp
 8009b0e:	f7f6 fbbb 	bl	8000288 <__aeabi_dsub>
 8009b12:	463b      	mov	r3, r7
 8009b14:	4632      	mov	r2, r6
 8009b16:	f7f6 fbb7 	bl	8000288 <__aeabi_dsub>
 8009b1a:	9b04      	ldr	r3, [sp, #16]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009b22:	f6bf af0e 	bge.w	8009942 <__ieee754_rem_pio2+0x7a>
 8009b26:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8009b2a:	6063      	str	r3, [r4, #4]
 8009b2c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009b30:	f8c4 8000 	str.w	r8, [r4]
 8009b34:	60a0      	str	r0, [r4, #8]
 8009b36:	60e3      	str	r3, [r4, #12]
 8009b38:	426d      	negs	r5, r5
 8009b3a:	e702      	b.n	8009942 <__ieee754_rem_pio2+0x7a>
 8009b3c:	a326      	add	r3, pc, #152	@ (adr r3, 8009bd8 <__ieee754_rem_pio2+0x310>)
 8009b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b46:	f7f6 fd57 	bl	80005f8 <__aeabi_dmul>
 8009b4a:	4606      	mov	r6, r0
 8009b4c:	460f      	mov	r7, r1
 8009b4e:	4602      	mov	r2, r0
 8009b50:	460b      	mov	r3, r1
 8009b52:	4640      	mov	r0, r8
 8009b54:	4649      	mov	r1, r9
 8009b56:	f7f6 fb97 	bl	8000288 <__aeabi_dsub>
 8009b5a:	4602      	mov	r2, r0
 8009b5c:	460b      	mov	r3, r1
 8009b5e:	4682      	mov	sl, r0
 8009b60:	468b      	mov	fp, r1
 8009b62:	4640      	mov	r0, r8
 8009b64:	4649      	mov	r1, r9
 8009b66:	f7f6 fb8f 	bl	8000288 <__aeabi_dsub>
 8009b6a:	4632      	mov	r2, r6
 8009b6c:	463b      	mov	r3, r7
 8009b6e:	f7f6 fb8b 	bl	8000288 <__aeabi_dsub>
 8009b72:	a31b      	add	r3, pc, #108	@ (adr r3, 8009be0 <__ieee754_rem_pio2+0x318>)
 8009b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b78:	4606      	mov	r6, r0
 8009b7a:	460f      	mov	r7, r1
 8009b7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b80:	f7f6 fd3a 	bl	80005f8 <__aeabi_dmul>
 8009b84:	4632      	mov	r2, r6
 8009b86:	463b      	mov	r3, r7
 8009b88:	f7f6 fb7e 	bl	8000288 <__aeabi_dsub>
 8009b8c:	4606      	mov	r6, r0
 8009b8e:	460f      	mov	r7, r1
 8009b90:	e764      	b.n	8009a5c <__ieee754_rem_pio2+0x194>
 8009b92:	4b1b      	ldr	r3, [pc, #108]	@ (8009c00 <__ieee754_rem_pio2+0x338>)
 8009b94:	4598      	cmp	r8, r3
 8009b96:	d935      	bls.n	8009c04 <__ieee754_rem_pio2+0x33c>
 8009b98:	4632      	mov	r2, r6
 8009b9a:	463b      	mov	r3, r7
 8009b9c:	4630      	mov	r0, r6
 8009b9e:	4639      	mov	r1, r7
 8009ba0:	f7f6 fb72 	bl	8000288 <__aeabi_dsub>
 8009ba4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009ba8:	e9c4 0100 	strd	r0, r1, [r4]
 8009bac:	e69e      	b.n	80098ec <__ieee754_rem_pio2+0x24>
 8009bae:	bf00      	nop
 8009bb0:	54400000 	.word	0x54400000
 8009bb4:	3ff921fb 	.word	0x3ff921fb
 8009bb8:	1a626331 	.word	0x1a626331
 8009bbc:	3dd0b461 	.word	0x3dd0b461
 8009bc0:	1a600000 	.word	0x1a600000
 8009bc4:	3dd0b461 	.word	0x3dd0b461
 8009bc8:	2e037073 	.word	0x2e037073
 8009bcc:	3ba3198a 	.word	0x3ba3198a
 8009bd0:	6dc9c883 	.word	0x6dc9c883
 8009bd4:	3fe45f30 	.word	0x3fe45f30
 8009bd8:	2e000000 	.word	0x2e000000
 8009bdc:	3ba3198a 	.word	0x3ba3198a
 8009be0:	252049c1 	.word	0x252049c1
 8009be4:	397b839a 	.word	0x397b839a
 8009be8:	3fe921fb 	.word	0x3fe921fb
 8009bec:	4002d97b 	.word	0x4002d97b
 8009bf0:	3ff921fb 	.word	0x3ff921fb
 8009bf4:	413921fb 	.word	0x413921fb
 8009bf8:	3fe00000 	.word	0x3fe00000
 8009bfc:	0800aa8c 	.word	0x0800aa8c
 8009c00:	7fefffff 	.word	0x7fefffff
 8009c04:	ea4f 5528 	mov.w	r5, r8, asr #20
 8009c08:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8009c0c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8009c10:	4630      	mov	r0, r6
 8009c12:	460f      	mov	r7, r1
 8009c14:	f7f6 ffa0 	bl	8000b58 <__aeabi_d2iz>
 8009c18:	f7f6 fc84 	bl	8000524 <__aeabi_i2d>
 8009c1c:	4602      	mov	r2, r0
 8009c1e:	460b      	mov	r3, r1
 8009c20:	4630      	mov	r0, r6
 8009c22:	4639      	mov	r1, r7
 8009c24:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009c28:	f7f6 fb2e 	bl	8000288 <__aeabi_dsub>
 8009c2c:	4b22      	ldr	r3, [pc, #136]	@ (8009cb8 <__ieee754_rem_pio2+0x3f0>)
 8009c2e:	2200      	movs	r2, #0
 8009c30:	f7f6 fce2 	bl	80005f8 <__aeabi_dmul>
 8009c34:	460f      	mov	r7, r1
 8009c36:	4606      	mov	r6, r0
 8009c38:	f7f6 ff8e 	bl	8000b58 <__aeabi_d2iz>
 8009c3c:	f7f6 fc72 	bl	8000524 <__aeabi_i2d>
 8009c40:	4602      	mov	r2, r0
 8009c42:	460b      	mov	r3, r1
 8009c44:	4630      	mov	r0, r6
 8009c46:	4639      	mov	r1, r7
 8009c48:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009c4c:	f7f6 fb1c 	bl	8000288 <__aeabi_dsub>
 8009c50:	4b19      	ldr	r3, [pc, #100]	@ (8009cb8 <__ieee754_rem_pio2+0x3f0>)
 8009c52:	2200      	movs	r2, #0
 8009c54:	f7f6 fcd0 	bl	80005f8 <__aeabi_dmul>
 8009c58:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8009c5c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8009c60:	f04f 0803 	mov.w	r8, #3
 8009c64:	2600      	movs	r6, #0
 8009c66:	2700      	movs	r7, #0
 8009c68:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8009c6c:	4632      	mov	r2, r6
 8009c6e:	463b      	mov	r3, r7
 8009c70:	46c2      	mov	sl, r8
 8009c72:	f108 38ff 	add.w	r8, r8, #4294967295
 8009c76:	f7f6 ff27 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c7a:	2800      	cmp	r0, #0
 8009c7c:	d1f4      	bne.n	8009c68 <__ieee754_rem_pio2+0x3a0>
 8009c7e:	4b0f      	ldr	r3, [pc, #60]	@ (8009cbc <__ieee754_rem_pio2+0x3f4>)
 8009c80:	9301      	str	r3, [sp, #4]
 8009c82:	2302      	movs	r3, #2
 8009c84:	9300      	str	r3, [sp, #0]
 8009c86:	462a      	mov	r2, r5
 8009c88:	4653      	mov	r3, sl
 8009c8a:	4621      	mov	r1, r4
 8009c8c:	a806      	add	r0, sp, #24
 8009c8e:	f000 f81f 	bl	8009cd0 <__kernel_rem_pio2>
 8009c92:	9b04      	ldr	r3, [sp, #16]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	4605      	mov	r5, r0
 8009c98:	f6bf ae53 	bge.w	8009942 <__ieee754_rem_pio2+0x7a>
 8009c9c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8009ca0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009ca4:	e9c4 2300 	strd	r2, r3, [r4]
 8009ca8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8009cac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009cb0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8009cb4:	e740      	b.n	8009b38 <__ieee754_rem_pio2+0x270>
 8009cb6:	bf00      	nop
 8009cb8:	41700000 	.word	0x41700000
 8009cbc:	0800ab0c 	.word	0x0800ab0c

08009cc0 <fabs>:
 8009cc0:	ec51 0b10 	vmov	r0, r1, d0
 8009cc4:	4602      	mov	r2, r0
 8009cc6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009cca:	ec43 2b10 	vmov	d0, r2, r3
 8009cce:	4770      	bx	lr

08009cd0 <__kernel_rem_pio2>:
 8009cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cd4:	ed2d 8b02 	vpush	{d8}
 8009cd8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8009cdc:	f112 0f14 	cmn.w	r2, #20
 8009ce0:	9306      	str	r3, [sp, #24]
 8009ce2:	9104      	str	r1, [sp, #16]
 8009ce4:	4bbe      	ldr	r3, [pc, #760]	@ (8009fe0 <__kernel_rem_pio2+0x310>)
 8009ce6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8009ce8:	9008      	str	r0, [sp, #32]
 8009cea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009cee:	9300      	str	r3, [sp, #0]
 8009cf0:	9b06      	ldr	r3, [sp, #24]
 8009cf2:	f103 33ff 	add.w	r3, r3, #4294967295
 8009cf6:	bfa8      	it	ge
 8009cf8:	1ed4      	subge	r4, r2, #3
 8009cfa:	9305      	str	r3, [sp, #20]
 8009cfc:	bfb2      	itee	lt
 8009cfe:	2400      	movlt	r4, #0
 8009d00:	2318      	movge	r3, #24
 8009d02:	fb94 f4f3 	sdivge	r4, r4, r3
 8009d06:	f06f 0317 	mvn.w	r3, #23
 8009d0a:	fb04 3303 	mla	r3, r4, r3, r3
 8009d0e:	eb03 0b02 	add.w	fp, r3, r2
 8009d12:	9b00      	ldr	r3, [sp, #0]
 8009d14:	9a05      	ldr	r2, [sp, #20]
 8009d16:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8009fd0 <__kernel_rem_pio2+0x300>
 8009d1a:	eb03 0802 	add.w	r8, r3, r2
 8009d1e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8009d20:	1aa7      	subs	r7, r4, r2
 8009d22:	ae20      	add	r6, sp, #128	@ 0x80
 8009d24:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009d28:	2500      	movs	r5, #0
 8009d2a:	4545      	cmp	r5, r8
 8009d2c:	dd13      	ble.n	8009d56 <__kernel_rem_pio2+0x86>
 8009d2e:	9b06      	ldr	r3, [sp, #24]
 8009d30:	aa20      	add	r2, sp, #128	@ 0x80
 8009d32:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8009d36:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8009d3a:	f04f 0800 	mov.w	r8, #0
 8009d3e:	9b00      	ldr	r3, [sp, #0]
 8009d40:	4598      	cmp	r8, r3
 8009d42:	dc31      	bgt.n	8009da8 <__kernel_rem_pio2+0xd8>
 8009d44:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8009fd0 <__kernel_rem_pio2+0x300>
 8009d48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009d4c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009d50:	462f      	mov	r7, r5
 8009d52:	2600      	movs	r6, #0
 8009d54:	e01b      	b.n	8009d8e <__kernel_rem_pio2+0xbe>
 8009d56:	42ef      	cmn	r7, r5
 8009d58:	d407      	bmi.n	8009d6a <__kernel_rem_pio2+0x9a>
 8009d5a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8009d5e:	f7f6 fbe1 	bl	8000524 <__aeabi_i2d>
 8009d62:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009d66:	3501      	adds	r5, #1
 8009d68:	e7df      	b.n	8009d2a <__kernel_rem_pio2+0x5a>
 8009d6a:	ec51 0b18 	vmov	r0, r1, d8
 8009d6e:	e7f8      	b.n	8009d62 <__kernel_rem_pio2+0x92>
 8009d70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d74:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009d78:	f7f6 fc3e 	bl	80005f8 <__aeabi_dmul>
 8009d7c:	4602      	mov	r2, r0
 8009d7e:	460b      	mov	r3, r1
 8009d80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d84:	f7f6 fa82 	bl	800028c <__adddf3>
 8009d88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d8c:	3601      	adds	r6, #1
 8009d8e:	9b05      	ldr	r3, [sp, #20]
 8009d90:	429e      	cmp	r6, r3
 8009d92:	f1a7 0708 	sub.w	r7, r7, #8
 8009d96:	ddeb      	ble.n	8009d70 <__kernel_rem_pio2+0xa0>
 8009d98:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009d9c:	f108 0801 	add.w	r8, r8, #1
 8009da0:	ecaa 7b02 	vstmia	sl!, {d7}
 8009da4:	3508      	adds	r5, #8
 8009da6:	e7ca      	b.n	8009d3e <__kernel_rem_pio2+0x6e>
 8009da8:	9b00      	ldr	r3, [sp, #0]
 8009daa:	f8dd 8000 	ldr.w	r8, [sp]
 8009dae:	aa0c      	add	r2, sp, #48	@ 0x30
 8009db0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009db4:	930a      	str	r3, [sp, #40]	@ 0x28
 8009db6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8009db8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009dbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8009dbe:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8009dc2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009dc4:	ab98      	add	r3, sp, #608	@ 0x260
 8009dc6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009dca:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8009dce:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009dd2:	ac0c      	add	r4, sp, #48	@ 0x30
 8009dd4:	ab70      	add	r3, sp, #448	@ 0x1c0
 8009dd6:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8009dda:	46a1      	mov	r9, r4
 8009ddc:	46c2      	mov	sl, r8
 8009dde:	f1ba 0f00 	cmp.w	sl, #0
 8009de2:	f1a5 0508 	sub.w	r5, r5, #8
 8009de6:	dc77      	bgt.n	8009ed8 <__kernel_rem_pio2+0x208>
 8009de8:	4658      	mov	r0, fp
 8009dea:	ed9d 0b02 	vldr	d0, [sp, #8]
 8009dee:	f000 fac7 	bl	800a380 <scalbn>
 8009df2:	ec57 6b10 	vmov	r6, r7, d0
 8009df6:	2200      	movs	r2, #0
 8009df8:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8009dfc:	4630      	mov	r0, r6
 8009dfe:	4639      	mov	r1, r7
 8009e00:	f7f6 fbfa 	bl	80005f8 <__aeabi_dmul>
 8009e04:	ec41 0b10 	vmov	d0, r0, r1
 8009e08:	f000 fb3a 	bl	800a480 <floor>
 8009e0c:	4b75      	ldr	r3, [pc, #468]	@ (8009fe4 <__kernel_rem_pio2+0x314>)
 8009e0e:	ec51 0b10 	vmov	r0, r1, d0
 8009e12:	2200      	movs	r2, #0
 8009e14:	f7f6 fbf0 	bl	80005f8 <__aeabi_dmul>
 8009e18:	4602      	mov	r2, r0
 8009e1a:	460b      	mov	r3, r1
 8009e1c:	4630      	mov	r0, r6
 8009e1e:	4639      	mov	r1, r7
 8009e20:	f7f6 fa32 	bl	8000288 <__aeabi_dsub>
 8009e24:	460f      	mov	r7, r1
 8009e26:	4606      	mov	r6, r0
 8009e28:	f7f6 fe96 	bl	8000b58 <__aeabi_d2iz>
 8009e2c:	9002      	str	r0, [sp, #8]
 8009e2e:	f7f6 fb79 	bl	8000524 <__aeabi_i2d>
 8009e32:	4602      	mov	r2, r0
 8009e34:	460b      	mov	r3, r1
 8009e36:	4630      	mov	r0, r6
 8009e38:	4639      	mov	r1, r7
 8009e3a:	f7f6 fa25 	bl	8000288 <__aeabi_dsub>
 8009e3e:	f1bb 0f00 	cmp.w	fp, #0
 8009e42:	4606      	mov	r6, r0
 8009e44:	460f      	mov	r7, r1
 8009e46:	dd6c      	ble.n	8009f22 <__kernel_rem_pio2+0x252>
 8009e48:	f108 31ff 	add.w	r1, r8, #4294967295
 8009e4c:	ab0c      	add	r3, sp, #48	@ 0x30
 8009e4e:	9d02      	ldr	r5, [sp, #8]
 8009e50:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009e54:	f1cb 0018 	rsb	r0, fp, #24
 8009e58:	fa43 f200 	asr.w	r2, r3, r0
 8009e5c:	4415      	add	r5, r2
 8009e5e:	4082      	lsls	r2, r0
 8009e60:	1a9b      	subs	r3, r3, r2
 8009e62:	aa0c      	add	r2, sp, #48	@ 0x30
 8009e64:	9502      	str	r5, [sp, #8]
 8009e66:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8009e6a:	f1cb 0217 	rsb	r2, fp, #23
 8009e6e:	fa43 f902 	asr.w	r9, r3, r2
 8009e72:	f1b9 0f00 	cmp.w	r9, #0
 8009e76:	dd64      	ble.n	8009f42 <__kernel_rem_pio2+0x272>
 8009e78:	9b02      	ldr	r3, [sp, #8]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	3301      	adds	r3, #1
 8009e7e:	9302      	str	r3, [sp, #8]
 8009e80:	4615      	mov	r5, r2
 8009e82:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8009e86:	4590      	cmp	r8, r2
 8009e88:	f300 80b8 	bgt.w	8009ffc <__kernel_rem_pio2+0x32c>
 8009e8c:	f1bb 0f00 	cmp.w	fp, #0
 8009e90:	dd07      	ble.n	8009ea2 <__kernel_rem_pio2+0x1d2>
 8009e92:	f1bb 0f01 	cmp.w	fp, #1
 8009e96:	f000 80bf 	beq.w	800a018 <__kernel_rem_pio2+0x348>
 8009e9a:	f1bb 0f02 	cmp.w	fp, #2
 8009e9e:	f000 80c6 	beq.w	800a02e <__kernel_rem_pio2+0x35e>
 8009ea2:	f1b9 0f02 	cmp.w	r9, #2
 8009ea6:	d14c      	bne.n	8009f42 <__kernel_rem_pio2+0x272>
 8009ea8:	4632      	mov	r2, r6
 8009eaa:	463b      	mov	r3, r7
 8009eac:	494e      	ldr	r1, [pc, #312]	@ (8009fe8 <__kernel_rem_pio2+0x318>)
 8009eae:	2000      	movs	r0, #0
 8009eb0:	f7f6 f9ea 	bl	8000288 <__aeabi_dsub>
 8009eb4:	4606      	mov	r6, r0
 8009eb6:	460f      	mov	r7, r1
 8009eb8:	2d00      	cmp	r5, #0
 8009eba:	d042      	beq.n	8009f42 <__kernel_rem_pio2+0x272>
 8009ebc:	4658      	mov	r0, fp
 8009ebe:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8009fd8 <__kernel_rem_pio2+0x308>
 8009ec2:	f000 fa5d 	bl	800a380 <scalbn>
 8009ec6:	4630      	mov	r0, r6
 8009ec8:	4639      	mov	r1, r7
 8009eca:	ec53 2b10 	vmov	r2, r3, d0
 8009ece:	f7f6 f9db 	bl	8000288 <__aeabi_dsub>
 8009ed2:	4606      	mov	r6, r0
 8009ed4:	460f      	mov	r7, r1
 8009ed6:	e034      	b.n	8009f42 <__kernel_rem_pio2+0x272>
 8009ed8:	4b44      	ldr	r3, [pc, #272]	@ (8009fec <__kernel_rem_pio2+0x31c>)
 8009eda:	2200      	movs	r2, #0
 8009edc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ee0:	f7f6 fb8a 	bl	80005f8 <__aeabi_dmul>
 8009ee4:	f7f6 fe38 	bl	8000b58 <__aeabi_d2iz>
 8009ee8:	f7f6 fb1c 	bl	8000524 <__aeabi_i2d>
 8009eec:	4b40      	ldr	r3, [pc, #256]	@ (8009ff0 <__kernel_rem_pio2+0x320>)
 8009eee:	2200      	movs	r2, #0
 8009ef0:	4606      	mov	r6, r0
 8009ef2:	460f      	mov	r7, r1
 8009ef4:	f7f6 fb80 	bl	80005f8 <__aeabi_dmul>
 8009ef8:	4602      	mov	r2, r0
 8009efa:	460b      	mov	r3, r1
 8009efc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f00:	f7f6 f9c2 	bl	8000288 <__aeabi_dsub>
 8009f04:	f7f6 fe28 	bl	8000b58 <__aeabi_d2iz>
 8009f08:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009f0c:	f849 0b04 	str.w	r0, [r9], #4
 8009f10:	4639      	mov	r1, r7
 8009f12:	4630      	mov	r0, r6
 8009f14:	f7f6 f9ba 	bl	800028c <__adddf3>
 8009f18:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009f1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f20:	e75d      	b.n	8009dde <__kernel_rem_pio2+0x10e>
 8009f22:	d107      	bne.n	8009f34 <__kernel_rem_pio2+0x264>
 8009f24:	f108 33ff 	add.w	r3, r8, #4294967295
 8009f28:	aa0c      	add	r2, sp, #48	@ 0x30
 8009f2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f2e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8009f32:	e79e      	b.n	8009e72 <__kernel_rem_pio2+0x1a2>
 8009f34:	4b2f      	ldr	r3, [pc, #188]	@ (8009ff4 <__kernel_rem_pio2+0x324>)
 8009f36:	2200      	movs	r2, #0
 8009f38:	f7f6 fde4 	bl	8000b04 <__aeabi_dcmpge>
 8009f3c:	2800      	cmp	r0, #0
 8009f3e:	d143      	bne.n	8009fc8 <__kernel_rem_pio2+0x2f8>
 8009f40:	4681      	mov	r9, r0
 8009f42:	2200      	movs	r2, #0
 8009f44:	2300      	movs	r3, #0
 8009f46:	4630      	mov	r0, r6
 8009f48:	4639      	mov	r1, r7
 8009f4a:	f7f6 fdbd 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f4e:	2800      	cmp	r0, #0
 8009f50:	f000 80bf 	beq.w	800a0d2 <__kernel_rem_pio2+0x402>
 8009f54:	f108 33ff 	add.w	r3, r8, #4294967295
 8009f58:	2200      	movs	r2, #0
 8009f5a:	9900      	ldr	r1, [sp, #0]
 8009f5c:	428b      	cmp	r3, r1
 8009f5e:	da6e      	bge.n	800a03e <__kernel_rem_pio2+0x36e>
 8009f60:	2a00      	cmp	r2, #0
 8009f62:	f000 8089 	beq.w	800a078 <__kernel_rem_pio2+0x3a8>
 8009f66:	f108 38ff 	add.w	r8, r8, #4294967295
 8009f6a:	ab0c      	add	r3, sp, #48	@ 0x30
 8009f6c:	f1ab 0b18 	sub.w	fp, fp, #24
 8009f70:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d0f6      	beq.n	8009f66 <__kernel_rem_pio2+0x296>
 8009f78:	4658      	mov	r0, fp
 8009f7a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8009fd8 <__kernel_rem_pio2+0x308>
 8009f7e:	f000 f9ff 	bl	800a380 <scalbn>
 8009f82:	f108 0301 	add.w	r3, r8, #1
 8009f86:	00da      	lsls	r2, r3, #3
 8009f88:	9205      	str	r2, [sp, #20]
 8009f8a:	ec55 4b10 	vmov	r4, r5, d0
 8009f8e:	aa70      	add	r2, sp, #448	@ 0x1c0
 8009f90:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8009fec <__kernel_rem_pio2+0x31c>
 8009f94:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8009f98:	4646      	mov	r6, r8
 8009f9a:	f04f 0a00 	mov.w	sl, #0
 8009f9e:	2e00      	cmp	r6, #0
 8009fa0:	f280 80cf 	bge.w	800a142 <__kernel_rem_pio2+0x472>
 8009fa4:	4644      	mov	r4, r8
 8009fa6:	2c00      	cmp	r4, #0
 8009fa8:	f2c0 80fd 	blt.w	800a1a6 <__kernel_rem_pio2+0x4d6>
 8009fac:	4b12      	ldr	r3, [pc, #72]	@ (8009ff8 <__kernel_rem_pio2+0x328>)
 8009fae:	461f      	mov	r7, r3
 8009fb0:	ab70      	add	r3, sp, #448	@ 0x1c0
 8009fb2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009fb6:	9306      	str	r3, [sp, #24]
 8009fb8:	f04f 0a00 	mov.w	sl, #0
 8009fbc:	f04f 0b00 	mov.w	fp, #0
 8009fc0:	2600      	movs	r6, #0
 8009fc2:	eba8 0504 	sub.w	r5, r8, r4
 8009fc6:	e0e2      	b.n	800a18e <__kernel_rem_pio2+0x4be>
 8009fc8:	f04f 0902 	mov.w	r9, #2
 8009fcc:	e754      	b.n	8009e78 <__kernel_rem_pio2+0x1a8>
 8009fce:	bf00      	nop
	...
 8009fdc:	3ff00000 	.word	0x3ff00000
 8009fe0:	0800ac58 	.word	0x0800ac58
 8009fe4:	40200000 	.word	0x40200000
 8009fe8:	3ff00000 	.word	0x3ff00000
 8009fec:	3e700000 	.word	0x3e700000
 8009ff0:	41700000 	.word	0x41700000
 8009ff4:	3fe00000 	.word	0x3fe00000
 8009ff8:	0800ac18 	.word	0x0800ac18
 8009ffc:	f854 3b04 	ldr.w	r3, [r4], #4
 800a000:	b945      	cbnz	r5, 800a014 <__kernel_rem_pio2+0x344>
 800a002:	b123      	cbz	r3, 800a00e <__kernel_rem_pio2+0x33e>
 800a004:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800a008:	f844 3c04 	str.w	r3, [r4, #-4]
 800a00c:	2301      	movs	r3, #1
 800a00e:	3201      	adds	r2, #1
 800a010:	461d      	mov	r5, r3
 800a012:	e738      	b.n	8009e86 <__kernel_rem_pio2+0x1b6>
 800a014:	1acb      	subs	r3, r1, r3
 800a016:	e7f7      	b.n	800a008 <__kernel_rem_pio2+0x338>
 800a018:	f108 32ff 	add.w	r2, r8, #4294967295
 800a01c:	ab0c      	add	r3, sp, #48	@ 0x30
 800a01e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a022:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a026:	a90c      	add	r1, sp, #48	@ 0x30
 800a028:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a02c:	e739      	b.n	8009ea2 <__kernel_rem_pio2+0x1d2>
 800a02e:	f108 32ff 	add.w	r2, r8, #4294967295
 800a032:	ab0c      	add	r3, sp, #48	@ 0x30
 800a034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a038:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a03c:	e7f3      	b.n	800a026 <__kernel_rem_pio2+0x356>
 800a03e:	a90c      	add	r1, sp, #48	@ 0x30
 800a040:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a044:	3b01      	subs	r3, #1
 800a046:	430a      	orrs	r2, r1
 800a048:	e787      	b.n	8009f5a <__kernel_rem_pio2+0x28a>
 800a04a:	3401      	adds	r4, #1
 800a04c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a050:	2a00      	cmp	r2, #0
 800a052:	d0fa      	beq.n	800a04a <__kernel_rem_pio2+0x37a>
 800a054:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a056:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a05a:	eb0d 0503 	add.w	r5, sp, r3
 800a05e:	9b06      	ldr	r3, [sp, #24]
 800a060:	aa20      	add	r2, sp, #128	@ 0x80
 800a062:	4443      	add	r3, r8
 800a064:	f108 0701 	add.w	r7, r8, #1
 800a068:	3d98      	subs	r5, #152	@ 0x98
 800a06a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800a06e:	4444      	add	r4, r8
 800a070:	42bc      	cmp	r4, r7
 800a072:	da04      	bge.n	800a07e <__kernel_rem_pio2+0x3ae>
 800a074:	46a0      	mov	r8, r4
 800a076:	e6a2      	b.n	8009dbe <__kernel_rem_pio2+0xee>
 800a078:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a07a:	2401      	movs	r4, #1
 800a07c:	e7e6      	b.n	800a04c <__kernel_rem_pio2+0x37c>
 800a07e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a080:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800a084:	f7f6 fa4e 	bl	8000524 <__aeabi_i2d>
 800a088:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800a350 <__kernel_rem_pio2+0x680>
 800a08c:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a090:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a094:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a098:	46b2      	mov	sl, r6
 800a09a:	f04f 0800 	mov.w	r8, #0
 800a09e:	9b05      	ldr	r3, [sp, #20]
 800a0a0:	4598      	cmp	r8, r3
 800a0a2:	dd05      	ble.n	800a0b0 <__kernel_rem_pio2+0x3e0>
 800a0a4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a0a8:	3701      	adds	r7, #1
 800a0aa:	eca5 7b02 	vstmia	r5!, {d7}
 800a0ae:	e7df      	b.n	800a070 <__kernel_rem_pio2+0x3a0>
 800a0b0:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800a0b4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a0b8:	f7f6 fa9e 	bl	80005f8 <__aeabi_dmul>
 800a0bc:	4602      	mov	r2, r0
 800a0be:	460b      	mov	r3, r1
 800a0c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0c4:	f7f6 f8e2 	bl	800028c <__adddf3>
 800a0c8:	f108 0801 	add.w	r8, r8, #1
 800a0cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a0d0:	e7e5      	b.n	800a09e <__kernel_rem_pio2+0x3ce>
 800a0d2:	f1cb 0000 	rsb	r0, fp, #0
 800a0d6:	ec47 6b10 	vmov	d0, r6, r7
 800a0da:	f000 f951 	bl	800a380 <scalbn>
 800a0de:	ec55 4b10 	vmov	r4, r5, d0
 800a0e2:	4b9d      	ldr	r3, [pc, #628]	@ (800a358 <__kernel_rem_pio2+0x688>)
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	4620      	mov	r0, r4
 800a0e8:	4629      	mov	r1, r5
 800a0ea:	f7f6 fd0b 	bl	8000b04 <__aeabi_dcmpge>
 800a0ee:	b300      	cbz	r0, 800a132 <__kernel_rem_pio2+0x462>
 800a0f0:	4b9a      	ldr	r3, [pc, #616]	@ (800a35c <__kernel_rem_pio2+0x68c>)
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	4620      	mov	r0, r4
 800a0f6:	4629      	mov	r1, r5
 800a0f8:	f7f6 fa7e 	bl	80005f8 <__aeabi_dmul>
 800a0fc:	f7f6 fd2c 	bl	8000b58 <__aeabi_d2iz>
 800a100:	4606      	mov	r6, r0
 800a102:	f7f6 fa0f 	bl	8000524 <__aeabi_i2d>
 800a106:	4b94      	ldr	r3, [pc, #592]	@ (800a358 <__kernel_rem_pio2+0x688>)
 800a108:	2200      	movs	r2, #0
 800a10a:	f7f6 fa75 	bl	80005f8 <__aeabi_dmul>
 800a10e:	460b      	mov	r3, r1
 800a110:	4602      	mov	r2, r0
 800a112:	4629      	mov	r1, r5
 800a114:	4620      	mov	r0, r4
 800a116:	f7f6 f8b7 	bl	8000288 <__aeabi_dsub>
 800a11a:	f7f6 fd1d 	bl	8000b58 <__aeabi_d2iz>
 800a11e:	ab0c      	add	r3, sp, #48	@ 0x30
 800a120:	f10b 0b18 	add.w	fp, fp, #24
 800a124:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800a128:	f108 0801 	add.w	r8, r8, #1
 800a12c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800a130:	e722      	b.n	8009f78 <__kernel_rem_pio2+0x2a8>
 800a132:	4620      	mov	r0, r4
 800a134:	4629      	mov	r1, r5
 800a136:	f7f6 fd0f 	bl	8000b58 <__aeabi_d2iz>
 800a13a:	ab0c      	add	r3, sp, #48	@ 0x30
 800a13c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800a140:	e71a      	b.n	8009f78 <__kernel_rem_pio2+0x2a8>
 800a142:	ab0c      	add	r3, sp, #48	@ 0x30
 800a144:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a148:	f7f6 f9ec 	bl	8000524 <__aeabi_i2d>
 800a14c:	4622      	mov	r2, r4
 800a14e:	462b      	mov	r3, r5
 800a150:	f7f6 fa52 	bl	80005f8 <__aeabi_dmul>
 800a154:	4652      	mov	r2, sl
 800a156:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800a15a:	465b      	mov	r3, fp
 800a15c:	4620      	mov	r0, r4
 800a15e:	4629      	mov	r1, r5
 800a160:	f7f6 fa4a 	bl	80005f8 <__aeabi_dmul>
 800a164:	3e01      	subs	r6, #1
 800a166:	4604      	mov	r4, r0
 800a168:	460d      	mov	r5, r1
 800a16a:	e718      	b.n	8009f9e <__kernel_rem_pio2+0x2ce>
 800a16c:	9906      	ldr	r1, [sp, #24]
 800a16e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800a172:	9106      	str	r1, [sp, #24]
 800a174:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800a178:	f7f6 fa3e 	bl	80005f8 <__aeabi_dmul>
 800a17c:	4602      	mov	r2, r0
 800a17e:	460b      	mov	r3, r1
 800a180:	4650      	mov	r0, sl
 800a182:	4659      	mov	r1, fp
 800a184:	f7f6 f882 	bl	800028c <__adddf3>
 800a188:	3601      	adds	r6, #1
 800a18a:	4682      	mov	sl, r0
 800a18c:	468b      	mov	fp, r1
 800a18e:	9b00      	ldr	r3, [sp, #0]
 800a190:	429e      	cmp	r6, r3
 800a192:	dc01      	bgt.n	800a198 <__kernel_rem_pio2+0x4c8>
 800a194:	42b5      	cmp	r5, r6
 800a196:	dae9      	bge.n	800a16c <__kernel_rem_pio2+0x49c>
 800a198:	ab48      	add	r3, sp, #288	@ 0x120
 800a19a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800a19e:	e9c5 ab00 	strd	sl, fp, [r5]
 800a1a2:	3c01      	subs	r4, #1
 800a1a4:	e6ff      	b.n	8009fa6 <__kernel_rem_pio2+0x2d6>
 800a1a6:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800a1a8:	2b02      	cmp	r3, #2
 800a1aa:	dc0b      	bgt.n	800a1c4 <__kernel_rem_pio2+0x4f4>
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	dc39      	bgt.n	800a224 <__kernel_rem_pio2+0x554>
 800a1b0:	d05d      	beq.n	800a26e <__kernel_rem_pio2+0x59e>
 800a1b2:	9b02      	ldr	r3, [sp, #8]
 800a1b4:	f003 0007 	and.w	r0, r3, #7
 800a1b8:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800a1bc:	ecbd 8b02 	vpop	{d8}
 800a1c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1c4:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800a1c6:	2b03      	cmp	r3, #3
 800a1c8:	d1f3      	bne.n	800a1b2 <__kernel_rem_pio2+0x4e2>
 800a1ca:	9b05      	ldr	r3, [sp, #20]
 800a1cc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a1d0:	eb0d 0403 	add.w	r4, sp, r3
 800a1d4:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800a1d8:	4625      	mov	r5, r4
 800a1da:	46c2      	mov	sl, r8
 800a1dc:	f1ba 0f00 	cmp.w	sl, #0
 800a1e0:	f1a5 0508 	sub.w	r5, r5, #8
 800a1e4:	dc6b      	bgt.n	800a2be <__kernel_rem_pio2+0x5ee>
 800a1e6:	4645      	mov	r5, r8
 800a1e8:	2d01      	cmp	r5, #1
 800a1ea:	f1a4 0408 	sub.w	r4, r4, #8
 800a1ee:	f300 8087 	bgt.w	800a300 <__kernel_rem_pio2+0x630>
 800a1f2:	9c05      	ldr	r4, [sp, #20]
 800a1f4:	ab48      	add	r3, sp, #288	@ 0x120
 800a1f6:	441c      	add	r4, r3
 800a1f8:	2000      	movs	r0, #0
 800a1fa:	2100      	movs	r1, #0
 800a1fc:	f1b8 0f01 	cmp.w	r8, #1
 800a200:	f300 809c 	bgt.w	800a33c <__kernel_rem_pio2+0x66c>
 800a204:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800a208:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800a20c:	f1b9 0f00 	cmp.w	r9, #0
 800a210:	f040 80a6 	bne.w	800a360 <__kernel_rem_pio2+0x690>
 800a214:	9b04      	ldr	r3, [sp, #16]
 800a216:	e9c3 7800 	strd	r7, r8, [r3]
 800a21a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800a21e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a222:	e7c6      	b.n	800a1b2 <__kernel_rem_pio2+0x4e2>
 800a224:	9d05      	ldr	r5, [sp, #20]
 800a226:	ab48      	add	r3, sp, #288	@ 0x120
 800a228:	441d      	add	r5, r3
 800a22a:	4644      	mov	r4, r8
 800a22c:	2000      	movs	r0, #0
 800a22e:	2100      	movs	r1, #0
 800a230:	2c00      	cmp	r4, #0
 800a232:	da35      	bge.n	800a2a0 <__kernel_rem_pio2+0x5d0>
 800a234:	f1b9 0f00 	cmp.w	r9, #0
 800a238:	d038      	beq.n	800a2ac <__kernel_rem_pio2+0x5dc>
 800a23a:	4602      	mov	r2, r0
 800a23c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a240:	9c04      	ldr	r4, [sp, #16]
 800a242:	e9c4 2300 	strd	r2, r3, [r4]
 800a246:	4602      	mov	r2, r0
 800a248:	460b      	mov	r3, r1
 800a24a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800a24e:	f7f6 f81b 	bl	8000288 <__aeabi_dsub>
 800a252:	ad4a      	add	r5, sp, #296	@ 0x128
 800a254:	2401      	movs	r4, #1
 800a256:	45a0      	cmp	r8, r4
 800a258:	da2b      	bge.n	800a2b2 <__kernel_rem_pio2+0x5e2>
 800a25a:	f1b9 0f00 	cmp.w	r9, #0
 800a25e:	d002      	beq.n	800a266 <__kernel_rem_pio2+0x596>
 800a260:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a264:	4619      	mov	r1, r3
 800a266:	9b04      	ldr	r3, [sp, #16]
 800a268:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800a26c:	e7a1      	b.n	800a1b2 <__kernel_rem_pio2+0x4e2>
 800a26e:	9c05      	ldr	r4, [sp, #20]
 800a270:	ab48      	add	r3, sp, #288	@ 0x120
 800a272:	441c      	add	r4, r3
 800a274:	2000      	movs	r0, #0
 800a276:	2100      	movs	r1, #0
 800a278:	f1b8 0f00 	cmp.w	r8, #0
 800a27c:	da09      	bge.n	800a292 <__kernel_rem_pio2+0x5c2>
 800a27e:	f1b9 0f00 	cmp.w	r9, #0
 800a282:	d002      	beq.n	800a28a <__kernel_rem_pio2+0x5ba>
 800a284:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a288:	4619      	mov	r1, r3
 800a28a:	9b04      	ldr	r3, [sp, #16]
 800a28c:	e9c3 0100 	strd	r0, r1, [r3]
 800a290:	e78f      	b.n	800a1b2 <__kernel_rem_pio2+0x4e2>
 800a292:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a296:	f7f5 fff9 	bl	800028c <__adddf3>
 800a29a:	f108 38ff 	add.w	r8, r8, #4294967295
 800a29e:	e7eb      	b.n	800a278 <__kernel_rem_pio2+0x5a8>
 800a2a0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800a2a4:	f7f5 fff2 	bl	800028c <__adddf3>
 800a2a8:	3c01      	subs	r4, #1
 800a2aa:	e7c1      	b.n	800a230 <__kernel_rem_pio2+0x560>
 800a2ac:	4602      	mov	r2, r0
 800a2ae:	460b      	mov	r3, r1
 800a2b0:	e7c6      	b.n	800a240 <__kernel_rem_pio2+0x570>
 800a2b2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800a2b6:	f7f5 ffe9 	bl	800028c <__adddf3>
 800a2ba:	3401      	adds	r4, #1
 800a2bc:	e7cb      	b.n	800a256 <__kernel_rem_pio2+0x586>
 800a2be:	ed95 7b00 	vldr	d7, [r5]
 800a2c2:	ed8d 7b00 	vstr	d7, [sp]
 800a2c6:	ed95 7b02 	vldr	d7, [r5, #8]
 800a2ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a2ce:	ec53 2b17 	vmov	r2, r3, d7
 800a2d2:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a2d6:	f7f5 ffd9 	bl	800028c <__adddf3>
 800a2da:	4602      	mov	r2, r0
 800a2dc:	460b      	mov	r3, r1
 800a2de:	4606      	mov	r6, r0
 800a2e0:	460f      	mov	r7, r1
 800a2e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a2e6:	f7f5 ffcf 	bl	8000288 <__aeabi_dsub>
 800a2ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a2ee:	f7f5 ffcd 	bl	800028c <__adddf3>
 800a2f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a2f6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800a2fa:	e9c5 6700 	strd	r6, r7, [r5]
 800a2fe:	e76d      	b.n	800a1dc <__kernel_rem_pio2+0x50c>
 800a300:	ed94 7b00 	vldr	d7, [r4]
 800a304:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800a308:	ec51 0b17 	vmov	r0, r1, d7
 800a30c:	4652      	mov	r2, sl
 800a30e:	465b      	mov	r3, fp
 800a310:	ed8d 7b00 	vstr	d7, [sp]
 800a314:	f7f5 ffba 	bl	800028c <__adddf3>
 800a318:	4602      	mov	r2, r0
 800a31a:	460b      	mov	r3, r1
 800a31c:	4606      	mov	r6, r0
 800a31e:	460f      	mov	r7, r1
 800a320:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a324:	f7f5 ffb0 	bl	8000288 <__aeabi_dsub>
 800a328:	4652      	mov	r2, sl
 800a32a:	465b      	mov	r3, fp
 800a32c:	f7f5 ffae 	bl	800028c <__adddf3>
 800a330:	3d01      	subs	r5, #1
 800a332:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a336:	e9c4 6700 	strd	r6, r7, [r4]
 800a33a:	e755      	b.n	800a1e8 <__kernel_rem_pio2+0x518>
 800a33c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a340:	f7f5 ffa4 	bl	800028c <__adddf3>
 800a344:	f108 38ff 	add.w	r8, r8, #4294967295
 800a348:	e758      	b.n	800a1fc <__kernel_rem_pio2+0x52c>
 800a34a:	bf00      	nop
 800a34c:	f3af 8000 	nop.w
	...
 800a358:	41700000 	.word	0x41700000
 800a35c:	3e700000 	.word	0x3e700000
 800a360:	9b04      	ldr	r3, [sp, #16]
 800a362:	9a04      	ldr	r2, [sp, #16]
 800a364:	601f      	str	r7, [r3, #0]
 800a366:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800a36a:	605c      	str	r4, [r3, #4]
 800a36c:	609d      	str	r5, [r3, #8]
 800a36e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a372:	60d3      	str	r3, [r2, #12]
 800a374:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a378:	6110      	str	r0, [r2, #16]
 800a37a:	6153      	str	r3, [r2, #20]
 800a37c:	e719      	b.n	800a1b2 <__kernel_rem_pio2+0x4e2>
 800a37e:	bf00      	nop

0800a380 <scalbn>:
 800a380:	b570      	push	{r4, r5, r6, lr}
 800a382:	ec55 4b10 	vmov	r4, r5, d0
 800a386:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800a38a:	4606      	mov	r6, r0
 800a38c:	462b      	mov	r3, r5
 800a38e:	b991      	cbnz	r1, 800a3b6 <scalbn+0x36>
 800a390:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800a394:	4323      	orrs	r3, r4
 800a396:	d03d      	beq.n	800a414 <scalbn+0x94>
 800a398:	4b35      	ldr	r3, [pc, #212]	@ (800a470 <scalbn+0xf0>)
 800a39a:	4620      	mov	r0, r4
 800a39c:	4629      	mov	r1, r5
 800a39e:	2200      	movs	r2, #0
 800a3a0:	f7f6 f92a 	bl	80005f8 <__aeabi_dmul>
 800a3a4:	4b33      	ldr	r3, [pc, #204]	@ (800a474 <scalbn+0xf4>)
 800a3a6:	429e      	cmp	r6, r3
 800a3a8:	4604      	mov	r4, r0
 800a3aa:	460d      	mov	r5, r1
 800a3ac:	da0f      	bge.n	800a3ce <scalbn+0x4e>
 800a3ae:	a328      	add	r3, pc, #160	@ (adr r3, 800a450 <scalbn+0xd0>)
 800a3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b4:	e01e      	b.n	800a3f4 <scalbn+0x74>
 800a3b6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800a3ba:	4291      	cmp	r1, r2
 800a3bc:	d10b      	bne.n	800a3d6 <scalbn+0x56>
 800a3be:	4622      	mov	r2, r4
 800a3c0:	4620      	mov	r0, r4
 800a3c2:	4629      	mov	r1, r5
 800a3c4:	f7f5 ff62 	bl	800028c <__adddf3>
 800a3c8:	4604      	mov	r4, r0
 800a3ca:	460d      	mov	r5, r1
 800a3cc:	e022      	b.n	800a414 <scalbn+0x94>
 800a3ce:	460b      	mov	r3, r1
 800a3d0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800a3d4:	3936      	subs	r1, #54	@ 0x36
 800a3d6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800a3da:	4296      	cmp	r6, r2
 800a3dc:	dd0d      	ble.n	800a3fa <scalbn+0x7a>
 800a3de:	2d00      	cmp	r5, #0
 800a3e0:	a11d      	add	r1, pc, #116	@ (adr r1, 800a458 <scalbn+0xd8>)
 800a3e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3e6:	da02      	bge.n	800a3ee <scalbn+0x6e>
 800a3e8:	a11d      	add	r1, pc, #116	@ (adr r1, 800a460 <scalbn+0xe0>)
 800a3ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3ee:	a31a      	add	r3, pc, #104	@ (adr r3, 800a458 <scalbn+0xd8>)
 800a3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f4:	f7f6 f900 	bl	80005f8 <__aeabi_dmul>
 800a3f8:	e7e6      	b.n	800a3c8 <scalbn+0x48>
 800a3fa:	1872      	adds	r2, r6, r1
 800a3fc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800a400:	428a      	cmp	r2, r1
 800a402:	dcec      	bgt.n	800a3de <scalbn+0x5e>
 800a404:	2a00      	cmp	r2, #0
 800a406:	dd08      	ble.n	800a41a <scalbn+0x9a>
 800a408:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a40c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a410:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a414:	ec45 4b10 	vmov	d0, r4, r5
 800a418:	bd70      	pop	{r4, r5, r6, pc}
 800a41a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800a41e:	da08      	bge.n	800a432 <scalbn+0xb2>
 800a420:	2d00      	cmp	r5, #0
 800a422:	a10b      	add	r1, pc, #44	@ (adr r1, 800a450 <scalbn+0xd0>)
 800a424:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a428:	dac1      	bge.n	800a3ae <scalbn+0x2e>
 800a42a:	a10f      	add	r1, pc, #60	@ (adr r1, 800a468 <scalbn+0xe8>)
 800a42c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a430:	e7bd      	b.n	800a3ae <scalbn+0x2e>
 800a432:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a436:	3236      	adds	r2, #54	@ 0x36
 800a438:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a43c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a440:	4620      	mov	r0, r4
 800a442:	4b0d      	ldr	r3, [pc, #52]	@ (800a478 <scalbn+0xf8>)
 800a444:	4629      	mov	r1, r5
 800a446:	2200      	movs	r2, #0
 800a448:	e7d4      	b.n	800a3f4 <scalbn+0x74>
 800a44a:	bf00      	nop
 800a44c:	f3af 8000 	nop.w
 800a450:	c2f8f359 	.word	0xc2f8f359
 800a454:	01a56e1f 	.word	0x01a56e1f
 800a458:	8800759c 	.word	0x8800759c
 800a45c:	7e37e43c 	.word	0x7e37e43c
 800a460:	8800759c 	.word	0x8800759c
 800a464:	fe37e43c 	.word	0xfe37e43c
 800a468:	c2f8f359 	.word	0xc2f8f359
 800a46c:	81a56e1f 	.word	0x81a56e1f
 800a470:	43500000 	.word	0x43500000
 800a474:	ffff3cb0 	.word	0xffff3cb0
 800a478:	3c900000 	.word	0x3c900000
 800a47c:	00000000 	.word	0x00000000

0800a480 <floor>:
 800a480:	ec51 0b10 	vmov	r0, r1, d0
 800a484:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a48c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800a490:	2e13      	cmp	r6, #19
 800a492:	460c      	mov	r4, r1
 800a494:	4605      	mov	r5, r0
 800a496:	4680      	mov	r8, r0
 800a498:	dc34      	bgt.n	800a504 <floor+0x84>
 800a49a:	2e00      	cmp	r6, #0
 800a49c:	da17      	bge.n	800a4ce <floor+0x4e>
 800a49e:	a332      	add	r3, pc, #200	@ (adr r3, 800a568 <floor+0xe8>)
 800a4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a4:	f7f5 fef2 	bl	800028c <__adddf3>
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	f7f6 fb34 	bl	8000b18 <__aeabi_dcmpgt>
 800a4b0:	b150      	cbz	r0, 800a4c8 <floor+0x48>
 800a4b2:	2c00      	cmp	r4, #0
 800a4b4:	da55      	bge.n	800a562 <floor+0xe2>
 800a4b6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800a4ba:	432c      	orrs	r4, r5
 800a4bc:	2500      	movs	r5, #0
 800a4be:	42ac      	cmp	r4, r5
 800a4c0:	4c2b      	ldr	r4, [pc, #172]	@ (800a570 <floor+0xf0>)
 800a4c2:	bf08      	it	eq
 800a4c4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800a4c8:	4621      	mov	r1, r4
 800a4ca:	4628      	mov	r0, r5
 800a4cc:	e023      	b.n	800a516 <floor+0x96>
 800a4ce:	4f29      	ldr	r7, [pc, #164]	@ (800a574 <floor+0xf4>)
 800a4d0:	4137      	asrs	r7, r6
 800a4d2:	ea01 0307 	and.w	r3, r1, r7
 800a4d6:	4303      	orrs	r3, r0
 800a4d8:	d01d      	beq.n	800a516 <floor+0x96>
 800a4da:	a323      	add	r3, pc, #140	@ (adr r3, 800a568 <floor+0xe8>)
 800a4dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4e0:	f7f5 fed4 	bl	800028c <__adddf3>
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	f7f6 fb16 	bl	8000b18 <__aeabi_dcmpgt>
 800a4ec:	2800      	cmp	r0, #0
 800a4ee:	d0eb      	beq.n	800a4c8 <floor+0x48>
 800a4f0:	2c00      	cmp	r4, #0
 800a4f2:	bfbe      	ittt	lt
 800a4f4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800a4f8:	4133      	asrlt	r3, r6
 800a4fa:	18e4      	addlt	r4, r4, r3
 800a4fc:	ea24 0407 	bic.w	r4, r4, r7
 800a500:	2500      	movs	r5, #0
 800a502:	e7e1      	b.n	800a4c8 <floor+0x48>
 800a504:	2e33      	cmp	r6, #51	@ 0x33
 800a506:	dd0a      	ble.n	800a51e <floor+0x9e>
 800a508:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800a50c:	d103      	bne.n	800a516 <floor+0x96>
 800a50e:	4602      	mov	r2, r0
 800a510:	460b      	mov	r3, r1
 800a512:	f7f5 febb 	bl	800028c <__adddf3>
 800a516:	ec41 0b10 	vmov	d0, r0, r1
 800a51a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a51e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800a522:	f04f 37ff 	mov.w	r7, #4294967295
 800a526:	40df      	lsrs	r7, r3
 800a528:	4207      	tst	r7, r0
 800a52a:	d0f4      	beq.n	800a516 <floor+0x96>
 800a52c:	a30e      	add	r3, pc, #56	@ (adr r3, 800a568 <floor+0xe8>)
 800a52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a532:	f7f5 feab 	bl	800028c <__adddf3>
 800a536:	2200      	movs	r2, #0
 800a538:	2300      	movs	r3, #0
 800a53a:	f7f6 faed 	bl	8000b18 <__aeabi_dcmpgt>
 800a53e:	2800      	cmp	r0, #0
 800a540:	d0c2      	beq.n	800a4c8 <floor+0x48>
 800a542:	2c00      	cmp	r4, #0
 800a544:	da0a      	bge.n	800a55c <floor+0xdc>
 800a546:	2e14      	cmp	r6, #20
 800a548:	d101      	bne.n	800a54e <floor+0xce>
 800a54a:	3401      	adds	r4, #1
 800a54c:	e006      	b.n	800a55c <floor+0xdc>
 800a54e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800a552:	2301      	movs	r3, #1
 800a554:	40b3      	lsls	r3, r6
 800a556:	441d      	add	r5, r3
 800a558:	4545      	cmp	r5, r8
 800a55a:	d3f6      	bcc.n	800a54a <floor+0xca>
 800a55c:	ea25 0507 	bic.w	r5, r5, r7
 800a560:	e7b2      	b.n	800a4c8 <floor+0x48>
 800a562:	2500      	movs	r5, #0
 800a564:	462c      	mov	r4, r5
 800a566:	e7af      	b.n	800a4c8 <floor+0x48>
 800a568:	8800759c 	.word	0x8800759c
 800a56c:	7e37e43c 	.word	0x7e37e43c
 800a570:	bff00000 	.word	0xbff00000
 800a574:	000fffff 	.word	0x000fffff

0800a578 <_init>:
 800a578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a57a:	bf00      	nop
 800a57c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a57e:	bc08      	pop	{r3}
 800a580:	469e      	mov	lr, r3
 800a582:	4770      	bx	lr

0800a584 <_fini>:
 800a584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a586:	bf00      	nop
 800a588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a58a:	bc08      	pop	{r3}
 800a58c:	469e      	mov	lr, r3
 800a58e:	4770      	bx	lr
